
Lab1_Group3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006698  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08006858  08006858  00016858  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d30  08006d30  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08006d30  08006d30  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d30  08006d30  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d30  08006d30  00016d30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006d34  08006d34  00016d34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08006d38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001dc  08006f14  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08006f14  00020258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000993f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0000c6fb  00000000  00000000  00029b4b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00001a0d  00000000  00000000  00036246  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000b80  00000000  00000000  00037c58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    001064dd  00000000  00000000  000387d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000a68  00000000  00000000  0013ecb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002ac51  00000000  00000000  0013f720  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0016a371  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b58  00000000  00000000  0016a3ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08006840 	.word	0x08006840

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	08006840 	.word	0x08006840

08000200 <kalmanFilterA>:
/**
* int kalmanFilterA (float* InputArray, float* OutputArray, struct KalmanState* kstate, int length)
*/

kalmanFilterA:
			PUSH {R4-R7, LR}
 8000200:	b5f0      	push	{r4, r5, r6, r7, lr}
			VSTMDB.f32 SP!,{S4-S10}
 8000202:	ed2d 2a07 	vpush	{s4-s10}

			MOV R5, R0				// local pointer to current element in InputArray
 8000206:	4605      	mov	r5, r0
			MOV R6, R1				// local pointer to current element in OutputArray
 8000208:	460e      	mov	r6, r1
			MOV R7, R2
 800020a:	4617      	mov	r7, r2
			VLDMIA.f32 R7!, {S4-S8} // local copy of kstate
 800020c:	ecb7 2a05 	vldmia	r7!, {s4-s8}
			MOV R4, R3 				// local downcounter
 8000210:	461c      	mov	r4, r3

			VMRS R0, FPSCR
 8000212:	eef1 0a10 	vmrs	r0, fpscr
			BIC R0, R0, #15
 8000216:	f020 000f 	bic.w	r0, r0, #15
			VMSR FPSCR, R0
 800021a:	eee1 0a10 	vmsr	fpscr, r0

0800021e <loop>:


loop:		SUBS R4, R4, #1
 800021e:	3c01      	subs	r4, #1
			BLT return
 8000220:	db19      	blt.n	8000256 <return>

			VLDR.f32 S10, [R5]			   // S10 = current InputArray element
 8000222:	ed95 5a00 	vldr	s10, [r5]

			VADD.f32 S7, S7, S4 // p = p + q
 8000226:	ee73 3a82 	vadd.f32	s7, s7, s4
			VADD.f32 S9, S7, S5 // p + r
 800022a:	ee73 4aa2 	vadd.f32	s9, s7, s5
			VDIV.f32 S8, S7, S9 // k = p / (p + r)
 800022e:	ee83 4aa4 	vdiv.f32	s8, s7, s9
			VSUB.f32 S9, S10, S6 // measurement - x
 8000232:	ee75 4a43 	vsub.f32	s9, s10, s6
			VMLA.f32 S6, S8, S9 // x = x + k*(measurement - x)
 8000236:	ee04 3a24 	vmla.f32	s6, s8, s9
			VMLS.f32 S7, S8, S7 // p = p - k*p
 800023a:	ee44 3a63 	vmls.f32	s7, s8, s7

			VMRS R0, FPSCR
 800023e:	eef1 0a10 	vmrs	r0, fpscr
			ANDS R0, R0, #15					// check for exceptions LSL R0, R0, #28
 8000242:	f010 000f 	ands.w	r0, r0, #15
			BNE exception
 8000246:	d10b      	bne.n	8000260 <exception>

			VSTR.f32 S6, [R6]			    // current OutputArray element = x
 8000248:	ed86 3a00 	vstr	s6, [r6]

			ADD R5, R5, #4
 800024c:	f105 0504 	add.w	r5, r5, #4
			ADD R6, R6, #4
 8000250:	f106 0604 	add.w	r6, r6, #4
			B loop
 8000254:	e7e3      	b.n	800021e <loop>

08000256 <return>:

return:
			VSTMDB.f32 R7!, {S4-S8} 		// update kstate only if everything went well...
 8000256:	ed27 2a05 	vstmdb	r7!, {s4-s8}
			VLDMIA.f32 SP!,{S4-S10}
 800025a:	ecbd 2a07 	vpop	{s4-s10}
			POP {R4-R7, PC}
 800025e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000260 <exception>:

exception:
			VLDMIA.f32 SP!,{S4-S10}
 8000260:	ecbd 2a07 	vpop	{s4-s10}
			POP {R4-R7, PC}
 8000264:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000266 <kalmanUpdateA>:
* R0 = pointer to struct kalmanState
* S0 = measurement, then the return value x
*/

kalmanUpdateA:
			PUSH {R4, LR}
 8000266:	b510      	push	{r4, lr}
			VSTMDB.f32 SP!,{S4-S9}
 8000268:	ed2d 2a06 	vpush	{s4-s9}

			VMRS R4, FPSCR
 800026c:	eef1 4a10 	vmrs	r4, fpscr
			BIC R4, R4, #15
 8000270:	f024 040f 	bic.w	r4, r4, #15
			VMSR FPSCR, R4
 8000274:	eee1 4a10 	vmsr	fpscr, r4

			VLDMIA.f32 R0!, {S4-S8} // q, r, x, p, k in S4, 5, 6, 7, 8
 8000278:	ecb0 2a05 	vldmia	r0!, {s4-s8}

			VADD.f32 S7, S7, S4 // p = p + q
 800027c:	ee73 3a82 	vadd.f32	s7, s7, s4
			VADD.f32 S9, S7, S5 // p + r
 8000280:	ee73 4aa2 	vadd.f32	s9, s7, s5
			VDIV.f32 S8, S7, S9 // k = p / (p + r)
 8000284:	ee83 4aa4 	vdiv.f32	s8, s7, s9
			VSUB.f32 S9, S0, S6 // measurement - x
 8000288:	ee70 4a43 	vsub.f32	s9, s0, s6
			VMLA.f32 S6, S8, S9 // x = x + k*(measurement - x)
 800028c:	ee04 3a24 	vmla.f32	s6, s8, s9
			VMLS.f32 S7, S8, S7 // p = p - k*p
 8000290:	ee44 3a63 	vmls.f32	s7, s8, s7

			VMRS R4, FPSCR
 8000294:	eef1 4a10 	vmrs	r4, fpscr
			ANDS R4, R4, #15				// check for exceptions R4, R4, #28
 8000298:	f014 040f 	ands.w	r4, r4, #15
			BNE exception
 800029c:	d106      	bne.n	80002ac <exception>

			VMOV.f32 S0, S6					// return self.x
 800029e:	eeb0 0a43 	vmov.f32	s0, s6
			VSTMDB.f32 R0!, {S4-S8} 		// !!We still need this right???
 80002a2:	ed20 2a05 	vstmdb	r0!, {s4-s8}

			VLDMIA.f32 SP!,{S4-S9}
 80002a6:	ecbd 2a06 	vpop	{s4-s9}
			POP {R4, PC}
 80002aa:	bd10      	pop	{r4, pc}

080002ac <exception>:

exception:
			VMOV.f32 S0, S6					// force NaN or let it be x?
 80002ac:	eeb0 0a43 	vmov.f32	s0, s6
			VLDMIA.f32 SP!,{S4-S9}
 80002b0:	ecbd 2a06 	vpop	{s4-s9}
			POP {R4, PC}
 80002b4:	bd10      	pop	{r4, pc}

080002b6 <strlen>:
 80002b6:	4603      	mov	r3, r0
 80002b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002bc:	2a00      	cmp	r2, #0
 80002be:	d1fb      	bne.n	80002b8 <strlen+0x2>
 80002c0:	1a18      	subs	r0, r3, r0
 80002c2:	3801      	subs	r0, #1
 80002c4:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004ae:	f1a4 0401 	sub.w	r4, r4, #1
 80004b2:	d1e9      	bne.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2uiz>:
 8000c98:	004a      	lsls	r2, r1, #1
 8000c9a:	d211      	bcs.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ca0:	d211      	bcs.n	8000cc6 <__aeabi_d2uiz+0x2e>
 8000ca2:	d50d      	bpl.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cac:	d40e      	bmi.n	8000ccc <__aeabi_d2uiz+0x34>
 8000cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_d2uiz+0x3a>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2f>:
 8000cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ce0:	bf24      	itt	cs
 8000ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cea:	d90d      	bls.n	8000d08 <__aeabi_d2f+0x30>
 8000cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d00:	bf08      	it	eq
 8000d02:	f020 0001 	biceq.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d0c:	d121      	bne.n	8000d52 <__aeabi_d2f+0x7a>
 8000d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d12:	bfbc      	itt	lt
 8000d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d18:	4770      	bxlt	lr
 8000d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d22:	f1c2 0218 	rsb	r2, r2, #24
 8000d26:	f1c2 0c20 	rsb	ip, r2, #32
 8000d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d32:	bf18      	it	ne
 8000d34:	f040 0001 	orrne.w	r0, r0, #1
 8000d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d44:	ea40 000c 	orr.w	r0, r0, ip
 8000d48:	fa23 f302 	lsr.w	r3, r3, r2
 8000d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d50:	e7cc      	b.n	8000cec <__aeabi_d2f+0x14>
 8000d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d56:	d107      	bne.n	8000d68 <__aeabi_d2f+0x90>
 8000d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d5c:	bf1e      	ittt	ne
 8000d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d66:	4770      	bxne	lr
 8000d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <kalmanFilterC>:
#include "main.h"
#include "math.h"
#include "lab1util.h"
#include "cmsis_gcc.h"

int kalmanFilterC(float* InputArray, float* OutputArray, struct KalmanState* kstate, int length){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	; 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
 8000d84:	603b      	str	r3, [r7, #0]
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8000d86:	eef1 3a10 	vmrs	r3, fpscr
 8000d8a:	61bb      	str	r3, [r7, #24]
  return(result);
 8000d8c:	69bb      	ldr	r3, [r7, #24]
//
//
//	float diffArray[length];
//	float convArray[length*2-1];

	__set_FPSCR(__get_FPSCR() & 0xFFFFFFF0);
 8000d8e:	f023 030f 	bic.w	r3, r3, #15
 8000d92:	61fb      	str	r3, [r7, #28]
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8000d94:	69fb      	ldr	r3, [r7, #28]
 8000d96:	eee1 3a10 	vmsr	fpscr, r3

	for(int i = 0; i < length; i++){
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	627b      	str	r3, [r7, #36]	; 0x24
 8000d9e:	e038      	b.n	8000e12 <kalmanFilterC+0x9a>
		float updateResult = kalmanUpdateC(kstate, InputArray[i]);
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	68fa      	ldr	r2, [r7, #12]
 8000da6:	4413      	add	r3, r2
 8000da8:	edd3 7a00 	vldr	s15, [r3]
 8000dac:	eeb0 0a67 	vmov.f32	s0, s15
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f887 	bl	8000ec4 <kalmanUpdateC>
 8000db6:	ed87 0a08 	vstr	s0, [r7, #32]
		if (isnan(updateResult) || isinf(updateResult)){
 8000dba:	ed97 7a08 	vldr	s14, [r7, #32]
 8000dbe:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dc2:	eeb4 7a67 	vcmp.f32	s14, s15
 8000dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dca:	d612      	bvs.n	8000df2 <kalmanFilterC+0x7a>
 8000dcc:	edd7 7a08 	vldr	s15, [r7, #32]
 8000dd0:	eef0 7ae7 	vabs.f32	s15, s15
 8000dd4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000e24 <kalmanFilterC+0xac>
 8000dd8:	eef4 7a47 	vcmp.f32	s15, s14
 8000ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de0:	bfd4      	ite	le
 8000de2:	2301      	movle	r3, #1
 8000de4:	2300      	movgt	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f083 0301 	eor.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <kalmanFilterC+0x88>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8000df2:	eef1 3a10 	vmrs	r3, fpscr
 8000df6:	617b      	str	r3, [r7, #20]
  return(result);
 8000df8:	697b      	ldr	r3, [r7, #20]
			//Return FPSCR as an error flag
			return __get_FPSCR() & 0x0000000F;
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	e00d      	b.n	8000e1c <kalmanFilterC+0xa4>
		}
		OutputArray[i] = updateResult;
 8000e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	68ba      	ldr	r2, [r7, #8]
 8000e06:	4413      	add	r3, r2
 8000e08:	6a3a      	ldr	r2, [r7, #32]
 8000e0a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e0e:	3301      	adds	r3, #1
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
 8000e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	429a      	cmp	r2, r3
 8000e18:	dbc2      	blt.n	8000da0 <kalmanFilterC+0x28>
//	float stdDiff = powf(varDiff, 0.5);
//	float correlation = corrC(InputArray, OutputArray, avgIn, avgOut, length);
//
//	convC(InputArray, OutputArray, convArray, length, length);

	return 0;
 8000e1a:	2300      	movs	r3, #0
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3728      	adds	r7, #40	; 0x28
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	7f7fffff 	.word	0x7f7fffff

08000e28 <kalmanFilterAinC>:


int kalmanFilterAinC(float* InputArray, float* OutputArray, struct KalmanState* kstate, int length){
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b088      	sub	sp, #32
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < length; i++){
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
 8000e3a:	e038      	b.n	8000eae <kalmanFilterAinC+0x86>
		float updateResult = kalmanUpdateA(kstate, InputArray[i]);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	4413      	add	r3, r2
 8000e44:	edd3 7a00 	vldr	s15, [r3]
 8000e48:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4c:	6878      	ldr	r0, [r7, #4]
 8000e4e:	f7ff fa0a 	bl	8000266 <kalmanUpdateA>
 8000e52:	ed87 0a06 	vstr	s0, [r7, #24]
		if (isnan(updateResult) || isinf(updateResult)){
 8000e56:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e5a:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e5e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e66:	d612      	bvs.n	8000e8e <kalmanFilterAinC+0x66>
 8000e68:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e6c:	eef0 7ae7 	vabs.f32	s15, s15
 8000e70:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8000ec0 <kalmanFilterAinC+0x98>
 8000e74:	eef4 7a47 	vcmp.f32	s15, s14
 8000e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e7c:	bfd4      	ite	le
 8000e7e:	2301      	movle	r3, #1
 8000e80:	2300      	movgt	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	f083 0301 	eor.w	r3, r3, #1
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d006      	beq.n	8000e9c <kalmanFilterAinC+0x74>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8000e8e:	eef1 3a10 	vmrs	r3, fpscr
 8000e92:	617b      	str	r3, [r7, #20]
  return(result);
 8000e94:	697b      	ldr	r3, [r7, #20]
			return __get_FPSCR() & 0x0000000F;
 8000e96:	f003 030f 	and.w	r3, r3, #15
 8000e9a:	e00d      	b.n	8000eb8 <kalmanFilterAinC+0x90>
		}
		OutputArray[i] = updateResult;
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	009b      	lsls	r3, r3, #2
 8000ea0:	68ba      	ldr	r2, [r7, #8]
 8000ea2:	4413      	add	r3, r2
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	61fb      	str	r3, [r7, #28]
 8000eae:	69fa      	ldr	r2, [r7, #28]
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	dbc2      	blt.n	8000e3c <kalmanFilterAinC+0x14>
	}

	return 0;
 8000eb6:	2300      	movs	r3, #0
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3720      	adds	r7, #32
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	7f7fffff 	.word	0x7f7fffff

08000ec4 <kalmanUpdateC>:
 */
#include "math.h"
#include "string.h"
#include "lab1util.h"

float kalmanUpdateC(struct KalmanState* ksp, float measurement){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b088      	sub	sp, #32
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	ed87 0a00 	vstr	s0, [r7]
//			|| isinf(ksp->k) || isinf(ksp->p) || isinf(ksp->q) || isinf(ksp->x) || isinf(ksp->r)){
//		return NAN;
//	}

	struct KalmanState ks;
	memcpy(&ks, ksp, sizeof(ks));
 8000ed0:	f107 030c 	add.w	r3, r7, #12
 8000ed4:	2214      	movs	r2, #20
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 ff71 	bl	8002dc0 <memcpy>

	ks.p += ks.q;
 8000ede:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ee2:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eea:	edc7 7a06 	vstr	s15, [r7, #24]
	ks.k = ks.p / (ks.p + ks.r);
 8000eee:	edd7 6a06 	vldr	s13, [r7, #24]
 8000ef2:	ed97 7a06 	vldr	s14, [r7, #24]
 8000ef6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000efa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f02:	edc7 7a07 	vstr	s15, [r7, #28]
	ks.x += ks.k * (measurement - ks.x);
 8000f06:	ed97 7a05 	vldr	s14, [r7, #20]
 8000f0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8000f0e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f12:	ed97 6a00 	vldr	s12, [r7]
 8000f16:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000f1a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f22:	edc7 7a05 	vstr	s15, [r7, #20]
	ks.p -= ks.k * ks.p;
 8000f26:	ed97 7a06 	vldr	s14, [r7, #24]
 8000f2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8000f2e:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f3a:	edc7 7a06 	vstr	s15, [r7, #24]

	if (isnan(ks.k) || isinf(ks.p) || isinf(ks.x) || isnan(ks.x)
 8000f3e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000f42:	eef4 7a67 	vcmp.f32	s15, s15
 8000f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f4a:	d646      	bvs.n	8000fda <kalmanUpdateC+0x116>
 8000f4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000f50:	eef0 7ae7 	vabs.f32	s15, s15
 8000f54:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8000ffc <kalmanUpdateC+0x138>
 8000f58:	eef4 7a47 	vcmp.f32	s15, s14
 8000f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f60:	bfd4      	ite	le
 8000f62:	2301      	movle	r3, #1
 8000f64:	2300      	movgt	r3, #0
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	f083 0301 	eor.w	r3, r3, #1
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d133      	bne.n	8000fda <kalmanUpdateC+0x116>
 8000f72:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f76:	eef0 7ae7 	vabs.f32	s15, s15
 8000f7a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8000ffc <kalmanUpdateC+0x138>
 8000f7e:	eef4 7a47 	vcmp.f32	s15, s14
 8000f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f86:	bfd4      	ite	le
 8000f88:	2301      	movle	r3, #1
 8000f8a:	2300      	movgt	r3, #0
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f083 0301 	eor.w	r3, r3, #1
 8000f92:	b2db      	uxtb	r3, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d120      	bne.n	8000fda <kalmanUpdateC+0x116>
 8000f98:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f9c:	eef4 7a67 	vcmp.f32	s15, s15
 8000fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa4:	d619      	bvs.n	8000fda <kalmanUpdateC+0x116>
			|| isnan(ks.p) || isinf(ks.k))	return NAN;
 8000fa6:	edd7 7a06 	vldr	s15, [r7, #24]
 8000faa:	eef4 7a67 	vcmp.f32	s15, s15
 8000fae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb2:	d612      	bvs.n	8000fda <kalmanUpdateC+0x116>
 8000fb4:	edd7 7a07 	vldr	s15, [r7, #28]
 8000fb8:	eef0 7ae7 	vabs.f32	s15, s15
	if (isnan(ks.k) || isinf(ks.p) || isinf(ks.x) || isnan(ks.x)
 8000fbc:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000ffc <kalmanUpdateC+0x138>
 8000fc0:	eef4 7a47 	vcmp.f32	s15, s14
 8000fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc8:	bfd4      	ite	le
 8000fca:	2301      	movle	r3, #1
 8000fcc:	2300      	movgt	r3, #0
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	f083 0301 	eor.w	r3, r3, #1
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <kalmanUpdateC+0x11a>
			|| isnan(ks.p) || isinf(ks.k))	return NAN;
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <kalmanUpdateC+0x13c>)
 8000fdc:	e007      	b.n	8000fee <kalmanUpdateC+0x12a>

	memcpy(ksp, &ks, sizeof(ks));
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	2214      	movs	r2, #20
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f001 feea 	bl	8002dc0 <memcpy>
	return ks.x;
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	ee07 3a90 	vmov	s15, r3
}
 8000ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff6:	3720      	adds	r7, #32
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	7f7fffff 	.word	0x7f7fffff
 8001000:	7fc00000 	.word	0x7fc00000

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b5b0      	push	{r4, r5, r7, lr}
 8001006:	f5ad 7d7c 	sub.w	sp, sp, #1008	; 0x3f0
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800100c:	f000 fb25 	bl	800165a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001010:	f000 f97e 	bl	8001310 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001014:	f000 f9ce 	bl	80013b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  struct KalmanState ks5A = {
 8001018:	4bb6      	ldr	r3, [pc, #728]	; (80012f4 <main+0x2f0>)
 800101a:	f507 7473 	add.w	r4, r7, #972	; 0x3cc
 800101e:	461d      	mov	r5, r3
 8001020:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001022:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001024:	682b      	ldr	r3, [r5, #0]
 8001026:	6023      	str	r3, [r4, #0]
 		  .r = 0.1,
 		  .x = 5,
 		  .p = 0.1,
 		  .k = 0.0
   };
  struct KalmanState ks50A = {
 8001028:	4bb3      	ldr	r3, [pc, #716]	; (80012f8 <main+0x2f4>)
 800102a:	f507 746e 	add.w	r4, r7, #952	; 0x3b8
 800102e:	461d      	mov	r5, r3
 8001030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001034:	682b      	ldr	r3, [r5, #0]
 8001036:	6023      	str	r3, [r4, #0]
 		  .r = 0.1,
 		  .x = 50,
 		  .p = 0.1,
 		  .k = 0.0
   };
  struct KalmanState ks5AC = {
 8001038:	4bae      	ldr	r3, [pc, #696]	; (80012f4 <main+0x2f0>)
 800103a:	f507 7469 	add.w	r4, r7, #932	; 0x3a4
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	682b      	ldr	r3, [r5, #0]
 8001046:	6023      	str	r3, [r4, #0]
 		  .r = 0.1,
 		  .x = 5,
 		  .p = 0.1,
 		  .k = 0.0
   };
  struct KalmanState ks50AC = {
 8001048:	4bab      	ldr	r3, [pc, #684]	; (80012f8 <main+0x2f4>)
 800104a:	f507 7464 	add.w	r4, r7, #912	; 0x390
 800104e:	461d      	mov	r5, r3
 8001050:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001052:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001054:	682b      	ldr	r3, [r5, #0]
 8001056:	6023      	str	r3, [r4, #0]
 		  .r = 0.1,
 		  .x = 50,
 		  .p = 0.1,
 		  .k = 0.0
   };
  struct KalmanState ks5C = {
 8001058:	4ba6      	ldr	r3, [pc, #664]	; (80012f4 <main+0x2f0>)
 800105a:	f507 745f 	add.w	r4, r7, #892	; 0x37c
 800105e:	461d      	mov	r5, r3
 8001060:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001062:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001064:	682b      	ldr	r3, [r5, #0]
 8001066:	6023      	str	r3, [r4, #0]
   		  .r = 0.1,
   		  .x = 5,
   		  .p = 0.1,
   		  .k = 0.0
     };
    struct KalmanState ks50C = {
 8001068:	4ba3      	ldr	r3, [pc, #652]	; (80012f8 <main+0x2f4>)
 800106a:	f507 745a 	add.w	r4, r7, #872	; 0x368
 800106e:	461d      	mov	r5, r3
 8001070:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001072:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001074:	682b      	ldr	r3, [r5, #0]
 8001076:	6023      	str	r3, [r4, #0]
   		  .x = 50,
   		  .p = 0.1,
   		  .k = 0.0
     };

  struct KalmanState ksZero = {
 8001078:	f04f 0300 	mov.w	r3, #0
 800107c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8001088:	4b9c      	ldr	r3, [pc, #624]	; (80012fc <main+0x2f8>)
 800108a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800108e:	f04f 0300 	mov.w	r3, #0
 8001092:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
		  .r = 0,
		  .x = 5,
		  .p = 0,
		  .k = 0.0
  };
  struct KalmanState ksOverflow = {
 800109e:	4b98      	ldr	r3, [pc, #608]	; (8001300 <main+0x2fc>)
 80010a0:	f507 7450 	add.w	r4, r7, #832	; 0x340
 80010a4:	461d      	mov	r5, r3
 80010a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010aa:	682b      	ldr	r3, [r5, #0]
 80010ac:	6023      	str	r3, [r4, #0]
  		  .r = 3e38,
  		  .x = 5,
  		  .p = 3e38,
  		  .k = 0.0
    };
  struct KalmanState ksOverflowN = {
 80010ae:	4b95      	ldr	r3, [pc, #596]	; (8001304 <main+0x300>)
 80010b0:	f507 744b 	add.w	r4, r7, #812	; 0x32c
 80010b4:	461d      	mov	r5, r3
 80010b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010ba:	682b      	ldr	r3, [r5, #0]
 80010bc:	6023      	str	r3, [r4, #0]
  		  .k = 0.0
    };

//  float TEST_ARRAY[101] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706, 10.4858891793, 10.1104642352, 9.51066931906, 9.75755656493, 9.82154078273, 10.2906541933, 10.4861328671, 9.57321181356, 9.70882714139, 10.4359069357, 9.70644021369, 10.2709894039, 10.0823149505, 10.2954563443, 9.57130449017, 9.66832136479, 10.4521677502, 10.4287240667, 10.1833650752, 10.0066049721, 10.3279461634, 10.4767210803, 10.3790964606, 10.1937408814, 10.0318963522, 10.4939180917, 10.2381858895, 9.59703103024, 9.62757986516, 10.1816981174, 9.65703773168, 10.3905666599, 10.0941977598, 9.93515274393, 9.71017053437, 10.0303874259, 10.0173504397, 9.69022731474, 9.73902896102, 9.52524419732, 10.3270730526, 9.54695650657, 10.3573960542, 9.88773266876, 10.1685038683, 10.1683694089, 9.88406620159, 10.3290065898, 10.2547227265, 10.4733422906, 10.0133952458, 10.4205693583, 9.71335255372, 9.89061396699, 10.1652744131, 10.2580948608, 10.3465431058, 9.98446410493, 9.79376005657, 10.202518901, 9.83867150985, 9.89532986869, 10.2885062658, 9.97748768804, 10.0403923759, 10.1538911808, 9.78303667556, 9.72420149909, 9.59117495073, 10.1716116012, 10.2015818969, 9.90650056596, 10.3251329834, 10.4550120431, 10.4925749165, 10.1548177178, 9.60547133785, 10.4644672766, 10.2326496615, 10.2279703226, 10.3535284606, 10.2437410625, 10.3851531317, 9.90784804928, 9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087, 9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486, 10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991, 9.5799256668};

  float TEST_ARRAY[101] = {0.50797903,  2.08147823, -2.09095261,  0.10827605,  3.92946954,
 80010be:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80010c2:	4a91      	ldr	r2, [pc, #580]	; (8001308 <main+0x304>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	4611      	mov	r1, r2
 80010c8:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80010cc:	461a      	mov	r2, r3
 80010ce:	f001 fe77 	bl	8002dc0 <memcpy>
      0.41019673,  2.07180601, -2.36113329,  4.26725684,  3.39193058,
      2.26319498, -0.19760044,  3.42103186,  2.44752323,  1.60325906,
      4.13975267,  1.33665564, -1.34059415,  0.52844573, -3.03619423,
     -3.07927704};

  int resultholder = 12345;
 80010d2:	f243 0339 	movw	r3, #12345	; 0x3039
 80010d6:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

  float output[101];


  memset(output, 0, sizeof(output));
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80010e0:	2100      	movs	r1, #0
 80010e2:	4618      	mov	r0, r3
 80010e4:	f001 fe77 	bl	8002dd6 <memset>

  resultholder = 12345;
 80010e8:	f243 0339 	movw	r3, #12345	; 0x3039
 80010ec:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ks5C, 101);
 80010f0:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80010f4:	1d39      	adds	r1, r7, #4
 80010f6:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80010fa:	2365      	movs	r3, #101	; 0x65
 80010fc:	f7ff fe3c 	bl	8000d78 <kalmanFilterC>
 8001100:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ks50C, 101);
 8001104:	f507 725a 	add.w	r2, r7, #872	; 0x368
 8001108:	1d39      	adds	r1, r7, #4
 800110a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800110e:	2365      	movs	r3, #101	; 0x65
 8001110:	f7ff fe32 	bl	8000d78 <kalmanFilterC>
 8001114:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ksZero, 101);
 8001118:	f507 7255 	add.w	r2, r7, #852	; 0x354
 800111c:	1d39      	adds	r1, r7, #4
 800111e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001122:	2365      	movs	r3, #101	; 0x65
 8001124:	f7ff fe28 	bl	8000d78 <kalmanFilterC>
 8001128:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ksOverflow, 101);
 800112c:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8001130:	1d39      	adds	r1, r7, #4
 8001132:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001136:	2365      	movs	r3, #101	; 0x65
 8001138:	f7ff fe1e 	bl	8000d78 <kalmanFilterC>
 800113c:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ksOverflowN, 101);
 8001140:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8001144:	1d39      	adds	r1, r7, #4
 8001146:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800114a:	2365      	movs	r3, #101	; 0x65
 800114c:	f7ff fe14 	bl	8000d78 <kalmanFilterC>
 8001150:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0

  memset(output, 0, sizeof(output));
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f001 fe3a 	bl	8002dd6 <memset>

  resultholder = kalmanFilterA(TEST_ARRAY, output, &ks5A, 101);
 8001162:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8001166:	1d39      	adds	r1, r7, #4
 8001168:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800116c:	2365      	movs	r3, #101	; 0x65
 800116e:	f7ff f847 	bl	8000200 <kalmanFilterA>
 8001172:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterA(TEST_ARRAY, output, &ks50A, 101);
 8001176:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 800117a:	1d39      	adds	r1, r7, #4
 800117c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001180:	2365      	movs	r3, #101	; 0x65
 8001182:	f7ff f83d 	bl	8000200 <kalmanFilterA>
 8001186:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterA(TEST_ARRAY, output, &ksZero, 101);
 800118a:	f507 7255 	add.w	r2, r7, #852	; 0x354
 800118e:	1d39      	adds	r1, r7, #4
 8001190:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001194:	2365      	movs	r3, #101	; 0x65
 8001196:	f7ff f833 	bl	8000200 <kalmanFilterA>
 800119a:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterA(TEST_ARRAY, output, &ksOverflow, 101);
 800119e:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80011a2:	1d39      	adds	r1, r7, #4
 80011a4:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80011a8:	2365      	movs	r3, #101	; 0x65
 80011aa:	f7ff f829 	bl	8000200 <kalmanFilterA>
 80011ae:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterA(TEST_ARRAY, output, &ksOverflowN, 101);
 80011b2:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80011b6:	1d39      	adds	r1, r7, #4
 80011b8:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80011bc:	2365      	movs	r3, #101	; 0x65
 80011be:	f7ff f81f 	bl	8000200 <kalmanFilterA>
 80011c2:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0

  memset(output, 0, sizeof(output));
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80011cc:	2100      	movs	r1, #0
 80011ce:	4618      	mov	r0, r3
 80011d0:	f001 fe01 	bl	8002dd6 <memset>

  resultholder = 12345;
 80011d4:	f243 0339 	movw	r3, #12345	; 0x3039
 80011d8:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ks5AC, 101);
 80011dc:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 80011e0:	1d39      	adds	r1, r7, #4
 80011e2:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80011e6:	2365      	movs	r3, #101	; 0x65
 80011e8:	f7ff fe1e 	bl	8000e28 <kalmanFilterAinC>
 80011ec:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ks50AC, 101);
 80011f0:	f507 7264 	add.w	r2, r7, #912	; 0x390
 80011f4:	1d39      	adds	r1, r7, #4
 80011f6:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80011fa:	2365      	movs	r3, #101	; 0x65
 80011fc:	f7ff fe14 	bl	8000e28 <kalmanFilterAinC>
 8001200:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ksZero, 101);
 8001204:	f507 7255 	add.w	r2, r7, #852	; 0x354
 8001208:	1d39      	adds	r1, r7, #4
 800120a:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800120e:	2365      	movs	r3, #101	; 0x65
 8001210:	f7ff fe0a 	bl	8000e28 <kalmanFilterAinC>
 8001214:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ksOverflow, 101);
 8001218:	f507 7250 	add.w	r2, r7, #832	; 0x340
 800121c:	1d39      	adds	r1, r7, #4
 800121e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001222:	2365      	movs	r3, #101	; 0x65
 8001224:	f7ff fe00 	bl	8000e28 <kalmanFilterAinC>
 8001228:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ksOverflowN, 101);
 800122c:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8001230:	1d39      	adds	r1, r7, #4
 8001232:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001236:	2365      	movs	r3, #101	; 0x65
 8001238:	f7ff fdf6 	bl	8000e28 <kalmanFilterAinC>
 800123c:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ITM_Port32(31) = 11111;
 8001240:	4b32      	ldr	r3, [pc, #200]	; (800130c <main+0x308>)
 8001242:	f642 3267 	movw	r2, #11111	; 0x2b67
 8001246:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 8001248:	2300      	movs	r3, #0
 800124a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800124e:	e00e      	b.n	800126e <main+0x26a>
		  resultholder = kalmanFilterA(TEST_ARRAY, output, &ks5A, 101);
 8001250:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 8001254:	1d39      	adds	r1, r7, #4
 8001256:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800125a:	2365      	movs	r3, #101	; 0x65
 800125c:	f7fe ffd0 	bl	8000200 <kalmanFilterA>
 8001260:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
	  for (int i=0; i<1000; i++){
 8001264:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8001268:	3301      	adds	r3, #1
 800126a:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 800126e:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 8001272:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001276:	dbeb      	blt.n	8001250 <main+0x24c>
	  }
	  ITM_Port32(31) = 22222;
 8001278:	4b24      	ldr	r3, [pc, #144]	; (800130c <main+0x308>)
 800127a:	f245 62ce 	movw	r2, #22222	; 0x56ce
 800127e:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 8001280:	2300      	movs	r3, #0
 8001282:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 8001286:	e00e      	b.n	80012a6 <main+0x2a2>
		  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ks5AC, 101);
 8001288:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 800128c:	1d39      	adds	r1, r7, #4
 800128e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001292:	2365      	movs	r3, #101	; 0x65
 8001294:	f7ff fdc8 	bl	8000e28 <kalmanFilterAinC>
 8001298:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
	  for (int i=0; i<1000; i++){
 800129c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80012a0:	3301      	adds	r3, #1
 80012a2:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 80012a6:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 80012aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012ae:	dbeb      	blt.n	8001288 <main+0x284>
	  }
	  ITM_Port32(31) = 33333;
 80012b0:	4b16      	ldr	r3, [pc, #88]	; (800130c <main+0x308>)
 80012b2:	f248 2235 	movw	r2, #33333	; 0x8235
 80012b6:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 80012b8:	2300      	movs	r3, #0
 80012ba:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80012be:	e00e      	b.n	80012de <main+0x2da>
	  		  resultholder = kalmanFilterC(TEST_ARRAY, output, &ks5C, 101);
 80012c0:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80012c4:	1d39      	adds	r1, r7, #4
 80012c6:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80012ca:	2365      	movs	r3, #101	; 0x65
 80012cc:	f7ff fd54 	bl	8000d78 <kalmanFilterC>
 80012d0:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
	  for (int i=0; i<1000; i++){
 80012d4:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80012d8:	3301      	adds	r3, #1
 80012da:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 80012de:	f8d7 33e4 	ldr.w	r3, [r7, #996]	; 0x3e4
 80012e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80012e6:	dbeb      	blt.n	80012c0 <main+0x2bc>
	  	  }
	  ITM_Port32(31) = 44444;
 80012e8:	4b08      	ldr	r3, [pc, #32]	; (800130c <main+0x308>)
 80012ea:	f64a 529c 	movw	r2, #44444	; 0xad9c
 80012ee:	601a      	str	r2, [r3, #0]
	  ITM_Port32(31) = 11111;
 80012f0:	e7a6      	b.n	8001240 <main+0x23c>
 80012f2:	bf00      	nop
 80012f4:	08006858 	.word	0x08006858
 80012f8:	0800686c 	.word	0x0800686c
 80012fc:	40a00000 	.word	0x40a00000
 8001300:	08006880 	.word	0x08006880
 8001304:	08006894 	.word	0x08006894
 8001308:	080068a8 	.word	0x080068a8
 800130c:	e000007c 	.word	0xe000007c

08001310 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b096      	sub	sp, #88	; 0x58
 8001314:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2244      	movs	r2, #68	; 0x44
 800131c:	2100      	movs	r1, #0
 800131e:	4618      	mov	r0, r3
 8001320:	f001 fd59 	bl	8002dd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001324:	463b      	mov	r3, r7
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001332:	2000      	movs	r0, #0
 8001334:	f000 fb0c 	bl	8001950 <HAL_PWREx_ControlVoltageScaling>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800133e:	f000 f887 	bl	8001450 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001342:	2310      	movs	r3, #16
 8001344:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001346:	2301      	movs	r3, #1
 8001348:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800134e:	2360      	movs	r3, #96	; 0x60
 8001350:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001352:	2302      	movs	r3, #2
 8001354:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001356:	2301      	movs	r3, #1
 8001358:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800135a:	2301      	movs	r3, #1
 800135c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 800135e:	233c      	movs	r3, #60	; 0x3c
 8001360:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001362:	2302      	movs	r3, #2
 8001364:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001366:	2302      	movs	r3, #2
 8001368:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136a:	2302      	movs	r3, #2
 800136c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4618      	mov	r0, r3
 8001374:	f000 fb90 	bl	8001a98 <HAL_RCC_OscConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800137e:	f000 f867 	bl	8001450 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
 8001384:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001386:	2303      	movs	r3, #3
 8001388:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001396:	463b      	mov	r3, r7
 8001398:	2105      	movs	r1, #5
 800139a:	4618      	mov	r0, r3
 800139c:	f000 ffa2 	bl	80022e4 <HAL_RCC_ClockConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013a6:	f000 f853 	bl	8001450 <Error_Handler>
  }
}
 80013aa:	bf00      	nop
 80013ac:	3758      	adds	r7, #88	; 0x58
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ba:	f107 0310 	add.w	r3, r7, #16
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c8:	1d3b      	adds	r3, r7, #4
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_TIM2_Init+0x98>)
 80013d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 80013da:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_TIM2_Init+0x98>)
 80013dc:	f64e 2260 	movw	r2, #60000	; 0xea60
 80013e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e2:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_TIM2_Init+0x98>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_TIM2_Init+0x98>)
 80013ea:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_TIM2_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <MX_TIM2_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013fc:	4813      	ldr	r0, [pc, #76]	; (800144c <MX_TIM2_Init+0x98>)
 80013fe:	f001 f9e9 	bl	80027d4 <HAL_TIM_Base_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8001408:	f000 f822 	bl	8001450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800140c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001410:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001412:	f107 0310 	add.w	r3, r7, #16
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_TIM2_Init+0x98>)
 800141a:	f001 fa32 	bl	8002882 <HAL_TIM_ConfigClockSource>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001424:	f000 f814 	bl	8001450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_TIM2_Init+0x98>)
 8001436:	f001 fc11 	bl	8002c5c <HAL_TIMEx_MasterConfigSynchronization>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001440:	f000 f806 	bl	8001450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3720      	adds	r7, #32
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	20000204 	.word	0x20000204

08001450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001454:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001456:	e7fe      	b.n	8001456 <Error_Handler+0x6>

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <HAL_MspInit+0x44>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <HAL_MspInit+0x44>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6613      	str	r3, [r2, #96]	; 0x60
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <HAL_MspInit+0x44>)
 800146c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b09      	ldr	r3, [pc, #36]	; (800149c <HAL_MspInit+0x44>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147a:	4a08      	ldr	r2, [pc, #32]	; (800149c <HAL_MspInit+0x44>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6593      	str	r3, [r2, #88]	; 0x58
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <HAL_MspInit+0x44>)
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	603b      	str	r3, [r7, #0]
 800148c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000

080014a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b085      	sub	sp, #20
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b0:	d10b      	bne.n	80014ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014b2:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_TIM_Base_MspInit+0x38>)
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	4a08      	ldr	r2, [pc, #32]	; (80014d8 <HAL_TIM_Base_MspInit+0x38>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6593      	str	r3, [r2, #88]	; 0x58
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_TIM_Base_MspInit+0x38>)
 80014c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40021000 	.word	0x40021000

080014dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014e0:	e7fe      	b.n	80014e0 <NMI_Handler+0x4>

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	b480      	push	{r7}
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e6:	e7fe      	b.n	80014e6 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	e7fe      	b.n	80014ec <MemManage_Handler+0x4>

080014ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ee:	b480      	push	{r7}
 80014f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f2:	e7fe      	b.n	80014f2 <BusFault_Handler+0x4>

080014f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014f8:	e7fe      	b.n	80014f8 <UsageFault_Handler+0x4>

080014fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014fa:	b480      	push	{r7}
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001508:	b480      	push	{r7}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001516:	b480      	push	{r7}
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr

08001524 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001528:	f000 f8ec 	bl	8001704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bf00      	nop
 800152e:	bd80      	pop	{r7, pc}

08001530 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001538:	4a14      	ldr	r2, [pc, #80]	; (800158c <_sbrk+0x5c>)
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <_sbrk+0x60>)
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001544:	4b13      	ldr	r3, [pc, #76]	; (8001594 <_sbrk+0x64>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d102      	bne.n	8001552 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <_sbrk+0x64>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <_sbrk+0x68>)
 8001550:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <_sbrk+0x64>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	429a      	cmp	r2, r3
 800155e:	d207      	bcs.n	8001570 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001560:	f001 fc04 	bl	8002d6c <__errno>
 8001564:	4602      	mov	r2, r0
 8001566:	230c      	movs	r3, #12
 8001568:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800156a:	f04f 33ff 	mov.w	r3, #4294967295
 800156e:	e009      	b.n	8001584 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <_sbrk+0x64>)
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4413      	add	r3, r2
 800157e:	4a05      	ldr	r2, [pc, #20]	; (8001594 <_sbrk+0x64>)
 8001580:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001582:	68fb      	ldr	r3, [r7, #12]
}
 8001584:	4618      	mov	r0, r3
 8001586:	3718      	adds	r7, #24
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200a0000 	.word	0x200a0000
 8001590:	00000400 	.word	0x00000400
 8001594:	200001f8 	.word	0x200001f8
 8001598:	20000258 	.word	0x20000258

0800159c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015a0:	4b17      	ldr	r3, [pc, #92]	; (8001600 <SystemInit+0x64>)
 80015a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a6:	4a16      	ldr	r2, [pc, #88]	; (8001600 <SystemInit+0x64>)
 80015a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <SystemInit+0x68>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a13      	ldr	r2, [pc, #76]	; (8001604 <SystemInit+0x68>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015bc:	4b11      	ldr	r3, [pc, #68]	; (8001604 <SystemInit+0x68>)
 80015be:	2200      	movs	r2, #0
 80015c0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015c2:	4b10      	ldr	r3, [pc, #64]	; (8001604 <SystemInit+0x68>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a0f      	ldr	r2, [pc, #60]	; (8001604 <SystemInit+0x68>)
 80015c8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015cc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015d0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015d2:	4b0c      	ldr	r3, [pc, #48]	; (8001604 <SystemInit+0x68>)
 80015d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015d8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015da:	4b0a      	ldr	r3, [pc, #40]	; (8001604 <SystemInit+0x68>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a09      	ldr	r2, [pc, #36]	; (8001604 <SystemInit+0x68>)
 80015e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015e4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80015e6:	4b07      	ldr	r3, [pc, #28]	; (8001604 <SystemInit+0x68>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015ec:	4b04      	ldr	r3, [pc, #16]	; (8001600 <SystemInit+0x64>)
 80015ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f2:	609a      	str	r2, [r3, #8]
#endif
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00
 8001604:	40021000 	.word	0x40021000

08001608 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001608:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001640 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800160c:	f7ff ffc6 	bl	800159c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001610:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001612:	e003      	b.n	800161c <LoopCopyDataInit>

08001614 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001614:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001616:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001618:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800161a:	3104      	adds	r1, #4

0800161c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800161c:	480a      	ldr	r0, [pc, #40]	; (8001648 <LoopForever+0xa>)
	ldr	r3, =_edata
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001620:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001622:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001624:	d3f6      	bcc.n	8001614 <CopyDataInit>
	ldr	r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001628:	e002      	b.n	8001630 <LoopFillZerobss>

0800162a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800162a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800162c:	f842 3b04 	str.w	r3, [r2], #4

08001630 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <LoopForever+0x16>)
	cmp	r2, r3
 8001632:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001634:	d3f9      	bcc.n	800162a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001636:	f001 fb9f 	bl	8002d78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800163a:	f7ff fce3 	bl	8001004 <main>

0800163e <LoopForever>:

LoopForever:
    b LoopForever
 800163e:	e7fe      	b.n	800163e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001640:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001644:	08006d38 	.word	0x08006d38
	ldr	r0, =_sdata
 8001648:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800164c:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001650:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001654:	20000258 	.word	0x20000258

08001658 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_IRQHandler>

0800165a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001660:	2300      	movs	r3, #0
 8001662:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001664:	2003      	movs	r0, #3
 8001666:	f000 f91f 	bl	80018a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800166a:	2000      	movs	r0, #0
 800166c:	f000 f80e 	bl	800168c <HAL_InitTick>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d002      	beq.n	800167c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	71fb      	strb	r3, [r7, #7]
 800167a:	e001      	b.n	8001680 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800167c:	f7ff feec 	bl	8001458 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001680:	79fb      	ldrb	r3, [r7, #7]
}
 8001682:	4618      	mov	r0, r3
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001698:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <HAL_InitTick+0x6c>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d023      	beq.n	80016e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80016a0:	4b16      	ldr	r3, [pc, #88]	; (80016fc <HAL_InitTick+0x70>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <HAL_InitTick+0x6c>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80016b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f91d 	bl	80018f6 <HAL_SYSTICK_Config>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d10f      	bne.n	80016e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2b0f      	cmp	r3, #15
 80016c6:	d809      	bhi.n	80016dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016c8:	2200      	movs	r2, #0
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	f04f 30ff 	mov.w	r0, #4294967295
 80016d0:	f000 f8f5 	bl	80018be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016d4:	4a0a      	ldr	r2, [pc, #40]	; (8001700 <HAL_InitTick+0x74>)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e007      	b.n	80016ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
 80016e0:	e004      	b.n	80016ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e001      	b.n	80016ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000008 	.word	0x20000008
 80016fc:	20000000 	.word	0x20000000
 8001700:	20000004 	.word	0x20000004

08001704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <HAL_IncTick+0x20>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	461a      	mov	r2, r3
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <HAL_IncTick+0x24>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4413      	add	r3, r2
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_IncTick+0x24>)
 8001716:	6013      	str	r3, [r2, #0]
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000008 	.word	0x20000008
 8001728:	20000250 	.word	0x20000250

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000250 	.word	0x20000250

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	; (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	; (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	6039      	str	r1, [r7, #0]
 80017b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db0a      	blt.n	80017d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	490c      	ldr	r1, [pc, #48]	; (80017f4 <__NVIC_SetPriority+0x4c>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	0112      	lsls	r2, r2, #4
 80017c8:	b2d2      	uxtb	r2, r2
 80017ca:	440b      	add	r3, r1
 80017cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017d0:	e00a      	b.n	80017e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4908      	ldr	r1, [pc, #32]	; (80017f8 <__NVIC_SetPriority+0x50>)
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	f003 030f 	and.w	r3, r3, #15
 80017de:	3b04      	subs	r3, #4
 80017e0:	0112      	lsls	r2, r2, #4
 80017e2:	b2d2      	uxtb	r2, r2
 80017e4:	440b      	add	r3, r1
 80017e6:	761a      	strb	r2, [r3, #24]
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	e000e100 	.word	0xe000e100
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b089      	sub	sp, #36	; 0x24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f1c3 0307 	rsb	r3, r3, #7
 8001816:	2b04      	cmp	r3, #4
 8001818:	bf28      	it	cs
 800181a:	2304      	movcs	r3, #4
 800181c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3304      	adds	r3, #4
 8001822:	2b06      	cmp	r3, #6
 8001824:	d902      	bls.n	800182c <NVIC_EncodePriority+0x30>
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	3b03      	subs	r3, #3
 800182a:	e000      	b.n	800182e <NVIC_EncodePriority+0x32>
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	f04f 32ff 	mov.w	r2, #4294967295
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43da      	mvns	r2, r3
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	401a      	ands	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001844:	f04f 31ff 	mov.w	r1, #4294967295
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	fa01 f303 	lsl.w	r3, r1, r3
 800184e:	43d9      	mvns	r1, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001854:	4313      	orrs	r3, r2
         );
}
 8001856:	4618      	mov	r0, r3
 8001858:	3724      	adds	r7, #36	; 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
	...

08001864 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	3b01      	subs	r3, #1
 8001870:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001874:	d301      	bcc.n	800187a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001876:	2301      	movs	r3, #1
 8001878:	e00f      	b.n	800189a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800187a:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <SysTick_Config+0x40>)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	3b01      	subs	r3, #1
 8001880:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001882:	210f      	movs	r1, #15
 8001884:	f04f 30ff 	mov.w	r0, #4294967295
 8001888:	f7ff ff8e 	bl	80017a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800188c:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <SysTick_Config+0x40>)
 800188e:	2200      	movs	r2, #0
 8001890:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001892:	4b04      	ldr	r3, [pc, #16]	; (80018a4 <SysTick_Config+0x40>)
 8001894:	2207      	movs	r2, #7
 8001896:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	e000e010 	.word	0xe000e010

080018a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ff47 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}

080018be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018be:	b580      	push	{r7, lr}
 80018c0:	b086      	sub	sp, #24
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	4603      	mov	r3, r0
 80018c6:	60b9      	str	r1, [r7, #8]
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80018cc:	2300      	movs	r3, #0
 80018ce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018d0:	f7ff ff5c 	bl	800178c <__NVIC_GetPriorityGrouping>
 80018d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018d6:	687a      	ldr	r2, [r7, #4]
 80018d8:	68b9      	ldr	r1, [r7, #8]
 80018da:	6978      	ldr	r0, [r7, #20]
 80018dc:	f7ff ff8e 	bl	80017fc <NVIC_EncodePriority>
 80018e0:	4602      	mov	r2, r0
 80018e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff ff5d 	bl	80017a8 <__NVIC_SetPriority>
}
 80018ee:	bf00      	nop
 80018f0:	3718      	adds	r7, #24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}

080018f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018f6:	b580      	push	{r7, lr}
 80018f8:	b082      	sub	sp, #8
 80018fa:	af00      	add	r7, sp, #0
 80018fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffb0 	bl	8001864 <SysTick_Config>
 8001904:	4603      	mov	r3, r0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001914:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_PWREx_GetVoltageRange+0x3c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800191c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001920:	d102      	bne.n	8001928 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001926:	e00b      	b.n	8001940 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001928:	4b08      	ldr	r3, [pc, #32]	; (800194c <HAL_PWREx_GetVoltageRange+0x3c>)
 800192a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001936:	d102      	bne.n	800193e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001938:	f44f 7300 	mov.w	r3, #512	; 0x200
 800193c:	e000      	b.n	8001940 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800193e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40007000 	.word	0x40007000

08001950 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001950:	b480      	push	{r7}
 8001952:	b085      	sub	sp, #20
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d141      	bne.n	80019e2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800195e:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001966:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800196a:	d131      	bne.n	80019d0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800196c:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001972:	4a46      	ldr	r2, [pc, #280]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001974:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001978:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800197c:	4b43      	ldr	r3, [pc, #268]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001984:	4a41      	ldr	r2, [pc, #260]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001986:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800198a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2232      	movs	r2, #50	; 0x32
 8001992:	fb02 f303 	mul.w	r3, r2, r3
 8001996:	4a3f      	ldr	r2, [pc, #252]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001998:	fba2 2303 	umull	r2, r3, r2, r3
 800199c:	0c9b      	lsrs	r3, r3, #18
 800199e:	3301      	adds	r3, #1
 80019a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019a2:	e002      	b.n	80019aa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019aa:	4b38      	ldr	r3, [pc, #224]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ac:	695b      	ldr	r3, [r3, #20]
 80019ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019b6:	d102      	bne.n	80019be <HAL_PWREx_ControlVoltageScaling+0x6e>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f2      	bne.n	80019a4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019be:	4b33      	ldr	r3, [pc, #204]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c0:	695b      	ldr	r3, [r3, #20]
 80019c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ca:	d158      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e057      	b.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019d0:	4b2e      	ldr	r3, [pc, #184]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019d6:	4a2d      	ldr	r2, [pc, #180]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019e0:	e04d      	b.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019e8:	d141      	bne.n	8001a6e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ea:	4b28      	ldr	r3, [pc, #160]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019f6:	d131      	bne.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019fe:	4a23      	ldr	r2, [pc, #140]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a08:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a10:	4a1e      	ldr	r2, [pc, #120]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a16:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001a18:	4b1d      	ldr	r3, [pc, #116]	; (8001a90 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2232      	movs	r2, #50	; 0x32
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	4a1c      	ldr	r2, [pc, #112]	; (8001a94 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a24:	fba2 2303 	umull	r2, r3, r2, r3
 8001a28:	0c9b      	lsrs	r3, r3, #18
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a2e:	e002      	b.n	8001a36 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a36:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a42:	d102      	bne.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f2      	bne.n	8001a30 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a4a:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a56:	d112      	bne.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e011      	b.n	8001a80 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a62:	4a0a      	ldr	r2, [pc, #40]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a6c:	e007      	b.n	8001a7e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a76:	4a05      	ldr	r2, [pc, #20]	; (8001a8c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a7c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40007000 	.word	0x40007000
 8001a90:	20000000 	.word	0x20000000
 8001a94:	431bde83 	.word	0x431bde83

08001a98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b088      	sub	sp, #32
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d102      	bne.n	8001aac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	f000 bc16 	b.w	80022d8 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aac:	4ba0      	ldr	r3, [pc, #640]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 030c 	and.w	r3, r3, #12
 8001ab4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ab6:	4b9e      	ldr	r3, [pc, #632]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f003 0303 	and.w	r3, r3, #3
 8001abe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0310 	and.w	r3, r3, #16
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	f000 80e4 	beq.w	8001c96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d007      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x4c>
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	2b0c      	cmp	r3, #12
 8001ad8:	f040 808b 	bne.w	8001bf2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	f040 8087 	bne.w	8001bf2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ae4:	4b92      	ldr	r3, [pc, #584]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0302 	and.w	r3, r3, #2
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_RCC_OscConfig+0x64>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e3ed      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1a      	ldr	r2, [r3, #32]
 8001b00:	4b8b      	ldr	r3, [pc, #556]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <HAL_RCC_OscConfig+0x7e>
 8001b0c:	4b88      	ldr	r3, [pc, #544]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b14:	e005      	b.n	8001b22 <HAL_RCC_OscConfig+0x8a>
 8001b16:	4b86      	ldr	r3, [pc, #536]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d223      	bcs.n	8001b6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f000 fd90 	bl	8002650 <RCC_SetFlashLatencyFromMSIRange>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	e3ce      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b3a:	4b7d      	ldr	r3, [pc, #500]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a7c      	ldr	r2, [pc, #496]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b40:	f043 0308 	orr.w	r3, r3, #8
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	4b7a      	ldr	r3, [pc, #488]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a1b      	ldr	r3, [r3, #32]
 8001b52:	4977      	ldr	r1, [pc, #476]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b58:	4b75      	ldr	r3, [pc, #468]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	69db      	ldr	r3, [r3, #28]
 8001b64:	021b      	lsls	r3, r3, #8
 8001b66:	4972      	ldr	r1, [pc, #456]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
 8001b6c:	e025      	b.n	8001bba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b6e:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6f      	ldr	r2, [pc, #444]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b74:	f043 0308 	orr.w	r3, r3, #8
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	496a      	ldr	r1, [pc, #424]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b8c:	4b68      	ldr	r3, [pc, #416]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	021b      	lsls	r3, r3, #8
 8001b9a:	4965      	ldr	r1, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fd50 	bl	8002650 <RCC_SetFlashLatencyFromMSIRange>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e38e      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bba:	f000 fcbf 	bl	800253c <HAL_RCC_GetSysClockFreq>
 8001bbe:	4601      	mov	r1, r0
 8001bc0:	4b5b      	ldr	r3, [pc, #364]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	4a5a      	ldr	r2, [pc, #360]	; (8001d34 <HAL_RCC_OscConfig+0x29c>)
 8001bcc:	5cd3      	ldrb	r3, [r2, r3]
 8001bce:	f003 031f 	and.w	r3, r3, #31
 8001bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bd6:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_RCC_OscConfig+0x2a0>)
 8001bd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bda:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <HAL_RCC_OscConfig+0x2a4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7ff fd54 	bl	800168c <HAL_InitTick>
 8001be4:	4603      	mov	r3, r0
 8001be6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001be8:	7bfb      	ldrb	r3, [r7, #15]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d052      	beq.n	8001c94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	e372      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d032      	beq.n	8001c60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bfa:	4b4d      	ldr	r3, [pc, #308]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c06:	f7ff fd91 	bl	800172c <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c0e:	f7ff fd8d 	bl	800172c <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e35b      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c20:	4b43      	ldr	r3, [pc, #268]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0f0      	beq.n	8001c0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2c:	4b40      	ldr	r3, [pc, #256]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a3f      	ldr	r2, [pc, #252]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c32:	f043 0308 	orr.w	r3, r3, #8
 8001c36:	6013      	str	r3, [r2, #0]
 8001c38:	4b3d      	ldr	r3, [pc, #244]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a1b      	ldr	r3, [r3, #32]
 8001c44:	493a      	ldr	r1, [pc, #232]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c4a:	4b39      	ldr	r3, [pc, #228]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69db      	ldr	r3, [r3, #28]
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	4935      	ldr	r1, [pc, #212]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
 8001c5e:	e01a      	b.n	8001c96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c60:	4b33      	ldr	r3, [pc, #204]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a32      	ldr	r2, [pc, #200]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c66:	f023 0301 	bic.w	r3, r3, #1
 8001c6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c6c:	f7ff fd5e 	bl	800172c <HAL_GetTick>
 8001c70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c72:	e008      	b.n	8001c86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c74:	f7ff fd5a 	bl	800172c <HAL_GetTick>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d901      	bls.n	8001c86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c82:	2303      	movs	r3, #3
 8001c84:	e328      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c86:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d1f0      	bne.n	8001c74 <HAL_RCC_OscConfig+0x1dc>
 8001c92:	e000      	b.n	8001c96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d073      	beq.n	8001d8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x21c>
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d10e      	bne.n	8001ccc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	2b03      	cmp	r3, #3
 8001cb2:	d10b      	bne.n	8001ccc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cb4:	4b1e      	ldr	r3, [pc, #120]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d063      	beq.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d15f      	bne.n	8001d88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e305      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cd4:	d106      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x24c>
 8001cd6:	4b16      	ldr	r3, [pc, #88]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a15      	ldr	r2, [pc, #84]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001cdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ce0:	6013      	str	r3, [r2, #0]
 8001ce2:	e01d      	b.n	8001d20 <HAL_RCC_OscConfig+0x288>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cec:	d10c      	bne.n	8001d08 <HAL_RCC_OscConfig+0x270>
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001cf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e00b      	b.n	8001d20 <HAL_RCC_OscConfig+0x288>
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d12:	6013      	str	r3, [r2, #0]
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a05      	ldr	r2, [pc, #20]	; (8001d30 <HAL_RCC_OscConfig+0x298>)
 8001d1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d01b      	beq.n	8001d60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d28:	f7ff fd00 	bl	800172c <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2e:	e010      	b.n	8001d52 <HAL_RCC_OscConfig+0x2ba>
 8001d30:	40021000 	.word	0x40021000
 8001d34:	08006a3c 	.word	0x08006a3c
 8001d38:	20000000 	.word	0x20000000
 8001d3c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d40:	f7ff fcf4 	bl	800172c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b64      	cmp	r3, #100	; 0x64
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e2c2      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d52:	4baf      	ldr	r3, [pc, #700]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0f0      	beq.n	8001d40 <HAL_RCC_OscConfig+0x2a8>
 8001d5e:	e014      	b.n	8001d8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d60:	f7ff fce4 	bl	800172c <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d68:	f7ff fce0 	bl	800172c <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b64      	cmp	r3, #100	; 0x64
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e2ae      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7a:	4ba5      	ldr	r3, [pc, #660]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f0      	bne.n	8001d68 <HAL_RCC_OscConfig+0x2d0>
 8001d86:	e000      	b.n	8001d8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d060      	beq.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	2b04      	cmp	r3, #4
 8001d9a:	d005      	beq.n	8001da8 <HAL_RCC_OscConfig+0x310>
 8001d9c:	69bb      	ldr	r3, [r7, #24]
 8001d9e:	2b0c      	cmp	r3, #12
 8001da0:	d119      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d116      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001da8:	4b99      	ldr	r3, [pc, #612]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x328>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d101      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	e28b      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4b93      	ldr	r3, [pc, #588]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	061b      	lsls	r3, r3, #24
 8001dce:	4990      	ldr	r1, [pc, #576]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd4:	e040      	b.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	68db      	ldr	r3, [r3, #12]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d023      	beq.n	8001e26 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dde:	4b8c      	ldr	r3, [pc, #560]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a8b      	ldr	r2, [pc, #556]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dea:	f7ff fc9f 	bl	800172c <HAL_GetTick>
 8001dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001df0:	e008      	b.n	8001e04 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001df2:	f7ff fc9b 	bl	800172c <HAL_GetTick>
 8001df6:	4602      	mov	r2, r0
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d901      	bls.n	8001e04 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e00:	2303      	movs	r3, #3
 8001e02:	e269      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e04:	4b82      	ldr	r3, [pc, #520]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0f0      	beq.n	8001df2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e10:	4b7f      	ldr	r3, [pc, #508]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	061b      	lsls	r3, r3, #24
 8001e1e:	497c      	ldr	r1, [pc, #496]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
 8001e24:	e018      	b.n	8001e58 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e26:	4b7a      	ldr	r3, [pc, #488]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a79      	ldr	r2, [pc, #484]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e2c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e32:	f7ff fc7b 	bl	800172c <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e3a:	f7ff fc77 	bl	800172c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e245      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e4c:	4b70      	ldr	r3, [pc, #448]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1f0      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d03c      	beq.n	8001ede <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	695b      	ldr	r3, [r3, #20]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d01c      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	4a67      	ldr	r2, [pc, #412]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e74:	f043 0301 	orr.w	r3, r3, #1
 8001e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fc56 	bl	800172c <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e82:	e008      	b.n	8001e96 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff fc52 	bl	800172c <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d901      	bls.n	8001e96 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e220      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e96:	4b5e      	ldr	r3, [pc, #376]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d0ef      	beq.n	8001e84 <HAL_RCC_OscConfig+0x3ec>
 8001ea4:	e01b      	b.n	8001ede <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea6:	4b5a      	ldr	r3, [pc, #360]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001ea8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eac:	4a58      	ldr	r2, [pc, #352]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001eae:	f023 0301 	bic.w	r3, r3, #1
 8001eb2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fc39 	bl	800172c <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ebc:	e008      	b.n	8001ed0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ebe:	f7ff fc35 	bl	800172c <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e203      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed0:	4b4f      	ldr	r3, [pc, #316]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1ef      	bne.n	8001ebe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80a6 	beq.w	8002038 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eec:	2300      	movs	r3, #0
 8001eee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ef0:	4b47      	ldr	r3, [pc, #284]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d10d      	bne.n	8001f18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001efc:	4b44      	ldr	r3, [pc, #272]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f00:	4a43      	ldr	r2, [pc, #268]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f06:	6593      	str	r3, [r2, #88]	; 0x58
 8001f08:	4b41      	ldr	r3, [pc, #260]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f14:	2301      	movs	r3, #1
 8001f16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f18:	4b3e      	ldr	r3, [pc, #248]	; (8002014 <HAL_RCC_OscConfig+0x57c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d118      	bne.n	8001f56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f24:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_OscConfig+0x57c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a3a      	ldr	r2, [pc, #232]	; (8002014 <HAL_RCC_OscConfig+0x57c>)
 8001f2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f30:	f7ff fbfc 	bl	800172c <HAL_GetTick>
 8001f34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f36:	e008      	b.n	8001f4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f38:	f7ff fbf8 	bl	800172c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d901      	bls.n	8001f4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e1c6      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4a:	4b32      	ldr	r3, [pc, #200]	; (8002014 <HAL_RCC_OscConfig+0x57c>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f0      	beq.n	8001f38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d108      	bne.n	8001f70 <HAL_RCC_OscConfig+0x4d8>
 8001f5e:	4b2c      	ldr	r3, [pc, #176]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	4a2a      	ldr	r2, [pc, #168]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f6e:	e024      	b.n	8001fba <HAL_RCC_OscConfig+0x522>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b05      	cmp	r3, #5
 8001f76:	d110      	bne.n	8001f9a <HAL_RCC_OscConfig+0x502>
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7e:	4a24      	ldr	r2, [pc, #144]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f88:	4b21      	ldr	r3, [pc, #132]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8e:	4a20      	ldr	r2, [pc, #128]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f98:	e00f      	b.n	8001fba <HAL_RCC_OscConfig+0x522>
 8001f9a:	4b1d      	ldr	r3, [pc, #116]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa0:	4a1b      	ldr	r2, [pc, #108]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fa2:	f023 0301 	bic.w	r3, r3, #1
 8001fa6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001faa:	4b19      	ldr	r3, [pc, #100]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb0:	4a17      	ldr	r2, [pc, #92]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fb2:	f023 0304 	bic.w	r3, r3, #4
 8001fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d016      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fc2:	f7ff fbb3 	bl	800172c <HAL_GetTick>
 8001fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc8:	e00a      	b.n	8001fe0 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fca:	f7ff fbaf 	bl	800172c <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e17b      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe0:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_RCC_OscConfig+0x578>)
 8001fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe6:	f003 0302 	and.w	r3, r3, #2
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0ed      	beq.n	8001fca <HAL_RCC_OscConfig+0x532>
 8001fee:	e01a      	b.n	8002026 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fb9c 	bl	800172c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ff6:	e00f      	b.n	8002018 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fb98 	bl	800172c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d906      	bls.n	8002018 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e164      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002018:	4ba8      	ldr	r3, [pc, #672]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800201a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1e8      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002026:	7ffb      	ldrb	r3, [r7, #31]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d105      	bne.n	8002038 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800202c:	4ba3      	ldr	r3, [pc, #652]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	4aa2      	ldr	r2, [pc, #648]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002032:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002036:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0320 	and.w	r3, r3, #32
 8002040:	2b00      	cmp	r3, #0
 8002042:	d03c      	beq.n	80020be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01c      	beq.n	8002086 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800204c:	4b9b      	ldr	r3, [pc, #620]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800204e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002052:	4a9a      	ldr	r2, [pc, #616]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800205c:	f7ff fb66 	bl	800172c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002064:	f7ff fb62 	bl	800172c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e130      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002076:	4b91      	ldr	r3, [pc, #580]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002078:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0ef      	beq.n	8002064 <HAL_RCC_OscConfig+0x5cc>
 8002084:	e01b      	b.n	80020be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002086:	4b8d      	ldr	r3, [pc, #564]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002088:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800208c:	4a8b      	ldr	r2, [pc, #556]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800208e:	f023 0301 	bic.w	r3, r3, #1
 8002092:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002096:	f7ff fb49 	bl	800172c <HAL_GetTick>
 800209a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800209c:	e008      	b.n	80020b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800209e:	f7ff fb45 	bl	800172c <HAL_GetTick>
 80020a2:	4602      	mov	r2, r0
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d901      	bls.n	80020b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e113      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020b0:	4b82      	ldr	r3, [pc, #520]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 80020b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b6:	f003 0302 	and.w	r3, r3, #2
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d1ef      	bne.n	800209e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8107 	beq.w	80022d6 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	f040 80cb 	bne.w	8002268 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020d2:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	f003 0203 	and.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d12c      	bne.n	8002140 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	3b01      	subs	r3, #1
 80020f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d123      	bne.n	8002140 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002102:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002104:	429a      	cmp	r2, r3
 8002106:	d11b      	bne.n	8002140 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002112:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002114:	429a      	cmp	r2, r3
 8002116:	d113      	bne.n	8002140 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002122:	085b      	lsrs	r3, r3, #1
 8002124:	3b01      	subs	r3, #1
 8002126:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d109      	bne.n	8002140 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	3b01      	subs	r3, #1
 800213a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d06d      	beq.n	800221c <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2b0c      	cmp	r3, #12
 8002144:	d068      	beq.n	8002218 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002146:	4b5d      	ldr	r3, [pc, #372]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d105      	bne.n	800215e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002152:	4b5a      	ldr	r3, [pc, #360]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e0ba      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002162:	4b56      	ldr	r3, [pc, #344]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a55      	ldr	r2, [pc, #340]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800216c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800216e:	f7ff fadd 	bl	800172c <HAL_GetTick>
 8002172:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002174:	e008      	b.n	8002188 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002176:	f7ff fad9 	bl	800172c <HAL_GetTick>
 800217a:	4602      	mov	r2, r0
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	1ad3      	subs	r3, r2, r3
 8002180:	2b02      	cmp	r3, #2
 8002182:	d901      	bls.n	8002188 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e0a7      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002188:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d1f0      	bne.n	8002176 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002194:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002196:	68da      	ldr	r2, [r3, #12]
 8002198:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_RCC_OscConfig+0x828>)
 800219a:	4013      	ands	r3, r2
 800219c:	687a      	ldr	r2, [r7, #4]
 800219e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021a4:	3a01      	subs	r2, #1
 80021a6:	0112      	lsls	r2, r2, #4
 80021a8:	4311      	orrs	r1, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021ae:	0212      	lsls	r2, r2, #8
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021b6:	0852      	lsrs	r2, r2, #1
 80021b8:	3a01      	subs	r2, #1
 80021ba:	0552      	lsls	r2, r2, #21
 80021bc:	4311      	orrs	r1, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021c2:	0852      	lsrs	r2, r2, #1
 80021c4:	3a01      	subs	r2, #1
 80021c6:	0652      	lsls	r2, r2, #25
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021ce:	06d2      	lsls	r2, r2, #27
 80021d0:	430a      	orrs	r2, r1
 80021d2:	493a      	ldr	r1, [pc, #232]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021d8:	4b38      	ldr	r3, [pc, #224]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a37      	ldr	r2, [pc, #220]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e4:	4b35      	ldr	r3, [pc, #212]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a34      	ldr	r2, [pc, #208]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 80021ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021f0:	f7ff fa9c 	bl	800172c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7ff fa98 	bl	800172c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e066      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	4b2c      	ldr	r3, [pc, #176]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002216:	e05e      	b.n	80022d6 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e05d      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221c:	4b27      	ldr	r3, [pc, #156]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d156      	bne.n	80022d6 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a23      	ldr	r2, [pc, #140]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800222e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002232:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002234:	4b21      	ldr	r3, [pc, #132]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	4a20      	ldr	r2, [pc, #128]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800223a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002240:	f7ff fa74 	bl	800172c <HAL_GetTick>
 8002244:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002246:	e008      	b.n	800225a <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002248:	f7ff fa70 	bl	800172c <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	2b02      	cmp	r3, #2
 8002254:	d901      	bls.n	800225a <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e03e      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225a:	4b18      	ldr	r3, [pc, #96]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002262:	2b00      	cmp	r3, #0
 8002264:	d0f0      	beq.n	8002248 <HAL_RCC_OscConfig+0x7b0>
 8002266:	e036      	b.n	80022d6 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2b0c      	cmp	r3, #12
 800226c:	d031      	beq.n	80022d2 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b13      	ldr	r3, [pc, #76]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a12      	ldr	r2, [pc, #72]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002278:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d105      	bne.n	8002292 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 800228c:	f023 0303 	bic.w	r3, r3, #3
 8002290:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <HAL_RCC_OscConfig+0x824>)
 8002298:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800229c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7ff fa43 	bl	800172c <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a8:	e00c      	b.n	80022c4 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7ff fa3f 	bl	800172c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d905      	bls.n	80022c4 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e00d      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
 80022bc:	40021000 	.word	0x40021000
 80022c0:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c4:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x848>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1ec      	bne.n	80022aa <HAL_RCC_OscConfig+0x812>
 80022d0:	e001      	b.n	80022d6 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	3720      	adds	r7, #32
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	40021000 	.word	0x40021000

080022e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d101      	bne.n	80022fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e10f      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022fc:	4b89      	ldr	r3, [pc, #548]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 030f 	and.w	r3, r3, #15
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d910      	bls.n	800232c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230a:	4b86      	ldr	r3, [pc, #536]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f023 020f 	bic.w	r2, r3, #15
 8002312:	4984      	ldr	r1, [pc, #528]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	4313      	orrs	r3, r2
 8002318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231a:	4b82      	ldr	r3, [pc, #520]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 030f 	and.w	r3, r3, #15
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d001      	beq.n	800232c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0f7      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8089 	beq.w	800244c <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b03      	cmp	r3, #3
 8002340:	d133      	bne.n	80023aa <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	4b79      	ldr	r3, [pc, #484]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e0e4      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002352:	f000 f9d7 	bl	8002704 <RCC_GetSysClockFreqFromPLLSource>
 8002356:	4602      	mov	r2, r0
 8002358:	4b74      	ldr	r3, [pc, #464]	; (800252c <HAL_RCC_ClockConfig+0x248>)
 800235a:	429a      	cmp	r2, r3
 800235c:	d955      	bls.n	800240a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800235e:	4b72      	ldr	r3, [pc, #456]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800236a:	4b6f      	ldr	r3, [pc, #444]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002372:	4a6d      	ldr	r2, [pc, #436]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002378:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800237a:	2380      	movs	r3, #128	; 0x80
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	e044      	b.n	800240a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0302 	and.w	r3, r3, #2
 8002388:	2b00      	cmp	r3, #0
 800238a:	d03e      	beq.n	800240a <HAL_RCC_ClockConfig+0x126>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d13a      	bne.n	800240a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002394:	4b64      	ldr	r3, [pc, #400]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800239c:	4a62      	ldr	r2, [pc, #392]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 800239e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80023a4:	2380      	movs	r3, #128	; 0x80
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	e02f      	b.n	800240a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d107      	bne.n	80023c2 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023b2:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d115      	bne.n	80023ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e0ac      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d107      	bne.n	80023da <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023ca:	4b57      	ldr	r3, [pc, #348]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d109      	bne.n	80023ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0a0      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023da:	4b53      	ldr	r3, [pc, #332]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e098      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80023ea:	f000 f8a7 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80023ee:	4602      	mov	r2, r0
 80023f0:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_RCC_ClockConfig+0x248>)
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d909      	bls.n	800240a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80023f6:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023fe:	4a4a      	ldr	r2, [pc, #296]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002400:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002404:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002406:	2380      	movs	r3, #128	; 0x80
 8002408:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800240a:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f023 0203 	bic.w	r2, r3, #3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4944      	ldr	r1, [pc, #272]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002418:	4313      	orrs	r3, r2
 800241a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800241c:	f7ff f986 	bl	800172c <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002422:	e00a      	b.n	800243a <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002424:	f7ff f982 	bl	800172c <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002432:	4293      	cmp	r3, r2
 8002434:	d901      	bls.n	800243a <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002436:	2303      	movs	r3, #3
 8002438:	e070      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	4b3b      	ldr	r3, [pc, #236]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	f003 020c 	and.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	009b      	lsls	r3, r3, #2
 8002448:	429a      	cmp	r2, r3
 800244a:	d1eb      	bne.n	8002424 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d009      	beq.n	800246c <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002458:	4b33      	ldr	r3, [pc, #204]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4930      	ldr	r1, [pc, #192]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002466:	4313      	orrs	r3, r2
 8002468:	608b      	str	r3, [r1, #8]
 800246a:	e008      	b.n	800247e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b80      	cmp	r3, #128	; 0x80
 8002470:	d105      	bne.n	800247e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002472:	4b2d      	ldr	r3, [pc, #180]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	4a2c      	ldr	r2, [pc, #176]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 8002478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800247c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800247e:	4b29      	ldr	r3, [pc, #164]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	683a      	ldr	r2, [r7, #0]
 8002488:	429a      	cmp	r2, r3
 800248a:	d210      	bcs.n	80024ae <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800248c:	4b25      	ldr	r3, [pc, #148]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f023 020f 	bic.w	r2, r3, #15
 8002494:	4923      	ldr	r1, [pc, #140]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800249c:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_RCC_ClockConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 030f 	and.w	r3, r3, #15
 80024a4:	683a      	ldr	r2, [r7, #0]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d001      	beq.n	80024ae <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e036      	b.n	800251c <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d008      	beq.n	80024cc <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ba:	4b1b      	ldr	r3, [pc, #108]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	4918      	ldr	r1, [pc, #96]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024d8:	4b13      	ldr	r3, [pc, #76]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4910      	ldr	r1, [pc, #64]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024ec:	f000 f826 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024f0:	4601      	mov	r1, r0
 80024f2:	4b0d      	ldr	r3, [pc, #52]	; (8002528 <HAL_RCC_ClockConfig+0x244>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	091b      	lsrs	r3, r3, #4
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	4a0c      	ldr	r2, [pc, #48]	; (8002530 <HAL_RCC_ClockConfig+0x24c>)
 80024fe:	5cd3      	ldrb	r3, [r2, r3]
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	fa21 f303 	lsr.w	r3, r1, r3
 8002508:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <HAL_RCC_ClockConfig+0x250>)
 800250a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <HAL_RCC_ClockConfig+0x254>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff f8bb 	bl	800168c <HAL_InitTick>
 8002516:	4603      	mov	r3, r0
 8002518:	73fb      	strb	r3, [r7, #15]

  return status;
 800251a:	7bfb      	ldrb	r3, [r7, #15]
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40022000 	.word	0x40022000
 8002528:	40021000 	.word	0x40021000
 800252c:	04c4b400 	.word	0x04c4b400
 8002530:	08006a3c 	.word	0x08006a3c
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	b089      	sub	sp, #36	; 0x24
 8002540:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	61fb      	str	r3, [r7, #28]
 8002546:	2300      	movs	r3, #0
 8002548:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_GetSysClockFreq+0x104>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002554:	4b3a      	ldr	r3, [pc, #232]	; (8002640 <HAL_RCC_GetSysClockFreq+0x104>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d005      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x34>
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	2b0c      	cmp	r3, #12
 8002568:	d121      	bne.n	80025ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d11e      	bne.n	80025ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002570:	4b33      	ldr	r3, [pc, #204]	; (8002640 <HAL_RCC_GetSysClockFreq+0x104>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d107      	bne.n	800258c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800257c:	4b30      	ldr	r3, [pc, #192]	; (8002640 <HAL_RCC_GetSysClockFreq+0x104>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 030f 	and.w	r3, r3, #15
 8002588:	61fb      	str	r3, [r7, #28]
 800258a:	e005      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800258c:	4b2c      	ldr	r3, [pc, #176]	; (8002640 <HAL_RCC_GetSysClockFreq+0x104>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002598:	4a2a      	ldr	r2, [pc, #168]	; (8002644 <HAL_RCC_GetSysClockFreq+0x108>)
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10d      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80025a8:	69fb      	ldr	r3, [r7, #28]
 80025aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	2b04      	cmp	r3, #4
 80025b2:	d102      	bne.n	80025ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025b4:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025b6:	61bb      	str	r3, [r7, #24]
 80025b8:	e004      	b.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	2b08      	cmp	r3, #8
 80025be:	d101      	bne.n	80025c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025c0:	4b22      	ldr	r3, [pc, #136]	; (800264c <HAL_RCC_GetSysClockFreq+0x110>)
 80025c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d133      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <HAL_RCC_GetSysClockFreq+0x104>)
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0303 	and.w	r3, r3, #3
 80025d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2b02      	cmp	r3, #2
 80025d8:	d002      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0xa4>
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d003      	beq.n	80025e6 <HAL_RCC_GetSysClockFreq+0xaa>
 80025de:	e005      	b.n	80025ec <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025e0:	4b19      	ldr	r3, [pc, #100]	; (8002648 <HAL_RCC_GetSysClockFreq+0x10c>)
 80025e2:	617b      	str	r3, [r7, #20]
      break;
 80025e4:	e005      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025e6:	4b19      	ldr	r3, [pc, #100]	; (800264c <HAL_RCC_GetSysClockFreq+0x110>)
 80025e8:	617b      	str	r3, [r7, #20]
      break;
 80025ea:	e002      	b.n	80025f2 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	617b      	str	r3, [r7, #20]
      break;
 80025f0:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <HAL_RCC_GetSysClockFreq+0x104>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	091b      	lsrs	r3, r3, #4
 80025f8:	f003 030f 	and.w	r3, r3, #15
 80025fc:	3301      	adds	r3, #1
 80025fe:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002600:	4b0f      	ldr	r3, [pc, #60]	; (8002640 <HAL_RCC_GetSysClockFreq+0x104>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	0a1b      	lsrs	r3, r3, #8
 8002606:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800260a:	697a      	ldr	r2, [r7, #20]
 800260c:	fb02 f203 	mul.w	r2, r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002618:	4b09      	ldr	r3, [pc, #36]	; (8002640 <HAL_RCC_GetSysClockFreq+0x104>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	0e5b      	lsrs	r3, r3, #25
 800261e:	f003 0303 	and.w	r3, r3, #3
 8002622:	3301      	adds	r3, #1
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002630:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002632:	69bb      	ldr	r3, [r7, #24]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3724      	adds	r7, #36	; 0x24
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr
 8002640:	40021000 	.word	0x40021000
 8002644:	08006a4c 	.word	0x08006a4c
 8002648:	00f42400 	.word	0x00f42400
 800264c:	007a1200 	.word	0x007a1200

08002650 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002658:	2300      	movs	r3, #0
 800265a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800265c:	4b27      	ldr	r3, [pc, #156]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800265e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002668:	f7ff f952 	bl	8001910 <HAL_PWREx_GetVoltageRange>
 800266c:	6178      	str	r0, [r7, #20]
 800266e:	e014      	b.n	800269a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002670:	4b22      	ldr	r3, [pc, #136]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002674:	4a21      	ldr	r2, [pc, #132]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267a:	6593      	str	r3, [r2, #88]	; 0x58
 800267c:	4b1f      	ldr	r3, [pc, #124]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800267e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002684:	60fb      	str	r3, [r7, #12]
 8002686:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002688:	f7ff f942 	bl	8001910 <HAL_PWREx_GetVoltageRange>
 800268c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800268e:	4b1b      	ldr	r3, [pc, #108]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002690:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002692:	4a1a      	ldr	r2, [pc, #104]	; (80026fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002694:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002698:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026a0:	d10b      	bne.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d913      	bls.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2ba0      	cmp	r3, #160	; 0xa0
 80026ac:	d902      	bls.n	80026b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026ae:	2302      	movs	r3, #2
 80026b0:	613b      	str	r3, [r7, #16]
 80026b2:	e00d      	b.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026b4:	2301      	movs	r3, #1
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e00a      	b.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b7f      	cmp	r3, #127	; 0x7f
 80026be:	d902      	bls.n	80026c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80026c0:	2302      	movs	r3, #2
 80026c2:	613b      	str	r3, [r7, #16]
 80026c4:	e004      	b.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2b70      	cmp	r3, #112	; 0x70
 80026ca:	d101      	bne.n	80026d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026cc:	2301      	movs	r3, #1
 80026ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 020f 	bic.w	r2, r3, #15
 80026d8:	4909      	ldr	r1, [pc, #36]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4313      	orrs	r3, r2
 80026de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 030f 	and.w	r3, r3, #15
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d001      	beq.n	80026f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	40022000 	.word	0x40022000

08002704 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002704:	b480      	push	{r7}
 8002706:	b087      	sub	sp, #28
 8002708:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800270e:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	f003 0303 	and.w	r3, r3, #3
 8002716:	2b01      	cmp	r3, #1
 8002718:	d118      	bne.n	800274c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800271a:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d107      	bne.n	8002736 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002726:	4b27      	ldr	r3, [pc, #156]	; (80027c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002728:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	617b      	str	r3, [r7, #20]
 8002734:	e005      	b.n	8002742 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002736:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	f003 030f 	and.w	r3, r3, #15
 8002740:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002742:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800274c:	4b1d      	ldr	r3, [pc, #116]	; (80027c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2b02      	cmp	r3, #2
 800275a:	d002      	beq.n	8002762 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800275c:	2b03      	cmp	r3, #3
 800275e:	d003      	beq.n	8002768 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002760:	e005      	b.n	800276e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002762:	4b1a      	ldr	r3, [pc, #104]	; (80027cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002764:	613b      	str	r3, [r7, #16]
    break;
 8002766:	e005      	b.n	8002774 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002768:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800276a:	613b      	str	r3, [r7, #16]
    break;
 800276c:	e002      	b.n	8002774 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	613b      	str	r3, [r7, #16]
    break;
 8002772:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002774:	4b13      	ldr	r3, [pc, #76]	; (80027c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	f003 030f 	and.w	r3, r3, #15
 800277e:	3301      	adds	r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002782:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	0a1b      	lsrs	r3, r3, #8
 8002788:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	fb02 f203 	mul.w	r2, r2, r3
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800279a:	4b0a      	ldr	r3, [pc, #40]	; (80027c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	0e5b      	lsrs	r3, r3, #25
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	3301      	adds	r3, #1
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80027aa:	693a      	ldr	r2, [r7, #16]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80027b4:	683b      	ldr	r3, [r7, #0]
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	371c      	adds	r7, #28
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	40021000 	.word	0x40021000
 80027c8:	08006a4c 	.word	0x08006a4c
 80027cc:	00f42400 	.word	0x00f42400
 80027d0:	007a1200 	.word	0x007a1200

080027d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e049      	b.n	800287a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d106      	bne.n	8002800 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f7fe fe50 	bl	80014a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	3304      	adds	r3, #4
 8002810:	4619      	mov	r1, r3
 8002812:	4610      	mov	r0, r2
 8002814:	f000 f8ee 	bl	80029f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3708      	adds	r7, #8
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}

08002882 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	b084      	sub	sp, #16
 8002886:	af00      	add	r7, sp, #0
 8002888:	6078      	str	r0, [r7, #4]
 800288a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002892:	2b01      	cmp	r3, #1
 8002894:	d101      	bne.n	800289a <HAL_TIM_ConfigClockSource+0x18>
 8002896:	2302      	movs	r3, #2
 8002898:	e0a8      	b.n	80029ec <HAL_TIM_ConfigClockSource+0x16a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2201      	movs	r2, #1
 800289e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2202      	movs	r2, #2
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028bc:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80028c4:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2b40      	cmp	r3, #64	; 0x40
 80028d4:	d067      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x124>
 80028d6:	2b40      	cmp	r3, #64	; 0x40
 80028d8:	d80b      	bhi.n	80028f2 <HAL_TIM_ConfigClockSource+0x70>
 80028da:	2b10      	cmp	r3, #16
 80028dc:	d073      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x144>
 80028de:	2b10      	cmp	r3, #16
 80028e0:	d802      	bhi.n	80028e8 <HAL_TIM_ConfigClockSource+0x66>
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d06f      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80028e6:	e078      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80028e8:	2b20      	cmp	r3, #32
 80028ea:	d06c      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x144>
 80028ec:	2b30      	cmp	r3, #48	; 0x30
 80028ee:	d06a      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x144>
      break;
 80028f0:	e073      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80028f2:	2b70      	cmp	r3, #112	; 0x70
 80028f4:	d00d      	beq.n	8002912 <HAL_TIM_ConfigClockSource+0x90>
 80028f6:	2b70      	cmp	r3, #112	; 0x70
 80028f8:	d804      	bhi.n	8002904 <HAL_TIM_ConfigClockSource+0x82>
 80028fa:	2b50      	cmp	r3, #80	; 0x50
 80028fc:	d033      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0xe4>
 80028fe:	2b60      	cmp	r3, #96	; 0x60
 8002900:	d041      	beq.n	8002986 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002902:	e06a      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002908:	d066      	beq.n	80029d8 <HAL_TIM_ConfigClockSource+0x156>
 800290a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290e:	d017      	beq.n	8002940 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002910:	e063      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6899      	ldr	r1, [r3, #8]
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	685a      	ldr	r2, [r3, #4]
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f000 f97b 	bl	8002c1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002934:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	68fa      	ldr	r2, [r7, #12]
 800293c:	609a      	str	r2, [r3, #8]
      break;
 800293e:	e04c      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6818      	ldr	r0, [r3, #0]
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6899      	ldr	r1, [r3, #8]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f000 f964 	bl	8002c1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	689a      	ldr	r2, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002962:	609a      	str	r2, [r3, #8]
      break;
 8002964:	e039      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6859      	ldr	r1, [r3, #4]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	461a      	mov	r2, r3
 8002974:	f000 f8d8 	bl	8002b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2150      	movs	r1, #80	; 0x50
 800297e:	4618      	mov	r0, r3
 8002980:	f000 f931 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 8002984:	e029      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6818      	ldr	r0, [r3, #0]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6859      	ldr	r1, [r3, #4]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	68db      	ldr	r3, [r3, #12]
 8002992:	461a      	mov	r2, r3
 8002994:	f000 f8f7 	bl	8002b86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2160      	movs	r1, #96	; 0x60
 800299e:	4618      	mov	r0, r3
 80029a0:	f000 f921 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 80029a4:	e019      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f000 f8b8 	bl	8002b28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2140      	movs	r1, #64	; 0x40
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 f911 	bl	8002be6 <TIM_ITRx_SetConfig>
      break;
 80029c4:	e009      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f000 f908 	bl	8002be6 <TIM_ITRx_SetConfig>
        break;
 80029d6:	e000      	b.n	80029da <HAL_TIM_ConfigClockSource+0x158>
      break;
 80029d8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	4618      	mov	r0, r3
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a40      	ldr	r2, [pc, #256]	; (8002b08 <TIM_Base_SetConfig+0x114>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d013      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a12:	d00f      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a3d      	ldr	r2, [pc, #244]	; (8002b0c <TIM_Base_SetConfig+0x118>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d00b      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a3c      	ldr	r2, [pc, #240]	; (8002b10 <TIM_Base_SetConfig+0x11c>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d007      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	4a3b      	ldr	r2, [pc, #236]	; (8002b14 <TIM_Base_SetConfig+0x120>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d003      	beq.n	8002a34 <TIM_Base_SetConfig+0x40>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a3a      	ldr	r2, [pc, #232]	; (8002b18 <TIM_Base_SetConfig+0x124>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d108      	bne.n	8002a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	4313      	orrs	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2f      	ldr	r2, [pc, #188]	; (8002b08 <TIM_Base_SetConfig+0x114>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01f      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a54:	d01b      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2c      	ldr	r2, [pc, #176]	; (8002b0c <TIM_Base_SetConfig+0x118>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d017      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <TIM_Base_SetConfig+0x11c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <TIM_Base_SetConfig+0x120>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00f      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a29      	ldr	r2, [pc, #164]	; (8002b18 <TIM_Base_SetConfig+0x124>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00b      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a28      	ldr	r2, [pc, #160]	; (8002b1c <TIM_Base_SetConfig+0x128>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a27      	ldr	r2, [pc, #156]	; (8002b20 <TIM_Base_SetConfig+0x12c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d003      	beq.n	8002a8e <TIM_Base_SetConfig+0x9a>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <TIM_Base_SetConfig+0x130>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d108      	bne.n	8002aa0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68fa      	ldr	r2, [r7, #12]
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	4a10      	ldr	r2, [pc, #64]	; (8002b08 <TIM_Base_SetConfig+0x114>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d00f      	beq.n	8002aec <TIM_Base_SetConfig+0xf8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	4a12      	ldr	r2, [pc, #72]	; (8002b18 <TIM_Base_SetConfig+0x124>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d00b      	beq.n	8002aec <TIM_Base_SetConfig+0xf8>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	4a11      	ldr	r2, [pc, #68]	; (8002b1c <TIM_Base_SetConfig+0x128>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d007      	beq.n	8002aec <TIM_Base_SetConfig+0xf8>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	4a10      	ldr	r2, [pc, #64]	; (8002b20 <TIM_Base_SetConfig+0x12c>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d003      	beq.n	8002aec <TIM_Base_SetConfig+0xf8>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a0f      	ldr	r2, [pc, #60]	; (8002b24 <TIM_Base_SetConfig+0x130>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d103      	bne.n	8002af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	691a      	ldr	r2, [r3, #16]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	615a      	str	r2, [r3, #20]
}
 8002afa:	bf00      	nop
 8002afc:	3714      	adds	r7, #20
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr
 8002b06:	bf00      	nop
 8002b08:	40012c00 	.word	0x40012c00
 8002b0c:	40000400 	.word	0x40000400
 8002b10:	40000800 	.word	0x40000800
 8002b14:	40000c00 	.word	0x40000c00
 8002b18:	40013400 	.word	0x40013400
 8002b1c:	40014000 	.word	0x40014000
 8002b20:	40014400 	.word	0x40014400
 8002b24:	40014800 	.word	0x40014800

08002b28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b087      	sub	sp, #28
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6a1b      	ldr	r3, [r3, #32]
 8002b38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6a1b      	ldr	r3, [r3, #32]
 8002b3e:	f023 0201 	bic.w	r2, r3, #1
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	f023 030a 	bic.w	r3, r3, #10
 8002b64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002b66:	697a      	ldr	r2, [r7, #20]
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	693a      	ldr	r2, [r7, #16]
 8002b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	621a      	str	r2, [r3, #32]
}
 8002b7a:	bf00      	nop
 8002b7c:	371c      	adds	r7, #28
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b86:	b480      	push	{r7}
 8002b88:	b087      	sub	sp, #28
 8002b8a:	af00      	add	r7, sp, #0
 8002b8c:	60f8      	str	r0, [r7, #12]
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	f023 0210 	bic.w	r2, r3, #16
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6a1b      	ldr	r3, [r3, #32]
 8002ba8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	031b      	lsls	r3, r3, #12
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002bc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	697a      	ldr	r2, [r7, #20]
 8002bd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f043 0307 	orr.w	r3, r3, #7
 8002c08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	609a      	str	r2, [r3, #8]
}
 8002c10:	bf00      	nop
 8002c12:	3714      	adds	r7, #20
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	607a      	str	r2, [r7, #4]
 8002c28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	021a      	lsls	r2, r3, #8
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	431a      	orrs	r2, r3
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	609a      	str	r2, [r3, #8]
}
 8002c50:	bf00      	nop
 8002c52:	371c      	adds	r7, #28
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr

08002c5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d101      	bne.n	8002c74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c70:	2302      	movs	r3, #2
 8002c72:	e068      	b.n	8002d46 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2e      	ldr	r2, [pc, #184]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d004      	beq.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a2d      	ldr	r2, [pc, #180]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d108      	bne.n	8002cba <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a1e      	ldr	r2, [pc, #120]	; (8002d54 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d01d      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d018      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1b      	ldr	r2, [pc, #108]	; (8002d5c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d013      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1a      	ldr	r2, [pc, #104]	; (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d00e      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a18      	ldr	r2, [pc, #96]	; (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d009      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a13      	ldr	r2, [pc, #76]	; (8002d58 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d004      	beq.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a14      	ldr	r2, [pc, #80]	; (8002d68 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d10c      	bne.n	8002d34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3714      	adds	r7, #20
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	40012c00 	.word	0x40012c00
 8002d58:	40013400 	.word	0x40013400
 8002d5c:	40000400 	.word	0x40000400
 8002d60:	40000800 	.word	0x40000800
 8002d64:	40000c00 	.word	0x40000c00
 8002d68:	40014000 	.word	0x40014000

08002d6c <__errno>:
 8002d6c:	4b01      	ldr	r3, [pc, #4]	; (8002d74 <__errno+0x8>)
 8002d6e:	6818      	ldr	r0, [r3, #0]
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	2000000c 	.word	0x2000000c

08002d78 <__libc_init_array>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	4e0d      	ldr	r6, [pc, #52]	; (8002db0 <__libc_init_array+0x38>)
 8002d7c:	4c0d      	ldr	r4, [pc, #52]	; (8002db4 <__libc_init_array+0x3c>)
 8002d7e:	1ba4      	subs	r4, r4, r6
 8002d80:	10a4      	asrs	r4, r4, #2
 8002d82:	2500      	movs	r5, #0
 8002d84:	42a5      	cmp	r5, r4
 8002d86:	d109      	bne.n	8002d9c <__libc_init_array+0x24>
 8002d88:	4e0b      	ldr	r6, [pc, #44]	; (8002db8 <__libc_init_array+0x40>)
 8002d8a:	4c0c      	ldr	r4, [pc, #48]	; (8002dbc <__libc_init_array+0x44>)
 8002d8c:	f003 fd58 	bl	8006840 <_init>
 8002d90:	1ba4      	subs	r4, r4, r6
 8002d92:	10a4      	asrs	r4, r4, #2
 8002d94:	2500      	movs	r5, #0
 8002d96:	42a5      	cmp	r5, r4
 8002d98:	d105      	bne.n	8002da6 <__libc_init_array+0x2e>
 8002d9a:	bd70      	pop	{r4, r5, r6, pc}
 8002d9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002da0:	4798      	blx	r3
 8002da2:	3501      	adds	r5, #1
 8002da4:	e7ee      	b.n	8002d84 <__libc_init_array+0xc>
 8002da6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002daa:	4798      	blx	r3
 8002dac:	3501      	adds	r5, #1
 8002dae:	e7f2      	b.n	8002d96 <__libc_init_array+0x1e>
 8002db0:	08006d30 	.word	0x08006d30
 8002db4:	08006d30 	.word	0x08006d30
 8002db8:	08006d30 	.word	0x08006d30
 8002dbc:	08006d34 	.word	0x08006d34

08002dc0 <memcpy>:
 8002dc0:	b510      	push	{r4, lr}
 8002dc2:	1e43      	subs	r3, r0, #1
 8002dc4:	440a      	add	r2, r1
 8002dc6:	4291      	cmp	r1, r2
 8002dc8:	d100      	bne.n	8002dcc <memcpy+0xc>
 8002dca:	bd10      	pop	{r4, pc}
 8002dcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dd4:	e7f7      	b.n	8002dc6 <memcpy+0x6>

08002dd6 <memset>:
 8002dd6:	4402      	add	r2, r0
 8002dd8:	4603      	mov	r3, r0
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d100      	bne.n	8002de0 <memset+0xa>
 8002dde:	4770      	bx	lr
 8002de0:	f803 1b01 	strb.w	r1, [r3], #1
 8002de4:	e7f9      	b.n	8002dda <memset+0x4>

08002de6 <__cvt>:
 8002de6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002dea:	ec55 4b10 	vmov	r4, r5, d0
 8002dee:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002df0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002df4:	2d00      	cmp	r5, #0
 8002df6:	460e      	mov	r6, r1
 8002df8:	4691      	mov	r9, r2
 8002dfa:	4619      	mov	r1, r3
 8002dfc:	bfb8      	it	lt
 8002dfe:	4622      	movlt	r2, r4
 8002e00:	462b      	mov	r3, r5
 8002e02:	f027 0720 	bic.w	r7, r7, #32
 8002e06:	bfbb      	ittet	lt
 8002e08:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002e0c:	461d      	movlt	r5, r3
 8002e0e:	2300      	movge	r3, #0
 8002e10:	232d      	movlt	r3, #45	; 0x2d
 8002e12:	bfb8      	it	lt
 8002e14:	4614      	movlt	r4, r2
 8002e16:	2f46      	cmp	r7, #70	; 0x46
 8002e18:	700b      	strb	r3, [r1, #0]
 8002e1a:	d004      	beq.n	8002e26 <__cvt+0x40>
 8002e1c:	2f45      	cmp	r7, #69	; 0x45
 8002e1e:	d100      	bne.n	8002e22 <__cvt+0x3c>
 8002e20:	3601      	adds	r6, #1
 8002e22:	2102      	movs	r1, #2
 8002e24:	e000      	b.n	8002e28 <__cvt+0x42>
 8002e26:	2103      	movs	r1, #3
 8002e28:	ab03      	add	r3, sp, #12
 8002e2a:	9301      	str	r3, [sp, #4]
 8002e2c:	ab02      	add	r3, sp, #8
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	4632      	mov	r2, r6
 8002e32:	4653      	mov	r3, sl
 8002e34:	ec45 4b10 	vmov	d0, r4, r5
 8002e38:	f001 fd76 	bl	8004928 <_dtoa_r>
 8002e3c:	2f47      	cmp	r7, #71	; 0x47
 8002e3e:	4680      	mov	r8, r0
 8002e40:	d102      	bne.n	8002e48 <__cvt+0x62>
 8002e42:	f019 0f01 	tst.w	r9, #1
 8002e46:	d026      	beq.n	8002e96 <__cvt+0xb0>
 8002e48:	2f46      	cmp	r7, #70	; 0x46
 8002e4a:	eb08 0906 	add.w	r9, r8, r6
 8002e4e:	d111      	bne.n	8002e74 <__cvt+0x8e>
 8002e50:	f898 3000 	ldrb.w	r3, [r8]
 8002e54:	2b30      	cmp	r3, #48	; 0x30
 8002e56:	d10a      	bne.n	8002e6e <__cvt+0x88>
 8002e58:	2200      	movs	r2, #0
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	4620      	mov	r0, r4
 8002e5e:	4629      	mov	r1, r5
 8002e60:	f7fd feaa 	bl	8000bb8 <__aeabi_dcmpeq>
 8002e64:	b918      	cbnz	r0, 8002e6e <__cvt+0x88>
 8002e66:	f1c6 0601 	rsb	r6, r6, #1
 8002e6a:	f8ca 6000 	str.w	r6, [sl]
 8002e6e:	f8da 3000 	ldr.w	r3, [sl]
 8002e72:	4499      	add	r9, r3
 8002e74:	2200      	movs	r2, #0
 8002e76:	2300      	movs	r3, #0
 8002e78:	4620      	mov	r0, r4
 8002e7a:	4629      	mov	r1, r5
 8002e7c:	f7fd fe9c 	bl	8000bb8 <__aeabi_dcmpeq>
 8002e80:	b938      	cbnz	r0, 8002e92 <__cvt+0xac>
 8002e82:	2230      	movs	r2, #48	; 0x30
 8002e84:	9b03      	ldr	r3, [sp, #12]
 8002e86:	454b      	cmp	r3, r9
 8002e88:	d205      	bcs.n	8002e96 <__cvt+0xb0>
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	9103      	str	r1, [sp, #12]
 8002e8e:	701a      	strb	r2, [r3, #0]
 8002e90:	e7f8      	b.n	8002e84 <__cvt+0x9e>
 8002e92:	f8cd 900c 	str.w	r9, [sp, #12]
 8002e96:	9b03      	ldr	r3, [sp, #12]
 8002e98:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002e9a:	eba3 0308 	sub.w	r3, r3, r8
 8002e9e:	4640      	mov	r0, r8
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	b004      	add	sp, #16
 8002ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ea8 <__exponent>:
 8002ea8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002eaa:	2900      	cmp	r1, #0
 8002eac:	4604      	mov	r4, r0
 8002eae:	bfba      	itte	lt
 8002eb0:	4249      	neglt	r1, r1
 8002eb2:	232d      	movlt	r3, #45	; 0x2d
 8002eb4:	232b      	movge	r3, #43	; 0x2b
 8002eb6:	2909      	cmp	r1, #9
 8002eb8:	f804 2b02 	strb.w	r2, [r4], #2
 8002ebc:	7043      	strb	r3, [r0, #1]
 8002ebe:	dd20      	ble.n	8002f02 <__exponent+0x5a>
 8002ec0:	f10d 0307 	add.w	r3, sp, #7
 8002ec4:	461f      	mov	r7, r3
 8002ec6:	260a      	movs	r6, #10
 8002ec8:	fb91 f5f6 	sdiv	r5, r1, r6
 8002ecc:	fb06 1115 	mls	r1, r6, r5, r1
 8002ed0:	3130      	adds	r1, #48	; 0x30
 8002ed2:	2d09      	cmp	r5, #9
 8002ed4:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002ed8:	f103 32ff 	add.w	r2, r3, #4294967295
 8002edc:	4629      	mov	r1, r5
 8002ede:	dc09      	bgt.n	8002ef4 <__exponent+0x4c>
 8002ee0:	3130      	adds	r1, #48	; 0x30
 8002ee2:	3b02      	subs	r3, #2
 8002ee4:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002ee8:	42bb      	cmp	r3, r7
 8002eea:	4622      	mov	r2, r4
 8002eec:	d304      	bcc.n	8002ef8 <__exponent+0x50>
 8002eee:	1a10      	subs	r0, r2, r0
 8002ef0:	b003      	add	sp, #12
 8002ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	e7e7      	b.n	8002ec8 <__exponent+0x20>
 8002ef8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002efc:	f804 2b01 	strb.w	r2, [r4], #1
 8002f00:	e7f2      	b.n	8002ee8 <__exponent+0x40>
 8002f02:	2330      	movs	r3, #48	; 0x30
 8002f04:	4419      	add	r1, r3
 8002f06:	7083      	strb	r3, [r0, #2]
 8002f08:	1d02      	adds	r2, r0, #4
 8002f0a:	70c1      	strb	r1, [r0, #3]
 8002f0c:	e7ef      	b.n	8002eee <__exponent+0x46>
	...

08002f10 <_printf_float>:
 8002f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f14:	b08d      	sub	sp, #52	; 0x34
 8002f16:	460c      	mov	r4, r1
 8002f18:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002f1c:	4616      	mov	r6, r2
 8002f1e:	461f      	mov	r7, r3
 8002f20:	4605      	mov	r5, r0
 8002f22:	f002 fde5 	bl	8005af0 <_localeconv_r>
 8002f26:	6803      	ldr	r3, [r0, #0]
 8002f28:	9304      	str	r3, [sp, #16]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7fd f9c3 	bl	80002b6 <strlen>
 8002f30:	2300      	movs	r3, #0
 8002f32:	930a      	str	r3, [sp, #40]	; 0x28
 8002f34:	f8d8 3000 	ldr.w	r3, [r8]
 8002f38:	9005      	str	r0, [sp, #20]
 8002f3a:	3307      	adds	r3, #7
 8002f3c:	f023 0307 	bic.w	r3, r3, #7
 8002f40:	f103 0208 	add.w	r2, r3, #8
 8002f44:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002f48:	f8d4 b000 	ldr.w	fp, [r4]
 8002f4c:	f8c8 2000 	str.w	r2, [r8]
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002f58:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002f5c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002f60:	9307      	str	r3, [sp, #28]
 8002f62:	f8cd 8018 	str.w	r8, [sp, #24]
 8002f66:	f04f 32ff 	mov.w	r2, #4294967295
 8002f6a:	4ba7      	ldr	r3, [pc, #668]	; (8003208 <_printf_float+0x2f8>)
 8002f6c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f70:	f7fd fe54 	bl	8000c1c <__aeabi_dcmpun>
 8002f74:	bb70      	cbnz	r0, 8002fd4 <_printf_float+0xc4>
 8002f76:	f04f 32ff 	mov.w	r2, #4294967295
 8002f7a:	4ba3      	ldr	r3, [pc, #652]	; (8003208 <_printf_float+0x2f8>)
 8002f7c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002f80:	f7fd fe2e 	bl	8000be0 <__aeabi_dcmple>
 8002f84:	bb30      	cbnz	r0, 8002fd4 <_printf_float+0xc4>
 8002f86:	2200      	movs	r2, #0
 8002f88:	2300      	movs	r3, #0
 8002f8a:	4640      	mov	r0, r8
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	f7fd fe1d 	bl	8000bcc <__aeabi_dcmplt>
 8002f92:	b110      	cbz	r0, 8002f9a <_printf_float+0x8a>
 8002f94:	232d      	movs	r3, #45	; 0x2d
 8002f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f9a:	4a9c      	ldr	r2, [pc, #624]	; (800320c <_printf_float+0x2fc>)
 8002f9c:	4b9c      	ldr	r3, [pc, #624]	; (8003210 <_printf_float+0x300>)
 8002f9e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002fa2:	bf8c      	ite	hi
 8002fa4:	4690      	movhi	r8, r2
 8002fa6:	4698      	movls	r8, r3
 8002fa8:	2303      	movs	r3, #3
 8002faa:	f02b 0204 	bic.w	r2, fp, #4
 8002fae:	6123      	str	r3, [r4, #16]
 8002fb0:	6022      	str	r2, [r4, #0]
 8002fb2:	f04f 0900 	mov.w	r9, #0
 8002fb6:	9700      	str	r7, [sp, #0]
 8002fb8:	4633      	mov	r3, r6
 8002fba:	aa0b      	add	r2, sp, #44	; 0x2c
 8002fbc:	4621      	mov	r1, r4
 8002fbe:	4628      	mov	r0, r5
 8002fc0:	f000 f9e6 	bl	8003390 <_printf_common>
 8002fc4:	3001      	adds	r0, #1
 8002fc6:	f040 808d 	bne.w	80030e4 <_printf_float+0x1d4>
 8002fca:	f04f 30ff 	mov.w	r0, #4294967295
 8002fce:	b00d      	add	sp, #52	; 0x34
 8002fd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fd4:	4642      	mov	r2, r8
 8002fd6:	464b      	mov	r3, r9
 8002fd8:	4640      	mov	r0, r8
 8002fda:	4649      	mov	r1, r9
 8002fdc:	f7fd fe1e 	bl	8000c1c <__aeabi_dcmpun>
 8002fe0:	b110      	cbz	r0, 8002fe8 <_printf_float+0xd8>
 8002fe2:	4a8c      	ldr	r2, [pc, #560]	; (8003214 <_printf_float+0x304>)
 8002fe4:	4b8c      	ldr	r3, [pc, #560]	; (8003218 <_printf_float+0x308>)
 8002fe6:	e7da      	b.n	8002f9e <_printf_float+0x8e>
 8002fe8:	6861      	ldr	r1, [r4, #4]
 8002fea:	1c4b      	adds	r3, r1, #1
 8002fec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002ff0:	a80a      	add	r0, sp, #40	; 0x28
 8002ff2:	d13e      	bne.n	8003072 <_printf_float+0x162>
 8002ff4:	2306      	movs	r3, #6
 8002ff6:	6063      	str	r3, [r4, #4]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002ffe:	ab09      	add	r3, sp, #36	; 0x24
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	ec49 8b10 	vmov	d0, r8, r9
 8003006:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800300a:	6022      	str	r2, [r4, #0]
 800300c:	f8cd a004 	str.w	sl, [sp, #4]
 8003010:	6861      	ldr	r1, [r4, #4]
 8003012:	4628      	mov	r0, r5
 8003014:	f7ff fee7 	bl	8002de6 <__cvt>
 8003018:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800301c:	2b47      	cmp	r3, #71	; 0x47
 800301e:	4680      	mov	r8, r0
 8003020:	d109      	bne.n	8003036 <_printf_float+0x126>
 8003022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003024:	1cd8      	adds	r0, r3, #3
 8003026:	db02      	blt.n	800302e <_printf_float+0x11e>
 8003028:	6862      	ldr	r2, [r4, #4]
 800302a:	4293      	cmp	r3, r2
 800302c:	dd47      	ble.n	80030be <_printf_float+0x1ae>
 800302e:	f1aa 0a02 	sub.w	sl, sl, #2
 8003032:	fa5f fa8a 	uxtb.w	sl, sl
 8003036:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800303a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800303c:	d824      	bhi.n	8003088 <_printf_float+0x178>
 800303e:	3901      	subs	r1, #1
 8003040:	4652      	mov	r2, sl
 8003042:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003046:	9109      	str	r1, [sp, #36]	; 0x24
 8003048:	f7ff ff2e 	bl	8002ea8 <__exponent>
 800304c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800304e:	1813      	adds	r3, r2, r0
 8003050:	2a01      	cmp	r2, #1
 8003052:	4681      	mov	r9, r0
 8003054:	6123      	str	r3, [r4, #16]
 8003056:	dc02      	bgt.n	800305e <_printf_float+0x14e>
 8003058:	6822      	ldr	r2, [r4, #0]
 800305a:	07d1      	lsls	r1, r2, #31
 800305c:	d501      	bpl.n	8003062 <_printf_float+0x152>
 800305e:	3301      	adds	r3, #1
 8003060:	6123      	str	r3, [r4, #16]
 8003062:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0a5      	beq.n	8002fb6 <_printf_float+0xa6>
 800306a:	232d      	movs	r3, #45	; 0x2d
 800306c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003070:	e7a1      	b.n	8002fb6 <_printf_float+0xa6>
 8003072:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8003076:	f000 8177 	beq.w	8003368 <_printf_float+0x458>
 800307a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800307e:	d1bb      	bne.n	8002ff8 <_printf_float+0xe8>
 8003080:	2900      	cmp	r1, #0
 8003082:	d1b9      	bne.n	8002ff8 <_printf_float+0xe8>
 8003084:	2301      	movs	r3, #1
 8003086:	e7b6      	b.n	8002ff6 <_printf_float+0xe6>
 8003088:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800308c:	d119      	bne.n	80030c2 <_printf_float+0x1b2>
 800308e:	2900      	cmp	r1, #0
 8003090:	6863      	ldr	r3, [r4, #4]
 8003092:	dd0c      	ble.n	80030ae <_printf_float+0x19e>
 8003094:	6121      	str	r1, [r4, #16]
 8003096:	b913      	cbnz	r3, 800309e <_printf_float+0x18e>
 8003098:	6822      	ldr	r2, [r4, #0]
 800309a:	07d2      	lsls	r2, r2, #31
 800309c:	d502      	bpl.n	80030a4 <_printf_float+0x194>
 800309e:	3301      	adds	r3, #1
 80030a0:	440b      	add	r3, r1
 80030a2:	6123      	str	r3, [r4, #16]
 80030a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030a6:	65a3      	str	r3, [r4, #88]	; 0x58
 80030a8:	f04f 0900 	mov.w	r9, #0
 80030ac:	e7d9      	b.n	8003062 <_printf_float+0x152>
 80030ae:	b913      	cbnz	r3, 80030b6 <_printf_float+0x1a6>
 80030b0:	6822      	ldr	r2, [r4, #0]
 80030b2:	07d0      	lsls	r0, r2, #31
 80030b4:	d501      	bpl.n	80030ba <_printf_float+0x1aa>
 80030b6:	3302      	adds	r3, #2
 80030b8:	e7f3      	b.n	80030a2 <_printf_float+0x192>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e7f1      	b.n	80030a2 <_printf_float+0x192>
 80030be:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80030c2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80030c6:	4293      	cmp	r3, r2
 80030c8:	db05      	blt.n	80030d6 <_printf_float+0x1c6>
 80030ca:	6822      	ldr	r2, [r4, #0]
 80030cc:	6123      	str	r3, [r4, #16]
 80030ce:	07d1      	lsls	r1, r2, #31
 80030d0:	d5e8      	bpl.n	80030a4 <_printf_float+0x194>
 80030d2:	3301      	adds	r3, #1
 80030d4:	e7e5      	b.n	80030a2 <_printf_float+0x192>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	bfd4      	ite	le
 80030da:	f1c3 0302 	rsble	r3, r3, #2
 80030de:	2301      	movgt	r3, #1
 80030e0:	4413      	add	r3, r2
 80030e2:	e7de      	b.n	80030a2 <_printf_float+0x192>
 80030e4:	6823      	ldr	r3, [r4, #0]
 80030e6:	055a      	lsls	r2, r3, #21
 80030e8:	d407      	bmi.n	80030fa <_printf_float+0x1ea>
 80030ea:	6923      	ldr	r3, [r4, #16]
 80030ec:	4642      	mov	r2, r8
 80030ee:	4631      	mov	r1, r6
 80030f0:	4628      	mov	r0, r5
 80030f2:	47b8      	blx	r7
 80030f4:	3001      	adds	r0, #1
 80030f6:	d12b      	bne.n	8003150 <_printf_float+0x240>
 80030f8:	e767      	b.n	8002fca <_printf_float+0xba>
 80030fa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80030fe:	f240 80dc 	bls.w	80032ba <_printf_float+0x3aa>
 8003102:	2200      	movs	r2, #0
 8003104:	2300      	movs	r3, #0
 8003106:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800310a:	f7fd fd55 	bl	8000bb8 <__aeabi_dcmpeq>
 800310e:	2800      	cmp	r0, #0
 8003110:	d033      	beq.n	800317a <_printf_float+0x26a>
 8003112:	2301      	movs	r3, #1
 8003114:	4a41      	ldr	r2, [pc, #260]	; (800321c <_printf_float+0x30c>)
 8003116:	4631      	mov	r1, r6
 8003118:	4628      	mov	r0, r5
 800311a:	47b8      	blx	r7
 800311c:	3001      	adds	r0, #1
 800311e:	f43f af54 	beq.w	8002fca <_printf_float+0xba>
 8003122:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003126:	429a      	cmp	r2, r3
 8003128:	db02      	blt.n	8003130 <_printf_float+0x220>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	07d8      	lsls	r0, r3, #31
 800312e:	d50f      	bpl.n	8003150 <_printf_float+0x240>
 8003130:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003134:	4631      	mov	r1, r6
 8003136:	4628      	mov	r0, r5
 8003138:	47b8      	blx	r7
 800313a:	3001      	adds	r0, #1
 800313c:	f43f af45 	beq.w	8002fca <_printf_float+0xba>
 8003140:	f04f 0800 	mov.w	r8, #0
 8003144:	f104 091a 	add.w	r9, r4, #26
 8003148:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800314a:	3b01      	subs	r3, #1
 800314c:	4543      	cmp	r3, r8
 800314e:	dc09      	bgt.n	8003164 <_printf_float+0x254>
 8003150:	6823      	ldr	r3, [r4, #0]
 8003152:	079b      	lsls	r3, r3, #30
 8003154:	f100 8103 	bmi.w	800335e <_printf_float+0x44e>
 8003158:	68e0      	ldr	r0, [r4, #12]
 800315a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800315c:	4298      	cmp	r0, r3
 800315e:	bfb8      	it	lt
 8003160:	4618      	movlt	r0, r3
 8003162:	e734      	b.n	8002fce <_printf_float+0xbe>
 8003164:	2301      	movs	r3, #1
 8003166:	464a      	mov	r2, r9
 8003168:	4631      	mov	r1, r6
 800316a:	4628      	mov	r0, r5
 800316c:	47b8      	blx	r7
 800316e:	3001      	adds	r0, #1
 8003170:	f43f af2b 	beq.w	8002fca <_printf_float+0xba>
 8003174:	f108 0801 	add.w	r8, r8, #1
 8003178:	e7e6      	b.n	8003148 <_printf_float+0x238>
 800317a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800317c:	2b00      	cmp	r3, #0
 800317e:	dc2b      	bgt.n	80031d8 <_printf_float+0x2c8>
 8003180:	2301      	movs	r3, #1
 8003182:	4a26      	ldr	r2, [pc, #152]	; (800321c <_printf_float+0x30c>)
 8003184:	4631      	mov	r1, r6
 8003186:	4628      	mov	r0, r5
 8003188:	47b8      	blx	r7
 800318a:	3001      	adds	r0, #1
 800318c:	f43f af1d 	beq.w	8002fca <_printf_float+0xba>
 8003190:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003192:	b923      	cbnz	r3, 800319e <_printf_float+0x28e>
 8003194:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003196:	b913      	cbnz	r3, 800319e <_printf_float+0x28e>
 8003198:	6823      	ldr	r3, [r4, #0]
 800319a:	07d9      	lsls	r1, r3, #31
 800319c:	d5d8      	bpl.n	8003150 <_printf_float+0x240>
 800319e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031a2:	4631      	mov	r1, r6
 80031a4:	4628      	mov	r0, r5
 80031a6:	47b8      	blx	r7
 80031a8:	3001      	adds	r0, #1
 80031aa:	f43f af0e 	beq.w	8002fca <_printf_float+0xba>
 80031ae:	f04f 0900 	mov.w	r9, #0
 80031b2:	f104 0a1a 	add.w	sl, r4, #26
 80031b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80031b8:	425b      	negs	r3, r3
 80031ba:	454b      	cmp	r3, r9
 80031bc:	dc01      	bgt.n	80031c2 <_printf_float+0x2b2>
 80031be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031c0:	e794      	b.n	80030ec <_printf_float+0x1dc>
 80031c2:	2301      	movs	r3, #1
 80031c4:	4652      	mov	r2, sl
 80031c6:	4631      	mov	r1, r6
 80031c8:	4628      	mov	r0, r5
 80031ca:	47b8      	blx	r7
 80031cc:	3001      	adds	r0, #1
 80031ce:	f43f aefc 	beq.w	8002fca <_printf_float+0xba>
 80031d2:	f109 0901 	add.w	r9, r9, #1
 80031d6:	e7ee      	b.n	80031b6 <_printf_float+0x2a6>
 80031d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031dc:	429a      	cmp	r2, r3
 80031de:	bfa8      	it	ge
 80031e0:	461a      	movge	r2, r3
 80031e2:	2a00      	cmp	r2, #0
 80031e4:	4691      	mov	r9, r2
 80031e6:	dd07      	ble.n	80031f8 <_printf_float+0x2e8>
 80031e8:	4613      	mov	r3, r2
 80031ea:	4631      	mov	r1, r6
 80031ec:	4642      	mov	r2, r8
 80031ee:	4628      	mov	r0, r5
 80031f0:	47b8      	blx	r7
 80031f2:	3001      	adds	r0, #1
 80031f4:	f43f aee9 	beq.w	8002fca <_printf_float+0xba>
 80031f8:	f104 031a 	add.w	r3, r4, #26
 80031fc:	f04f 0b00 	mov.w	fp, #0
 8003200:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003204:	9306      	str	r3, [sp, #24]
 8003206:	e015      	b.n	8003234 <_printf_float+0x324>
 8003208:	7fefffff 	.word	0x7fefffff
 800320c:	08006a80 	.word	0x08006a80
 8003210:	08006a7c 	.word	0x08006a7c
 8003214:	08006a88 	.word	0x08006a88
 8003218:	08006a84 	.word	0x08006a84
 800321c:	08006a8c 	.word	0x08006a8c
 8003220:	2301      	movs	r3, #1
 8003222:	9a06      	ldr	r2, [sp, #24]
 8003224:	4631      	mov	r1, r6
 8003226:	4628      	mov	r0, r5
 8003228:	47b8      	blx	r7
 800322a:	3001      	adds	r0, #1
 800322c:	f43f aecd 	beq.w	8002fca <_printf_float+0xba>
 8003230:	f10b 0b01 	add.w	fp, fp, #1
 8003234:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003238:	ebaa 0309 	sub.w	r3, sl, r9
 800323c:	455b      	cmp	r3, fp
 800323e:	dcef      	bgt.n	8003220 <_printf_float+0x310>
 8003240:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003244:	429a      	cmp	r2, r3
 8003246:	44d0      	add	r8, sl
 8003248:	db15      	blt.n	8003276 <_printf_float+0x366>
 800324a:	6823      	ldr	r3, [r4, #0]
 800324c:	07da      	lsls	r2, r3, #31
 800324e:	d412      	bmi.n	8003276 <_printf_float+0x366>
 8003250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003252:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003254:	eba3 020a 	sub.w	r2, r3, sl
 8003258:	eba3 0a01 	sub.w	sl, r3, r1
 800325c:	4592      	cmp	sl, r2
 800325e:	bfa8      	it	ge
 8003260:	4692      	movge	sl, r2
 8003262:	f1ba 0f00 	cmp.w	sl, #0
 8003266:	dc0e      	bgt.n	8003286 <_printf_float+0x376>
 8003268:	f04f 0800 	mov.w	r8, #0
 800326c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003270:	f104 091a 	add.w	r9, r4, #26
 8003274:	e019      	b.n	80032aa <_printf_float+0x39a>
 8003276:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800327a:	4631      	mov	r1, r6
 800327c:	4628      	mov	r0, r5
 800327e:	47b8      	blx	r7
 8003280:	3001      	adds	r0, #1
 8003282:	d1e5      	bne.n	8003250 <_printf_float+0x340>
 8003284:	e6a1      	b.n	8002fca <_printf_float+0xba>
 8003286:	4653      	mov	r3, sl
 8003288:	4642      	mov	r2, r8
 800328a:	4631      	mov	r1, r6
 800328c:	4628      	mov	r0, r5
 800328e:	47b8      	blx	r7
 8003290:	3001      	adds	r0, #1
 8003292:	d1e9      	bne.n	8003268 <_printf_float+0x358>
 8003294:	e699      	b.n	8002fca <_printf_float+0xba>
 8003296:	2301      	movs	r3, #1
 8003298:	464a      	mov	r2, r9
 800329a:	4631      	mov	r1, r6
 800329c:	4628      	mov	r0, r5
 800329e:	47b8      	blx	r7
 80032a0:	3001      	adds	r0, #1
 80032a2:	f43f ae92 	beq.w	8002fca <_printf_float+0xba>
 80032a6:	f108 0801 	add.w	r8, r8, #1
 80032aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	eba3 030a 	sub.w	r3, r3, sl
 80032b4:	4543      	cmp	r3, r8
 80032b6:	dcee      	bgt.n	8003296 <_printf_float+0x386>
 80032b8:	e74a      	b.n	8003150 <_printf_float+0x240>
 80032ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80032bc:	2a01      	cmp	r2, #1
 80032be:	dc01      	bgt.n	80032c4 <_printf_float+0x3b4>
 80032c0:	07db      	lsls	r3, r3, #31
 80032c2:	d53a      	bpl.n	800333a <_printf_float+0x42a>
 80032c4:	2301      	movs	r3, #1
 80032c6:	4642      	mov	r2, r8
 80032c8:	4631      	mov	r1, r6
 80032ca:	4628      	mov	r0, r5
 80032cc:	47b8      	blx	r7
 80032ce:	3001      	adds	r0, #1
 80032d0:	f43f ae7b 	beq.w	8002fca <_printf_float+0xba>
 80032d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80032d8:	4631      	mov	r1, r6
 80032da:	4628      	mov	r0, r5
 80032dc:	47b8      	blx	r7
 80032de:	3001      	adds	r0, #1
 80032e0:	f108 0801 	add.w	r8, r8, #1
 80032e4:	f43f ae71 	beq.w	8002fca <_printf_float+0xba>
 80032e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80032ea:	2200      	movs	r2, #0
 80032ec:	f103 3aff 	add.w	sl, r3, #4294967295
 80032f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80032f4:	2300      	movs	r3, #0
 80032f6:	f7fd fc5f 	bl	8000bb8 <__aeabi_dcmpeq>
 80032fa:	b9c8      	cbnz	r0, 8003330 <_printf_float+0x420>
 80032fc:	4653      	mov	r3, sl
 80032fe:	4642      	mov	r2, r8
 8003300:	4631      	mov	r1, r6
 8003302:	4628      	mov	r0, r5
 8003304:	47b8      	blx	r7
 8003306:	3001      	adds	r0, #1
 8003308:	d10e      	bne.n	8003328 <_printf_float+0x418>
 800330a:	e65e      	b.n	8002fca <_printf_float+0xba>
 800330c:	2301      	movs	r3, #1
 800330e:	4652      	mov	r2, sl
 8003310:	4631      	mov	r1, r6
 8003312:	4628      	mov	r0, r5
 8003314:	47b8      	blx	r7
 8003316:	3001      	adds	r0, #1
 8003318:	f43f ae57 	beq.w	8002fca <_printf_float+0xba>
 800331c:	f108 0801 	add.w	r8, r8, #1
 8003320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003322:	3b01      	subs	r3, #1
 8003324:	4543      	cmp	r3, r8
 8003326:	dcf1      	bgt.n	800330c <_printf_float+0x3fc>
 8003328:	464b      	mov	r3, r9
 800332a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800332e:	e6de      	b.n	80030ee <_printf_float+0x1de>
 8003330:	f04f 0800 	mov.w	r8, #0
 8003334:	f104 0a1a 	add.w	sl, r4, #26
 8003338:	e7f2      	b.n	8003320 <_printf_float+0x410>
 800333a:	2301      	movs	r3, #1
 800333c:	e7df      	b.n	80032fe <_printf_float+0x3ee>
 800333e:	2301      	movs	r3, #1
 8003340:	464a      	mov	r2, r9
 8003342:	4631      	mov	r1, r6
 8003344:	4628      	mov	r0, r5
 8003346:	47b8      	blx	r7
 8003348:	3001      	adds	r0, #1
 800334a:	f43f ae3e 	beq.w	8002fca <_printf_float+0xba>
 800334e:	f108 0801 	add.w	r8, r8, #1
 8003352:	68e3      	ldr	r3, [r4, #12]
 8003354:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003356:	1a9b      	subs	r3, r3, r2
 8003358:	4543      	cmp	r3, r8
 800335a:	dcf0      	bgt.n	800333e <_printf_float+0x42e>
 800335c:	e6fc      	b.n	8003158 <_printf_float+0x248>
 800335e:	f04f 0800 	mov.w	r8, #0
 8003362:	f104 0919 	add.w	r9, r4, #25
 8003366:	e7f4      	b.n	8003352 <_printf_float+0x442>
 8003368:	2900      	cmp	r1, #0
 800336a:	f43f ae8b 	beq.w	8003084 <_printf_float+0x174>
 800336e:	2300      	movs	r3, #0
 8003370:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003374:	ab09      	add	r3, sp, #36	; 0x24
 8003376:	9300      	str	r3, [sp, #0]
 8003378:	ec49 8b10 	vmov	d0, r8, r9
 800337c:	6022      	str	r2, [r4, #0]
 800337e:	f8cd a004 	str.w	sl, [sp, #4]
 8003382:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003386:	4628      	mov	r0, r5
 8003388:	f7ff fd2d 	bl	8002de6 <__cvt>
 800338c:	4680      	mov	r8, r0
 800338e:	e648      	b.n	8003022 <_printf_float+0x112>

08003390 <_printf_common>:
 8003390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003394:	4691      	mov	r9, r2
 8003396:	461f      	mov	r7, r3
 8003398:	688a      	ldr	r2, [r1, #8]
 800339a:	690b      	ldr	r3, [r1, #16]
 800339c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033a0:	4293      	cmp	r3, r2
 80033a2:	bfb8      	it	lt
 80033a4:	4613      	movlt	r3, r2
 80033a6:	f8c9 3000 	str.w	r3, [r9]
 80033aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033ae:	4606      	mov	r6, r0
 80033b0:	460c      	mov	r4, r1
 80033b2:	b112      	cbz	r2, 80033ba <_printf_common+0x2a>
 80033b4:	3301      	adds	r3, #1
 80033b6:	f8c9 3000 	str.w	r3, [r9]
 80033ba:	6823      	ldr	r3, [r4, #0]
 80033bc:	0699      	lsls	r1, r3, #26
 80033be:	bf42      	ittt	mi
 80033c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80033c4:	3302      	addmi	r3, #2
 80033c6:	f8c9 3000 	strmi.w	r3, [r9]
 80033ca:	6825      	ldr	r5, [r4, #0]
 80033cc:	f015 0506 	ands.w	r5, r5, #6
 80033d0:	d107      	bne.n	80033e2 <_printf_common+0x52>
 80033d2:	f104 0a19 	add.w	sl, r4, #25
 80033d6:	68e3      	ldr	r3, [r4, #12]
 80033d8:	f8d9 2000 	ldr.w	r2, [r9]
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	42ab      	cmp	r3, r5
 80033e0:	dc28      	bgt.n	8003434 <_printf_common+0xa4>
 80033e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	3300      	adds	r3, #0
 80033ea:	bf18      	it	ne
 80033ec:	2301      	movne	r3, #1
 80033ee:	0692      	lsls	r2, r2, #26
 80033f0:	d42d      	bmi.n	800344e <_printf_common+0xbe>
 80033f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80033f6:	4639      	mov	r1, r7
 80033f8:	4630      	mov	r0, r6
 80033fa:	47c0      	blx	r8
 80033fc:	3001      	adds	r0, #1
 80033fe:	d020      	beq.n	8003442 <_printf_common+0xb2>
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	68e5      	ldr	r5, [r4, #12]
 8003404:	f8d9 2000 	ldr.w	r2, [r9]
 8003408:	f003 0306 	and.w	r3, r3, #6
 800340c:	2b04      	cmp	r3, #4
 800340e:	bf08      	it	eq
 8003410:	1aad      	subeq	r5, r5, r2
 8003412:	68a3      	ldr	r3, [r4, #8]
 8003414:	6922      	ldr	r2, [r4, #16]
 8003416:	bf0c      	ite	eq
 8003418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800341c:	2500      	movne	r5, #0
 800341e:	4293      	cmp	r3, r2
 8003420:	bfc4      	itt	gt
 8003422:	1a9b      	subgt	r3, r3, r2
 8003424:	18ed      	addgt	r5, r5, r3
 8003426:	f04f 0900 	mov.w	r9, #0
 800342a:	341a      	adds	r4, #26
 800342c:	454d      	cmp	r5, r9
 800342e:	d11a      	bne.n	8003466 <_printf_common+0xd6>
 8003430:	2000      	movs	r0, #0
 8003432:	e008      	b.n	8003446 <_printf_common+0xb6>
 8003434:	2301      	movs	r3, #1
 8003436:	4652      	mov	r2, sl
 8003438:	4639      	mov	r1, r7
 800343a:	4630      	mov	r0, r6
 800343c:	47c0      	blx	r8
 800343e:	3001      	adds	r0, #1
 8003440:	d103      	bne.n	800344a <_printf_common+0xba>
 8003442:	f04f 30ff 	mov.w	r0, #4294967295
 8003446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800344a:	3501      	adds	r5, #1
 800344c:	e7c3      	b.n	80033d6 <_printf_common+0x46>
 800344e:	18e1      	adds	r1, r4, r3
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	2030      	movs	r0, #48	; 0x30
 8003454:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003458:	4422      	add	r2, r4
 800345a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800345e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003462:	3302      	adds	r3, #2
 8003464:	e7c5      	b.n	80033f2 <_printf_common+0x62>
 8003466:	2301      	movs	r3, #1
 8003468:	4622      	mov	r2, r4
 800346a:	4639      	mov	r1, r7
 800346c:	4630      	mov	r0, r6
 800346e:	47c0      	blx	r8
 8003470:	3001      	adds	r0, #1
 8003472:	d0e6      	beq.n	8003442 <_printf_common+0xb2>
 8003474:	f109 0901 	add.w	r9, r9, #1
 8003478:	e7d8      	b.n	800342c <_printf_common+0x9c>
	...

0800347c <_printf_i>:
 800347c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003480:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003484:	460c      	mov	r4, r1
 8003486:	7e09      	ldrb	r1, [r1, #24]
 8003488:	b085      	sub	sp, #20
 800348a:	296e      	cmp	r1, #110	; 0x6e
 800348c:	4617      	mov	r7, r2
 800348e:	4606      	mov	r6, r0
 8003490:	4698      	mov	r8, r3
 8003492:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003494:	f000 80b3 	beq.w	80035fe <_printf_i+0x182>
 8003498:	d822      	bhi.n	80034e0 <_printf_i+0x64>
 800349a:	2963      	cmp	r1, #99	; 0x63
 800349c:	d036      	beq.n	800350c <_printf_i+0x90>
 800349e:	d80a      	bhi.n	80034b6 <_printf_i+0x3a>
 80034a0:	2900      	cmp	r1, #0
 80034a2:	f000 80b9 	beq.w	8003618 <_printf_i+0x19c>
 80034a6:	2958      	cmp	r1, #88	; 0x58
 80034a8:	f000 8083 	beq.w	80035b2 <_printf_i+0x136>
 80034ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80034b4:	e032      	b.n	800351c <_printf_i+0xa0>
 80034b6:	2964      	cmp	r1, #100	; 0x64
 80034b8:	d001      	beq.n	80034be <_printf_i+0x42>
 80034ba:	2969      	cmp	r1, #105	; 0x69
 80034bc:	d1f6      	bne.n	80034ac <_printf_i+0x30>
 80034be:	6820      	ldr	r0, [r4, #0]
 80034c0:	6813      	ldr	r3, [r2, #0]
 80034c2:	0605      	lsls	r5, r0, #24
 80034c4:	f103 0104 	add.w	r1, r3, #4
 80034c8:	d52a      	bpl.n	8003520 <_printf_i+0xa4>
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6011      	str	r1, [r2, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	da03      	bge.n	80034da <_printf_i+0x5e>
 80034d2:	222d      	movs	r2, #45	; 0x2d
 80034d4:	425b      	negs	r3, r3
 80034d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80034da:	486f      	ldr	r0, [pc, #444]	; (8003698 <_printf_i+0x21c>)
 80034dc:	220a      	movs	r2, #10
 80034de:	e039      	b.n	8003554 <_printf_i+0xd8>
 80034e0:	2973      	cmp	r1, #115	; 0x73
 80034e2:	f000 809d 	beq.w	8003620 <_printf_i+0x1a4>
 80034e6:	d808      	bhi.n	80034fa <_printf_i+0x7e>
 80034e8:	296f      	cmp	r1, #111	; 0x6f
 80034ea:	d020      	beq.n	800352e <_printf_i+0xb2>
 80034ec:	2970      	cmp	r1, #112	; 0x70
 80034ee:	d1dd      	bne.n	80034ac <_printf_i+0x30>
 80034f0:	6823      	ldr	r3, [r4, #0]
 80034f2:	f043 0320 	orr.w	r3, r3, #32
 80034f6:	6023      	str	r3, [r4, #0]
 80034f8:	e003      	b.n	8003502 <_printf_i+0x86>
 80034fa:	2975      	cmp	r1, #117	; 0x75
 80034fc:	d017      	beq.n	800352e <_printf_i+0xb2>
 80034fe:	2978      	cmp	r1, #120	; 0x78
 8003500:	d1d4      	bne.n	80034ac <_printf_i+0x30>
 8003502:	2378      	movs	r3, #120	; 0x78
 8003504:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003508:	4864      	ldr	r0, [pc, #400]	; (800369c <_printf_i+0x220>)
 800350a:	e055      	b.n	80035b8 <_printf_i+0x13c>
 800350c:	6813      	ldr	r3, [r2, #0]
 800350e:	1d19      	adds	r1, r3, #4
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6011      	str	r1, [r2, #0]
 8003514:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003518:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800351c:	2301      	movs	r3, #1
 800351e:	e08c      	b.n	800363a <_printf_i+0x1be>
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6011      	str	r1, [r2, #0]
 8003524:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003528:	bf18      	it	ne
 800352a:	b21b      	sxthne	r3, r3
 800352c:	e7cf      	b.n	80034ce <_printf_i+0x52>
 800352e:	6813      	ldr	r3, [r2, #0]
 8003530:	6825      	ldr	r5, [r4, #0]
 8003532:	1d18      	adds	r0, r3, #4
 8003534:	6010      	str	r0, [r2, #0]
 8003536:	0628      	lsls	r0, r5, #24
 8003538:	d501      	bpl.n	800353e <_printf_i+0xc2>
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	e002      	b.n	8003544 <_printf_i+0xc8>
 800353e:	0668      	lsls	r0, r5, #25
 8003540:	d5fb      	bpl.n	800353a <_printf_i+0xbe>
 8003542:	881b      	ldrh	r3, [r3, #0]
 8003544:	4854      	ldr	r0, [pc, #336]	; (8003698 <_printf_i+0x21c>)
 8003546:	296f      	cmp	r1, #111	; 0x6f
 8003548:	bf14      	ite	ne
 800354a:	220a      	movne	r2, #10
 800354c:	2208      	moveq	r2, #8
 800354e:	2100      	movs	r1, #0
 8003550:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003554:	6865      	ldr	r5, [r4, #4]
 8003556:	60a5      	str	r5, [r4, #8]
 8003558:	2d00      	cmp	r5, #0
 800355a:	f2c0 8095 	blt.w	8003688 <_printf_i+0x20c>
 800355e:	6821      	ldr	r1, [r4, #0]
 8003560:	f021 0104 	bic.w	r1, r1, #4
 8003564:	6021      	str	r1, [r4, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d13d      	bne.n	80035e6 <_printf_i+0x16a>
 800356a:	2d00      	cmp	r5, #0
 800356c:	f040 808e 	bne.w	800368c <_printf_i+0x210>
 8003570:	4665      	mov	r5, ip
 8003572:	2a08      	cmp	r2, #8
 8003574:	d10b      	bne.n	800358e <_printf_i+0x112>
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	07db      	lsls	r3, r3, #31
 800357a:	d508      	bpl.n	800358e <_printf_i+0x112>
 800357c:	6923      	ldr	r3, [r4, #16]
 800357e:	6862      	ldr	r2, [r4, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	bfde      	ittt	le
 8003584:	2330      	movle	r3, #48	; 0x30
 8003586:	f805 3c01 	strble.w	r3, [r5, #-1]
 800358a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800358e:	ebac 0305 	sub.w	r3, ip, r5
 8003592:	6123      	str	r3, [r4, #16]
 8003594:	f8cd 8000 	str.w	r8, [sp]
 8003598:	463b      	mov	r3, r7
 800359a:	aa03      	add	r2, sp, #12
 800359c:	4621      	mov	r1, r4
 800359e:	4630      	mov	r0, r6
 80035a0:	f7ff fef6 	bl	8003390 <_printf_common>
 80035a4:	3001      	adds	r0, #1
 80035a6:	d14d      	bne.n	8003644 <_printf_i+0x1c8>
 80035a8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ac:	b005      	add	sp, #20
 80035ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035b2:	4839      	ldr	r0, [pc, #228]	; (8003698 <_printf_i+0x21c>)
 80035b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80035b8:	6813      	ldr	r3, [r2, #0]
 80035ba:	6821      	ldr	r1, [r4, #0]
 80035bc:	1d1d      	adds	r5, r3, #4
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6015      	str	r5, [r2, #0]
 80035c2:	060a      	lsls	r2, r1, #24
 80035c4:	d50b      	bpl.n	80035de <_printf_i+0x162>
 80035c6:	07ca      	lsls	r2, r1, #31
 80035c8:	bf44      	itt	mi
 80035ca:	f041 0120 	orrmi.w	r1, r1, #32
 80035ce:	6021      	strmi	r1, [r4, #0]
 80035d0:	b91b      	cbnz	r3, 80035da <_printf_i+0x15e>
 80035d2:	6822      	ldr	r2, [r4, #0]
 80035d4:	f022 0220 	bic.w	r2, r2, #32
 80035d8:	6022      	str	r2, [r4, #0]
 80035da:	2210      	movs	r2, #16
 80035dc:	e7b7      	b.n	800354e <_printf_i+0xd2>
 80035de:	064d      	lsls	r5, r1, #25
 80035e0:	bf48      	it	mi
 80035e2:	b29b      	uxthmi	r3, r3
 80035e4:	e7ef      	b.n	80035c6 <_printf_i+0x14a>
 80035e6:	4665      	mov	r5, ip
 80035e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80035ec:	fb02 3311 	mls	r3, r2, r1, r3
 80035f0:	5cc3      	ldrb	r3, [r0, r3]
 80035f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80035f6:	460b      	mov	r3, r1
 80035f8:	2900      	cmp	r1, #0
 80035fa:	d1f5      	bne.n	80035e8 <_printf_i+0x16c>
 80035fc:	e7b9      	b.n	8003572 <_printf_i+0xf6>
 80035fe:	6813      	ldr	r3, [r2, #0]
 8003600:	6825      	ldr	r5, [r4, #0]
 8003602:	6961      	ldr	r1, [r4, #20]
 8003604:	1d18      	adds	r0, r3, #4
 8003606:	6010      	str	r0, [r2, #0]
 8003608:	0628      	lsls	r0, r5, #24
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	d501      	bpl.n	8003612 <_printf_i+0x196>
 800360e:	6019      	str	r1, [r3, #0]
 8003610:	e002      	b.n	8003618 <_printf_i+0x19c>
 8003612:	066a      	lsls	r2, r5, #25
 8003614:	d5fb      	bpl.n	800360e <_printf_i+0x192>
 8003616:	8019      	strh	r1, [r3, #0]
 8003618:	2300      	movs	r3, #0
 800361a:	6123      	str	r3, [r4, #16]
 800361c:	4665      	mov	r5, ip
 800361e:	e7b9      	b.n	8003594 <_printf_i+0x118>
 8003620:	6813      	ldr	r3, [r2, #0]
 8003622:	1d19      	adds	r1, r3, #4
 8003624:	6011      	str	r1, [r2, #0]
 8003626:	681d      	ldr	r5, [r3, #0]
 8003628:	6862      	ldr	r2, [r4, #4]
 800362a:	2100      	movs	r1, #0
 800362c:	4628      	mov	r0, r5
 800362e:	f7fc fe4f 	bl	80002d0 <memchr>
 8003632:	b108      	cbz	r0, 8003638 <_printf_i+0x1bc>
 8003634:	1b40      	subs	r0, r0, r5
 8003636:	6060      	str	r0, [r4, #4]
 8003638:	6863      	ldr	r3, [r4, #4]
 800363a:	6123      	str	r3, [r4, #16]
 800363c:	2300      	movs	r3, #0
 800363e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003642:	e7a7      	b.n	8003594 <_printf_i+0x118>
 8003644:	6923      	ldr	r3, [r4, #16]
 8003646:	462a      	mov	r2, r5
 8003648:	4639      	mov	r1, r7
 800364a:	4630      	mov	r0, r6
 800364c:	47c0      	blx	r8
 800364e:	3001      	adds	r0, #1
 8003650:	d0aa      	beq.n	80035a8 <_printf_i+0x12c>
 8003652:	6823      	ldr	r3, [r4, #0]
 8003654:	079b      	lsls	r3, r3, #30
 8003656:	d413      	bmi.n	8003680 <_printf_i+0x204>
 8003658:	68e0      	ldr	r0, [r4, #12]
 800365a:	9b03      	ldr	r3, [sp, #12]
 800365c:	4298      	cmp	r0, r3
 800365e:	bfb8      	it	lt
 8003660:	4618      	movlt	r0, r3
 8003662:	e7a3      	b.n	80035ac <_printf_i+0x130>
 8003664:	2301      	movs	r3, #1
 8003666:	464a      	mov	r2, r9
 8003668:	4639      	mov	r1, r7
 800366a:	4630      	mov	r0, r6
 800366c:	47c0      	blx	r8
 800366e:	3001      	adds	r0, #1
 8003670:	d09a      	beq.n	80035a8 <_printf_i+0x12c>
 8003672:	3501      	adds	r5, #1
 8003674:	68e3      	ldr	r3, [r4, #12]
 8003676:	9a03      	ldr	r2, [sp, #12]
 8003678:	1a9b      	subs	r3, r3, r2
 800367a:	42ab      	cmp	r3, r5
 800367c:	dcf2      	bgt.n	8003664 <_printf_i+0x1e8>
 800367e:	e7eb      	b.n	8003658 <_printf_i+0x1dc>
 8003680:	2500      	movs	r5, #0
 8003682:	f104 0919 	add.w	r9, r4, #25
 8003686:	e7f5      	b.n	8003674 <_printf_i+0x1f8>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1ac      	bne.n	80035e6 <_printf_i+0x16a>
 800368c:	7803      	ldrb	r3, [r0, #0]
 800368e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003692:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003696:	e76c      	b.n	8003572 <_printf_i+0xf6>
 8003698:	08006a8e 	.word	0x08006a8e
 800369c:	08006a9f 	.word	0x08006a9f

080036a0 <_scanf_float>:
 80036a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036a4:	469a      	mov	sl, r3
 80036a6:	688b      	ldr	r3, [r1, #8]
 80036a8:	4616      	mov	r6, r2
 80036aa:	1e5a      	subs	r2, r3, #1
 80036ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80036b0:	b087      	sub	sp, #28
 80036b2:	bf83      	ittte	hi
 80036b4:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80036b8:	189b      	addhi	r3, r3, r2
 80036ba:	9301      	strhi	r3, [sp, #4]
 80036bc:	2300      	movls	r3, #0
 80036be:	bf86      	itte	hi
 80036c0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80036c4:	608b      	strhi	r3, [r1, #8]
 80036c6:	9301      	strls	r3, [sp, #4]
 80036c8:	680b      	ldr	r3, [r1, #0]
 80036ca:	4688      	mov	r8, r1
 80036cc:	f04f 0b00 	mov.w	fp, #0
 80036d0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80036d4:	f848 3b1c 	str.w	r3, [r8], #28
 80036d8:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80036dc:	4607      	mov	r7, r0
 80036de:	460c      	mov	r4, r1
 80036e0:	4645      	mov	r5, r8
 80036e2:	465a      	mov	r2, fp
 80036e4:	46d9      	mov	r9, fp
 80036e6:	f8cd b008 	str.w	fp, [sp, #8]
 80036ea:	68a1      	ldr	r1, [r4, #8]
 80036ec:	b181      	cbz	r1, 8003710 <_scanf_float+0x70>
 80036ee:	6833      	ldr	r3, [r6, #0]
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b49      	cmp	r3, #73	; 0x49
 80036f4:	d071      	beq.n	80037da <_scanf_float+0x13a>
 80036f6:	d84d      	bhi.n	8003794 <_scanf_float+0xf4>
 80036f8:	2b39      	cmp	r3, #57	; 0x39
 80036fa:	d840      	bhi.n	800377e <_scanf_float+0xde>
 80036fc:	2b31      	cmp	r3, #49	; 0x31
 80036fe:	f080 8088 	bcs.w	8003812 <_scanf_float+0x172>
 8003702:	2b2d      	cmp	r3, #45	; 0x2d
 8003704:	f000 8090 	beq.w	8003828 <_scanf_float+0x188>
 8003708:	d815      	bhi.n	8003736 <_scanf_float+0x96>
 800370a:	2b2b      	cmp	r3, #43	; 0x2b
 800370c:	f000 808c 	beq.w	8003828 <_scanf_float+0x188>
 8003710:	f1b9 0f00 	cmp.w	r9, #0
 8003714:	d003      	beq.n	800371e <_scanf_float+0x7e>
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800371c:	6023      	str	r3, [r4, #0]
 800371e:	3a01      	subs	r2, #1
 8003720:	2a01      	cmp	r2, #1
 8003722:	f200 80ea 	bhi.w	80038fa <_scanf_float+0x25a>
 8003726:	4545      	cmp	r5, r8
 8003728:	f200 80dc 	bhi.w	80038e4 <_scanf_float+0x244>
 800372c:	2601      	movs	r6, #1
 800372e:	4630      	mov	r0, r6
 8003730:	b007      	add	sp, #28
 8003732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003736:	2b2e      	cmp	r3, #46	; 0x2e
 8003738:	f000 809f 	beq.w	800387a <_scanf_float+0x1da>
 800373c:	2b30      	cmp	r3, #48	; 0x30
 800373e:	d1e7      	bne.n	8003710 <_scanf_float+0x70>
 8003740:	6820      	ldr	r0, [r4, #0]
 8003742:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003746:	d064      	beq.n	8003812 <_scanf_float+0x172>
 8003748:	9b01      	ldr	r3, [sp, #4]
 800374a:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800374e:	6020      	str	r0, [r4, #0]
 8003750:	f109 0901 	add.w	r9, r9, #1
 8003754:	b11b      	cbz	r3, 800375e <_scanf_float+0xbe>
 8003756:	3b01      	subs	r3, #1
 8003758:	3101      	adds	r1, #1
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	60a1      	str	r1, [r4, #8]
 800375e:	68a3      	ldr	r3, [r4, #8]
 8003760:	3b01      	subs	r3, #1
 8003762:	60a3      	str	r3, [r4, #8]
 8003764:	6923      	ldr	r3, [r4, #16]
 8003766:	3301      	adds	r3, #1
 8003768:	6123      	str	r3, [r4, #16]
 800376a:	6873      	ldr	r3, [r6, #4]
 800376c:	3b01      	subs	r3, #1
 800376e:	2b00      	cmp	r3, #0
 8003770:	6073      	str	r3, [r6, #4]
 8003772:	f340 80ac 	ble.w	80038ce <_scanf_float+0x22e>
 8003776:	6833      	ldr	r3, [r6, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	6033      	str	r3, [r6, #0]
 800377c:	e7b5      	b.n	80036ea <_scanf_float+0x4a>
 800377e:	2b45      	cmp	r3, #69	; 0x45
 8003780:	f000 8085 	beq.w	800388e <_scanf_float+0x1ee>
 8003784:	2b46      	cmp	r3, #70	; 0x46
 8003786:	d06a      	beq.n	800385e <_scanf_float+0x1be>
 8003788:	2b41      	cmp	r3, #65	; 0x41
 800378a:	d1c1      	bne.n	8003710 <_scanf_float+0x70>
 800378c:	2a01      	cmp	r2, #1
 800378e:	d1bf      	bne.n	8003710 <_scanf_float+0x70>
 8003790:	2202      	movs	r2, #2
 8003792:	e046      	b.n	8003822 <_scanf_float+0x182>
 8003794:	2b65      	cmp	r3, #101	; 0x65
 8003796:	d07a      	beq.n	800388e <_scanf_float+0x1ee>
 8003798:	d818      	bhi.n	80037cc <_scanf_float+0x12c>
 800379a:	2b54      	cmp	r3, #84	; 0x54
 800379c:	d066      	beq.n	800386c <_scanf_float+0x1cc>
 800379e:	d811      	bhi.n	80037c4 <_scanf_float+0x124>
 80037a0:	2b4e      	cmp	r3, #78	; 0x4e
 80037a2:	d1b5      	bne.n	8003710 <_scanf_float+0x70>
 80037a4:	2a00      	cmp	r2, #0
 80037a6:	d146      	bne.n	8003836 <_scanf_float+0x196>
 80037a8:	f1b9 0f00 	cmp.w	r9, #0
 80037ac:	d145      	bne.n	800383a <_scanf_float+0x19a>
 80037ae:	6821      	ldr	r1, [r4, #0]
 80037b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80037b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80037b8:	d13f      	bne.n	800383a <_scanf_float+0x19a>
 80037ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80037be:	6021      	str	r1, [r4, #0]
 80037c0:	2201      	movs	r2, #1
 80037c2:	e02e      	b.n	8003822 <_scanf_float+0x182>
 80037c4:	2b59      	cmp	r3, #89	; 0x59
 80037c6:	d01e      	beq.n	8003806 <_scanf_float+0x166>
 80037c8:	2b61      	cmp	r3, #97	; 0x61
 80037ca:	e7de      	b.n	800378a <_scanf_float+0xea>
 80037cc:	2b6e      	cmp	r3, #110	; 0x6e
 80037ce:	d0e9      	beq.n	80037a4 <_scanf_float+0x104>
 80037d0:	d815      	bhi.n	80037fe <_scanf_float+0x15e>
 80037d2:	2b66      	cmp	r3, #102	; 0x66
 80037d4:	d043      	beq.n	800385e <_scanf_float+0x1be>
 80037d6:	2b69      	cmp	r3, #105	; 0x69
 80037d8:	d19a      	bne.n	8003710 <_scanf_float+0x70>
 80037da:	f1bb 0f00 	cmp.w	fp, #0
 80037de:	d138      	bne.n	8003852 <_scanf_float+0x1b2>
 80037e0:	f1b9 0f00 	cmp.w	r9, #0
 80037e4:	d197      	bne.n	8003716 <_scanf_float+0x76>
 80037e6:	6821      	ldr	r1, [r4, #0]
 80037e8:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80037ec:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80037f0:	d195      	bne.n	800371e <_scanf_float+0x7e>
 80037f2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80037f6:	6021      	str	r1, [r4, #0]
 80037f8:	f04f 0b01 	mov.w	fp, #1
 80037fc:	e011      	b.n	8003822 <_scanf_float+0x182>
 80037fe:	2b74      	cmp	r3, #116	; 0x74
 8003800:	d034      	beq.n	800386c <_scanf_float+0x1cc>
 8003802:	2b79      	cmp	r3, #121	; 0x79
 8003804:	d184      	bne.n	8003710 <_scanf_float+0x70>
 8003806:	f1bb 0f07 	cmp.w	fp, #7
 800380a:	d181      	bne.n	8003710 <_scanf_float+0x70>
 800380c:	f04f 0b08 	mov.w	fp, #8
 8003810:	e007      	b.n	8003822 <_scanf_float+0x182>
 8003812:	eb12 0f0b 	cmn.w	r2, fp
 8003816:	f47f af7b 	bne.w	8003710 <_scanf_float+0x70>
 800381a:	6821      	ldr	r1, [r4, #0]
 800381c:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003820:	6021      	str	r1, [r4, #0]
 8003822:	702b      	strb	r3, [r5, #0]
 8003824:	3501      	adds	r5, #1
 8003826:	e79a      	b.n	800375e <_scanf_float+0xbe>
 8003828:	6821      	ldr	r1, [r4, #0]
 800382a:	0608      	lsls	r0, r1, #24
 800382c:	f57f af70 	bpl.w	8003710 <_scanf_float+0x70>
 8003830:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003834:	e7f4      	b.n	8003820 <_scanf_float+0x180>
 8003836:	2a02      	cmp	r2, #2
 8003838:	d047      	beq.n	80038ca <_scanf_float+0x22a>
 800383a:	f1bb 0f01 	cmp.w	fp, #1
 800383e:	d003      	beq.n	8003848 <_scanf_float+0x1a8>
 8003840:	f1bb 0f04 	cmp.w	fp, #4
 8003844:	f47f af64 	bne.w	8003710 <_scanf_float+0x70>
 8003848:	f10b 0b01 	add.w	fp, fp, #1
 800384c:	fa5f fb8b 	uxtb.w	fp, fp
 8003850:	e7e7      	b.n	8003822 <_scanf_float+0x182>
 8003852:	f1bb 0f03 	cmp.w	fp, #3
 8003856:	d0f7      	beq.n	8003848 <_scanf_float+0x1a8>
 8003858:	f1bb 0f05 	cmp.w	fp, #5
 800385c:	e7f2      	b.n	8003844 <_scanf_float+0x1a4>
 800385e:	f1bb 0f02 	cmp.w	fp, #2
 8003862:	f47f af55 	bne.w	8003710 <_scanf_float+0x70>
 8003866:	f04f 0b03 	mov.w	fp, #3
 800386a:	e7da      	b.n	8003822 <_scanf_float+0x182>
 800386c:	f1bb 0f06 	cmp.w	fp, #6
 8003870:	f47f af4e 	bne.w	8003710 <_scanf_float+0x70>
 8003874:	f04f 0b07 	mov.w	fp, #7
 8003878:	e7d3      	b.n	8003822 <_scanf_float+0x182>
 800387a:	6821      	ldr	r1, [r4, #0]
 800387c:	0588      	lsls	r0, r1, #22
 800387e:	f57f af47 	bpl.w	8003710 <_scanf_float+0x70>
 8003882:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8003886:	6021      	str	r1, [r4, #0]
 8003888:	f8cd 9008 	str.w	r9, [sp, #8]
 800388c:	e7c9      	b.n	8003822 <_scanf_float+0x182>
 800388e:	6821      	ldr	r1, [r4, #0]
 8003890:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003894:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8003898:	d006      	beq.n	80038a8 <_scanf_float+0x208>
 800389a:	0548      	lsls	r0, r1, #21
 800389c:	f57f af38 	bpl.w	8003710 <_scanf_float+0x70>
 80038a0:	f1b9 0f00 	cmp.w	r9, #0
 80038a4:	f43f af3b 	beq.w	800371e <_scanf_float+0x7e>
 80038a8:	0588      	lsls	r0, r1, #22
 80038aa:	bf58      	it	pl
 80038ac:	9802      	ldrpl	r0, [sp, #8]
 80038ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80038b2:	bf58      	it	pl
 80038b4:	eba9 0000 	subpl.w	r0, r9, r0
 80038b8:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80038bc:	bf58      	it	pl
 80038be:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80038c2:	6021      	str	r1, [r4, #0]
 80038c4:	f04f 0900 	mov.w	r9, #0
 80038c8:	e7ab      	b.n	8003822 <_scanf_float+0x182>
 80038ca:	2203      	movs	r2, #3
 80038cc:	e7a9      	b.n	8003822 <_scanf_float+0x182>
 80038ce:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80038d2:	9205      	str	r2, [sp, #20]
 80038d4:	4631      	mov	r1, r6
 80038d6:	4638      	mov	r0, r7
 80038d8:	4798      	blx	r3
 80038da:	9a05      	ldr	r2, [sp, #20]
 80038dc:	2800      	cmp	r0, #0
 80038de:	f43f af04 	beq.w	80036ea <_scanf_float+0x4a>
 80038e2:	e715      	b.n	8003710 <_scanf_float+0x70>
 80038e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80038e8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80038ec:	4632      	mov	r2, r6
 80038ee:	4638      	mov	r0, r7
 80038f0:	4798      	blx	r3
 80038f2:	6923      	ldr	r3, [r4, #16]
 80038f4:	3b01      	subs	r3, #1
 80038f6:	6123      	str	r3, [r4, #16]
 80038f8:	e715      	b.n	8003726 <_scanf_float+0x86>
 80038fa:	f10b 33ff 	add.w	r3, fp, #4294967295
 80038fe:	2b06      	cmp	r3, #6
 8003900:	d80a      	bhi.n	8003918 <_scanf_float+0x278>
 8003902:	f1bb 0f02 	cmp.w	fp, #2
 8003906:	d968      	bls.n	80039da <_scanf_float+0x33a>
 8003908:	f1ab 0b03 	sub.w	fp, fp, #3
 800390c:	fa5f fb8b 	uxtb.w	fp, fp
 8003910:	eba5 0b0b 	sub.w	fp, r5, fp
 8003914:	455d      	cmp	r5, fp
 8003916:	d14b      	bne.n	80039b0 <_scanf_float+0x310>
 8003918:	6823      	ldr	r3, [r4, #0]
 800391a:	05da      	lsls	r2, r3, #23
 800391c:	d51f      	bpl.n	800395e <_scanf_float+0x2be>
 800391e:	055b      	lsls	r3, r3, #21
 8003920:	d468      	bmi.n	80039f4 <_scanf_float+0x354>
 8003922:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8003926:	6923      	ldr	r3, [r4, #16]
 8003928:	2965      	cmp	r1, #101	; 0x65
 800392a:	f103 33ff 	add.w	r3, r3, #4294967295
 800392e:	f105 3bff 	add.w	fp, r5, #4294967295
 8003932:	6123      	str	r3, [r4, #16]
 8003934:	d00d      	beq.n	8003952 <_scanf_float+0x2b2>
 8003936:	2945      	cmp	r1, #69	; 0x45
 8003938:	d00b      	beq.n	8003952 <_scanf_float+0x2b2>
 800393a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800393e:	4632      	mov	r2, r6
 8003940:	4638      	mov	r0, r7
 8003942:	4798      	blx	r3
 8003944:	6923      	ldr	r3, [r4, #16]
 8003946:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800394a:	3b01      	subs	r3, #1
 800394c:	f1a5 0b02 	sub.w	fp, r5, #2
 8003950:	6123      	str	r3, [r4, #16]
 8003952:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003956:	4632      	mov	r2, r6
 8003958:	4638      	mov	r0, r7
 800395a:	4798      	blx	r3
 800395c:	465d      	mov	r5, fp
 800395e:	6826      	ldr	r6, [r4, #0]
 8003960:	f016 0610 	ands.w	r6, r6, #16
 8003964:	d17a      	bne.n	8003a5c <_scanf_float+0x3bc>
 8003966:	702e      	strb	r6, [r5, #0]
 8003968:	6823      	ldr	r3, [r4, #0]
 800396a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800396e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003972:	d142      	bne.n	80039fa <_scanf_float+0x35a>
 8003974:	9b02      	ldr	r3, [sp, #8]
 8003976:	eba9 0303 	sub.w	r3, r9, r3
 800397a:	425a      	negs	r2, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d149      	bne.n	8003a14 <_scanf_float+0x374>
 8003980:	2200      	movs	r2, #0
 8003982:	4641      	mov	r1, r8
 8003984:	4638      	mov	r0, r7
 8003986:	f000 fea3 	bl	80046d0 <_strtod_r>
 800398a:	6825      	ldr	r5, [r4, #0]
 800398c:	f8da 3000 	ldr.w	r3, [sl]
 8003990:	f015 0f02 	tst.w	r5, #2
 8003994:	f103 0204 	add.w	r2, r3, #4
 8003998:	ec59 8b10 	vmov	r8, r9, d0
 800399c:	f8ca 2000 	str.w	r2, [sl]
 80039a0:	d043      	beq.n	8003a2a <_scanf_float+0x38a>
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	e9c3 8900 	strd	r8, r9, [r3]
 80039a8:	68e3      	ldr	r3, [r4, #12]
 80039aa:	3301      	adds	r3, #1
 80039ac:	60e3      	str	r3, [r4, #12]
 80039ae:	e6be      	b.n	800372e <_scanf_float+0x8e>
 80039b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039b4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80039b8:	4632      	mov	r2, r6
 80039ba:	4638      	mov	r0, r7
 80039bc:	4798      	blx	r3
 80039be:	6923      	ldr	r3, [r4, #16]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	6123      	str	r3, [r4, #16]
 80039c4:	e7a6      	b.n	8003914 <_scanf_float+0x274>
 80039c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039ca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80039ce:	4632      	mov	r2, r6
 80039d0:	4638      	mov	r0, r7
 80039d2:	4798      	blx	r3
 80039d4:	6923      	ldr	r3, [r4, #16]
 80039d6:	3b01      	subs	r3, #1
 80039d8:	6123      	str	r3, [r4, #16]
 80039da:	4545      	cmp	r5, r8
 80039dc:	d8f3      	bhi.n	80039c6 <_scanf_float+0x326>
 80039de:	e6a5      	b.n	800372c <_scanf_float+0x8c>
 80039e0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80039e4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80039e8:	4632      	mov	r2, r6
 80039ea:	4638      	mov	r0, r7
 80039ec:	4798      	blx	r3
 80039ee:	6923      	ldr	r3, [r4, #16]
 80039f0:	3b01      	subs	r3, #1
 80039f2:	6123      	str	r3, [r4, #16]
 80039f4:	4545      	cmp	r5, r8
 80039f6:	d8f3      	bhi.n	80039e0 <_scanf_float+0x340>
 80039f8:	e698      	b.n	800372c <_scanf_float+0x8c>
 80039fa:	9b03      	ldr	r3, [sp, #12]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d0bf      	beq.n	8003980 <_scanf_float+0x2e0>
 8003a00:	9904      	ldr	r1, [sp, #16]
 8003a02:	230a      	movs	r3, #10
 8003a04:	4632      	mov	r2, r6
 8003a06:	3101      	adds	r1, #1
 8003a08:	4638      	mov	r0, r7
 8003a0a:	f000 feed 	bl	80047e8 <_strtol_r>
 8003a0e:	9b03      	ldr	r3, [sp, #12]
 8003a10:	9d04      	ldr	r5, [sp, #16]
 8003a12:	1ac2      	subs	r2, r0, r3
 8003a14:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8003a18:	429d      	cmp	r5, r3
 8003a1a:	bf28      	it	cs
 8003a1c:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003a20:	490f      	ldr	r1, [pc, #60]	; (8003a60 <_scanf_float+0x3c0>)
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 f824 	bl	8003a70 <siprintf>
 8003a28:	e7aa      	b.n	8003980 <_scanf_float+0x2e0>
 8003a2a:	f015 0504 	ands.w	r5, r5, #4
 8003a2e:	d1b8      	bne.n	80039a2 <_scanf_float+0x302>
 8003a30:	681f      	ldr	r7, [r3, #0]
 8003a32:	ee10 2a10 	vmov	r2, s0
 8003a36:	464b      	mov	r3, r9
 8003a38:	ee10 0a10 	vmov	r0, s0
 8003a3c:	4649      	mov	r1, r9
 8003a3e:	f7fd f8ed 	bl	8000c1c <__aeabi_dcmpun>
 8003a42:	b128      	cbz	r0, 8003a50 <_scanf_float+0x3b0>
 8003a44:	4628      	mov	r0, r5
 8003a46:	f000 f80d 	bl	8003a64 <nanf>
 8003a4a:	ed87 0a00 	vstr	s0, [r7]
 8003a4e:	e7ab      	b.n	80039a8 <_scanf_float+0x308>
 8003a50:	4640      	mov	r0, r8
 8003a52:	4649      	mov	r1, r9
 8003a54:	f7fd f940 	bl	8000cd8 <__aeabi_d2f>
 8003a58:	6038      	str	r0, [r7, #0]
 8003a5a:	e7a5      	b.n	80039a8 <_scanf_float+0x308>
 8003a5c:	2600      	movs	r6, #0
 8003a5e:	e666      	b.n	800372e <_scanf_float+0x8e>
 8003a60:	08006ab0 	.word	0x08006ab0

08003a64 <nanf>:
 8003a64:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003a6c <nanf+0x8>
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	7fc00000 	.word	0x7fc00000

08003a70 <siprintf>:
 8003a70:	b40e      	push	{r1, r2, r3}
 8003a72:	b500      	push	{lr}
 8003a74:	b09c      	sub	sp, #112	; 0x70
 8003a76:	ab1d      	add	r3, sp, #116	; 0x74
 8003a78:	9002      	str	r0, [sp, #8]
 8003a7a:	9006      	str	r0, [sp, #24]
 8003a7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003a80:	4809      	ldr	r0, [pc, #36]	; (8003aa8 <siprintf+0x38>)
 8003a82:	9107      	str	r1, [sp, #28]
 8003a84:	9104      	str	r1, [sp, #16]
 8003a86:	4909      	ldr	r1, [pc, #36]	; (8003aac <siprintf+0x3c>)
 8003a88:	f853 2b04 	ldr.w	r2, [r3], #4
 8003a8c:	9105      	str	r1, [sp, #20]
 8003a8e:	6800      	ldr	r0, [r0, #0]
 8003a90:	9301      	str	r3, [sp, #4]
 8003a92:	a902      	add	r1, sp, #8
 8003a94:	f002 fd64 	bl	8006560 <_svfiprintf_r>
 8003a98:	9b02      	ldr	r3, [sp, #8]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
 8003a9e:	b01c      	add	sp, #112	; 0x70
 8003aa0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003aa4:	b003      	add	sp, #12
 8003aa6:	4770      	bx	lr
 8003aa8:	2000000c 	.word	0x2000000c
 8003aac:	ffff0208 	.word	0xffff0208

08003ab0 <sulp>:
 8003ab0:	b570      	push	{r4, r5, r6, lr}
 8003ab2:	4604      	mov	r4, r0
 8003ab4:	460d      	mov	r5, r1
 8003ab6:	ec45 4b10 	vmov	d0, r4, r5
 8003aba:	4616      	mov	r6, r2
 8003abc:	f002 fb0c 	bl	80060d8 <__ulp>
 8003ac0:	ec51 0b10 	vmov	r0, r1, d0
 8003ac4:	b17e      	cbz	r6, 8003ae6 <sulp+0x36>
 8003ac6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8003aca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	dd09      	ble.n	8003ae6 <sulp+0x36>
 8003ad2:	051b      	lsls	r3, r3, #20
 8003ad4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8003ad8:	2400      	movs	r4, #0
 8003ada:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8003ade:	4622      	mov	r2, r4
 8003ae0:	462b      	mov	r3, r5
 8003ae2:	f7fc fe01 	bl	80006e8 <__aeabi_dmul>
 8003ae6:	bd70      	pop	{r4, r5, r6, pc}

08003ae8 <_strtod_l>:
 8003ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aec:	461f      	mov	r7, r3
 8003aee:	b0a1      	sub	sp, #132	; 0x84
 8003af0:	2300      	movs	r3, #0
 8003af2:	4681      	mov	r9, r0
 8003af4:	4638      	mov	r0, r7
 8003af6:	460e      	mov	r6, r1
 8003af8:	9217      	str	r2, [sp, #92]	; 0x5c
 8003afa:	931c      	str	r3, [sp, #112]	; 0x70
 8003afc:	f001 fff5 	bl	8005aea <__localeconv_l>
 8003b00:	4680      	mov	r8, r0
 8003b02:	6800      	ldr	r0, [r0, #0]
 8003b04:	f7fc fbd7 	bl	80002b6 <strlen>
 8003b08:	f04f 0a00 	mov.w	sl, #0
 8003b0c:	4604      	mov	r4, r0
 8003b0e:	f04f 0b00 	mov.w	fp, #0
 8003b12:	961b      	str	r6, [sp, #108]	; 0x6c
 8003b14:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b16:	781a      	ldrb	r2, [r3, #0]
 8003b18:	2a0d      	cmp	r2, #13
 8003b1a:	d832      	bhi.n	8003b82 <_strtod_l+0x9a>
 8003b1c:	2a09      	cmp	r2, #9
 8003b1e:	d236      	bcs.n	8003b8e <_strtod_l+0xa6>
 8003b20:	2a00      	cmp	r2, #0
 8003b22:	d03e      	beq.n	8003ba2 <_strtod_l+0xba>
 8003b24:	2300      	movs	r3, #0
 8003b26:	930d      	str	r3, [sp, #52]	; 0x34
 8003b28:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003b2a:	782b      	ldrb	r3, [r5, #0]
 8003b2c:	2b30      	cmp	r3, #48	; 0x30
 8003b2e:	f040 80ac 	bne.w	8003c8a <_strtod_l+0x1a2>
 8003b32:	786b      	ldrb	r3, [r5, #1]
 8003b34:	2b58      	cmp	r3, #88	; 0x58
 8003b36:	d001      	beq.n	8003b3c <_strtod_l+0x54>
 8003b38:	2b78      	cmp	r3, #120	; 0x78
 8003b3a:	d167      	bne.n	8003c0c <_strtod_l+0x124>
 8003b3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b3e:	9301      	str	r3, [sp, #4]
 8003b40:	ab1c      	add	r3, sp, #112	; 0x70
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	9702      	str	r7, [sp, #8]
 8003b46:	ab1d      	add	r3, sp, #116	; 0x74
 8003b48:	4a88      	ldr	r2, [pc, #544]	; (8003d6c <_strtod_l+0x284>)
 8003b4a:	a91b      	add	r1, sp, #108	; 0x6c
 8003b4c:	4648      	mov	r0, r9
 8003b4e:	f001 fcf2 	bl	8005536 <__gethex>
 8003b52:	f010 0407 	ands.w	r4, r0, #7
 8003b56:	4606      	mov	r6, r0
 8003b58:	d005      	beq.n	8003b66 <_strtod_l+0x7e>
 8003b5a:	2c06      	cmp	r4, #6
 8003b5c:	d12b      	bne.n	8003bb6 <_strtod_l+0xce>
 8003b5e:	3501      	adds	r5, #1
 8003b60:	2300      	movs	r3, #0
 8003b62:	951b      	str	r5, [sp, #108]	; 0x6c
 8003b64:	930d      	str	r3, [sp, #52]	; 0x34
 8003b66:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	f040 859a 	bne.w	80046a2 <_strtod_l+0xbba>
 8003b6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b70:	b1e3      	cbz	r3, 8003bac <_strtod_l+0xc4>
 8003b72:	4652      	mov	r2, sl
 8003b74:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003b78:	ec43 2b10 	vmov	d0, r2, r3
 8003b7c:	b021      	add	sp, #132	; 0x84
 8003b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b82:	2a2b      	cmp	r2, #43	; 0x2b
 8003b84:	d015      	beq.n	8003bb2 <_strtod_l+0xca>
 8003b86:	2a2d      	cmp	r2, #45	; 0x2d
 8003b88:	d004      	beq.n	8003b94 <_strtod_l+0xac>
 8003b8a:	2a20      	cmp	r2, #32
 8003b8c:	d1ca      	bne.n	8003b24 <_strtod_l+0x3c>
 8003b8e:	3301      	adds	r3, #1
 8003b90:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b92:	e7bf      	b.n	8003b14 <_strtod_l+0x2c>
 8003b94:	2201      	movs	r2, #1
 8003b96:	920d      	str	r2, [sp, #52]	; 0x34
 8003b98:	1c5a      	adds	r2, r3, #1
 8003b9a:	921b      	str	r2, [sp, #108]	; 0x6c
 8003b9c:	785b      	ldrb	r3, [r3, #1]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1c2      	bne.n	8003b28 <_strtod_l+0x40>
 8003ba2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003ba4:	961b      	str	r6, [sp, #108]	; 0x6c
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f040 8579 	bne.w	800469e <_strtod_l+0xbb6>
 8003bac:	4652      	mov	r2, sl
 8003bae:	465b      	mov	r3, fp
 8003bb0:	e7e2      	b.n	8003b78 <_strtod_l+0x90>
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	e7ef      	b.n	8003b96 <_strtod_l+0xae>
 8003bb6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003bb8:	b13a      	cbz	r2, 8003bca <_strtod_l+0xe2>
 8003bba:	2135      	movs	r1, #53	; 0x35
 8003bbc:	a81e      	add	r0, sp, #120	; 0x78
 8003bbe:	f002 fb83 	bl	80062c8 <__copybits>
 8003bc2:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003bc4:	4648      	mov	r0, r9
 8003bc6:	f001 ffef 	bl	8005ba8 <_Bfree>
 8003bca:	3c01      	subs	r4, #1
 8003bcc:	2c04      	cmp	r4, #4
 8003bce:	d806      	bhi.n	8003bde <_strtod_l+0xf6>
 8003bd0:	e8df f004 	tbb	[pc, r4]
 8003bd4:	1714030a 	.word	0x1714030a
 8003bd8:	0a          	.byte	0x0a
 8003bd9:	00          	.byte	0x00
 8003bda:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8003bde:	0730      	lsls	r0, r6, #28
 8003be0:	d5c1      	bpl.n	8003b66 <_strtod_l+0x7e>
 8003be2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003be6:	e7be      	b.n	8003b66 <_strtod_l+0x7e>
 8003be8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8003bec:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003bee:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003bf2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003bf6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003bfa:	e7f0      	b.n	8003bde <_strtod_l+0xf6>
 8003bfc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8003d70 <_strtod_l+0x288>
 8003c00:	e7ed      	b.n	8003bde <_strtod_l+0xf6>
 8003c02:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003c06:	f04f 3aff 	mov.w	sl, #4294967295
 8003c0a:	e7e8      	b.n	8003bde <_strtod_l+0xf6>
 8003c0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	921b      	str	r2, [sp, #108]	; 0x6c
 8003c12:	785b      	ldrb	r3, [r3, #1]
 8003c14:	2b30      	cmp	r3, #48	; 0x30
 8003c16:	d0f9      	beq.n	8003c0c <_strtod_l+0x124>
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d0a4      	beq.n	8003b66 <_strtod_l+0x7e>
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	2500      	movs	r5, #0
 8003c20:	9306      	str	r3, [sp, #24]
 8003c22:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c24:	9308      	str	r3, [sp, #32]
 8003c26:	9507      	str	r5, [sp, #28]
 8003c28:	9505      	str	r5, [sp, #20]
 8003c2a:	220a      	movs	r2, #10
 8003c2c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003c2e:	7807      	ldrb	r7, [r0, #0]
 8003c30:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003c34:	b2d9      	uxtb	r1, r3
 8003c36:	2909      	cmp	r1, #9
 8003c38:	d929      	bls.n	8003c8e <_strtod_l+0x1a6>
 8003c3a:	4622      	mov	r2, r4
 8003c3c:	f8d8 1000 	ldr.w	r1, [r8]
 8003c40:	f002 fd96 	bl	8006770 <strncmp>
 8003c44:	2800      	cmp	r0, #0
 8003c46:	d031      	beq.n	8003cac <_strtod_l+0x1c4>
 8003c48:	2000      	movs	r0, #0
 8003c4a:	9c05      	ldr	r4, [sp, #20]
 8003c4c:	9004      	str	r0, [sp, #16]
 8003c4e:	463b      	mov	r3, r7
 8003c50:	4602      	mov	r2, r0
 8003c52:	2b65      	cmp	r3, #101	; 0x65
 8003c54:	d001      	beq.n	8003c5a <_strtod_l+0x172>
 8003c56:	2b45      	cmp	r3, #69	; 0x45
 8003c58:	d114      	bne.n	8003c84 <_strtod_l+0x19c>
 8003c5a:	b924      	cbnz	r4, 8003c66 <_strtod_l+0x17e>
 8003c5c:	b910      	cbnz	r0, 8003c64 <_strtod_l+0x17c>
 8003c5e:	9b06      	ldr	r3, [sp, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d09e      	beq.n	8003ba2 <_strtod_l+0xba>
 8003c64:	2400      	movs	r4, #0
 8003c66:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003c68:	1c73      	adds	r3, r6, #1
 8003c6a:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c6c:	7873      	ldrb	r3, [r6, #1]
 8003c6e:	2b2b      	cmp	r3, #43	; 0x2b
 8003c70:	d078      	beq.n	8003d64 <_strtod_l+0x27c>
 8003c72:	2b2d      	cmp	r3, #45	; 0x2d
 8003c74:	d070      	beq.n	8003d58 <_strtod_l+0x270>
 8003c76:	f04f 0c00 	mov.w	ip, #0
 8003c7a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8003c7e:	2f09      	cmp	r7, #9
 8003c80:	d97c      	bls.n	8003d7c <_strtod_l+0x294>
 8003c82:	961b      	str	r6, [sp, #108]	; 0x6c
 8003c84:	f04f 0e00 	mov.w	lr, #0
 8003c88:	e09a      	b.n	8003dc0 <_strtod_l+0x2d8>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e7c7      	b.n	8003c1e <_strtod_l+0x136>
 8003c8e:	9905      	ldr	r1, [sp, #20]
 8003c90:	2908      	cmp	r1, #8
 8003c92:	bfdd      	ittte	le
 8003c94:	9907      	ldrle	r1, [sp, #28]
 8003c96:	fb02 3301 	mlale	r3, r2, r1, r3
 8003c9a:	9307      	strle	r3, [sp, #28]
 8003c9c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8003ca0:	9b05      	ldr	r3, [sp, #20]
 8003ca2:	3001      	adds	r0, #1
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	9305      	str	r3, [sp, #20]
 8003ca8:	901b      	str	r0, [sp, #108]	; 0x6c
 8003caa:	e7bf      	b.n	8003c2c <_strtod_l+0x144>
 8003cac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cae:	191a      	adds	r2, r3, r4
 8003cb0:	921b      	str	r2, [sp, #108]	; 0x6c
 8003cb2:	9a05      	ldr	r2, [sp, #20]
 8003cb4:	5d1b      	ldrb	r3, [r3, r4]
 8003cb6:	2a00      	cmp	r2, #0
 8003cb8:	d037      	beq.n	8003d2a <_strtod_l+0x242>
 8003cba:	9c05      	ldr	r4, [sp, #20]
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003cc2:	2909      	cmp	r1, #9
 8003cc4:	d913      	bls.n	8003cee <_strtod_l+0x206>
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	9104      	str	r1, [sp, #16]
 8003cca:	e7c2      	b.n	8003c52 <_strtod_l+0x16a>
 8003ccc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	921b      	str	r2, [sp, #108]	; 0x6c
 8003cd2:	785b      	ldrb	r3, [r3, #1]
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	2b30      	cmp	r3, #48	; 0x30
 8003cd8:	d0f8      	beq.n	8003ccc <_strtod_l+0x1e4>
 8003cda:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003cde:	2a08      	cmp	r2, #8
 8003ce0:	f200 84e4 	bhi.w	80046ac <_strtod_l+0xbc4>
 8003ce4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003ce6:	9208      	str	r2, [sp, #32]
 8003ce8:	4602      	mov	r2, r0
 8003cea:	2000      	movs	r0, #0
 8003cec:	4604      	mov	r4, r0
 8003cee:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8003cf2:	f100 0101 	add.w	r1, r0, #1
 8003cf6:	d012      	beq.n	8003d1e <_strtod_l+0x236>
 8003cf8:	440a      	add	r2, r1
 8003cfa:	eb00 0c04 	add.w	ip, r0, r4
 8003cfe:	4621      	mov	r1, r4
 8003d00:	270a      	movs	r7, #10
 8003d02:	458c      	cmp	ip, r1
 8003d04:	d113      	bne.n	8003d2e <_strtod_l+0x246>
 8003d06:	1821      	adds	r1, r4, r0
 8003d08:	2908      	cmp	r1, #8
 8003d0a:	f104 0401 	add.w	r4, r4, #1
 8003d0e:	4404      	add	r4, r0
 8003d10:	dc19      	bgt.n	8003d46 <_strtod_l+0x25e>
 8003d12:	9b07      	ldr	r3, [sp, #28]
 8003d14:	210a      	movs	r1, #10
 8003d16:	fb01 e303 	mla	r3, r1, r3, lr
 8003d1a:	9307      	str	r3, [sp, #28]
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d20:	1c58      	adds	r0, r3, #1
 8003d22:	901b      	str	r0, [sp, #108]	; 0x6c
 8003d24:	785b      	ldrb	r3, [r3, #1]
 8003d26:	4608      	mov	r0, r1
 8003d28:	e7c9      	b.n	8003cbe <_strtod_l+0x1d6>
 8003d2a:	9805      	ldr	r0, [sp, #20]
 8003d2c:	e7d3      	b.n	8003cd6 <_strtod_l+0x1ee>
 8003d2e:	2908      	cmp	r1, #8
 8003d30:	f101 0101 	add.w	r1, r1, #1
 8003d34:	dc03      	bgt.n	8003d3e <_strtod_l+0x256>
 8003d36:	9b07      	ldr	r3, [sp, #28]
 8003d38:	437b      	muls	r3, r7
 8003d3a:	9307      	str	r3, [sp, #28]
 8003d3c:	e7e1      	b.n	8003d02 <_strtod_l+0x21a>
 8003d3e:	2910      	cmp	r1, #16
 8003d40:	bfd8      	it	le
 8003d42:	437d      	mulle	r5, r7
 8003d44:	e7dd      	b.n	8003d02 <_strtod_l+0x21a>
 8003d46:	2c10      	cmp	r4, #16
 8003d48:	bfdc      	itt	le
 8003d4a:	210a      	movle	r1, #10
 8003d4c:	fb01 e505 	mlale	r5, r1, r5, lr
 8003d50:	e7e4      	b.n	8003d1c <_strtod_l+0x234>
 8003d52:	2301      	movs	r3, #1
 8003d54:	9304      	str	r3, [sp, #16]
 8003d56:	e781      	b.n	8003c5c <_strtod_l+0x174>
 8003d58:	f04f 0c01 	mov.w	ip, #1
 8003d5c:	1cb3      	adds	r3, r6, #2
 8003d5e:	931b      	str	r3, [sp, #108]	; 0x6c
 8003d60:	78b3      	ldrb	r3, [r6, #2]
 8003d62:	e78a      	b.n	8003c7a <_strtod_l+0x192>
 8003d64:	f04f 0c00 	mov.w	ip, #0
 8003d68:	e7f8      	b.n	8003d5c <_strtod_l+0x274>
 8003d6a:	bf00      	nop
 8003d6c:	08006ab8 	.word	0x08006ab8
 8003d70:	7ff00000 	.word	0x7ff00000
 8003d74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d76:	1c5f      	adds	r7, r3, #1
 8003d78:	971b      	str	r7, [sp, #108]	; 0x6c
 8003d7a:	785b      	ldrb	r3, [r3, #1]
 8003d7c:	2b30      	cmp	r3, #48	; 0x30
 8003d7e:	d0f9      	beq.n	8003d74 <_strtod_l+0x28c>
 8003d80:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8003d84:	2f08      	cmp	r7, #8
 8003d86:	f63f af7d 	bhi.w	8003c84 <_strtod_l+0x19c>
 8003d8a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003d8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d90:	930a      	str	r3, [sp, #40]	; 0x28
 8003d92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d94:	1c5f      	adds	r7, r3, #1
 8003d96:	971b      	str	r7, [sp, #108]	; 0x6c
 8003d98:	785b      	ldrb	r3, [r3, #1]
 8003d9a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8003d9e:	f1b8 0f09 	cmp.w	r8, #9
 8003da2:	d937      	bls.n	8003e14 <_strtod_l+0x32c>
 8003da4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003da6:	1a7f      	subs	r7, r7, r1
 8003da8:	2f08      	cmp	r7, #8
 8003daa:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003dae:	dc37      	bgt.n	8003e20 <_strtod_l+0x338>
 8003db0:	45be      	cmp	lr, r7
 8003db2:	bfa8      	it	ge
 8003db4:	46be      	movge	lr, r7
 8003db6:	f1bc 0f00 	cmp.w	ip, #0
 8003dba:	d001      	beq.n	8003dc0 <_strtod_l+0x2d8>
 8003dbc:	f1ce 0e00 	rsb	lr, lr, #0
 8003dc0:	2c00      	cmp	r4, #0
 8003dc2:	d151      	bne.n	8003e68 <_strtod_l+0x380>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	f47f aece 	bne.w	8003b66 <_strtod_l+0x7e>
 8003dca:	9a06      	ldr	r2, [sp, #24]
 8003dcc:	2a00      	cmp	r2, #0
 8003dce:	f47f aeca 	bne.w	8003b66 <_strtod_l+0x7e>
 8003dd2:	9a04      	ldr	r2, [sp, #16]
 8003dd4:	2a00      	cmp	r2, #0
 8003dd6:	f47f aee4 	bne.w	8003ba2 <_strtod_l+0xba>
 8003dda:	2b4e      	cmp	r3, #78	; 0x4e
 8003ddc:	d027      	beq.n	8003e2e <_strtod_l+0x346>
 8003dde:	dc21      	bgt.n	8003e24 <_strtod_l+0x33c>
 8003de0:	2b49      	cmp	r3, #73	; 0x49
 8003de2:	f47f aede 	bne.w	8003ba2 <_strtod_l+0xba>
 8003de6:	49a0      	ldr	r1, [pc, #640]	; (8004068 <_strtod_l+0x580>)
 8003de8:	a81b      	add	r0, sp, #108	; 0x6c
 8003dea:	f001 fdd7 	bl	800599c <__match>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	f43f aed7 	beq.w	8003ba2 <_strtod_l+0xba>
 8003df4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003df6:	499d      	ldr	r1, [pc, #628]	; (800406c <_strtod_l+0x584>)
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	a81b      	add	r0, sp, #108	; 0x6c
 8003dfc:	931b      	str	r3, [sp, #108]	; 0x6c
 8003dfe:	f001 fdcd 	bl	800599c <__match>
 8003e02:	b910      	cbnz	r0, 8003e0a <_strtod_l+0x322>
 8003e04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e06:	3301      	adds	r3, #1
 8003e08:	931b      	str	r3, [sp, #108]	; 0x6c
 8003e0a:	f8df b274 	ldr.w	fp, [pc, #628]	; 8004080 <_strtod_l+0x598>
 8003e0e:	f04f 0a00 	mov.w	sl, #0
 8003e12:	e6a8      	b.n	8003b66 <_strtod_l+0x7e>
 8003e14:	210a      	movs	r1, #10
 8003e16:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003e1a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003e1e:	e7b8      	b.n	8003d92 <_strtod_l+0x2aa>
 8003e20:	46be      	mov	lr, r7
 8003e22:	e7c8      	b.n	8003db6 <_strtod_l+0x2ce>
 8003e24:	2b69      	cmp	r3, #105	; 0x69
 8003e26:	d0de      	beq.n	8003de6 <_strtod_l+0x2fe>
 8003e28:	2b6e      	cmp	r3, #110	; 0x6e
 8003e2a:	f47f aeba 	bne.w	8003ba2 <_strtod_l+0xba>
 8003e2e:	4990      	ldr	r1, [pc, #576]	; (8004070 <_strtod_l+0x588>)
 8003e30:	a81b      	add	r0, sp, #108	; 0x6c
 8003e32:	f001 fdb3 	bl	800599c <__match>
 8003e36:	2800      	cmp	r0, #0
 8003e38:	f43f aeb3 	beq.w	8003ba2 <_strtod_l+0xba>
 8003e3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003e3e:	781b      	ldrb	r3, [r3, #0]
 8003e40:	2b28      	cmp	r3, #40	; 0x28
 8003e42:	d10e      	bne.n	8003e62 <_strtod_l+0x37a>
 8003e44:	aa1e      	add	r2, sp, #120	; 0x78
 8003e46:	498b      	ldr	r1, [pc, #556]	; (8004074 <_strtod_l+0x58c>)
 8003e48:	a81b      	add	r0, sp, #108	; 0x6c
 8003e4a:	f001 fdbb 	bl	80059c4 <__hexnan>
 8003e4e:	2805      	cmp	r0, #5
 8003e50:	d107      	bne.n	8003e62 <_strtod_l+0x37a>
 8003e52:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003e54:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8003e58:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003e5c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003e60:	e681      	b.n	8003b66 <_strtod_l+0x7e>
 8003e62:	f8df b224 	ldr.w	fp, [pc, #548]	; 8004088 <_strtod_l+0x5a0>
 8003e66:	e7d2      	b.n	8003e0e <_strtod_l+0x326>
 8003e68:	ebae 0302 	sub.w	r3, lr, r2
 8003e6c:	9306      	str	r3, [sp, #24]
 8003e6e:	9b05      	ldr	r3, [sp, #20]
 8003e70:	9807      	ldr	r0, [sp, #28]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	bf08      	it	eq
 8003e76:	4623      	moveq	r3, r4
 8003e78:	2c10      	cmp	r4, #16
 8003e7a:	9305      	str	r3, [sp, #20]
 8003e7c:	46a0      	mov	r8, r4
 8003e7e:	bfa8      	it	ge
 8003e80:	f04f 0810 	movge.w	r8, #16
 8003e84:	f7fc fbb6 	bl	80005f4 <__aeabi_ui2d>
 8003e88:	2c09      	cmp	r4, #9
 8003e8a:	4682      	mov	sl, r0
 8003e8c:	468b      	mov	fp, r1
 8003e8e:	dc13      	bgt.n	8003eb8 <_strtod_l+0x3d0>
 8003e90:	9b06      	ldr	r3, [sp, #24]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f43f ae67 	beq.w	8003b66 <_strtod_l+0x7e>
 8003e98:	9b06      	ldr	r3, [sp, #24]
 8003e9a:	dd7a      	ble.n	8003f92 <_strtod_l+0x4aa>
 8003e9c:	2b16      	cmp	r3, #22
 8003e9e:	dc61      	bgt.n	8003f64 <_strtod_l+0x47c>
 8003ea0:	4a75      	ldr	r2, [pc, #468]	; (8004078 <_strtod_l+0x590>)
 8003ea2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8003ea6:	e9de 0100 	ldrd	r0, r1, [lr]
 8003eaa:	4652      	mov	r2, sl
 8003eac:	465b      	mov	r3, fp
 8003eae:	f7fc fc1b 	bl	80006e8 <__aeabi_dmul>
 8003eb2:	4682      	mov	sl, r0
 8003eb4:	468b      	mov	fp, r1
 8003eb6:	e656      	b.n	8003b66 <_strtod_l+0x7e>
 8003eb8:	4b6f      	ldr	r3, [pc, #444]	; (8004078 <_strtod_l+0x590>)
 8003eba:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003ebe:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003ec2:	f7fc fc11 	bl	80006e8 <__aeabi_dmul>
 8003ec6:	4606      	mov	r6, r0
 8003ec8:	4628      	mov	r0, r5
 8003eca:	460f      	mov	r7, r1
 8003ecc:	f7fc fb92 	bl	80005f4 <__aeabi_ui2d>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	4639      	mov	r1, r7
 8003ed8:	f7fc fa50 	bl	800037c <__adddf3>
 8003edc:	2c0f      	cmp	r4, #15
 8003ede:	4682      	mov	sl, r0
 8003ee0:	468b      	mov	fp, r1
 8003ee2:	ddd5      	ble.n	8003e90 <_strtod_l+0x3a8>
 8003ee4:	9b06      	ldr	r3, [sp, #24]
 8003ee6:	eba4 0808 	sub.w	r8, r4, r8
 8003eea:	4498      	add	r8, r3
 8003eec:	f1b8 0f00 	cmp.w	r8, #0
 8003ef0:	f340 8096 	ble.w	8004020 <_strtod_l+0x538>
 8003ef4:	f018 030f 	ands.w	r3, r8, #15
 8003ef8:	d00a      	beq.n	8003f10 <_strtod_l+0x428>
 8003efa:	495f      	ldr	r1, [pc, #380]	; (8004078 <_strtod_l+0x590>)
 8003efc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003f00:	4652      	mov	r2, sl
 8003f02:	465b      	mov	r3, fp
 8003f04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f08:	f7fc fbee 	bl	80006e8 <__aeabi_dmul>
 8003f0c:	4682      	mov	sl, r0
 8003f0e:	468b      	mov	fp, r1
 8003f10:	f038 080f 	bics.w	r8, r8, #15
 8003f14:	d073      	beq.n	8003ffe <_strtod_l+0x516>
 8003f16:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003f1a:	dd47      	ble.n	8003fac <_strtod_l+0x4c4>
 8003f1c:	2400      	movs	r4, #0
 8003f1e:	46a0      	mov	r8, r4
 8003f20:	9407      	str	r4, [sp, #28]
 8003f22:	9405      	str	r4, [sp, #20]
 8003f24:	2322      	movs	r3, #34	; 0x22
 8003f26:	f8df b158 	ldr.w	fp, [pc, #344]	; 8004080 <_strtod_l+0x598>
 8003f2a:	f8c9 3000 	str.w	r3, [r9]
 8003f2e:	f04f 0a00 	mov.w	sl, #0
 8003f32:	9b07      	ldr	r3, [sp, #28]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f43f ae16 	beq.w	8003b66 <_strtod_l+0x7e>
 8003f3a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003f3c:	4648      	mov	r0, r9
 8003f3e:	f001 fe33 	bl	8005ba8 <_Bfree>
 8003f42:	9905      	ldr	r1, [sp, #20]
 8003f44:	4648      	mov	r0, r9
 8003f46:	f001 fe2f 	bl	8005ba8 <_Bfree>
 8003f4a:	4641      	mov	r1, r8
 8003f4c:	4648      	mov	r0, r9
 8003f4e:	f001 fe2b 	bl	8005ba8 <_Bfree>
 8003f52:	9907      	ldr	r1, [sp, #28]
 8003f54:	4648      	mov	r0, r9
 8003f56:	f001 fe27 	bl	8005ba8 <_Bfree>
 8003f5a:	4621      	mov	r1, r4
 8003f5c:	4648      	mov	r0, r9
 8003f5e:	f001 fe23 	bl	8005ba8 <_Bfree>
 8003f62:	e600      	b.n	8003b66 <_strtod_l+0x7e>
 8003f64:	9a06      	ldr	r2, [sp, #24]
 8003f66:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	dbba      	blt.n	8003ee4 <_strtod_l+0x3fc>
 8003f6e:	4d42      	ldr	r5, [pc, #264]	; (8004078 <_strtod_l+0x590>)
 8003f70:	f1c4 040f 	rsb	r4, r4, #15
 8003f74:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003f78:	4652      	mov	r2, sl
 8003f7a:	465b      	mov	r3, fp
 8003f7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003f80:	f7fc fbb2 	bl	80006e8 <__aeabi_dmul>
 8003f84:	9b06      	ldr	r3, [sp, #24]
 8003f86:	1b1c      	subs	r4, r3, r4
 8003f88:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003f8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003f90:	e78d      	b.n	8003eae <_strtod_l+0x3c6>
 8003f92:	f113 0f16 	cmn.w	r3, #22
 8003f96:	dba5      	blt.n	8003ee4 <_strtod_l+0x3fc>
 8003f98:	4a37      	ldr	r2, [pc, #220]	; (8004078 <_strtod_l+0x590>)
 8003f9a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8003f9e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003fa2:	4650      	mov	r0, sl
 8003fa4:	4659      	mov	r1, fp
 8003fa6:	f7fc fcc9 	bl	800093c <__aeabi_ddiv>
 8003faa:	e782      	b.n	8003eb2 <_strtod_l+0x3ca>
 8003fac:	2300      	movs	r3, #0
 8003fae:	4e33      	ldr	r6, [pc, #204]	; (800407c <_strtod_l+0x594>)
 8003fb0:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003fb4:	4650      	mov	r0, sl
 8003fb6:	4659      	mov	r1, fp
 8003fb8:	461d      	mov	r5, r3
 8003fba:	f1b8 0f01 	cmp.w	r8, #1
 8003fbe:	dc21      	bgt.n	8004004 <_strtod_l+0x51c>
 8003fc0:	b10b      	cbz	r3, 8003fc6 <_strtod_l+0x4de>
 8003fc2:	4682      	mov	sl, r0
 8003fc4:	468b      	mov	fp, r1
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <_strtod_l+0x594>)
 8003fc8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003fcc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003fd0:	4652      	mov	r2, sl
 8003fd2:	465b      	mov	r3, fp
 8003fd4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003fd8:	f7fc fb86 	bl	80006e8 <__aeabi_dmul>
 8003fdc:	4b28      	ldr	r3, [pc, #160]	; (8004080 <_strtod_l+0x598>)
 8003fde:	460a      	mov	r2, r1
 8003fe0:	400b      	ands	r3, r1
 8003fe2:	4928      	ldr	r1, [pc, #160]	; (8004084 <_strtod_l+0x59c>)
 8003fe4:	428b      	cmp	r3, r1
 8003fe6:	4682      	mov	sl, r0
 8003fe8:	d898      	bhi.n	8003f1c <_strtod_l+0x434>
 8003fea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003fee:	428b      	cmp	r3, r1
 8003ff0:	bf86      	itte	hi
 8003ff2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800408c <_strtod_l+0x5a4>
 8003ff6:	f04f 3aff 	movhi.w	sl, #4294967295
 8003ffa:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003ffe:	2300      	movs	r3, #0
 8004000:	9304      	str	r3, [sp, #16]
 8004002:	e077      	b.n	80040f4 <_strtod_l+0x60c>
 8004004:	f018 0f01 	tst.w	r8, #1
 8004008:	d006      	beq.n	8004018 <_strtod_l+0x530>
 800400a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc fb69 	bl	80006e8 <__aeabi_dmul>
 8004016:	2301      	movs	r3, #1
 8004018:	3501      	adds	r5, #1
 800401a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800401e:	e7cc      	b.n	8003fba <_strtod_l+0x4d2>
 8004020:	d0ed      	beq.n	8003ffe <_strtod_l+0x516>
 8004022:	f1c8 0800 	rsb	r8, r8, #0
 8004026:	f018 020f 	ands.w	r2, r8, #15
 800402a:	d00a      	beq.n	8004042 <_strtod_l+0x55a>
 800402c:	4b12      	ldr	r3, [pc, #72]	; (8004078 <_strtod_l+0x590>)
 800402e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004032:	4650      	mov	r0, sl
 8004034:	4659      	mov	r1, fp
 8004036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800403a:	f7fc fc7f 	bl	800093c <__aeabi_ddiv>
 800403e:	4682      	mov	sl, r0
 8004040:	468b      	mov	fp, r1
 8004042:	ea5f 1828 	movs.w	r8, r8, asr #4
 8004046:	d0da      	beq.n	8003ffe <_strtod_l+0x516>
 8004048:	f1b8 0f1f 	cmp.w	r8, #31
 800404c:	dd20      	ble.n	8004090 <_strtod_l+0x5a8>
 800404e:	2400      	movs	r4, #0
 8004050:	46a0      	mov	r8, r4
 8004052:	9407      	str	r4, [sp, #28]
 8004054:	9405      	str	r4, [sp, #20]
 8004056:	2322      	movs	r3, #34	; 0x22
 8004058:	f04f 0a00 	mov.w	sl, #0
 800405c:	f04f 0b00 	mov.w	fp, #0
 8004060:	f8c9 3000 	str.w	r3, [r9]
 8004064:	e765      	b.n	8003f32 <_strtod_l+0x44a>
 8004066:	bf00      	nop
 8004068:	08006a81 	.word	0x08006a81
 800406c:	08006b0b 	.word	0x08006b0b
 8004070:	08006a89 	.word	0x08006a89
 8004074:	08006acc 	.word	0x08006acc
 8004078:	08006b48 	.word	0x08006b48
 800407c:	08006b20 	.word	0x08006b20
 8004080:	7ff00000 	.word	0x7ff00000
 8004084:	7ca00000 	.word	0x7ca00000
 8004088:	fff80000 	.word	0xfff80000
 800408c:	7fefffff 	.word	0x7fefffff
 8004090:	f018 0310 	ands.w	r3, r8, #16
 8004094:	bf18      	it	ne
 8004096:	236a      	movne	r3, #106	; 0x6a
 8004098:	4da0      	ldr	r5, [pc, #640]	; (800431c <_strtod_l+0x834>)
 800409a:	9304      	str	r3, [sp, #16]
 800409c:	4650      	mov	r0, sl
 800409e:	4659      	mov	r1, fp
 80040a0:	2300      	movs	r3, #0
 80040a2:	f1b8 0f00 	cmp.w	r8, #0
 80040a6:	f300 810a 	bgt.w	80042be <_strtod_l+0x7d6>
 80040aa:	b10b      	cbz	r3, 80040b0 <_strtod_l+0x5c8>
 80040ac:	4682      	mov	sl, r0
 80040ae:	468b      	mov	fp, r1
 80040b0:	9b04      	ldr	r3, [sp, #16]
 80040b2:	b1bb      	cbz	r3, 80040e4 <_strtod_l+0x5fc>
 80040b4:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80040b8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80040bc:	2b00      	cmp	r3, #0
 80040be:	4659      	mov	r1, fp
 80040c0:	dd10      	ble.n	80040e4 <_strtod_l+0x5fc>
 80040c2:	2b1f      	cmp	r3, #31
 80040c4:	f340 8107 	ble.w	80042d6 <_strtod_l+0x7ee>
 80040c8:	2b34      	cmp	r3, #52	; 0x34
 80040ca:	bfde      	ittt	le
 80040cc:	3b20      	suble	r3, #32
 80040ce:	f04f 32ff 	movle.w	r2, #4294967295
 80040d2:	fa02 f303 	lslle.w	r3, r2, r3
 80040d6:	f04f 0a00 	mov.w	sl, #0
 80040da:	bfcc      	ite	gt
 80040dc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80040e0:	ea03 0b01 	andle.w	fp, r3, r1
 80040e4:	2200      	movs	r2, #0
 80040e6:	2300      	movs	r3, #0
 80040e8:	4650      	mov	r0, sl
 80040ea:	4659      	mov	r1, fp
 80040ec:	f7fc fd64 	bl	8000bb8 <__aeabi_dcmpeq>
 80040f0:	2800      	cmp	r0, #0
 80040f2:	d1ac      	bne.n	800404e <_strtod_l+0x566>
 80040f4:	9b07      	ldr	r3, [sp, #28]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	9a05      	ldr	r2, [sp, #20]
 80040fa:	9908      	ldr	r1, [sp, #32]
 80040fc:	4623      	mov	r3, r4
 80040fe:	4648      	mov	r0, r9
 8004100:	f001 fda4 	bl	8005c4c <__s2b>
 8004104:	9007      	str	r0, [sp, #28]
 8004106:	2800      	cmp	r0, #0
 8004108:	f43f af08 	beq.w	8003f1c <_strtod_l+0x434>
 800410c:	9a06      	ldr	r2, [sp, #24]
 800410e:	9b06      	ldr	r3, [sp, #24]
 8004110:	2a00      	cmp	r2, #0
 8004112:	f1c3 0300 	rsb	r3, r3, #0
 8004116:	bfa8      	it	ge
 8004118:	2300      	movge	r3, #0
 800411a:	930e      	str	r3, [sp, #56]	; 0x38
 800411c:	2400      	movs	r4, #0
 800411e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004122:	9316      	str	r3, [sp, #88]	; 0x58
 8004124:	46a0      	mov	r8, r4
 8004126:	9b07      	ldr	r3, [sp, #28]
 8004128:	4648      	mov	r0, r9
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	f001 fd08 	bl	8005b40 <_Balloc>
 8004130:	9005      	str	r0, [sp, #20]
 8004132:	2800      	cmp	r0, #0
 8004134:	f43f aef6 	beq.w	8003f24 <_strtod_l+0x43c>
 8004138:	9b07      	ldr	r3, [sp, #28]
 800413a:	691a      	ldr	r2, [r3, #16]
 800413c:	3202      	adds	r2, #2
 800413e:	f103 010c 	add.w	r1, r3, #12
 8004142:	0092      	lsls	r2, r2, #2
 8004144:	300c      	adds	r0, #12
 8004146:	f7fe fe3b 	bl	8002dc0 <memcpy>
 800414a:	aa1e      	add	r2, sp, #120	; 0x78
 800414c:	a91d      	add	r1, sp, #116	; 0x74
 800414e:	ec4b ab10 	vmov	d0, sl, fp
 8004152:	4648      	mov	r0, r9
 8004154:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004158:	f002 f834 	bl	80061c4 <__d2b>
 800415c:	901c      	str	r0, [sp, #112]	; 0x70
 800415e:	2800      	cmp	r0, #0
 8004160:	f43f aee0 	beq.w	8003f24 <_strtod_l+0x43c>
 8004164:	2101      	movs	r1, #1
 8004166:	4648      	mov	r0, r9
 8004168:	f001 fdfc 	bl	8005d64 <__i2b>
 800416c:	4680      	mov	r8, r0
 800416e:	2800      	cmp	r0, #0
 8004170:	f43f aed8 	beq.w	8003f24 <_strtod_l+0x43c>
 8004174:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8004176:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004178:	2e00      	cmp	r6, #0
 800417a:	bfab      	itete	ge
 800417c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800417e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004180:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8004182:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8004184:	bfac      	ite	ge
 8004186:	18f7      	addge	r7, r6, r3
 8004188:	1b9d      	sublt	r5, r3, r6
 800418a:	9b04      	ldr	r3, [sp, #16]
 800418c:	1af6      	subs	r6, r6, r3
 800418e:	4416      	add	r6, r2
 8004190:	4b63      	ldr	r3, [pc, #396]	; (8004320 <_strtod_l+0x838>)
 8004192:	3e01      	subs	r6, #1
 8004194:	429e      	cmp	r6, r3
 8004196:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800419a:	f280 80af 	bge.w	80042fc <_strtod_l+0x814>
 800419e:	1b9b      	subs	r3, r3, r6
 80041a0:	2b1f      	cmp	r3, #31
 80041a2:	eba2 0203 	sub.w	r2, r2, r3
 80041a6:	f04f 0101 	mov.w	r1, #1
 80041aa:	f300 809b 	bgt.w	80042e4 <_strtod_l+0x7fc>
 80041ae:	fa01 f303 	lsl.w	r3, r1, r3
 80041b2:	930f      	str	r3, [sp, #60]	; 0x3c
 80041b4:	2300      	movs	r3, #0
 80041b6:	930a      	str	r3, [sp, #40]	; 0x28
 80041b8:	18be      	adds	r6, r7, r2
 80041ba:	9b04      	ldr	r3, [sp, #16]
 80041bc:	42b7      	cmp	r7, r6
 80041be:	4415      	add	r5, r2
 80041c0:	441d      	add	r5, r3
 80041c2:	463b      	mov	r3, r7
 80041c4:	bfa8      	it	ge
 80041c6:	4633      	movge	r3, r6
 80041c8:	42ab      	cmp	r3, r5
 80041ca:	bfa8      	it	ge
 80041cc:	462b      	movge	r3, r5
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	bfc2      	ittt	gt
 80041d2:	1af6      	subgt	r6, r6, r3
 80041d4:	1aed      	subgt	r5, r5, r3
 80041d6:	1aff      	subgt	r7, r7, r3
 80041d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041da:	b1bb      	cbz	r3, 800420c <_strtod_l+0x724>
 80041dc:	4641      	mov	r1, r8
 80041de:	461a      	mov	r2, r3
 80041e0:	4648      	mov	r0, r9
 80041e2:	f001 fe5f 	bl	8005ea4 <__pow5mult>
 80041e6:	4680      	mov	r8, r0
 80041e8:	2800      	cmp	r0, #0
 80041ea:	f43f ae9b 	beq.w	8003f24 <_strtod_l+0x43c>
 80041ee:	4601      	mov	r1, r0
 80041f0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80041f2:	4648      	mov	r0, r9
 80041f4:	f001 fdbf 	bl	8005d76 <__multiply>
 80041f8:	900c      	str	r0, [sp, #48]	; 0x30
 80041fa:	2800      	cmp	r0, #0
 80041fc:	f43f ae92 	beq.w	8003f24 <_strtod_l+0x43c>
 8004200:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004202:	4648      	mov	r0, r9
 8004204:	f001 fcd0 	bl	8005ba8 <_Bfree>
 8004208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800420a:	931c      	str	r3, [sp, #112]	; 0x70
 800420c:	2e00      	cmp	r6, #0
 800420e:	dc7a      	bgt.n	8004306 <_strtod_l+0x81e>
 8004210:	9b06      	ldr	r3, [sp, #24]
 8004212:	2b00      	cmp	r3, #0
 8004214:	dd08      	ble.n	8004228 <_strtod_l+0x740>
 8004216:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004218:	9905      	ldr	r1, [sp, #20]
 800421a:	4648      	mov	r0, r9
 800421c:	f001 fe42 	bl	8005ea4 <__pow5mult>
 8004220:	9005      	str	r0, [sp, #20]
 8004222:	2800      	cmp	r0, #0
 8004224:	f43f ae7e 	beq.w	8003f24 <_strtod_l+0x43c>
 8004228:	2d00      	cmp	r5, #0
 800422a:	dd08      	ble.n	800423e <_strtod_l+0x756>
 800422c:	462a      	mov	r2, r5
 800422e:	9905      	ldr	r1, [sp, #20]
 8004230:	4648      	mov	r0, r9
 8004232:	f001 fe85 	bl	8005f40 <__lshift>
 8004236:	9005      	str	r0, [sp, #20]
 8004238:	2800      	cmp	r0, #0
 800423a:	f43f ae73 	beq.w	8003f24 <_strtod_l+0x43c>
 800423e:	2f00      	cmp	r7, #0
 8004240:	dd08      	ble.n	8004254 <_strtod_l+0x76c>
 8004242:	4641      	mov	r1, r8
 8004244:	463a      	mov	r2, r7
 8004246:	4648      	mov	r0, r9
 8004248:	f001 fe7a 	bl	8005f40 <__lshift>
 800424c:	4680      	mov	r8, r0
 800424e:	2800      	cmp	r0, #0
 8004250:	f43f ae68 	beq.w	8003f24 <_strtod_l+0x43c>
 8004254:	9a05      	ldr	r2, [sp, #20]
 8004256:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004258:	4648      	mov	r0, r9
 800425a:	f001 fedf 	bl	800601c <__mdiff>
 800425e:	4604      	mov	r4, r0
 8004260:	2800      	cmp	r0, #0
 8004262:	f43f ae5f 	beq.w	8003f24 <_strtod_l+0x43c>
 8004266:	68c3      	ldr	r3, [r0, #12]
 8004268:	930c      	str	r3, [sp, #48]	; 0x30
 800426a:	2300      	movs	r3, #0
 800426c:	60c3      	str	r3, [r0, #12]
 800426e:	4641      	mov	r1, r8
 8004270:	f001 feba 	bl	8005fe8 <__mcmp>
 8004274:	2800      	cmp	r0, #0
 8004276:	da55      	bge.n	8004324 <_strtod_l+0x83c>
 8004278:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800427a:	b9e3      	cbnz	r3, 80042b6 <_strtod_l+0x7ce>
 800427c:	f1ba 0f00 	cmp.w	sl, #0
 8004280:	d119      	bne.n	80042b6 <_strtod_l+0x7ce>
 8004282:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004286:	b9b3      	cbnz	r3, 80042b6 <_strtod_l+0x7ce>
 8004288:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800428c:	0d1b      	lsrs	r3, r3, #20
 800428e:	051b      	lsls	r3, r3, #20
 8004290:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8004294:	d90f      	bls.n	80042b6 <_strtod_l+0x7ce>
 8004296:	6963      	ldr	r3, [r4, #20]
 8004298:	b913      	cbnz	r3, 80042a0 <_strtod_l+0x7b8>
 800429a:	6923      	ldr	r3, [r4, #16]
 800429c:	2b01      	cmp	r3, #1
 800429e:	dd0a      	ble.n	80042b6 <_strtod_l+0x7ce>
 80042a0:	4621      	mov	r1, r4
 80042a2:	2201      	movs	r2, #1
 80042a4:	4648      	mov	r0, r9
 80042a6:	f001 fe4b 	bl	8005f40 <__lshift>
 80042aa:	4641      	mov	r1, r8
 80042ac:	4604      	mov	r4, r0
 80042ae:	f001 fe9b 	bl	8005fe8 <__mcmp>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	dc67      	bgt.n	8004386 <_strtod_l+0x89e>
 80042b6:	9b04      	ldr	r3, [sp, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d171      	bne.n	80043a0 <_strtod_l+0x8b8>
 80042bc:	e63d      	b.n	8003f3a <_strtod_l+0x452>
 80042be:	f018 0f01 	tst.w	r8, #1
 80042c2:	d004      	beq.n	80042ce <_strtod_l+0x7e6>
 80042c4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80042c8:	f7fc fa0e 	bl	80006e8 <__aeabi_dmul>
 80042cc:	2301      	movs	r3, #1
 80042ce:	ea4f 0868 	mov.w	r8, r8, asr #1
 80042d2:	3508      	adds	r5, #8
 80042d4:	e6e5      	b.n	80040a2 <_strtod_l+0x5ba>
 80042d6:	f04f 32ff 	mov.w	r2, #4294967295
 80042da:	fa02 f303 	lsl.w	r3, r2, r3
 80042de:	ea03 0a0a 	and.w	sl, r3, sl
 80042e2:	e6ff      	b.n	80040e4 <_strtod_l+0x5fc>
 80042e4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80042e8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80042ec:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80042f0:	36e2      	adds	r6, #226	; 0xe2
 80042f2:	fa01 f306 	lsl.w	r3, r1, r6
 80042f6:	930a      	str	r3, [sp, #40]	; 0x28
 80042f8:	910f      	str	r1, [sp, #60]	; 0x3c
 80042fa:	e75d      	b.n	80041b8 <_strtod_l+0x6d0>
 80042fc:	2300      	movs	r3, #0
 80042fe:	930a      	str	r3, [sp, #40]	; 0x28
 8004300:	2301      	movs	r3, #1
 8004302:	930f      	str	r3, [sp, #60]	; 0x3c
 8004304:	e758      	b.n	80041b8 <_strtod_l+0x6d0>
 8004306:	4632      	mov	r2, r6
 8004308:	991c      	ldr	r1, [sp, #112]	; 0x70
 800430a:	4648      	mov	r0, r9
 800430c:	f001 fe18 	bl	8005f40 <__lshift>
 8004310:	901c      	str	r0, [sp, #112]	; 0x70
 8004312:	2800      	cmp	r0, #0
 8004314:	f47f af7c 	bne.w	8004210 <_strtod_l+0x728>
 8004318:	e604      	b.n	8003f24 <_strtod_l+0x43c>
 800431a:	bf00      	nop
 800431c:	08006ae0 	.word	0x08006ae0
 8004320:	fffffc02 	.word	0xfffffc02
 8004324:	465d      	mov	r5, fp
 8004326:	f040 8086 	bne.w	8004436 <_strtod_l+0x94e>
 800432a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800432c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004330:	b32a      	cbz	r2, 800437e <_strtod_l+0x896>
 8004332:	4aaf      	ldr	r2, [pc, #700]	; (80045f0 <_strtod_l+0xb08>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d153      	bne.n	80043e0 <_strtod_l+0x8f8>
 8004338:	9b04      	ldr	r3, [sp, #16]
 800433a:	4650      	mov	r0, sl
 800433c:	b1d3      	cbz	r3, 8004374 <_strtod_l+0x88c>
 800433e:	4aad      	ldr	r2, [pc, #692]	; (80045f4 <_strtod_l+0xb0c>)
 8004340:	402a      	ands	r2, r5
 8004342:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8004346:	f04f 31ff 	mov.w	r1, #4294967295
 800434a:	d816      	bhi.n	800437a <_strtod_l+0x892>
 800434c:	0d12      	lsrs	r2, r2, #20
 800434e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	4298      	cmp	r0, r3
 8004358:	d142      	bne.n	80043e0 <_strtod_l+0x8f8>
 800435a:	4ba7      	ldr	r3, [pc, #668]	; (80045f8 <_strtod_l+0xb10>)
 800435c:	429d      	cmp	r5, r3
 800435e:	d102      	bne.n	8004366 <_strtod_l+0x87e>
 8004360:	3001      	adds	r0, #1
 8004362:	f43f addf 	beq.w	8003f24 <_strtod_l+0x43c>
 8004366:	4ba3      	ldr	r3, [pc, #652]	; (80045f4 <_strtod_l+0xb0c>)
 8004368:	402b      	ands	r3, r5
 800436a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800436e:	f04f 0a00 	mov.w	sl, #0
 8004372:	e7a0      	b.n	80042b6 <_strtod_l+0x7ce>
 8004374:	f04f 33ff 	mov.w	r3, #4294967295
 8004378:	e7ed      	b.n	8004356 <_strtod_l+0x86e>
 800437a:	460b      	mov	r3, r1
 800437c:	e7eb      	b.n	8004356 <_strtod_l+0x86e>
 800437e:	bb7b      	cbnz	r3, 80043e0 <_strtod_l+0x8f8>
 8004380:	f1ba 0f00 	cmp.w	sl, #0
 8004384:	d12c      	bne.n	80043e0 <_strtod_l+0x8f8>
 8004386:	9904      	ldr	r1, [sp, #16]
 8004388:	4a9a      	ldr	r2, [pc, #616]	; (80045f4 <_strtod_l+0xb0c>)
 800438a:	465b      	mov	r3, fp
 800438c:	b1f1      	cbz	r1, 80043cc <_strtod_l+0x8e4>
 800438e:	ea02 010b 	and.w	r1, r2, fp
 8004392:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004396:	dc19      	bgt.n	80043cc <_strtod_l+0x8e4>
 8004398:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800439c:	f77f ae5b 	ble.w	8004056 <_strtod_l+0x56e>
 80043a0:	4a96      	ldr	r2, [pc, #600]	; (80045fc <_strtod_l+0xb14>)
 80043a2:	2300      	movs	r3, #0
 80043a4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80043a8:	4650      	mov	r0, sl
 80043aa:	4659      	mov	r1, fp
 80043ac:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80043b0:	f7fc f99a 	bl	80006e8 <__aeabi_dmul>
 80043b4:	4682      	mov	sl, r0
 80043b6:	468b      	mov	fp, r1
 80043b8:	2900      	cmp	r1, #0
 80043ba:	f47f adbe 	bne.w	8003f3a <_strtod_l+0x452>
 80043be:	2800      	cmp	r0, #0
 80043c0:	f47f adbb 	bne.w	8003f3a <_strtod_l+0x452>
 80043c4:	2322      	movs	r3, #34	; 0x22
 80043c6:	f8c9 3000 	str.w	r3, [r9]
 80043ca:	e5b6      	b.n	8003f3a <_strtod_l+0x452>
 80043cc:	4013      	ands	r3, r2
 80043ce:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80043d2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80043d6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80043da:	f04f 3aff 	mov.w	sl, #4294967295
 80043de:	e76a      	b.n	80042b6 <_strtod_l+0x7ce>
 80043e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80043e2:	b193      	cbz	r3, 800440a <_strtod_l+0x922>
 80043e4:	422b      	tst	r3, r5
 80043e6:	f43f af66 	beq.w	80042b6 <_strtod_l+0x7ce>
 80043ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80043ec:	9a04      	ldr	r2, [sp, #16]
 80043ee:	4650      	mov	r0, sl
 80043f0:	4659      	mov	r1, fp
 80043f2:	b173      	cbz	r3, 8004412 <_strtod_l+0x92a>
 80043f4:	f7ff fb5c 	bl	8003ab0 <sulp>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004400:	f7fb ffbc 	bl	800037c <__adddf3>
 8004404:	4682      	mov	sl, r0
 8004406:	468b      	mov	fp, r1
 8004408:	e755      	b.n	80042b6 <_strtod_l+0x7ce>
 800440a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800440c:	ea13 0f0a 	tst.w	r3, sl
 8004410:	e7e9      	b.n	80043e6 <_strtod_l+0x8fe>
 8004412:	f7ff fb4d 	bl	8003ab0 <sulp>
 8004416:	4602      	mov	r2, r0
 8004418:	460b      	mov	r3, r1
 800441a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800441e:	f7fb ffab 	bl	8000378 <__aeabi_dsub>
 8004422:	2200      	movs	r2, #0
 8004424:	2300      	movs	r3, #0
 8004426:	4682      	mov	sl, r0
 8004428:	468b      	mov	fp, r1
 800442a:	f7fc fbc5 	bl	8000bb8 <__aeabi_dcmpeq>
 800442e:	2800      	cmp	r0, #0
 8004430:	f47f ae11 	bne.w	8004056 <_strtod_l+0x56e>
 8004434:	e73f      	b.n	80042b6 <_strtod_l+0x7ce>
 8004436:	4641      	mov	r1, r8
 8004438:	4620      	mov	r0, r4
 800443a:	f001 ff12 	bl	8006262 <__ratio>
 800443e:	ec57 6b10 	vmov	r6, r7, d0
 8004442:	2200      	movs	r2, #0
 8004444:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004448:	ee10 0a10 	vmov	r0, s0
 800444c:	4639      	mov	r1, r7
 800444e:	f7fc fbc7 	bl	8000be0 <__aeabi_dcmple>
 8004452:	2800      	cmp	r0, #0
 8004454:	d077      	beq.n	8004546 <_strtod_l+0xa5e>
 8004456:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004458:	2b00      	cmp	r3, #0
 800445a:	d04a      	beq.n	80044f2 <_strtod_l+0xa0a>
 800445c:	4b68      	ldr	r3, [pc, #416]	; (8004600 <_strtod_l+0xb18>)
 800445e:	2200      	movs	r2, #0
 8004460:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004464:	4f66      	ldr	r7, [pc, #408]	; (8004600 <_strtod_l+0xb18>)
 8004466:	2600      	movs	r6, #0
 8004468:	4b62      	ldr	r3, [pc, #392]	; (80045f4 <_strtod_l+0xb0c>)
 800446a:	402b      	ands	r3, r5
 800446c:	930f      	str	r3, [sp, #60]	; 0x3c
 800446e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004470:	4b64      	ldr	r3, [pc, #400]	; (8004604 <_strtod_l+0xb1c>)
 8004472:	429a      	cmp	r2, r3
 8004474:	f040 80ce 	bne.w	8004614 <_strtod_l+0xb2c>
 8004478:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800447c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004480:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8004484:	ec4b ab10 	vmov	d0, sl, fp
 8004488:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800448c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004490:	f001 fe22 	bl	80060d8 <__ulp>
 8004494:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004498:	ec53 2b10 	vmov	r2, r3, d0
 800449c:	f7fc f924 	bl	80006e8 <__aeabi_dmul>
 80044a0:	4652      	mov	r2, sl
 80044a2:	465b      	mov	r3, fp
 80044a4:	f7fb ff6a 	bl	800037c <__adddf3>
 80044a8:	460b      	mov	r3, r1
 80044aa:	4952      	ldr	r1, [pc, #328]	; (80045f4 <_strtod_l+0xb0c>)
 80044ac:	4a56      	ldr	r2, [pc, #344]	; (8004608 <_strtod_l+0xb20>)
 80044ae:	4019      	ands	r1, r3
 80044b0:	4291      	cmp	r1, r2
 80044b2:	4682      	mov	sl, r0
 80044b4:	d95b      	bls.n	800456e <_strtod_l+0xa86>
 80044b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b8:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80044bc:	4293      	cmp	r3, r2
 80044be:	d103      	bne.n	80044c8 <_strtod_l+0x9e0>
 80044c0:	9b08      	ldr	r3, [sp, #32]
 80044c2:	3301      	adds	r3, #1
 80044c4:	f43f ad2e 	beq.w	8003f24 <_strtod_l+0x43c>
 80044c8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80045f8 <_strtod_l+0xb10>
 80044cc:	f04f 3aff 	mov.w	sl, #4294967295
 80044d0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80044d2:	4648      	mov	r0, r9
 80044d4:	f001 fb68 	bl	8005ba8 <_Bfree>
 80044d8:	9905      	ldr	r1, [sp, #20]
 80044da:	4648      	mov	r0, r9
 80044dc:	f001 fb64 	bl	8005ba8 <_Bfree>
 80044e0:	4641      	mov	r1, r8
 80044e2:	4648      	mov	r0, r9
 80044e4:	f001 fb60 	bl	8005ba8 <_Bfree>
 80044e8:	4621      	mov	r1, r4
 80044ea:	4648      	mov	r0, r9
 80044ec:	f001 fb5c 	bl	8005ba8 <_Bfree>
 80044f0:	e619      	b.n	8004126 <_strtod_l+0x63e>
 80044f2:	f1ba 0f00 	cmp.w	sl, #0
 80044f6:	d11a      	bne.n	800452e <_strtod_l+0xa46>
 80044f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80044fc:	b9eb      	cbnz	r3, 800453a <_strtod_l+0xa52>
 80044fe:	2200      	movs	r2, #0
 8004500:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <_strtod_l+0xb18>)
 8004502:	4630      	mov	r0, r6
 8004504:	4639      	mov	r1, r7
 8004506:	f7fc fb61 	bl	8000bcc <__aeabi_dcmplt>
 800450a:	b9c8      	cbnz	r0, 8004540 <_strtod_l+0xa58>
 800450c:	4630      	mov	r0, r6
 800450e:	4639      	mov	r1, r7
 8004510:	2200      	movs	r2, #0
 8004512:	4b3e      	ldr	r3, [pc, #248]	; (800460c <_strtod_l+0xb24>)
 8004514:	f7fc f8e8 	bl	80006e8 <__aeabi_dmul>
 8004518:	4606      	mov	r6, r0
 800451a:	460f      	mov	r7, r1
 800451c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004520:	9618      	str	r6, [sp, #96]	; 0x60
 8004522:	9319      	str	r3, [sp, #100]	; 0x64
 8004524:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004528:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800452c:	e79c      	b.n	8004468 <_strtod_l+0x980>
 800452e:	f1ba 0f01 	cmp.w	sl, #1
 8004532:	d102      	bne.n	800453a <_strtod_l+0xa52>
 8004534:	2d00      	cmp	r5, #0
 8004536:	f43f ad8e 	beq.w	8004056 <_strtod_l+0x56e>
 800453a:	2200      	movs	r2, #0
 800453c:	4b34      	ldr	r3, [pc, #208]	; (8004610 <_strtod_l+0xb28>)
 800453e:	e78f      	b.n	8004460 <_strtod_l+0x978>
 8004540:	2600      	movs	r6, #0
 8004542:	4f32      	ldr	r7, [pc, #200]	; (800460c <_strtod_l+0xb24>)
 8004544:	e7ea      	b.n	800451c <_strtod_l+0xa34>
 8004546:	4b31      	ldr	r3, [pc, #196]	; (800460c <_strtod_l+0xb24>)
 8004548:	4630      	mov	r0, r6
 800454a:	4639      	mov	r1, r7
 800454c:	2200      	movs	r2, #0
 800454e:	f7fc f8cb 	bl	80006e8 <__aeabi_dmul>
 8004552:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004554:	4606      	mov	r6, r0
 8004556:	460f      	mov	r7, r1
 8004558:	b933      	cbnz	r3, 8004568 <_strtod_l+0xa80>
 800455a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800455e:	9010      	str	r0, [sp, #64]	; 0x40
 8004560:	9311      	str	r3, [sp, #68]	; 0x44
 8004562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004566:	e7df      	b.n	8004528 <_strtod_l+0xa40>
 8004568:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800456c:	e7f9      	b.n	8004562 <_strtod_l+0xa7a>
 800456e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8004572:	9b04      	ldr	r3, [sp, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1ab      	bne.n	80044d0 <_strtod_l+0x9e8>
 8004578:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800457c:	0d1b      	lsrs	r3, r3, #20
 800457e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004580:	051b      	lsls	r3, r3, #20
 8004582:	429a      	cmp	r2, r3
 8004584:	465d      	mov	r5, fp
 8004586:	d1a3      	bne.n	80044d0 <_strtod_l+0x9e8>
 8004588:	4639      	mov	r1, r7
 800458a:	4630      	mov	r0, r6
 800458c:	f7fc fb5c 	bl	8000c48 <__aeabi_d2iz>
 8004590:	f7fc f840 	bl	8000614 <__aeabi_i2d>
 8004594:	460b      	mov	r3, r1
 8004596:	4602      	mov	r2, r0
 8004598:	4639      	mov	r1, r7
 800459a:	4630      	mov	r0, r6
 800459c:	f7fb feec 	bl	8000378 <__aeabi_dsub>
 80045a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80045a2:	4606      	mov	r6, r0
 80045a4:	460f      	mov	r7, r1
 80045a6:	b933      	cbnz	r3, 80045b6 <_strtod_l+0xace>
 80045a8:	f1ba 0f00 	cmp.w	sl, #0
 80045ac:	d103      	bne.n	80045b6 <_strtod_l+0xace>
 80045ae:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	d06d      	beq.n	8004692 <_strtod_l+0xbaa>
 80045b6:	a30a      	add	r3, pc, #40	; (adr r3, 80045e0 <_strtod_l+0xaf8>)
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	4630      	mov	r0, r6
 80045be:	4639      	mov	r1, r7
 80045c0:	f7fc fb04 	bl	8000bcc <__aeabi_dcmplt>
 80045c4:	2800      	cmp	r0, #0
 80045c6:	f47f acb8 	bne.w	8003f3a <_strtod_l+0x452>
 80045ca:	a307      	add	r3, pc, #28	; (adr r3, 80045e8 <_strtod_l+0xb00>)
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	4630      	mov	r0, r6
 80045d2:	4639      	mov	r1, r7
 80045d4:	f7fc fb18 	bl	8000c08 <__aeabi_dcmpgt>
 80045d8:	2800      	cmp	r0, #0
 80045da:	f43f af79 	beq.w	80044d0 <_strtod_l+0x9e8>
 80045de:	e4ac      	b.n	8003f3a <_strtod_l+0x452>
 80045e0:	94a03595 	.word	0x94a03595
 80045e4:	3fdfffff 	.word	0x3fdfffff
 80045e8:	35afe535 	.word	0x35afe535
 80045ec:	3fe00000 	.word	0x3fe00000
 80045f0:	000fffff 	.word	0x000fffff
 80045f4:	7ff00000 	.word	0x7ff00000
 80045f8:	7fefffff 	.word	0x7fefffff
 80045fc:	39500000 	.word	0x39500000
 8004600:	3ff00000 	.word	0x3ff00000
 8004604:	7fe00000 	.word	0x7fe00000
 8004608:	7c9fffff 	.word	0x7c9fffff
 800460c:	3fe00000 	.word	0x3fe00000
 8004610:	bff00000 	.word	0xbff00000
 8004614:	9b04      	ldr	r3, [sp, #16]
 8004616:	b333      	cbz	r3, 8004666 <_strtod_l+0xb7e>
 8004618:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800461a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800461e:	d822      	bhi.n	8004666 <_strtod_l+0xb7e>
 8004620:	a327      	add	r3, pc, #156	; (adr r3, 80046c0 <_strtod_l+0xbd8>)
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	4630      	mov	r0, r6
 8004628:	4639      	mov	r1, r7
 800462a:	f7fc fad9 	bl	8000be0 <__aeabi_dcmple>
 800462e:	b1a0      	cbz	r0, 800465a <_strtod_l+0xb72>
 8004630:	4639      	mov	r1, r7
 8004632:	4630      	mov	r0, r6
 8004634:	f7fc fb30 	bl	8000c98 <__aeabi_d2uiz>
 8004638:	2800      	cmp	r0, #0
 800463a:	bf08      	it	eq
 800463c:	2001      	moveq	r0, #1
 800463e:	f7fb ffd9 	bl	80005f4 <__aeabi_ui2d>
 8004642:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004644:	4606      	mov	r6, r0
 8004646:	460f      	mov	r7, r1
 8004648:	bb03      	cbnz	r3, 800468c <_strtod_l+0xba4>
 800464a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800464e:	9012      	str	r0, [sp, #72]	; 0x48
 8004650:	9313      	str	r3, [sp, #76]	; 0x4c
 8004652:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004656:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800465a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800465c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800465e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	930b      	str	r3, [sp, #44]	; 0x2c
 8004666:	ed9d 0b08 	vldr	d0, [sp, #32]
 800466a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800466e:	f001 fd33 	bl	80060d8 <__ulp>
 8004672:	4650      	mov	r0, sl
 8004674:	ec53 2b10 	vmov	r2, r3, d0
 8004678:	4659      	mov	r1, fp
 800467a:	f7fc f835 	bl	80006e8 <__aeabi_dmul>
 800467e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004682:	f7fb fe7b 	bl	800037c <__adddf3>
 8004686:	4682      	mov	sl, r0
 8004688:	468b      	mov	fp, r1
 800468a:	e772      	b.n	8004572 <_strtod_l+0xa8a>
 800468c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8004690:	e7df      	b.n	8004652 <_strtod_l+0xb6a>
 8004692:	a30d      	add	r3, pc, #52	; (adr r3, 80046c8 <_strtod_l+0xbe0>)
 8004694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004698:	f7fc fa98 	bl	8000bcc <__aeabi_dcmplt>
 800469c:	e79c      	b.n	80045d8 <_strtod_l+0xaf0>
 800469e:	2300      	movs	r3, #0
 80046a0:	930d      	str	r3, [sp, #52]	; 0x34
 80046a2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80046a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	f7ff ba61 	b.w	8003b6e <_strtod_l+0x86>
 80046ac:	2b65      	cmp	r3, #101	; 0x65
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f43f ab4e 	beq.w	8003d52 <_strtod_l+0x26a>
 80046b6:	2101      	movs	r1, #1
 80046b8:	4614      	mov	r4, r2
 80046ba:	9104      	str	r1, [sp, #16]
 80046bc:	f7ff bacb 	b.w	8003c56 <_strtod_l+0x16e>
 80046c0:	ffc00000 	.word	0xffc00000
 80046c4:	41dfffff 	.word	0x41dfffff
 80046c8:	94a03595 	.word	0x94a03595
 80046cc:	3fcfffff 	.word	0x3fcfffff

080046d0 <_strtod_r>:
 80046d0:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <_strtod_r+0x18>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	b410      	push	{r4}
 80046d6:	6a1b      	ldr	r3, [r3, #32]
 80046d8:	4c04      	ldr	r4, [pc, #16]	; (80046ec <_strtod_r+0x1c>)
 80046da:	2b00      	cmp	r3, #0
 80046dc:	bf08      	it	eq
 80046de:	4623      	moveq	r3, r4
 80046e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80046e4:	f7ff ba00 	b.w	8003ae8 <_strtod_l>
 80046e8:	2000000c 	.word	0x2000000c
 80046ec:	20000070 	.word	0x20000070

080046f0 <_strtol_l.isra.0>:
 80046f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	4680      	mov	r8, r0
 80046f6:	4689      	mov	r9, r1
 80046f8:	4692      	mov	sl, r2
 80046fa:	461e      	mov	r6, r3
 80046fc:	460f      	mov	r7, r1
 80046fe:	463d      	mov	r5, r7
 8004700:	9808      	ldr	r0, [sp, #32]
 8004702:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004706:	f001 f9ed 	bl	8005ae4 <__locale_ctype_ptr_l>
 800470a:	4420      	add	r0, r4
 800470c:	7843      	ldrb	r3, [r0, #1]
 800470e:	f013 0308 	ands.w	r3, r3, #8
 8004712:	d132      	bne.n	800477a <_strtol_l.isra.0+0x8a>
 8004714:	2c2d      	cmp	r4, #45	; 0x2d
 8004716:	d132      	bne.n	800477e <_strtol_l.isra.0+0x8e>
 8004718:	787c      	ldrb	r4, [r7, #1]
 800471a:	1cbd      	adds	r5, r7, #2
 800471c:	2201      	movs	r2, #1
 800471e:	2e00      	cmp	r6, #0
 8004720:	d05d      	beq.n	80047de <_strtol_l.isra.0+0xee>
 8004722:	2e10      	cmp	r6, #16
 8004724:	d109      	bne.n	800473a <_strtol_l.isra.0+0x4a>
 8004726:	2c30      	cmp	r4, #48	; 0x30
 8004728:	d107      	bne.n	800473a <_strtol_l.isra.0+0x4a>
 800472a:	782b      	ldrb	r3, [r5, #0]
 800472c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004730:	2b58      	cmp	r3, #88	; 0x58
 8004732:	d14f      	bne.n	80047d4 <_strtol_l.isra.0+0xe4>
 8004734:	786c      	ldrb	r4, [r5, #1]
 8004736:	2610      	movs	r6, #16
 8004738:	3502      	adds	r5, #2
 800473a:	2a00      	cmp	r2, #0
 800473c:	bf14      	ite	ne
 800473e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004742:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8004746:	2700      	movs	r7, #0
 8004748:	fbb1 fcf6 	udiv	ip, r1, r6
 800474c:	4638      	mov	r0, r7
 800474e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8004752:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004756:	2b09      	cmp	r3, #9
 8004758:	d817      	bhi.n	800478a <_strtol_l.isra.0+0x9a>
 800475a:	461c      	mov	r4, r3
 800475c:	42a6      	cmp	r6, r4
 800475e:	dd23      	ble.n	80047a8 <_strtol_l.isra.0+0xb8>
 8004760:	1c7b      	adds	r3, r7, #1
 8004762:	d007      	beq.n	8004774 <_strtol_l.isra.0+0x84>
 8004764:	4584      	cmp	ip, r0
 8004766:	d31c      	bcc.n	80047a2 <_strtol_l.isra.0+0xb2>
 8004768:	d101      	bne.n	800476e <_strtol_l.isra.0+0x7e>
 800476a:	45a6      	cmp	lr, r4
 800476c:	db19      	blt.n	80047a2 <_strtol_l.isra.0+0xb2>
 800476e:	fb00 4006 	mla	r0, r0, r6, r4
 8004772:	2701      	movs	r7, #1
 8004774:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004778:	e7eb      	b.n	8004752 <_strtol_l.isra.0+0x62>
 800477a:	462f      	mov	r7, r5
 800477c:	e7bf      	b.n	80046fe <_strtol_l.isra.0+0xe>
 800477e:	2c2b      	cmp	r4, #43	; 0x2b
 8004780:	bf04      	itt	eq
 8004782:	1cbd      	addeq	r5, r7, #2
 8004784:	787c      	ldrbeq	r4, [r7, #1]
 8004786:	461a      	mov	r2, r3
 8004788:	e7c9      	b.n	800471e <_strtol_l.isra.0+0x2e>
 800478a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800478e:	2b19      	cmp	r3, #25
 8004790:	d801      	bhi.n	8004796 <_strtol_l.isra.0+0xa6>
 8004792:	3c37      	subs	r4, #55	; 0x37
 8004794:	e7e2      	b.n	800475c <_strtol_l.isra.0+0x6c>
 8004796:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800479a:	2b19      	cmp	r3, #25
 800479c:	d804      	bhi.n	80047a8 <_strtol_l.isra.0+0xb8>
 800479e:	3c57      	subs	r4, #87	; 0x57
 80047a0:	e7dc      	b.n	800475c <_strtol_l.isra.0+0x6c>
 80047a2:	f04f 37ff 	mov.w	r7, #4294967295
 80047a6:	e7e5      	b.n	8004774 <_strtol_l.isra.0+0x84>
 80047a8:	1c7b      	adds	r3, r7, #1
 80047aa:	d108      	bne.n	80047be <_strtol_l.isra.0+0xce>
 80047ac:	2322      	movs	r3, #34	; 0x22
 80047ae:	f8c8 3000 	str.w	r3, [r8]
 80047b2:	4608      	mov	r0, r1
 80047b4:	f1ba 0f00 	cmp.w	sl, #0
 80047b8:	d107      	bne.n	80047ca <_strtol_l.isra.0+0xda>
 80047ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047be:	b102      	cbz	r2, 80047c2 <_strtol_l.isra.0+0xd2>
 80047c0:	4240      	negs	r0, r0
 80047c2:	f1ba 0f00 	cmp.w	sl, #0
 80047c6:	d0f8      	beq.n	80047ba <_strtol_l.isra.0+0xca>
 80047c8:	b10f      	cbz	r7, 80047ce <_strtol_l.isra.0+0xde>
 80047ca:	f105 39ff 	add.w	r9, r5, #4294967295
 80047ce:	f8ca 9000 	str.w	r9, [sl]
 80047d2:	e7f2      	b.n	80047ba <_strtol_l.isra.0+0xca>
 80047d4:	2430      	movs	r4, #48	; 0x30
 80047d6:	2e00      	cmp	r6, #0
 80047d8:	d1af      	bne.n	800473a <_strtol_l.isra.0+0x4a>
 80047da:	2608      	movs	r6, #8
 80047dc:	e7ad      	b.n	800473a <_strtol_l.isra.0+0x4a>
 80047de:	2c30      	cmp	r4, #48	; 0x30
 80047e0:	d0a3      	beq.n	800472a <_strtol_l.isra.0+0x3a>
 80047e2:	260a      	movs	r6, #10
 80047e4:	e7a9      	b.n	800473a <_strtol_l.isra.0+0x4a>
	...

080047e8 <_strtol_r>:
 80047e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80047ea:	4c06      	ldr	r4, [pc, #24]	; (8004804 <_strtol_r+0x1c>)
 80047ec:	4d06      	ldr	r5, [pc, #24]	; (8004808 <_strtol_r+0x20>)
 80047ee:	6824      	ldr	r4, [r4, #0]
 80047f0:	6a24      	ldr	r4, [r4, #32]
 80047f2:	2c00      	cmp	r4, #0
 80047f4:	bf08      	it	eq
 80047f6:	462c      	moveq	r4, r5
 80047f8:	9400      	str	r4, [sp, #0]
 80047fa:	f7ff ff79 	bl	80046f0 <_strtol_l.isra.0>
 80047fe:	b003      	add	sp, #12
 8004800:	bd30      	pop	{r4, r5, pc}
 8004802:	bf00      	nop
 8004804:	2000000c 	.word	0x2000000c
 8004808:	20000070 	.word	0x20000070

0800480c <quorem>:
 800480c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004810:	6903      	ldr	r3, [r0, #16]
 8004812:	690c      	ldr	r4, [r1, #16]
 8004814:	42a3      	cmp	r3, r4
 8004816:	4680      	mov	r8, r0
 8004818:	f2c0 8082 	blt.w	8004920 <quorem+0x114>
 800481c:	3c01      	subs	r4, #1
 800481e:	f101 0714 	add.w	r7, r1, #20
 8004822:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004826:	f100 0614 	add.w	r6, r0, #20
 800482a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800482e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004832:	eb06 030c 	add.w	r3, r6, ip
 8004836:	3501      	adds	r5, #1
 8004838:	eb07 090c 	add.w	r9, r7, ip
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	fbb0 f5f5 	udiv	r5, r0, r5
 8004842:	b395      	cbz	r5, 80048aa <quorem+0x9e>
 8004844:	f04f 0a00 	mov.w	sl, #0
 8004848:	4638      	mov	r0, r7
 800484a:	46b6      	mov	lr, r6
 800484c:	46d3      	mov	fp, sl
 800484e:	f850 2b04 	ldr.w	r2, [r0], #4
 8004852:	b293      	uxth	r3, r2
 8004854:	fb05 a303 	mla	r3, r5, r3, sl
 8004858:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800485c:	b29b      	uxth	r3, r3
 800485e:	ebab 0303 	sub.w	r3, fp, r3
 8004862:	0c12      	lsrs	r2, r2, #16
 8004864:	f8de b000 	ldr.w	fp, [lr]
 8004868:	fb05 a202 	mla	r2, r5, r2, sl
 800486c:	fa13 f38b 	uxtah	r3, r3, fp
 8004870:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004874:	fa1f fb82 	uxth.w	fp, r2
 8004878:	f8de 2000 	ldr.w	r2, [lr]
 800487c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004880:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004884:	b29b      	uxth	r3, r3
 8004886:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800488a:	4581      	cmp	r9, r0
 800488c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004890:	f84e 3b04 	str.w	r3, [lr], #4
 8004894:	d2db      	bcs.n	800484e <quorem+0x42>
 8004896:	f856 300c 	ldr.w	r3, [r6, ip]
 800489a:	b933      	cbnz	r3, 80048aa <quorem+0x9e>
 800489c:	9b01      	ldr	r3, [sp, #4]
 800489e:	3b04      	subs	r3, #4
 80048a0:	429e      	cmp	r6, r3
 80048a2:	461a      	mov	r2, r3
 80048a4:	d330      	bcc.n	8004908 <quorem+0xfc>
 80048a6:	f8c8 4010 	str.w	r4, [r8, #16]
 80048aa:	4640      	mov	r0, r8
 80048ac:	f001 fb9c 	bl	8005fe8 <__mcmp>
 80048b0:	2800      	cmp	r0, #0
 80048b2:	db25      	blt.n	8004900 <quorem+0xf4>
 80048b4:	3501      	adds	r5, #1
 80048b6:	4630      	mov	r0, r6
 80048b8:	f04f 0c00 	mov.w	ip, #0
 80048bc:	f857 2b04 	ldr.w	r2, [r7], #4
 80048c0:	f8d0 e000 	ldr.w	lr, [r0]
 80048c4:	b293      	uxth	r3, r2
 80048c6:	ebac 0303 	sub.w	r3, ip, r3
 80048ca:	0c12      	lsrs	r2, r2, #16
 80048cc:	fa13 f38e 	uxtah	r3, r3, lr
 80048d0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80048d4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80048d8:	b29b      	uxth	r3, r3
 80048da:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80048de:	45b9      	cmp	r9, r7
 80048e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80048e4:	f840 3b04 	str.w	r3, [r0], #4
 80048e8:	d2e8      	bcs.n	80048bc <quorem+0xb0>
 80048ea:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80048ee:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80048f2:	b92a      	cbnz	r2, 8004900 <quorem+0xf4>
 80048f4:	3b04      	subs	r3, #4
 80048f6:	429e      	cmp	r6, r3
 80048f8:	461a      	mov	r2, r3
 80048fa:	d30b      	bcc.n	8004914 <quorem+0x108>
 80048fc:	f8c8 4010 	str.w	r4, [r8, #16]
 8004900:	4628      	mov	r0, r5
 8004902:	b003      	add	sp, #12
 8004904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	3b04      	subs	r3, #4
 800490c:	2a00      	cmp	r2, #0
 800490e:	d1ca      	bne.n	80048a6 <quorem+0x9a>
 8004910:	3c01      	subs	r4, #1
 8004912:	e7c5      	b.n	80048a0 <quorem+0x94>
 8004914:	6812      	ldr	r2, [r2, #0]
 8004916:	3b04      	subs	r3, #4
 8004918:	2a00      	cmp	r2, #0
 800491a:	d1ef      	bne.n	80048fc <quorem+0xf0>
 800491c:	3c01      	subs	r4, #1
 800491e:	e7ea      	b.n	80048f6 <quorem+0xea>
 8004920:	2000      	movs	r0, #0
 8004922:	e7ee      	b.n	8004902 <quorem+0xf6>
 8004924:	0000      	movs	r0, r0
	...

08004928 <_dtoa_r>:
 8004928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492c:	ec57 6b10 	vmov	r6, r7, d0
 8004930:	b097      	sub	sp, #92	; 0x5c
 8004932:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004934:	9106      	str	r1, [sp, #24]
 8004936:	4604      	mov	r4, r0
 8004938:	920b      	str	r2, [sp, #44]	; 0x2c
 800493a:	9312      	str	r3, [sp, #72]	; 0x48
 800493c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004940:	e9cd 6700 	strd	r6, r7, [sp]
 8004944:	b93d      	cbnz	r5, 8004956 <_dtoa_r+0x2e>
 8004946:	2010      	movs	r0, #16
 8004948:	f001 f8e0 	bl	8005b0c <malloc>
 800494c:	6260      	str	r0, [r4, #36]	; 0x24
 800494e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004952:	6005      	str	r5, [r0, #0]
 8004954:	60c5      	str	r5, [r0, #12]
 8004956:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004958:	6819      	ldr	r1, [r3, #0]
 800495a:	b151      	cbz	r1, 8004972 <_dtoa_r+0x4a>
 800495c:	685a      	ldr	r2, [r3, #4]
 800495e:	604a      	str	r2, [r1, #4]
 8004960:	2301      	movs	r3, #1
 8004962:	4093      	lsls	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
 8004966:	4620      	mov	r0, r4
 8004968:	f001 f91e 	bl	8005ba8 <_Bfree>
 800496c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800496e:	2200      	movs	r2, #0
 8004970:	601a      	str	r2, [r3, #0]
 8004972:	1e3b      	subs	r3, r7, #0
 8004974:	bfbb      	ittet	lt
 8004976:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800497a:	9301      	strlt	r3, [sp, #4]
 800497c:	2300      	movge	r3, #0
 800497e:	2201      	movlt	r2, #1
 8004980:	bfac      	ite	ge
 8004982:	f8c8 3000 	strge.w	r3, [r8]
 8004986:	f8c8 2000 	strlt.w	r2, [r8]
 800498a:	4baf      	ldr	r3, [pc, #700]	; (8004c48 <_dtoa_r+0x320>)
 800498c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004990:	ea33 0308 	bics.w	r3, r3, r8
 8004994:	d114      	bne.n	80049c0 <_dtoa_r+0x98>
 8004996:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004998:	f242 730f 	movw	r3, #9999	; 0x270f
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	9b00      	ldr	r3, [sp, #0]
 80049a0:	b923      	cbnz	r3, 80049ac <_dtoa_r+0x84>
 80049a2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80049a6:	2800      	cmp	r0, #0
 80049a8:	f000 8542 	beq.w	8005430 <_dtoa_r+0xb08>
 80049ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049ae:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004c5c <_dtoa_r+0x334>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	f000 8544 	beq.w	8005440 <_dtoa_r+0xb18>
 80049b8:	f10b 0303 	add.w	r3, fp, #3
 80049bc:	f000 bd3e 	b.w	800543c <_dtoa_r+0xb14>
 80049c0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80049c4:	2200      	movs	r2, #0
 80049c6:	2300      	movs	r3, #0
 80049c8:	4630      	mov	r0, r6
 80049ca:	4639      	mov	r1, r7
 80049cc:	f7fc f8f4 	bl	8000bb8 <__aeabi_dcmpeq>
 80049d0:	4681      	mov	r9, r0
 80049d2:	b168      	cbz	r0, 80049f0 <_dtoa_r+0xc8>
 80049d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80049d6:	2301      	movs	r3, #1
 80049d8:	6013      	str	r3, [r2, #0]
 80049da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f000 8524 	beq.w	800542a <_dtoa_r+0xb02>
 80049e2:	4b9a      	ldr	r3, [pc, #616]	; (8004c4c <_dtoa_r+0x324>)
 80049e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80049e6:	f103 3bff 	add.w	fp, r3, #4294967295
 80049ea:	6013      	str	r3, [r2, #0]
 80049ec:	f000 bd28 	b.w	8005440 <_dtoa_r+0xb18>
 80049f0:	aa14      	add	r2, sp, #80	; 0x50
 80049f2:	a915      	add	r1, sp, #84	; 0x54
 80049f4:	ec47 6b10 	vmov	d0, r6, r7
 80049f8:	4620      	mov	r0, r4
 80049fa:	f001 fbe3 	bl	80061c4 <__d2b>
 80049fe:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8004a02:	9004      	str	r0, [sp, #16]
 8004a04:	2d00      	cmp	r5, #0
 8004a06:	d07c      	beq.n	8004b02 <_dtoa_r+0x1da>
 8004a08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004a0c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004a10:	46b2      	mov	sl, r6
 8004a12:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8004a16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004a1a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004a1e:	2200      	movs	r2, #0
 8004a20:	4b8b      	ldr	r3, [pc, #556]	; (8004c50 <_dtoa_r+0x328>)
 8004a22:	4650      	mov	r0, sl
 8004a24:	4659      	mov	r1, fp
 8004a26:	f7fb fca7 	bl	8000378 <__aeabi_dsub>
 8004a2a:	a381      	add	r3, pc, #516	; (adr r3, 8004c30 <_dtoa_r+0x308>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	f7fb fe5a 	bl	80006e8 <__aeabi_dmul>
 8004a34:	a380      	add	r3, pc, #512	; (adr r3, 8004c38 <_dtoa_r+0x310>)
 8004a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a3a:	f7fb fc9f 	bl	800037c <__adddf3>
 8004a3e:	4606      	mov	r6, r0
 8004a40:	4628      	mov	r0, r5
 8004a42:	460f      	mov	r7, r1
 8004a44:	f7fb fde6 	bl	8000614 <__aeabi_i2d>
 8004a48:	a37d      	add	r3, pc, #500	; (adr r3, 8004c40 <_dtoa_r+0x318>)
 8004a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a4e:	f7fb fe4b 	bl	80006e8 <__aeabi_dmul>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4630      	mov	r0, r6
 8004a58:	4639      	mov	r1, r7
 8004a5a:	f7fb fc8f 	bl	800037c <__adddf3>
 8004a5e:	4606      	mov	r6, r0
 8004a60:	460f      	mov	r7, r1
 8004a62:	f7fc f8f1 	bl	8000c48 <__aeabi_d2iz>
 8004a66:	2200      	movs	r2, #0
 8004a68:	4682      	mov	sl, r0
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	4639      	mov	r1, r7
 8004a70:	f7fc f8ac 	bl	8000bcc <__aeabi_dcmplt>
 8004a74:	b148      	cbz	r0, 8004a8a <_dtoa_r+0x162>
 8004a76:	4650      	mov	r0, sl
 8004a78:	f7fb fdcc 	bl	8000614 <__aeabi_i2d>
 8004a7c:	4632      	mov	r2, r6
 8004a7e:	463b      	mov	r3, r7
 8004a80:	f7fc f89a 	bl	8000bb8 <__aeabi_dcmpeq>
 8004a84:	b908      	cbnz	r0, 8004a8a <_dtoa_r+0x162>
 8004a86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004a8a:	f1ba 0f16 	cmp.w	sl, #22
 8004a8e:	d859      	bhi.n	8004b44 <_dtoa_r+0x21c>
 8004a90:	4970      	ldr	r1, [pc, #448]	; (8004c54 <_dtoa_r+0x32c>)
 8004a92:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8004a96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a9e:	f7fc f8b3 	bl	8000c08 <__aeabi_dcmpgt>
 8004aa2:	2800      	cmp	r0, #0
 8004aa4:	d050      	beq.n	8004b48 <_dtoa_r+0x220>
 8004aa6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004aaa:	2300      	movs	r3, #0
 8004aac:	930f      	str	r3, [sp, #60]	; 0x3c
 8004aae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004ab0:	1b5d      	subs	r5, r3, r5
 8004ab2:	f1b5 0801 	subs.w	r8, r5, #1
 8004ab6:	bf49      	itett	mi
 8004ab8:	f1c5 0301 	rsbmi	r3, r5, #1
 8004abc:	2300      	movpl	r3, #0
 8004abe:	9305      	strmi	r3, [sp, #20]
 8004ac0:	f04f 0800 	movmi.w	r8, #0
 8004ac4:	bf58      	it	pl
 8004ac6:	9305      	strpl	r3, [sp, #20]
 8004ac8:	f1ba 0f00 	cmp.w	sl, #0
 8004acc:	db3e      	blt.n	8004b4c <_dtoa_r+0x224>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	44d0      	add	r8, sl
 8004ad2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004ad6:	9307      	str	r3, [sp, #28]
 8004ad8:	9b06      	ldr	r3, [sp, #24]
 8004ada:	2b09      	cmp	r3, #9
 8004adc:	f200 8090 	bhi.w	8004c00 <_dtoa_r+0x2d8>
 8004ae0:	2b05      	cmp	r3, #5
 8004ae2:	bfc4      	itt	gt
 8004ae4:	3b04      	subgt	r3, #4
 8004ae6:	9306      	strgt	r3, [sp, #24]
 8004ae8:	9b06      	ldr	r3, [sp, #24]
 8004aea:	f1a3 0302 	sub.w	r3, r3, #2
 8004aee:	bfcc      	ite	gt
 8004af0:	2500      	movgt	r5, #0
 8004af2:	2501      	movle	r5, #1
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	f200 808f 	bhi.w	8004c18 <_dtoa_r+0x2f0>
 8004afa:	e8df f003 	tbb	[pc, r3]
 8004afe:	7f7d      	.short	0x7f7d
 8004b00:	7131      	.short	0x7131
 8004b02:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8004b06:	441d      	add	r5, r3
 8004b08:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004b0c:	2820      	cmp	r0, #32
 8004b0e:	dd13      	ble.n	8004b38 <_dtoa_r+0x210>
 8004b10:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004b14:	9b00      	ldr	r3, [sp, #0]
 8004b16:	fa08 f800 	lsl.w	r8, r8, r0
 8004b1a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004b1e:	fa23 f000 	lsr.w	r0, r3, r0
 8004b22:	ea48 0000 	orr.w	r0, r8, r0
 8004b26:	f7fb fd65 	bl	80005f4 <__aeabi_ui2d>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4682      	mov	sl, r0
 8004b2e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004b32:	3d01      	subs	r5, #1
 8004b34:	9313      	str	r3, [sp, #76]	; 0x4c
 8004b36:	e772      	b.n	8004a1e <_dtoa_r+0xf6>
 8004b38:	9b00      	ldr	r3, [sp, #0]
 8004b3a:	f1c0 0020 	rsb	r0, r0, #32
 8004b3e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b42:	e7f0      	b.n	8004b26 <_dtoa_r+0x1fe>
 8004b44:	2301      	movs	r3, #1
 8004b46:	e7b1      	b.n	8004aac <_dtoa_r+0x184>
 8004b48:	900f      	str	r0, [sp, #60]	; 0x3c
 8004b4a:	e7b0      	b.n	8004aae <_dtoa_r+0x186>
 8004b4c:	9b05      	ldr	r3, [sp, #20]
 8004b4e:	eba3 030a 	sub.w	r3, r3, sl
 8004b52:	9305      	str	r3, [sp, #20]
 8004b54:	f1ca 0300 	rsb	r3, sl, #0
 8004b58:	9307      	str	r3, [sp, #28]
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	930e      	str	r3, [sp, #56]	; 0x38
 8004b5e:	e7bb      	b.n	8004ad8 <_dtoa_r+0x1b0>
 8004b60:	2301      	movs	r3, #1
 8004b62:	930a      	str	r3, [sp, #40]	; 0x28
 8004b64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	dd59      	ble.n	8004c1e <_dtoa_r+0x2f6>
 8004b6a:	9302      	str	r3, [sp, #8]
 8004b6c:	4699      	mov	r9, r3
 8004b6e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004b70:	2200      	movs	r2, #0
 8004b72:	6072      	str	r2, [r6, #4]
 8004b74:	2204      	movs	r2, #4
 8004b76:	f102 0014 	add.w	r0, r2, #20
 8004b7a:	4298      	cmp	r0, r3
 8004b7c:	6871      	ldr	r1, [r6, #4]
 8004b7e:	d953      	bls.n	8004c28 <_dtoa_r+0x300>
 8004b80:	4620      	mov	r0, r4
 8004b82:	f000 ffdd 	bl	8005b40 <_Balloc>
 8004b86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b88:	6030      	str	r0, [r6, #0]
 8004b8a:	f1b9 0f0e 	cmp.w	r9, #14
 8004b8e:	f8d3 b000 	ldr.w	fp, [r3]
 8004b92:	f200 80e6 	bhi.w	8004d62 <_dtoa_r+0x43a>
 8004b96:	2d00      	cmp	r5, #0
 8004b98:	f000 80e3 	beq.w	8004d62 <_dtoa_r+0x43a>
 8004b9c:	ed9d 7b00 	vldr	d7, [sp]
 8004ba0:	f1ba 0f00 	cmp.w	sl, #0
 8004ba4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004ba8:	dd74      	ble.n	8004c94 <_dtoa_r+0x36c>
 8004baa:	4a2a      	ldr	r2, [pc, #168]	; (8004c54 <_dtoa_r+0x32c>)
 8004bac:	f00a 030f 	and.w	r3, sl, #15
 8004bb0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004bb4:	ed93 7b00 	vldr	d7, [r3]
 8004bb8:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004bbc:	06f0      	lsls	r0, r6, #27
 8004bbe:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004bc2:	d565      	bpl.n	8004c90 <_dtoa_r+0x368>
 8004bc4:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <_dtoa_r+0x330>)
 8004bc6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004bca:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004bce:	f7fb feb5 	bl	800093c <__aeabi_ddiv>
 8004bd2:	e9cd 0100 	strd	r0, r1, [sp]
 8004bd6:	f006 060f 	and.w	r6, r6, #15
 8004bda:	2503      	movs	r5, #3
 8004bdc:	4f1e      	ldr	r7, [pc, #120]	; (8004c58 <_dtoa_r+0x330>)
 8004bde:	e04c      	b.n	8004c7a <_dtoa_r+0x352>
 8004be0:	2301      	movs	r3, #1
 8004be2:	930a      	str	r3, [sp, #40]	; 0x28
 8004be4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004be6:	4453      	add	r3, sl
 8004be8:	f103 0901 	add.w	r9, r3, #1
 8004bec:	9302      	str	r3, [sp, #8]
 8004bee:	464b      	mov	r3, r9
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	bfb8      	it	lt
 8004bf4:	2301      	movlt	r3, #1
 8004bf6:	e7ba      	b.n	8004b6e <_dtoa_r+0x246>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e7b2      	b.n	8004b62 <_dtoa_r+0x23a>
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e7f0      	b.n	8004be2 <_dtoa_r+0x2ba>
 8004c00:	2501      	movs	r5, #1
 8004c02:	2300      	movs	r3, #0
 8004c04:	9306      	str	r3, [sp, #24]
 8004c06:	950a      	str	r5, [sp, #40]	; 0x28
 8004c08:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0c:	9302      	str	r3, [sp, #8]
 8004c0e:	4699      	mov	r9, r3
 8004c10:	2200      	movs	r2, #0
 8004c12:	2312      	movs	r3, #18
 8004c14:	920b      	str	r2, [sp, #44]	; 0x2c
 8004c16:	e7aa      	b.n	8004b6e <_dtoa_r+0x246>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	930a      	str	r3, [sp, #40]	; 0x28
 8004c1c:	e7f4      	b.n	8004c08 <_dtoa_r+0x2e0>
 8004c1e:	2301      	movs	r3, #1
 8004c20:	9302      	str	r3, [sp, #8]
 8004c22:	4699      	mov	r9, r3
 8004c24:	461a      	mov	r2, r3
 8004c26:	e7f5      	b.n	8004c14 <_dtoa_r+0x2ec>
 8004c28:	3101      	adds	r1, #1
 8004c2a:	6071      	str	r1, [r6, #4]
 8004c2c:	0052      	lsls	r2, r2, #1
 8004c2e:	e7a2      	b.n	8004b76 <_dtoa_r+0x24e>
 8004c30:	636f4361 	.word	0x636f4361
 8004c34:	3fd287a7 	.word	0x3fd287a7
 8004c38:	8b60c8b3 	.word	0x8b60c8b3
 8004c3c:	3fc68a28 	.word	0x3fc68a28
 8004c40:	509f79fb 	.word	0x509f79fb
 8004c44:	3fd34413 	.word	0x3fd34413
 8004c48:	7ff00000 	.word	0x7ff00000
 8004c4c:	08006a8d 	.word	0x08006a8d
 8004c50:	3ff80000 	.word	0x3ff80000
 8004c54:	08006b48 	.word	0x08006b48
 8004c58:	08006b20 	.word	0x08006b20
 8004c5c:	08006b11 	.word	0x08006b11
 8004c60:	07f1      	lsls	r1, r6, #31
 8004c62:	d508      	bpl.n	8004c76 <_dtoa_r+0x34e>
 8004c64:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c6c:	f7fb fd3c 	bl	80006e8 <__aeabi_dmul>
 8004c70:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c74:	3501      	adds	r5, #1
 8004c76:	1076      	asrs	r6, r6, #1
 8004c78:	3708      	adds	r7, #8
 8004c7a:	2e00      	cmp	r6, #0
 8004c7c:	d1f0      	bne.n	8004c60 <_dtoa_r+0x338>
 8004c7e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004c82:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c86:	f7fb fe59 	bl	800093c <__aeabi_ddiv>
 8004c8a:	e9cd 0100 	strd	r0, r1, [sp]
 8004c8e:	e01a      	b.n	8004cc6 <_dtoa_r+0x39e>
 8004c90:	2502      	movs	r5, #2
 8004c92:	e7a3      	b.n	8004bdc <_dtoa_r+0x2b4>
 8004c94:	f000 80a0 	beq.w	8004dd8 <_dtoa_r+0x4b0>
 8004c98:	f1ca 0600 	rsb	r6, sl, #0
 8004c9c:	4b9f      	ldr	r3, [pc, #636]	; (8004f1c <_dtoa_r+0x5f4>)
 8004c9e:	4fa0      	ldr	r7, [pc, #640]	; (8004f20 <_dtoa_r+0x5f8>)
 8004ca0:	f006 020f 	and.w	r2, r6, #15
 8004ca4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004cb0:	f7fb fd1a 	bl	80006e8 <__aeabi_dmul>
 8004cb4:	e9cd 0100 	strd	r0, r1, [sp]
 8004cb8:	1136      	asrs	r6, r6, #4
 8004cba:	2300      	movs	r3, #0
 8004cbc:	2502      	movs	r5, #2
 8004cbe:	2e00      	cmp	r6, #0
 8004cc0:	d17f      	bne.n	8004dc2 <_dtoa_r+0x49a>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e1      	bne.n	8004c8a <_dtoa_r+0x362>
 8004cc6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8087 	beq.w	8004ddc <_dtoa_r+0x4b4>
 8004cce:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4b93      	ldr	r3, [pc, #588]	; (8004f24 <_dtoa_r+0x5fc>)
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	4639      	mov	r1, r7
 8004cda:	f7fb ff77 	bl	8000bcc <__aeabi_dcmplt>
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d07c      	beq.n	8004ddc <_dtoa_r+0x4b4>
 8004ce2:	f1b9 0f00 	cmp.w	r9, #0
 8004ce6:	d079      	beq.n	8004ddc <_dtoa_r+0x4b4>
 8004ce8:	9b02      	ldr	r3, [sp, #8]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	dd35      	ble.n	8004d5a <_dtoa_r+0x432>
 8004cee:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004cf2:	9308      	str	r3, [sp, #32]
 8004cf4:	4639      	mov	r1, r7
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	4b8b      	ldr	r3, [pc, #556]	; (8004f28 <_dtoa_r+0x600>)
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f7fb fcf4 	bl	80006e8 <__aeabi_dmul>
 8004d00:	e9cd 0100 	strd	r0, r1, [sp]
 8004d04:	9f02      	ldr	r7, [sp, #8]
 8004d06:	3501      	adds	r5, #1
 8004d08:	4628      	mov	r0, r5
 8004d0a:	f7fb fc83 	bl	8000614 <__aeabi_i2d>
 8004d0e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d12:	f7fb fce9 	bl	80006e8 <__aeabi_dmul>
 8004d16:	2200      	movs	r2, #0
 8004d18:	4b84      	ldr	r3, [pc, #528]	; (8004f2c <_dtoa_r+0x604>)
 8004d1a:	f7fb fb2f 	bl	800037c <__adddf3>
 8004d1e:	4605      	mov	r5, r0
 8004d20:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004d24:	2f00      	cmp	r7, #0
 8004d26:	d15d      	bne.n	8004de4 <_dtoa_r+0x4bc>
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4b81      	ldr	r3, [pc, #516]	; (8004f30 <_dtoa_r+0x608>)
 8004d2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d30:	f7fb fb22 	bl	8000378 <__aeabi_dsub>
 8004d34:	462a      	mov	r2, r5
 8004d36:	4633      	mov	r3, r6
 8004d38:	e9cd 0100 	strd	r0, r1, [sp]
 8004d3c:	f7fb ff64 	bl	8000c08 <__aeabi_dcmpgt>
 8004d40:	2800      	cmp	r0, #0
 8004d42:	f040 8288 	bne.w	8005256 <_dtoa_r+0x92e>
 8004d46:	462a      	mov	r2, r5
 8004d48:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004d4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d50:	f7fb ff3c 	bl	8000bcc <__aeabi_dcmplt>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	f040 827c 	bne.w	8005252 <_dtoa_r+0x92a>
 8004d5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004d5e:	e9cd 2300 	strd	r2, r3, [sp]
 8004d62:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f2c0 8150 	blt.w	800500a <_dtoa_r+0x6e2>
 8004d6a:	f1ba 0f0e 	cmp.w	sl, #14
 8004d6e:	f300 814c 	bgt.w	800500a <_dtoa_r+0x6e2>
 8004d72:	4b6a      	ldr	r3, [pc, #424]	; (8004f1c <_dtoa_r+0x5f4>)
 8004d74:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004d78:	ed93 7b00 	vldr	d7, [r3]
 8004d7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d84:	f280 80d8 	bge.w	8004f38 <_dtoa_r+0x610>
 8004d88:	f1b9 0f00 	cmp.w	r9, #0
 8004d8c:	f300 80d4 	bgt.w	8004f38 <_dtoa_r+0x610>
 8004d90:	f040 825e 	bne.w	8005250 <_dtoa_r+0x928>
 8004d94:	2200      	movs	r2, #0
 8004d96:	4b66      	ldr	r3, [pc, #408]	; (8004f30 <_dtoa_r+0x608>)
 8004d98:	ec51 0b17 	vmov	r0, r1, d7
 8004d9c:	f7fb fca4 	bl	80006e8 <__aeabi_dmul>
 8004da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004da4:	f7fb ff26 	bl	8000bf4 <__aeabi_dcmpge>
 8004da8:	464f      	mov	r7, r9
 8004daa:	464e      	mov	r6, r9
 8004dac:	2800      	cmp	r0, #0
 8004dae:	f040 8234 	bne.w	800521a <_dtoa_r+0x8f2>
 8004db2:	2331      	movs	r3, #49	; 0x31
 8004db4:	f10b 0501 	add.w	r5, fp, #1
 8004db8:	f88b 3000 	strb.w	r3, [fp]
 8004dbc:	f10a 0a01 	add.w	sl, sl, #1
 8004dc0:	e22f      	b.n	8005222 <_dtoa_r+0x8fa>
 8004dc2:	07f2      	lsls	r2, r6, #31
 8004dc4:	d505      	bpl.n	8004dd2 <_dtoa_r+0x4aa>
 8004dc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dca:	f7fb fc8d 	bl	80006e8 <__aeabi_dmul>
 8004dce:	3501      	adds	r5, #1
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	1076      	asrs	r6, r6, #1
 8004dd4:	3708      	adds	r7, #8
 8004dd6:	e772      	b.n	8004cbe <_dtoa_r+0x396>
 8004dd8:	2502      	movs	r5, #2
 8004dda:	e774      	b.n	8004cc6 <_dtoa_r+0x39e>
 8004ddc:	f8cd a020 	str.w	sl, [sp, #32]
 8004de0:	464f      	mov	r7, r9
 8004de2:	e791      	b.n	8004d08 <_dtoa_r+0x3e0>
 8004de4:	4b4d      	ldr	r3, [pc, #308]	; (8004f1c <_dtoa_r+0x5f4>)
 8004de6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004dea:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004dee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d047      	beq.n	8004e84 <_dtoa_r+0x55c>
 8004df4:	4602      	mov	r2, r0
 8004df6:	460b      	mov	r3, r1
 8004df8:	2000      	movs	r0, #0
 8004dfa:	494e      	ldr	r1, [pc, #312]	; (8004f34 <_dtoa_r+0x60c>)
 8004dfc:	f7fb fd9e 	bl	800093c <__aeabi_ddiv>
 8004e00:	462a      	mov	r2, r5
 8004e02:	4633      	mov	r3, r6
 8004e04:	f7fb fab8 	bl	8000378 <__aeabi_dsub>
 8004e08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e0c:	465d      	mov	r5, fp
 8004e0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e12:	f7fb ff19 	bl	8000c48 <__aeabi_d2iz>
 8004e16:	4606      	mov	r6, r0
 8004e18:	f7fb fbfc 	bl	8000614 <__aeabi_i2d>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	460b      	mov	r3, r1
 8004e20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e24:	f7fb faa8 	bl	8000378 <__aeabi_dsub>
 8004e28:	3630      	adds	r6, #48	; 0x30
 8004e2a:	f805 6b01 	strb.w	r6, [r5], #1
 8004e2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e32:	e9cd 0100 	strd	r0, r1, [sp]
 8004e36:	f7fb fec9 	bl	8000bcc <__aeabi_dcmplt>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	d163      	bne.n	8004f06 <_dtoa_r+0x5de>
 8004e3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e42:	2000      	movs	r0, #0
 8004e44:	4937      	ldr	r1, [pc, #220]	; (8004f24 <_dtoa_r+0x5fc>)
 8004e46:	f7fb fa97 	bl	8000378 <__aeabi_dsub>
 8004e4a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e4e:	f7fb febd 	bl	8000bcc <__aeabi_dcmplt>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	f040 80b7 	bne.w	8004fc6 <_dtoa_r+0x69e>
 8004e58:	eba5 030b 	sub.w	r3, r5, fp
 8004e5c:	429f      	cmp	r7, r3
 8004e5e:	f77f af7c 	ble.w	8004d5a <_dtoa_r+0x432>
 8004e62:	2200      	movs	r2, #0
 8004e64:	4b30      	ldr	r3, [pc, #192]	; (8004f28 <_dtoa_r+0x600>)
 8004e66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e6a:	f7fb fc3d 	bl	80006e8 <__aeabi_dmul>
 8004e6e:	2200      	movs	r2, #0
 8004e70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e74:	4b2c      	ldr	r3, [pc, #176]	; (8004f28 <_dtoa_r+0x600>)
 8004e76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e7a:	f7fb fc35 	bl	80006e8 <__aeabi_dmul>
 8004e7e:	e9cd 0100 	strd	r0, r1, [sp]
 8004e82:	e7c4      	b.n	8004e0e <_dtoa_r+0x4e6>
 8004e84:	462a      	mov	r2, r5
 8004e86:	4633      	mov	r3, r6
 8004e88:	f7fb fc2e 	bl	80006e8 <__aeabi_dmul>
 8004e8c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004e90:	eb0b 0507 	add.w	r5, fp, r7
 8004e94:	465e      	mov	r6, fp
 8004e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e9a:	f7fb fed5 	bl	8000c48 <__aeabi_d2iz>
 8004e9e:	4607      	mov	r7, r0
 8004ea0:	f7fb fbb8 	bl	8000614 <__aeabi_i2d>
 8004ea4:	3730      	adds	r7, #48	; 0x30
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	460b      	mov	r3, r1
 8004eaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eae:	f7fb fa63 	bl	8000378 <__aeabi_dsub>
 8004eb2:	f806 7b01 	strb.w	r7, [r6], #1
 8004eb6:	42ae      	cmp	r6, r5
 8004eb8:	e9cd 0100 	strd	r0, r1, [sp]
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	d126      	bne.n	8004f10 <_dtoa_r+0x5e8>
 8004ec2:	4b1c      	ldr	r3, [pc, #112]	; (8004f34 <_dtoa_r+0x60c>)
 8004ec4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ec8:	f7fb fa58 	bl	800037c <__adddf3>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed4:	f7fb fe98 	bl	8000c08 <__aeabi_dcmpgt>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d174      	bne.n	8004fc6 <_dtoa_r+0x69e>
 8004edc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004ee0:	2000      	movs	r0, #0
 8004ee2:	4914      	ldr	r1, [pc, #80]	; (8004f34 <_dtoa_r+0x60c>)
 8004ee4:	f7fb fa48 	bl	8000378 <__aeabi_dsub>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ef0:	f7fb fe6c 	bl	8000bcc <__aeabi_dcmplt>
 8004ef4:	2800      	cmp	r0, #0
 8004ef6:	f43f af30 	beq.w	8004d5a <_dtoa_r+0x432>
 8004efa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004efe:	2b30      	cmp	r3, #48	; 0x30
 8004f00:	f105 32ff 	add.w	r2, r5, #4294967295
 8004f04:	d002      	beq.n	8004f0c <_dtoa_r+0x5e4>
 8004f06:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004f0a:	e04a      	b.n	8004fa2 <_dtoa_r+0x67a>
 8004f0c:	4615      	mov	r5, r2
 8004f0e:	e7f4      	b.n	8004efa <_dtoa_r+0x5d2>
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <_dtoa_r+0x600>)
 8004f12:	f7fb fbe9 	bl	80006e8 <__aeabi_dmul>
 8004f16:	e9cd 0100 	strd	r0, r1, [sp]
 8004f1a:	e7bc      	b.n	8004e96 <_dtoa_r+0x56e>
 8004f1c:	08006b48 	.word	0x08006b48
 8004f20:	08006b20 	.word	0x08006b20
 8004f24:	3ff00000 	.word	0x3ff00000
 8004f28:	40240000 	.word	0x40240000
 8004f2c:	401c0000 	.word	0x401c0000
 8004f30:	40140000 	.word	0x40140000
 8004f34:	3fe00000 	.word	0x3fe00000
 8004f38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004f3c:	465d      	mov	r5, fp
 8004f3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f42:	4630      	mov	r0, r6
 8004f44:	4639      	mov	r1, r7
 8004f46:	f7fb fcf9 	bl	800093c <__aeabi_ddiv>
 8004f4a:	f7fb fe7d 	bl	8000c48 <__aeabi_d2iz>
 8004f4e:	4680      	mov	r8, r0
 8004f50:	f7fb fb60 	bl	8000614 <__aeabi_i2d>
 8004f54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f58:	f7fb fbc6 	bl	80006e8 <__aeabi_dmul>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4630      	mov	r0, r6
 8004f62:	4639      	mov	r1, r7
 8004f64:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004f68:	f7fb fa06 	bl	8000378 <__aeabi_dsub>
 8004f6c:	f805 6b01 	strb.w	r6, [r5], #1
 8004f70:	eba5 060b 	sub.w	r6, r5, fp
 8004f74:	45b1      	cmp	r9, r6
 8004f76:	4602      	mov	r2, r0
 8004f78:	460b      	mov	r3, r1
 8004f7a:	d139      	bne.n	8004ff0 <_dtoa_r+0x6c8>
 8004f7c:	f7fb f9fe 	bl	800037c <__adddf3>
 8004f80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f84:	4606      	mov	r6, r0
 8004f86:	460f      	mov	r7, r1
 8004f88:	f7fb fe3e 	bl	8000c08 <__aeabi_dcmpgt>
 8004f8c:	b9c8      	cbnz	r0, 8004fc2 <_dtoa_r+0x69a>
 8004f8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004f92:	4630      	mov	r0, r6
 8004f94:	4639      	mov	r1, r7
 8004f96:	f7fb fe0f 	bl	8000bb8 <__aeabi_dcmpeq>
 8004f9a:	b110      	cbz	r0, 8004fa2 <_dtoa_r+0x67a>
 8004f9c:	f018 0f01 	tst.w	r8, #1
 8004fa0:	d10f      	bne.n	8004fc2 <_dtoa_r+0x69a>
 8004fa2:	9904      	ldr	r1, [sp, #16]
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f000 fdff 	bl	8005ba8 <_Bfree>
 8004faa:	2300      	movs	r3, #0
 8004fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004fae:	702b      	strb	r3, [r5, #0]
 8004fb0:	f10a 0301 	add.w	r3, sl, #1
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	f000 8241 	beq.w	8005440 <_dtoa_r+0xb18>
 8004fbe:	601d      	str	r5, [r3, #0]
 8004fc0:	e23e      	b.n	8005440 <_dtoa_r+0xb18>
 8004fc2:	f8cd a020 	str.w	sl, [sp, #32]
 8004fc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004fca:	2a39      	cmp	r2, #57	; 0x39
 8004fcc:	f105 33ff 	add.w	r3, r5, #4294967295
 8004fd0:	d108      	bne.n	8004fe4 <_dtoa_r+0x6bc>
 8004fd2:	459b      	cmp	fp, r3
 8004fd4:	d10a      	bne.n	8004fec <_dtoa_r+0x6c4>
 8004fd6:	9b08      	ldr	r3, [sp, #32]
 8004fd8:	3301      	adds	r3, #1
 8004fda:	9308      	str	r3, [sp, #32]
 8004fdc:	2330      	movs	r3, #48	; 0x30
 8004fde:	f88b 3000 	strb.w	r3, [fp]
 8004fe2:	465b      	mov	r3, fp
 8004fe4:	781a      	ldrb	r2, [r3, #0]
 8004fe6:	3201      	adds	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]
 8004fea:	e78c      	b.n	8004f06 <_dtoa_r+0x5de>
 8004fec:	461d      	mov	r5, r3
 8004fee:	e7ea      	b.n	8004fc6 <_dtoa_r+0x69e>
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	4b9b      	ldr	r3, [pc, #620]	; (8005260 <_dtoa_r+0x938>)
 8004ff4:	f7fb fb78 	bl	80006e8 <__aeabi_dmul>
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	4606      	mov	r6, r0
 8004ffe:	460f      	mov	r7, r1
 8005000:	f7fb fdda 	bl	8000bb8 <__aeabi_dcmpeq>
 8005004:	2800      	cmp	r0, #0
 8005006:	d09a      	beq.n	8004f3e <_dtoa_r+0x616>
 8005008:	e7cb      	b.n	8004fa2 <_dtoa_r+0x67a>
 800500a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800500c:	2a00      	cmp	r2, #0
 800500e:	f000 808b 	beq.w	8005128 <_dtoa_r+0x800>
 8005012:	9a06      	ldr	r2, [sp, #24]
 8005014:	2a01      	cmp	r2, #1
 8005016:	dc6e      	bgt.n	80050f6 <_dtoa_r+0x7ce>
 8005018:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800501a:	2a00      	cmp	r2, #0
 800501c:	d067      	beq.n	80050ee <_dtoa_r+0x7c6>
 800501e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005022:	9f07      	ldr	r7, [sp, #28]
 8005024:	9d05      	ldr	r5, [sp, #20]
 8005026:	9a05      	ldr	r2, [sp, #20]
 8005028:	2101      	movs	r1, #1
 800502a:	441a      	add	r2, r3
 800502c:	4620      	mov	r0, r4
 800502e:	9205      	str	r2, [sp, #20]
 8005030:	4498      	add	r8, r3
 8005032:	f000 fe97 	bl	8005d64 <__i2b>
 8005036:	4606      	mov	r6, r0
 8005038:	2d00      	cmp	r5, #0
 800503a:	dd0c      	ble.n	8005056 <_dtoa_r+0x72e>
 800503c:	f1b8 0f00 	cmp.w	r8, #0
 8005040:	dd09      	ble.n	8005056 <_dtoa_r+0x72e>
 8005042:	4545      	cmp	r5, r8
 8005044:	9a05      	ldr	r2, [sp, #20]
 8005046:	462b      	mov	r3, r5
 8005048:	bfa8      	it	ge
 800504a:	4643      	movge	r3, r8
 800504c:	1ad2      	subs	r2, r2, r3
 800504e:	9205      	str	r2, [sp, #20]
 8005050:	1aed      	subs	r5, r5, r3
 8005052:	eba8 0803 	sub.w	r8, r8, r3
 8005056:	9b07      	ldr	r3, [sp, #28]
 8005058:	b1eb      	cbz	r3, 8005096 <_dtoa_r+0x76e>
 800505a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800505c:	2b00      	cmp	r3, #0
 800505e:	d067      	beq.n	8005130 <_dtoa_r+0x808>
 8005060:	b18f      	cbz	r7, 8005086 <_dtoa_r+0x75e>
 8005062:	4631      	mov	r1, r6
 8005064:	463a      	mov	r2, r7
 8005066:	4620      	mov	r0, r4
 8005068:	f000 ff1c 	bl	8005ea4 <__pow5mult>
 800506c:	9a04      	ldr	r2, [sp, #16]
 800506e:	4601      	mov	r1, r0
 8005070:	4606      	mov	r6, r0
 8005072:	4620      	mov	r0, r4
 8005074:	f000 fe7f 	bl	8005d76 <__multiply>
 8005078:	9904      	ldr	r1, [sp, #16]
 800507a:	9008      	str	r0, [sp, #32]
 800507c:	4620      	mov	r0, r4
 800507e:	f000 fd93 	bl	8005ba8 <_Bfree>
 8005082:	9b08      	ldr	r3, [sp, #32]
 8005084:	9304      	str	r3, [sp, #16]
 8005086:	9b07      	ldr	r3, [sp, #28]
 8005088:	1bda      	subs	r2, r3, r7
 800508a:	d004      	beq.n	8005096 <_dtoa_r+0x76e>
 800508c:	9904      	ldr	r1, [sp, #16]
 800508e:	4620      	mov	r0, r4
 8005090:	f000 ff08 	bl	8005ea4 <__pow5mult>
 8005094:	9004      	str	r0, [sp, #16]
 8005096:	2101      	movs	r1, #1
 8005098:	4620      	mov	r0, r4
 800509a:	f000 fe63 	bl	8005d64 <__i2b>
 800509e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050a0:	4607      	mov	r7, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 81d0 	beq.w	8005448 <_dtoa_r+0xb20>
 80050a8:	461a      	mov	r2, r3
 80050aa:	4601      	mov	r1, r0
 80050ac:	4620      	mov	r0, r4
 80050ae:	f000 fef9 	bl	8005ea4 <__pow5mult>
 80050b2:	9b06      	ldr	r3, [sp, #24]
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	4607      	mov	r7, r0
 80050b8:	dc40      	bgt.n	800513c <_dtoa_r+0x814>
 80050ba:	9b00      	ldr	r3, [sp, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d139      	bne.n	8005134 <_dtoa_r+0x80c>
 80050c0:	9b01      	ldr	r3, [sp, #4]
 80050c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d136      	bne.n	8005138 <_dtoa_r+0x810>
 80050ca:	9b01      	ldr	r3, [sp, #4]
 80050cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80050d0:	0d1b      	lsrs	r3, r3, #20
 80050d2:	051b      	lsls	r3, r3, #20
 80050d4:	b12b      	cbz	r3, 80050e2 <_dtoa_r+0x7ba>
 80050d6:	9b05      	ldr	r3, [sp, #20]
 80050d8:	3301      	adds	r3, #1
 80050da:	9305      	str	r3, [sp, #20]
 80050dc:	f108 0801 	add.w	r8, r8, #1
 80050e0:	2301      	movs	r3, #1
 80050e2:	9307      	str	r3, [sp, #28]
 80050e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d12a      	bne.n	8005140 <_dtoa_r+0x818>
 80050ea:	2001      	movs	r0, #1
 80050ec:	e030      	b.n	8005150 <_dtoa_r+0x828>
 80050ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80050f0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80050f4:	e795      	b.n	8005022 <_dtoa_r+0x6fa>
 80050f6:	9b07      	ldr	r3, [sp, #28]
 80050f8:	f109 37ff 	add.w	r7, r9, #4294967295
 80050fc:	42bb      	cmp	r3, r7
 80050fe:	bfbf      	itttt	lt
 8005100:	9b07      	ldrlt	r3, [sp, #28]
 8005102:	9707      	strlt	r7, [sp, #28]
 8005104:	1afa      	sublt	r2, r7, r3
 8005106:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005108:	bfbb      	ittet	lt
 800510a:	189b      	addlt	r3, r3, r2
 800510c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800510e:	1bdf      	subge	r7, r3, r7
 8005110:	2700      	movlt	r7, #0
 8005112:	f1b9 0f00 	cmp.w	r9, #0
 8005116:	bfb5      	itete	lt
 8005118:	9b05      	ldrlt	r3, [sp, #20]
 800511a:	9d05      	ldrge	r5, [sp, #20]
 800511c:	eba3 0509 	sublt.w	r5, r3, r9
 8005120:	464b      	movge	r3, r9
 8005122:	bfb8      	it	lt
 8005124:	2300      	movlt	r3, #0
 8005126:	e77e      	b.n	8005026 <_dtoa_r+0x6fe>
 8005128:	9f07      	ldr	r7, [sp, #28]
 800512a:	9d05      	ldr	r5, [sp, #20]
 800512c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800512e:	e783      	b.n	8005038 <_dtoa_r+0x710>
 8005130:	9a07      	ldr	r2, [sp, #28]
 8005132:	e7ab      	b.n	800508c <_dtoa_r+0x764>
 8005134:	2300      	movs	r3, #0
 8005136:	e7d4      	b.n	80050e2 <_dtoa_r+0x7ba>
 8005138:	9b00      	ldr	r3, [sp, #0]
 800513a:	e7d2      	b.n	80050e2 <_dtoa_r+0x7ba>
 800513c:	2300      	movs	r3, #0
 800513e:	9307      	str	r3, [sp, #28]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8005146:	6918      	ldr	r0, [r3, #16]
 8005148:	f000 fdbe 	bl	8005cc8 <__hi0bits>
 800514c:	f1c0 0020 	rsb	r0, r0, #32
 8005150:	4440      	add	r0, r8
 8005152:	f010 001f 	ands.w	r0, r0, #31
 8005156:	d047      	beq.n	80051e8 <_dtoa_r+0x8c0>
 8005158:	f1c0 0320 	rsb	r3, r0, #32
 800515c:	2b04      	cmp	r3, #4
 800515e:	dd3b      	ble.n	80051d8 <_dtoa_r+0x8b0>
 8005160:	9b05      	ldr	r3, [sp, #20]
 8005162:	f1c0 001c 	rsb	r0, r0, #28
 8005166:	4403      	add	r3, r0
 8005168:	9305      	str	r3, [sp, #20]
 800516a:	4405      	add	r5, r0
 800516c:	4480      	add	r8, r0
 800516e:	9b05      	ldr	r3, [sp, #20]
 8005170:	2b00      	cmp	r3, #0
 8005172:	dd05      	ble.n	8005180 <_dtoa_r+0x858>
 8005174:	461a      	mov	r2, r3
 8005176:	9904      	ldr	r1, [sp, #16]
 8005178:	4620      	mov	r0, r4
 800517a:	f000 fee1 	bl	8005f40 <__lshift>
 800517e:	9004      	str	r0, [sp, #16]
 8005180:	f1b8 0f00 	cmp.w	r8, #0
 8005184:	dd05      	ble.n	8005192 <_dtoa_r+0x86a>
 8005186:	4639      	mov	r1, r7
 8005188:	4642      	mov	r2, r8
 800518a:	4620      	mov	r0, r4
 800518c:	f000 fed8 	bl	8005f40 <__lshift>
 8005190:	4607      	mov	r7, r0
 8005192:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005194:	b353      	cbz	r3, 80051ec <_dtoa_r+0x8c4>
 8005196:	4639      	mov	r1, r7
 8005198:	9804      	ldr	r0, [sp, #16]
 800519a:	f000 ff25 	bl	8005fe8 <__mcmp>
 800519e:	2800      	cmp	r0, #0
 80051a0:	da24      	bge.n	80051ec <_dtoa_r+0x8c4>
 80051a2:	2300      	movs	r3, #0
 80051a4:	220a      	movs	r2, #10
 80051a6:	9904      	ldr	r1, [sp, #16]
 80051a8:	4620      	mov	r0, r4
 80051aa:	f000 fd14 	bl	8005bd6 <__multadd>
 80051ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b0:	9004      	str	r0, [sp, #16]
 80051b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	f000 814d 	beq.w	8005456 <_dtoa_r+0xb2e>
 80051bc:	2300      	movs	r3, #0
 80051be:	4631      	mov	r1, r6
 80051c0:	220a      	movs	r2, #10
 80051c2:	4620      	mov	r0, r4
 80051c4:	f000 fd07 	bl	8005bd6 <__multadd>
 80051c8:	9b02      	ldr	r3, [sp, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	4606      	mov	r6, r0
 80051ce:	dc4f      	bgt.n	8005270 <_dtoa_r+0x948>
 80051d0:	9b06      	ldr	r3, [sp, #24]
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	dd4c      	ble.n	8005270 <_dtoa_r+0x948>
 80051d6:	e011      	b.n	80051fc <_dtoa_r+0x8d4>
 80051d8:	d0c9      	beq.n	800516e <_dtoa_r+0x846>
 80051da:	9a05      	ldr	r2, [sp, #20]
 80051dc:	331c      	adds	r3, #28
 80051de:	441a      	add	r2, r3
 80051e0:	9205      	str	r2, [sp, #20]
 80051e2:	441d      	add	r5, r3
 80051e4:	4498      	add	r8, r3
 80051e6:	e7c2      	b.n	800516e <_dtoa_r+0x846>
 80051e8:	4603      	mov	r3, r0
 80051ea:	e7f6      	b.n	80051da <_dtoa_r+0x8b2>
 80051ec:	f1b9 0f00 	cmp.w	r9, #0
 80051f0:	dc38      	bgt.n	8005264 <_dtoa_r+0x93c>
 80051f2:	9b06      	ldr	r3, [sp, #24]
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	dd35      	ble.n	8005264 <_dtoa_r+0x93c>
 80051f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80051fc:	9b02      	ldr	r3, [sp, #8]
 80051fe:	b963      	cbnz	r3, 800521a <_dtoa_r+0x8f2>
 8005200:	4639      	mov	r1, r7
 8005202:	2205      	movs	r2, #5
 8005204:	4620      	mov	r0, r4
 8005206:	f000 fce6 	bl	8005bd6 <__multadd>
 800520a:	4601      	mov	r1, r0
 800520c:	4607      	mov	r7, r0
 800520e:	9804      	ldr	r0, [sp, #16]
 8005210:	f000 feea 	bl	8005fe8 <__mcmp>
 8005214:	2800      	cmp	r0, #0
 8005216:	f73f adcc 	bgt.w	8004db2 <_dtoa_r+0x48a>
 800521a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800521c:	465d      	mov	r5, fp
 800521e:	ea6f 0a03 	mvn.w	sl, r3
 8005222:	f04f 0900 	mov.w	r9, #0
 8005226:	4639      	mov	r1, r7
 8005228:	4620      	mov	r0, r4
 800522a:	f000 fcbd 	bl	8005ba8 <_Bfree>
 800522e:	2e00      	cmp	r6, #0
 8005230:	f43f aeb7 	beq.w	8004fa2 <_dtoa_r+0x67a>
 8005234:	f1b9 0f00 	cmp.w	r9, #0
 8005238:	d005      	beq.n	8005246 <_dtoa_r+0x91e>
 800523a:	45b1      	cmp	r9, r6
 800523c:	d003      	beq.n	8005246 <_dtoa_r+0x91e>
 800523e:	4649      	mov	r1, r9
 8005240:	4620      	mov	r0, r4
 8005242:	f000 fcb1 	bl	8005ba8 <_Bfree>
 8005246:	4631      	mov	r1, r6
 8005248:	4620      	mov	r0, r4
 800524a:	f000 fcad 	bl	8005ba8 <_Bfree>
 800524e:	e6a8      	b.n	8004fa2 <_dtoa_r+0x67a>
 8005250:	2700      	movs	r7, #0
 8005252:	463e      	mov	r6, r7
 8005254:	e7e1      	b.n	800521a <_dtoa_r+0x8f2>
 8005256:	f8dd a020 	ldr.w	sl, [sp, #32]
 800525a:	463e      	mov	r6, r7
 800525c:	e5a9      	b.n	8004db2 <_dtoa_r+0x48a>
 800525e:	bf00      	nop
 8005260:	40240000 	.word	0x40240000
 8005264:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005266:	f8cd 9008 	str.w	r9, [sp, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 80fa 	beq.w	8005464 <_dtoa_r+0xb3c>
 8005270:	2d00      	cmp	r5, #0
 8005272:	dd05      	ble.n	8005280 <_dtoa_r+0x958>
 8005274:	4631      	mov	r1, r6
 8005276:	462a      	mov	r2, r5
 8005278:	4620      	mov	r0, r4
 800527a:	f000 fe61 	bl	8005f40 <__lshift>
 800527e:	4606      	mov	r6, r0
 8005280:	9b07      	ldr	r3, [sp, #28]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d04c      	beq.n	8005320 <_dtoa_r+0x9f8>
 8005286:	6871      	ldr	r1, [r6, #4]
 8005288:	4620      	mov	r0, r4
 800528a:	f000 fc59 	bl	8005b40 <_Balloc>
 800528e:	6932      	ldr	r2, [r6, #16]
 8005290:	3202      	adds	r2, #2
 8005292:	4605      	mov	r5, r0
 8005294:	0092      	lsls	r2, r2, #2
 8005296:	f106 010c 	add.w	r1, r6, #12
 800529a:	300c      	adds	r0, #12
 800529c:	f7fd fd90 	bl	8002dc0 <memcpy>
 80052a0:	2201      	movs	r2, #1
 80052a2:	4629      	mov	r1, r5
 80052a4:	4620      	mov	r0, r4
 80052a6:	f000 fe4b 	bl	8005f40 <__lshift>
 80052aa:	9b00      	ldr	r3, [sp, #0]
 80052ac:	f8cd b014 	str.w	fp, [sp, #20]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	46b1      	mov	r9, r6
 80052b6:	9307      	str	r3, [sp, #28]
 80052b8:	4606      	mov	r6, r0
 80052ba:	4639      	mov	r1, r7
 80052bc:	9804      	ldr	r0, [sp, #16]
 80052be:	f7ff faa5 	bl	800480c <quorem>
 80052c2:	4649      	mov	r1, r9
 80052c4:	4605      	mov	r5, r0
 80052c6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80052ca:	9804      	ldr	r0, [sp, #16]
 80052cc:	f000 fe8c 	bl	8005fe8 <__mcmp>
 80052d0:	4632      	mov	r2, r6
 80052d2:	9000      	str	r0, [sp, #0]
 80052d4:	4639      	mov	r1, r7
 80052d6:	4620      	mov	r0, r4
 80052d8:	f000 fea0 	bl	800601c <__mdiff>
 80052dc:	68c3      	ldr	r3, [r0, #12]
 80052de:	4602      	mov	r2, r0
 80052e0:	bb03      	cbnz	r3, 8005324 <_dtoa_r+0x9fc>
 80052e2:	4601      	mov	r1, r0
 80052e4:	9008      	str	r0, [sp, #32]
 80052e6:	9804      	ldr	r0, [sp, #16]
 80052e8:	f000 fe7e 	bl	8005fe8 <__mcmp>
 80052ec:	9a08      	ldr	r2, [sp, #32]
 80052ee:	4603      	mov	r3, r0
 80052f0:	4611      	mov	r1, r2
 80052f2:	4620      	mov	r0, r4
 80052f4:	9308      	str	r3, [sp, #32]
 80052f6:	f000 fc57 	bl	8005ba8 <_Bfree>
 80052fa:	9b08      	ldr	r3, [sp, #32]
 80052fc:	b9a3      	cbnz	r3, 8005328 <_dtoa_r+0xa00>
 80052fe:	9a06      	ldr	r2, [sp, #24]
 8005300:	b992      	cbnz	r2, 8005328 <_dtoa_r+0xa00>
 8005302:	9a07      	ldr	r2, [sp, #28]
 8005304:	b982      	cbnz	r2, 8005328 <_dtoa_r+0xa00>
 8005306:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800530a:	d029      	beq.n	8005360 <_dtoa_r+0xa38>
 800530c:	9b00      	ldr	r3, [sp, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	dd01      	ble.n	8005316 <_dtoa_r+0x9ee>
 8005312:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8005316:	9b05      	ldr	r3, [sp, #20]
 8005318:	1c5d      	adds	r5, r3, #1
 800531a:	f883 8000 	strb.w	r8, [r3]
 800531e:	e782      	b.n	8005226 <_dtoa_r+0x8fe>
 8005320:	4630      	mov	r0, r6
 8005322:	e7c2      	b.n	80052aa <_dtoa_r+0x982>
 8005324:	2301      	movs	r3, #1
 8005326:	e7e3      	b.n	80052f0 <_dtoa_r+0x9c8>
 8005328:	9a00      	ldr	r2, [sp, #0]
 800532a:	2a00      	cmp	r2, #0
 800532c:	db04      	blt.n	8005338 <_dtoa_r+0xa10>
 800532e:	d125      	bne.n	800537c <_dtoa_r+0xa54>
 8005330:	9a06      	ldr	r2, [sp, #24]
 8005332:	bb1a      	cbnz	r2, 800537c <_dtoa_r+0xa54>
 8005334:	9a07      	ldr	r2, [sp, #28]
 8005336:	bb0a      	cbnz	r2, 800537c <_dtoa_r+0xa54>
 8005338:	2b00      	cmp	r3, #0
 800533a:	ddec      	ble.n	8005316 <_dtoa_r+0x9ee>
 800533c:	2201      	movs	r2, #1
 800533e:	9904      	ldr	r1, [sp, #16]
 8005340:	4620      	mov	r0, r4
 8005342:	f000 fdfd 	bl	8005f40 <__lshift>
 8005346:	4639      	mov	r1, r7
 8005348:	9004      	str	r0, [sp, #16]
 800534a:	f000 fe4d 	bl	8005fe8 <__mcmp>
 800534e:	2800      	cmp	r0, #0
 8005350:	dc03      	bgt.n	800535a <_dtoa_r+0xa32>
 8005352:	d1e0      	bne.n	8005316 <_dtoa_r+0x9ee>
 8005354:	f018 0f01 	tst.w	r8, #1
 8005358:	d0dd      	beq.n	8005316 <_dtoa_r+0x9ee>
 800535a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800535e:	d1d8      	bne.n	8005312 <_dtoa_r+0x9ea>
 8005360:	9b05      	ldr	r3, [sp, #20]
 8005362:	9a05      	ldr	r2, [sp, #20]
 8005364:	1c5d      	adds	r5, r3, #1
 8005366:	2339      	movs	r3, #57	; 0x39
 8005368:	7013      	strb	r3, [r2, #0]
 800536a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800536e:	2b39      	cmp	r3, #57	; 0x39
 8005370:	f105 32ff 	add.w	r2, r5, #4294967295
 8005374:	d04f      	beq.n	8005416 <_dtoa_r+0xaee>
 8005376:	3301      	adds	r3, #1
 8005378:	7013      	strb	r3, [r2, #0]
 800537a:	e754      	b.n	8005226 <_dtoa_r+0x8fe>
 800537c:	9a05      	ldr	r2, [sp, #20]
 800537e:	2b00      	cmp	r3, #0
 8005380:	f102 0501 	add.w	r5, r2, #1
 8005384:	dd06      	ble.n	8005394 <_dtoa_r+0xa6c>
 8005386:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800538a:	d0e9      	beq.n	8005360 <_dtoa_r+0xa38>
 800538c:	f108 0801 	add.w	r8, r8, #1
 8005390:	9b05      	ldr	r3, [sp, #20]
 8005392:	e7c2      	b.n	800531a <_dtoa_r+0x9f2>
 8005394:	9a02      	ldr	r2, [sp, #8]
 8005396:	f805 8c01 	strb.w	r8, [r5, #-1]
 800539a:	eba5 030b 	sub.w	r3, r5, fp
 800539e:	4293      	cmp	r3, r2
 80053a0:	d021      	beq.n	80053e6 <_dtoa_r+0xabe>
 80053a2:	2300      	movs	r3, #0
 80053a4:	220a      	movs	r2, #10
 80053a6:	9904      	ldr	r1, [sp, #16]
 80053a8:	4620      	mov	r0, r4
 80053aa:	f000 fc14 	bl	8005bd6 <__multadd>
 80053ae:	45b1      	cmp	r9, r6
 80053b0:	9004      	str	r0, [sp, #16]
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	f04f 020a 	mov.w	r2, #10
 80053ba:	4649      	mov	r1, r9
 80053bc:	4620      	mov	r0, r4
 80053be:	d105      	bne.n	80053cc <_dtoa_r+0xaa4>
 80053c0:	f000 fc09 	bl	8005bd6 <__multadd>
 80053c4:	4681      	mov	r9, r0
 80053c6:	4606      	mov	r6, r0
 80053c8:	9505      	str	r5, [sp, #20]
 80053ca:	e776      	b.n	80052ba <_dtoa_r+0x992>
 80053cc:	f000 fc03 	bl	8005bd6 <__multadd>
 80053d0:	4631      	mov	r1, r6
 80053d2:	4681      	mov	r9, r0
 80053d4:	2300      	movs	r3, #0
 80053d6:	220a      	movs	r2, #10
 80053d8:	4620      	mov	r0, r4
 80053da:	f000 fbfc 	bl	8005bd6 <__multadd>
 80053de:	4606      	mov	r6, r0
 80053e0:	e7f2      	b.n	80053c8 <_dtoa_r+0xaa0>
 80053e2:	f04f 0900 	mov.w	r9, #0
 80053e6:	2201      	movs	r2, #1
 80053e8:	9904      	ldr	r1, [sp, #16]
 80053ea:	4620      	mov	r0, r4
 80053ec:	f000 fda8 	bl	8005f40 <__lshift>
 80053f0:	4639      	mov	r1, r7
 80053f2:	9004      	str	r0, [sp, #16]
 80053f4:	f000 fdf8 	bl	8005fe8 <__mcmp>
 80053f8:	2800      	cmp	r0, #0
 80053fa:	dcb6      	bgt.n	800536a <_dtoa_r+0xa42>
 80053fc:	d102      	bne.n	8005404 <_dtoa_r+0xadc>
 80053fe:	f018 0f01 	tst.w	r8, #1
 8005402:	d1b2      	bne.n	800536a <_dtoa_r+0xa42>
 8005404:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005408:	2b30      	cmp	r3, #48	; 0x30
 800540a:	f105 32ff 	add.w	r2, r5, #4294967295
 800540e:	f47f af0a 	bne.w	8005226 <_dtoa_r+0x8fe>
 8005412:	4615      	mov	r5, r2
 8005414:	e7f6      	b.n	8005404 <_dtoa_r+0xadc>
 8005416:	4593      	cmp	fp, r2
 8005418:	d105      	bne.n	8005426 <_dtoa_r+0xafe>
 800541a:	2331      	movs	r3, #49	; 0x31
 800541c:	f10a 0a01 	add.w	sl, sl, #1
 8005420:	f88b 3000 	strb.w	r3, [fp]
 8005424:	e6ff      	b.n	8005226 <_dtoa_r+0x8fe>
 8005426:	4615      	mov	r5, r2
 8005428:	e79f      	b.n	800536a <_dtoa_r+0xa42>
 800542a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005490 <_dtoa_r+0xb68>
 800542e:	e007      	b.n	8005440 <_dtoa_r+0xb18>
 8005430:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005432:	f8df b060 	ldr.w	fp, [pc, #96]	; 8005494 <_dtoa_r+0xb6c>
 8005436:	b11b      	cbz	r3, 8005440 <_dtoa_r+0xb18>
 8005438:	f10b 0308 	add.w	r3, fp, #8
 800543c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800543e:	6013      	str	r3, [r2, #0]
 8005440:	4658      	mov	r0, fp
 8005442:	b017      	add	sp, #92	; 0x5c
 8005444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005448:	9b06      	ldr	r3, [sp, #24]
 800544a:	2b01      	cmp	r3, #1
 800544c:	f77f ae35 	ble.w	80050ba <_dtoa_r+0x792>
 8005450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005452:	9307      	str	r3, [sp, #28]
 8005454:	e649      	b.n	80050ea <_dtoa_r+0x7c2>
 8005456:	9b02      	ldr	r3, [sp, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	dc03      	bgt.n	8005464 <_dtoa_r+0xb3c>
 800545c:	9b06      	ldr	r3, [sp, #24]
 800545e:	2b02      	cmp	r3, #2
 8005460:	f73f aecc 	bgt.w	80051fc <_dtoa_r+0x8d4>
 8005464:	465d      	mov	r5, fp
 8005466:	4639      	mov	r1, r7
 8005468:	9804      	ldr	r0, [sp, #16]
 800546a:	f7ff f9cf 	bl	800480c <quorem>
 800546e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005472:	f805 8b01 	strb.w	r8, [r5], #1
 8005476:	9a02      	ldr	r2, [sp, #8]
 8005478:	eba5 030b 	sub.w	r3, r5, fp
 800547c:	429a      	cmp	r2, r3
 800547e:	ddb0      	ble.n	80053e2 <_dtoa_r+0xaba>
 8005480:	2300      	movs	r3, #0
 8005482:	220a      	movs	r2, #10
 8005484:	9904      	ldr	r1, [sp, #16]
 8005486:	4620      	mov	r0, r4
 8005488:	f000 fba5 	bl	8005bd6 <__multadd>
 800548c:	9004      	str	r0, [sp, #16]
 800548e:	e7ea      	b.n	8005466 <_dtoa_r+0xb3e>
 8005490:	08006a8c 	.word	0x08006a8c
 8005494:	08006b08 	.word	0x08006b08

08005498 <rshift>:
 8005498:	b5f0      	push	{r4, r5, r6, r7, lr}
 800549a:	6906      	ldr	r6, [r0, #16]
 800549c:	114b      	asrs	r3, r1, #5
 800549e:	429e      	cmp	r6, r3
 80054a0:	f100 0414 	add.w	r4, r0, #20
 80054a4:	dd30      	ble.n	8005508 <rshift+0x70>
 80054a6:	f011 011f 	ands.w	r1, r1, #31
 80054aa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80054ae:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80054b2:	d108      	bne.n	80054c6 <rshift+0x2e>
 80054b4:	4621      	mov	r1, r4
 80054b6:	42b2      	cmp	r2, r6
 80054b8:	460b      	mov	r3, r1
 80054ba:	d211      	bcs.n	80054e0 <rshift+0x48>
 80054bc:	f852 3b04 	ldr.w	r3, [r2], #4
 80054c0:	f841 3b04 	str.w	r3, [r1], #4
 80054c4:	e7f7      	b.n	80054b6 <rshift+0x1e>
 80054c6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80054ca:	f1c1 0c20 	rsb	ip, r1, #32
 80054ce:	40cd      	lsrs	r5, r1
 80054d0:	3204      	adds	r2, #4
 80054d2:	4623      	mov	r3, r4
 80054d4:	42b2      	cmp	r2, r6
 80054d6:	4617      	mov	r7, r2
 80054d8:	d30c      	bcc.n	80054f4 <rshift+0x5c>
 80054da:	601d      	str	r5, [r3, #0]
 80054dc:	b105      	cbz	r5, 80054e0 <rshift+0x48>
 80054de:	3304      	adds	r3, #4
 80054e0:	1b1a      	subs	r2, r3, r4
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80054e8:	bf08      	it	eq
 80054ea:	2300      	moveq	r3, #0
 80054ec:	6102      	str	r2, [r0, #16]
 80054ee:	bf08      	it	eq
 80054f0:	6143      	streq	r3, [r0, #20]
 80054f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054f4:	683f      	ldr	r7, [r7, #0]
 80054f6:	fa07 f70c 	lsl.w	r7, r7, ip
 80054fa:	433d      	orrs	r5, r7
 80054fc:	f843 5b04 	str.w	r5, [r3], #4
 8005500:	f852 5b04 	ldr.w	r5, [r2], #4
 8005504:	40cd      	lsrs	r5, r1
 8005506:	e7e5      	b.n	80054d4 <rshift+0x3c>
 8005508:	4623      	mov	r3, r4
 800550a:	e7e9      	b.n	80054e0 <rshift+0x48>

0800550c <__hexdig_fun>:
 800550c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005510:	2b09      	cmp	r3, #9
 8005512:	d802      	bhi.n	800551a <__hexdig_fun+0xe>
 8005514:	3820      	subs	r0, #32
 8005516:	b2c0      	uxtb	r0, r0
 8005518:	4770      	bx	lr
 800551a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800551e:	2b05      	cmp	r3, #5
 8005520:	d801      	bhi.n	8005526 <__hexdig_fun+0x1a>
 8005522:	3847      	subs	r0, #71	; 0x47
 8005524:	e7f7      	b.n	8005516 <__hexdig_fun+0xa>
 8005526:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800552a:	2b05      	cmp	r3, #5
 800552c:	d801      	bhi.n	8005532 <__hexdig_fun+0x26>
 800552e:	3827      	subs	r0, #39	; 0x27
 8005530:	e7f1      	b.n	8005516 <__hexdig_fun+0xa>
 8005532:	2000      	movs	r0, #0
 8005534:	4770      	bx	lr

08005536 <__gethex>:
 8005536:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800553a:	b08b      	sub	sp, #44	; 0x2c
 800553c:	468a      	mov	sl, r1
 800553e:	9002      	str	r0, [sp, #8]
 8005540:	9816      	ldr	r0, [sp, #88]	; 0x58
 8005542:	9306      	str	r3, [sp, #24]
 8005544:	4690      	mov	r8, r2
 8005546:	f000 fad0 	bl	8005aea <__localeconv_l>
 800554a:	6803      	ldr	r3, [r0, #0]
 800554c:	9303      	str	r3, [sp, #12]
 800554e:	4618      	mov	r0, r3
 8005550:	f7fa feb1 	bl	80002b6 <strlen>
 8005554:	9b03      	ldr	r3, [sp, #12]
 8005556:	9001      	str	r0, [sp, #4]
 8005558:	4403      	add	r3, r0
 800555a:	f04f 0b00 	mov.w	fp, #0
 800555e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005562:	9307      	str	r3, [sp, #28]
 8005564:	f8da 3000 	ldr.w	r3, [sl]
 8005568:	3302      	adds	r3, #2
 800556a:	461f      	mov	r7, r3
 800556c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005570:	2830      	cmp	r0, #48	; 0x30
 8005572:	d06c      	beq.n	800564e <__gethex+0x118>
 8005574:	f7ff ffca 	bl	800550c <__hexdig_fun>
 8005578:	4604      	mov	r4, r0
 800557a:	2800      	cmp	r0, #0
 800557c:	d16a      	bne.n	8005654 <__gethex+0x11e>
 800557e:	9a01      	ldr	r2, [sp, #4]
 8005580:	9903      	ldr	r1, [sp, #12]
 8005582:	4638      	mov	r0, r7
 8005584:	f001 f8f4 	bl	8006770 <strncmp>
 8005588:	2800      	cmp	r0, #0
 800558a:	d166      	bne.n	800565a <__gethex+0x124>
 800558c:	9b01      	ldr	r3, [sp, #4]
 800558e:	5cf8      	ldrb	r0, [r7, r3]
 8005590:	18fe      	adds	r6, r7, r3
 8005592:	f7ff ffbb 	bl	800550c <__hexdig_fun>
 8005596:	2800      	cmp	r0, #0
 8005598:	d062      	beq.n	8005660 <__gethex+0x12a>
 800559a:	4633      	mov	r3, r6
 800559c:	7818      	ldrb	r0, [r3, #0]
 800559e:	2830      	cmp	r0, #48	; 0x30
 80055a0:	461f      	mov	r7, r3
 80055a2:	f103 0301 	add.w	r3, r3, #1
 80055a6:	d0f9      	beq.n	800559c <__gethex+0x66>
 80055a8:	f7ff ffb0 	bl	800550c <__hexdig_fun>
 80055ac:	fab0 f580 	clz	r5, r0
 80055b0:	096d      	lsrs	r5, r5, #5
 80055b2:	4634      	mov	r4, r6
 80055b4:	f04f 0b01 	mov.w	fp, #1
 80055b8:	463a      	mov	r2, r7
 80055ba:	4616      	mov	r6, r2
 80055bc:	3201      	adds	r2, #1
 80055be:	7830      	ldrb	r0, [r6, #0]
 80055c0:	f7ff ffa4 	bl	800550c <__hexdig_fun>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d1f8      	bne.n	80055ba <__gethex+0x84>
 80055c8:	9a01      	ldr	r2, [sp, #4]
 80055ca:	9903      	ldr	r1, [sp, #12]
 80055cc:	4630      	mov	r0, r6
 80055ce:	f001 f8cf 	bl	8006770 <strncmp>
 80055d2:	b950      	cbnz	r0, 80055ea <__gethex+0xb4>
 80055d4:	b954      	cbnz	r4, 80055ec <__gethex+0xb6>
 80055d6:	9b01      	ldr	r3, [sp, #4]
 80055d8:	18f4      	adds	r4, r6, r3
 80055da:	4622      	mov	r2, r4
 80055dc:	4616      	mov	r6, r2
 80055de:	3201      	adds	r2, #1
 80055e0:	7830      	ldrb	r0, [r6, #0]
 80055e2:	f7ff ff93 	bl	800550c <__hexdig_fun>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d1f8      	bne.n	80055dc <__gethex+0xa6>
 80055ea:	b10c      	cbz	r4, 80055f0 <__gethex+0xba>
 80055ec:	1ba4      	subs	r4, r4, r6
 80055ee:	00a4      	lsls	r4, r4, #2
 80055f0:	7833      	ldrb	r3, [r6, #0]
 80055f2:	2b50      	cmp	r3, #80	; 0x50
 80055f4:	d001      	beq.n	80055fa <__gethex+0xc4>
 80055f6:	2b70      	cmp	r3, #112	; 0x70
 80055f8:	d140      	bne.n	800567c <__gethex+0x146>
 80055fa:	7873      	ldrb	r3, [r6, #1]
 80055fc:	2b2b      	cmp	r3, #43	; 0x2b
 80055fe:	d031      	beq.n	8005664 <__gethex+0x12e>
 8005600:	2b2d      	cmp	r3, #45	; 0x2d
 8005602:	d033      	beq.n	800566c <__gethex+0x136>
 8005604:	1c71      	adds	r1, r6, #1
 8005606:	f04f 0900 	mov.w	r9, #0
 800560a:	7808      	ldrb	r0, [r1, #0]
 800560c:	f7ff ff7e 	bl	800550c <__hexdig_fun>
 8005610:	1e43      	subs	r3, r0, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b18      	cmp	r3, #24
 8005616:	d831      	bhi.n	800567c <__gethex+0x146>
 8005618:	f1a0 0210 	sub.w	r2, r0, #16
 800561c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005620:	f7ff ff74 	bl	800550c <__hexdig_fun>
 8005624:	1e43      	subs	r3, r0, #1
 8005626:	b2db      	uxtb	r3, r3
 8005628:	2b18      	cmp	r3, #24
 800562a:	d922      	bls.n	8005672 <__gethex+0x13c>
 800562c:	f1b9 0f00 	cmp.w	r9, #0
 8005630:	d000      	beq.n	8005634 <__gethex+0xfe>
 8005632:	4252      	negs	r2, r2
 8005634:	4414      	add	r4, r2
 8005636:	f8ca 1000 	str.w	r1, [sl]
 800563a:	b30d      	cbz	r5, 8005680 <__gethex+0x14a>
 800563c:	f1bb 0f00 	cmp.w	fp, #0
 8005640:	bf0c      	ite	eq
 8005642:	2706      	moveq	r7, #6
 8005644:	2700      	movne	r7, #0
 8005646:	4638      	mov	r0, r7
 8005648:	b00b      	add	sp, #44	; 0x2c
 800564a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800564e:	f10b 0b01 	add.w	fp, fp, #1
 8005652:	e78a      	b.n	800556a <__gethex+0x34>
 8005654:	2500      	movs	r5, #0
 8005656:	462c      	mov	r4, r5
 8005658:	e7ae      	b.n	80055b8 <__gethex+0x82>
 800565a:	463e      	mov	r6, r7
 800565c:	2501      	movs	r5, #1
 800565e:	e7c7      	b.n	80055f0 <__gethex+0xba>
 8005660:	4604      	mov	r4, r0
 8005662:	e7fb      	b.n	800565c <__gethex+0x126>
 8005664:	f04f 0900 	mov.w	r9, #0
 8005668:	1cb1      	adds	r1, r6, #2
 800566a:	e7ce      	b.n	800560a <__gethex+0xd4>
 800566c:	f04f 0901 	mov.w	r9, #1
 8005670:	e7fa      	b.n	8005668 <__gethex+0x132>
 8005672:	230a      	movs	r3, #10
 8005674:	fb03 0202 	mla	r2, r3, r2, r0
 8005678:	3a10      	subs	r2, #16
 800567a:	e7cf      	b.n	800561c <__gethex+0xe6>
 800567c:	4631      	mov	r1, r6
 800567e:	e7da      	b.n	8005636 <__gethex+0x100>
 8005680:	1bf3      	subs	r3, r6, r7
 8005682:	3b01      	subs	r3, #1
 8005684:	4629      	mov	r1, r5
 8005686:	2b07      	cmp	r3, #7
 8005688:	dc49      	bgt.n	800571e <__gethex+0x1e8>
 800568a:	9802      	ldr	r0, [sp, #8]
 800568c:	f000 fa58 	bl	8005b40 <_Balloc>
 8005690:	9b01      	ldr	r3, [sp, #4]
 8005692:	f100 0914 	add.w	r9, r0, #20
 8005696:	f04f 0b00 	mov.w	fp, #0
 800569a:	f1c3 0301 	rsb	r3, r3, #1
 800569e:	4605      	mov	r5, r0
 80056a0:	f8cd 9010 	str.w	r9, [sp, #16]
 80056a4:	46da      	mov	sl, fp
 80056a6:	9308      	str	r3, [sp, #32]
 80056a8:	42b7      	cmp	r7, r6
 80056aa:	d33b      	bcc.n	8005724 <__gethex+0x1ee>
 80056ac:	9804      	ldr	r0, [sp, #16]
 80056ae:	f840 ab04 	str.w	sl, [r0], #4
 80056b2:	eba0 0009 	sub.w	r0, r0, r9
 80056b6:	1080      	asrs	r0, r0, #2
 80056b8:	6128      	str	r0, [r5, #16]
 80056ba:	0147      	lsls	r7, r0, #5
 80056bc:	4650      	mov	r0, sl
 80056be:	f000 fb03 	bl	8005cc8 <__hi0bits>
 80056c2:	f8d8 6000 	ldr.w	r6, [r8]
 80056c6:	1a3f      	subs	r7, r7, r0
 80056c8:	42b7      	cmp	r7, r6
 80056ca:	dd64      	ble.n	8005796 <__gethex+0x260>
 80056cc:	1bbf      	subs	r7, r7, r6
 80056ce:	4639      	mov	r1, r7
 80056d0:	4628      	mov	r0, r5
 80056d2:	f000 fe13 	bl	80062fc <__any_on>
 80056d6:	4682      	mov	sl, r0
 80056d8:	b178      	cbz	r0, 80056fa <__gethex+0x1c4>
 80056da:	1e7b      	subs	r3, r7, #1
 80056dc:	1159      	asrs	r1, r3, #5
 80056de:	f003 021f 	and.w	r2, r3, #31
 80056e2:	f04f 0a01 	mov.w	sl, #1
 80056e6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80056ea:	fa0a f202 	lsl.w	r2, sl, r2
 80056ee:	420a      	tst	r2, r1
 80056f0:	d003      	beq.n	80056fa <__gethex+0x1c4>
 80056f2:	4553      	cmp	r3, sl
 80056f4:	dc46      	bgt.n	8005784 <__gethex+0x24e>
 80056f6:	f04f 0a02 	mov.w	sl, #2
 80056fa:	4639      	mov	r1, r7
 80056fc:	4628      	mov	r0, r5
 80056fe:	f7ff fecb 	bl	8005498 <rshift>
 8005702:	443c      	add	r4, r7
 8005704:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005708:	42a3      	cmp	r3, r4
 800570a:	da52      	bge.n	80057b2 <__gethex+0x27c>
 800570c:	4629      	mov	r1, r5
 800570e:	9802      	ldr	r0, [sp, #8]
 8005710:	f000 fa4a 	bl	8005ba8 <_Bfree>
 8005714:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005716:	2300      	movs	r3, #0
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	27a3      	movs	r7, #163	; 0xa3
 800571c:	e793      	b.n	8005646 <__gethex+0x110>
 800571e:	3101      	adds	r1, #1
 8005720:	105b      	asrs	r3, r3, #1
 8005722:	e7b0      	b.n	8005686 <__gethex+0x150>
 8005724:	1e73      	subs	r3, r6, #1
 8005726:	9305      	str	r3, [sp, #20]
 8005728:	9a07      	ldr	r2, [sp, #28]
 800572a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800572e:	4293      	cmp	r3, r2
 8005730:	d018      	beq.n	8005764 <__gethex+0x22e>
 8005732:	f1bb 0f20 	cmp.w	fp, #32
 8005736:	d107      	bne.n	8005748 <__gethex+0x212>
 8005738:	9b04      	ldr	r3, [sp, #16]
 800573a:	f8c3 a000 	str.w	sl, [r3]
 800573e:	3304      	adds	r3, #4
 8005740:	f04f 0a00 	mov.w	sl, #0
 8005744:	9304      	str	r3, [sp, #16]
 8005746:	46d3      	mov	fp, sl
 8005748:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800574c:	f7ff fede 	bl	800550c <__hexdig_fun>
 8005750:	f000 000f 	and.w	r0, r0, #15
 8005754:	fa00 f00b 	lsl.w	r0, r0, fp
 8005758:	ea4a 0a00 	orr.w	sl, sl, r0
 800575c:	f10b 0b04 	add.w	fp, fp, #4
 8005760:	9b05      	ldr	r3, [sp, #20]
 8005762:	e00d      	b.n	8005780 <__gethex+0x24a>
 8005764:	9b05      	ldr	r3, [sp, #20]
 8005766:	9a08      	ldr	r2, [sp, #32]
 8005768:	4413      	add	r3, r2
 800576a:	42bb      	cmp	r3, r7
 800576c:	d3e1      	bcc.n	8005732 <__gethex+0x1fc>
 800576e:	4618      	mov	r0, r3
 8005770:	9a01      	ldr	r2, [sp, #4]
 8005772:	9903      	ldr	r1, [sp, #12]
 8005774:	9309      	str	r3, [sp, #36]	; 0x24
 8005776:	f000 fffb 	bl	8006770 <strncmp>
 800577a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800577c:	2800      	cmp	r0, #0
 800577e:	d1d8      	bne.n	8005732 <__gethex+0x1fc>
 8005780:	461e      	mov	r6, r3
 8005782:	e791      	b.n	80056a8 <__gethex+0x172>
 8005784:	1eb9      	subs	r1, r7, #2
 8005786:	4628      	mov	r0, r5
 8005788:	f000 fdb8 	bl	80062fc <__any_on>
 800578c:	2800      	cmp	r0, #0
 800578e:	d0b2      	beq.n	80056f6 <__gethex+0x1c0>
 8005790:	f04f 0a03 	mov.w	sl, #3
 8005794:	e7b1      	b.n	80056fa <__gethex+0x1c4>
 8005796:	da09      	bge.n	80057ac <__gethex+0x276>
 8005798:	1bf7      	subs	r7, r6, r7
 800579a:	4629      	mov	r1, r5
 800579c:	463a      	mov	r2, r7
 800579e:	9802      	ldr	r0, [sp, #8]
 80057a0:	f000 fbce 	bl	8005f40 <__lshift>
 80057a4:	1be4      	subs	r4, r4, r7
 80057a6:	4605      	mov	r5, r0
 80057a8:	f100 0914 	add.w	r9, r0, #20
 80057ac:	f04f 0a00 	mov.w	sl, #0
 80057b0:	e7a8      	b.n	8005704 <__gethex+0x1ce>
 80057b2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80057b6:	42a0      	cmp	r0, r4
 80057b8:	dd6a      	ble.n	8005890 <__gethex+0x35a>
 80057ba:	1b04      	subs	r4, r0, r4
 80057bc:	42a6      	cmp	r6, r4
 80057be:	dc2e      	bgt.n	800581e <__gethex+0x2e8>
 80057c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d022      	beq.n	800580e <__gethex+0x2d8>
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d024      	beq.n	8005816 <__gethex+0x2e0>
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d115      	bne.n	80057fc <__gethex+0x2c6>
 80057d0:	42a6      	cmp	r6, r4
 80057d2:	d113      	bne.n	80057fc <__gethex+0x2c6>
 80057d4:	2e01      	cmp	r6, #1
 80057d6:	dc0b      	bgt.n	80057f0 <__gethex+0x2ba>
 80057d8:	9a06      	ldr	r2, [sp, #24]
 80057da:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	2301      	movs	r3, #1
 80057e2:	612b      	str	r3, [r5, #16]
 80057e4:	f8c9 3000 	str.w	r3, [r9]
 80057e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057ea:	2762      	movs	r7, #98	; 0x62
 80057ec:	601d      	str	r5, [r3, #0]
 80057ee:	e72a      	b.n	8005646 <__gethex+0x110>
 80057f0:	1e71      	subs	r1, r6, #1
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 fd82 	bl	80062fc <__any_on>
 80057f8:	2800      	cmp	r0, #0
 80057fa:	d1ed      	bne.n	80057d8 <__gethex+0x2a2>
 80057fc:	4629      	mov	r1, r5
 80057fe:	9802      	ldr	r0, [sp, #8]
 8005800:	f000 f9d2 	bl	8005ba8 <_Bfree>
 8005804:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005806:	2300      	movs	r3, #0
 8005808:	6013      	str	r3, [r2, #0]
 800580a:	2750      	movs	r7, #80	; 0x50
 800580c:	e71b      	b.n	8005646 <__gethex+0x110>
 800580e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0e1      	beq.n	80057d8 <__gethex+0x2a2>
 8005814:	e7f2      	b.n	80057fc <__gethex+0x2c6>
 8005816:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1dd      	bne.n	80057d8 <__gethex+0x2a2>
 800581c:	e7ee      	b.n	80057fc <__gethex+0x2c6>
 800581e:	1e67      	subs	r7, r4, #1
 8005820:	f1ba 0f00 	cmp.w	sl, #0
 8005824:	d131      	bne.n	800588a <__gethex+0x354>
 8005826:	b127      	cbz	r7, 8005832 <__gethex+0x2fc>
 8005828:	4639      	mov	r1, r7
 800582a:	4628      	mov	r0, r5
 800582c:	f000 fd66 	bl	80062fc <__any_on>
 8005830:	4682      	mov	sl, r0
 8005832:	117a      	asrs	r2, r7, #5
 8005834:	2301      	movs	r3, #1
 8005836:	f007 071f 	and.w	r7, r7, #31
 800583a:	fa03 f707 	lsl.w	r7, r3, r7
 800583e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8005842:	4621      	mov	r1, r4
 8005844:	421f      	tst	r7, r3
 8005846:	4628      	mov	r0, r5
 8005848:	bf18      	it	ne
 800584a:	f04a 0a02 	orrne.w	sl, sl, #2
 800584e:	1b36      	subs	r6, r6, r4
 8005850:	f7ff fe22 	bl	8005498 <rshift>
 8005854:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005858:	2702      	movs	r7, #2
 800585a:	f1ba 0f00 	cmp.w	sl, #0
 800585e:	d048      	beq.n	80058f2 <__gethex+0x3bc>
 8005860:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d015      	beq.n	8005894 <__gethex+0x35e>
 8005868:	2b03      	cmp	r3, #3
 800586a:	d017      	beq.n	800589c <__gethex+0x366>
 800586c:	2b01      	cmp	r3, #1
 800586e:	d109      	bne.n	8005884 <__gethex+0x34e>
 8005870:	f01a 0f02 	tst.w	sl, #2
 8005874:	d006      	beq.n	8005884 <__gethex+0x34e>
 8005876:	f8d9 3000 	ldr.w	r3, [r9]
 800587a:	ea4a 0a03 	orr.w	sl, sl, r3
 800587e:	f01a 0f01 	tst.w	sl, #1
 8005882:	d10e      	bne.n	80058a2 <__gethex+0x36c>
 8005884:	f047 0710 	orr.w	r7, r7, #16
 8005888:	e033      	b.n	80058f2 <__gethex+0x3bc>
 800588a:	f04f 0a01 	mov.w	sl, #1
 800588e:	e7d0      	b.n	8005832 <__gethex+0x2fc>
 8005890:	2701      	movs	r7, #1
 8005892:	e7e2      	b.n	800585a <__gethex+0x324>
 8005894:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005896:	f1c3 0301 	rsb	r3, r3, #1
 800589a:	9315      	str	r3, [sp, #84]	; 0x54
 800589c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d0f0      	beq.n	8005884 <__gethex+0x34e>
 80058a2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 80058a6:	f105 0314 	add.w	r3, r5, #20
 80058aa:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80058ae:	eb03 010a 	add.w	r1, r3, sl
 80058b2:	f04f 0c00 	mov.w	ip, #0
 80058b6:	4618      	mov	r0, r3
 80058b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058bc:	f1b2 3fff 	cmp.w	r2, #4294967295
 80058c0:	d01c      	beq.n	80058fc <__gethex+0x3c6>
 80058c2:	3201      	adds	r2, #1
 80058c4:	6002      	str	r2, [r0, #0]
 80058c6:	2f02      	cmp	r7, #2
 80058c8:	f105 0314 	add.w	r3, r5, #20
 80058cc:	d138      	bne.n	8005940 <__gethex+0x40a>
 80058ce:	f8d8 2000 	ldr.w	r2, [r8]
 80058d2:	3a01      	subs	r2, #1
 80058d4:	42b2      	cmp	r2, r6
 80058d6:	d10a      	bne.n	80058ee <__gethex+0x3b8>
 80058d8:	1171      	asrs	r1, r6, #5
 80058da:	2201      	movs	r2, #1
 80058dc:	f006 061f 	and.w	r6, r6, #31
 80058e0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058e4:	fa02 f606 	lsl.w	r6, r2, r6
 80058e8:	421e      	tst	r6, r3
 80058ea:	bf18      	it	ne
 80058ec:	4617      	movne	r7, r2
 80058ee:	f047 0720 	orr.w	r7, r7, #32
 80058f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058f4:	601d      	str	r5, [r3, #0]
 80058f6:	9b06      	ldr	r3, [sp, #24]
 80058f8:	601c      	str	r4, [r3, #0]
 80058fa:	e6a4      	b.n	8005646 <__gethex+0x110>
 80058fc:	4299      	cmp	r1, r3
 80058fe:	f843 cc04 	str.w	ip, [r3, #-4]
 8005902:	d8d8      	bhi.n	80058b6 <__gethex+0x380>
 8005904:	68ab      	ldr	r3, [r5, #8]
 8005906:	4599      	cmp	r9, r3
 8005908:	db12      	blt.n	8005930 <__gethex+0x3fa>
 800590a:	6869      	ldr	r1, [r5, #4]
 800590c:	9802      	ldr	r0, [sp, #8]
 800590e:	3101      	adds	r1, #1
 8005910:	f000 f916 	bl	8005b40 <_Balloc>
 8005914:	692a      	ldr	r2, [r5, #16]
 8005916:	3202      	adds	r2, #2
 8005918:	f105 010c 	add.w	r1, r5, #12
 800591c:	4683      	mov	fp, r0
 800591e:	0092      	lsls	r2, r2, #2
 8005920:	300c      	adds	r0, #12
 8005922:	f7fd fa4d 	bl	8002dc0 <memcpy>
 8005926:	4629      	mov	r1, r5
 8005928:	9802      	ldr	r0, [sp, #8]
 800592a:	f000 f93d 	bl	8005ba8 <_Bfree>
 800592e:	465d      	mov	r5, fp
 8005930:	692b      	ldr	r3, [r5, #16]
 8005932:	1c5a      	adds	r2, r3, #1
 8005934:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005938:	612a      	str	r2, [r5, #16]
 800593a:	2201      	movs	r2, #1
 800593c:	615a      	str	r2, [r3, #20]
 800593e:	e7c2      	b.n	80058c6 <__gethex+0x390>
 8005940:	692a      	ldr	r2, [r5, #16]
 8005942:	454a      	cmp	r2, r9
 8005944:	dd0b      	ble.n	800595e <__gethex+0x428>
 8005946:	2101      	movs	r1, #1
 8005948:	4628      	mov	r0, r5
 800594a:	f7ff fda5 	bl	8005498 <rshift>
 800594e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005952:	3401      	adds	r4, #1
 8005954:	42a3      	cmp	r3, r4
 8005956:	f6ff aed9 	blt.w	800570c <__gethex+0x1d6>
 800595a:	2701      	movs	r7, #1
 800595c:	e7c7      	b.n	80058ee <__gethex+0x3b8>
 800595e:	f016 061f 	ands.w	r6, r6, #31
 8005962:	d0fa      	beq.n	800595a <__gethex+0x424>
 8005964:	449a      	add	sl, r3
 8005966:	f1c6 0620 	rsb	r6, r6, #32
 800596a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800596e:	f000 f9ab 	bl	8005cc8 <__hi0bits>
 8005972:	42b0      	cmp	r0, r6
 8005974:	dbe7      	blt.n	8005946 <__gethex+0x410>
 8005976:	e7f0      	b.n	800595a <__gethex+0x424>

08005978 <L_shift>:
 8005978:	f1c2 0208 	rsb	r2, r2, #8
 800597c:	0092      	lsls	r2, r2, #2
 800597e:	b570      	push	{r4, r5, r6, lr}
 8005980:	f1c2 0620 	rsb	r6, r2, #32
 8005984:	6843      	ldr	r3, [r0, #4]
 8005986:	6804      	ldr	r4, [r0, #0]
 8005988:	fa03 f506 	lsl.w	r5, r3, r6
 800598c:	432c      	orrs	r4, r5
 800598e:	40d3      	lsrs	r3, r2
 8005990:	6004      	str	r4, [r0, #0]
 8005992:	f840 3f04 	str.w	r3, [r0, #4]!
 8005996:	4288      	cmp	r0, r1
 8005998:	d3f4      	bcc.n	8005984 <L_shift+0xc>
 800599a:	bd70      	pop	{r4, r5, r6, pc}

0800599c <__match>:
 800599c:	b530      	push	{r4, r5, lr}
 800599e:	6803      	ldr	r3, [r0, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059a6:	b914      	cbnz	r4, 80059ae <__match+0x12>
 80059a8:	6003      	str	r3, [r0, #0]
 80059aa:	2001      	movs	r0, #1
 80059ac:	bd30      	pop	{r4, r5, pc}
 80059ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059b2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80059b6:	2d19      	cmp	r5, #25
 80059b8:	bf98      	it	ls
 80059ba:	3220      	addls	r2, #32
 80059bc:	42a2      	cmp	r2, r4
 80059be:	d0f0      	beq.n	80059a2 <__match+0x6>
 80059c0:	2000      	movs	r0, #0
 80059c2:	e7f3      	b.n	80059ac <__match+0x10>

080059c4 <__hexnan>:
 80059c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059c8:	680b      	ldr	r3, [r1, #0]
 80059ca:	6801      	ldr	r1, [r0, #0]
 80059cc:	115f      	asrs	r7, r3, #5
 80059ce:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80059d2:	f013 031f 	ands.w	r3, r3, #31
 80059d6:	b087      	sub	sp, #28
 80059d8:	bf18      	it	ne
 80059da:	3704      	addne	r7, #4
 80059dc:	2500      	movs	r5, #0
 80059de:	1f3e      	subs	r6, r7, #4
 80059e0:	4682      	mov	sl, r0
 80059e2:	4690      	mov	r8, r2
 80059e4:	9301      	str	r3, [sp, #4]
 80059e6:	f847 5c04 	str.w	r5, [r7, #-4]
 80059ea:	46b1      	mov	r9, r6
 80059ec:	4634      	mov	r4, r6
 80059ee:	9502      	str	r5, [sp, #8]
 80059f0:	46ab      	mov	fp, r5
 80059f2:	784a      	ldrb	r2, [r1, #1]
 80059f4:	1c4b      	adds	r3, r1, #1
 80059f6:	9303      	str	r3, [sp, #12]
 80059f8:	b342      	cbz	r2, 8005a4c <__hexnan+0x88>
 80059fa:	4610      	mov	r0, r2
 80059fc:	9105      	str	r1, [sp, #20]
 80059fe:	9204      	str	r2, [sp, #16]
 8005a00:	f7ff fd84 	bl	800550c <__hexdig_fun>
 8005a04:	2800      	cmp	r0, #0
 8005a06:	d143      	bne.n	8005a90 <__hexnan+0xcc>
 8005a08:	9a04      	ldr	r2, [sp, #16]
 8005a0a:	9905      	ldr	r1, [sp, #20]
 8005a0c:	2a20      	cmp	r2, #32
 8005a0e:	d818      	bhi.n	8005a42 <__hexnan+0x7e>
 8005a10:	9b02      	ldr	r3, [sp, #8]
 8005a12:	459b      	cmp	fp, r3
 8005a14:	dd13      	ble.n	8005a3e <__hexnan+0x7a>
 8005a16:	454c      	cmp	r4, r9
 8005a18:	d206      	bcs.n	8005a28 <__hexnan+0x64>
 8005a1a:	2d07      	cmp	r5, #7
 8005a1c:	dc04      	bgt.n	8005a28 <__hexnan+0x64>
 8005a1e:	462a      	mov	r2, r5
 8005a20:	4649      	mov	r1, r9
 8005a22:	4620      	mov	r0, r4
 8005a24:	f7ff ffa8 	bl	8005978 <L_shift>
 8005a28:	4544      	cmp	r4, r8
 8005a2a:	d944      	bls.n	8005ab6 <__hexnan+0xf2>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f1a4 0904 	sub.w	r9, r4, #4
 8005a32:	f844 3c04 	str.w	r3, [r4, #-4]
 8005a36:	f8cd b008 	str.w	fp, [sp, #8]
 8005a3a:	464c      	mov	r4, r9
 8005a3c:	461d      	mov	r5, r3
 8005a3e:	9903      	ldr	r1, [sp, #12]
 8005a40:	e7d7      	b.n	80059f2 <__hexnan+0x2e>
 8005a42:	2a29      	cmp	r2, #41	; 0x29
 8005a44:	d14a      	bne.n	8005adc <__hexnan+0x118>
 8005a46:	3102      	adds	r1, #2
 8005a48:	f8ca 1000 	str.w	r1, [sl]
 8005a4c:	f1bb 0f00 	cmp.w	fp, #0
 8005a50:	d044      	beq.n	8005adc <__hexnan+0x118>
 8005a52:	454c      	cmp	r4, r9
 8005a54:	d206      	bcs.n	8005a64 <__hexnan+0xa0>
 8005a56:	2d07      	cmp	r5, #7
 8005a58:	dc04      	bgt.n	8005a64 <__hexnan+0xa0>
 8005a5a:	462a      	mov	r2, r5
 8005a5c:	4649      	mov	r1, r9
 8005a5e:	4620      	mov	r0, r4
 8005a60:	f7ff ff8a 	bl	8005978 <L_shift>
 8005a64:	4544      	cmp	r4, r8
 8005a66:	d928      	bls.n	8005aba <__hexnan+0xf6>
 8005a68:	4643      	mov	r3, r8
 8005a6a:	f854 2b04 	ldr.w	r2, [r4], #4
 8005a6e:	f843 2b04 	str.w	r2, [r3], #4
 8005a72:	42a6      	cmp	r6, r4
 8005a74:	d2f9      	bcs.n	8005a6a <__hexnan+0xa6>
 8005a76:	2200      	movs	r2, #0
 8005a78:	f843 2b04 	str.w	r2, [r3], #4
 8005a7c:	429e      	cmp	r6, r3
 8005a7e:	d2fb      	bcs.n	8005a78 <__hexnan+0xb4>
 8005a80:	6833      	ldr	r3, [r6, #0]
 8005a82:	b91b      	cbnz	r3, 8005a8c <__hexnan+0xc8>
 8005a84:	4546      	cmp	r6, r8
 8005a86:	d127      	bne.n	8005ad8 <__hexnan+0x114>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	6033      	str	r3, [r6, #0]
 8005a8c:	2005      	movs	r0, #5
 8005a8e:	e026      	b.n	8005ade <__hexnan+0x11a>
 8005a90:	3501      	adds	r5, #1
 8005a92:	2d08      	cmp	r5, #8
 8005a94:	f10b 0b01 	add.w	fp, fp, #1
 8005a98:	dd06      	ble.n	8005aa8 <__hexnan+0xe4>
 8005a9a:	4544      	cmp	r4, r8
 8005a9c:	d9cf      	bls.n	8005a3e <__hexnan+0x7a>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	f844 3c04 	str.w	r3, [r4, #-4]
 8005aa4:	2501      	movs	r5, #1
 8005aa6:	3c04      	subs	r4, #4
 8005aa8:	6822      	ldr	r2, [r4, #0]
 8005aaa:	f000 000f 	and.w	r0, r0, #15
 8005aae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005ab2:	6020      	str	r0, [r4, #0]
 8005ab4:	e7c3      	b.n	8005a3e <__hexnan+0x7a>
 8005ab6:	2508      	movs	r5, #8
 8005ab8:	e7c1      	b.n	8005a3e <__hexnan+0x7a>
 8005aba:	9b01      	ldr	r3, [sp, #4]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d0df      	beq.n	8005a80 <__hexnan+0xbc>
 8005ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ac4:	f1c3 0320 	rsb	r3, r3, #32
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8005acc:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005ad0:	401a      	ands	r2, r3
 8005ad2:	f847 2c04 	str.w	r2, [r7, #-4]
 8005ad6:	e7d3      	b.n	8005a80 <__hexnan+0xbc>
 8005ad8:	3e04      	subs	r6, #4
 8005ada:	e7d1      	b.n	8005a80 <__hexnan+0xbc>
 8005adc:	2004      	movs	r0, #4
 8005ade:	b007      	add	sp, #28
 8005ae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005ae4 <__locale_ctype_ptr_l>:
 8005ae4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8005ae8:	4770      	bx	lr

08005aea <__localeconv_l>:
 8005aea:	30f0      	adds	r0, #240	; 0xf0
 8005aec:	4770      	bx	lr
	...

08005af0 <_localeconv_r>:
 8005af0:	4b04      	ldr	r3, [pc, #16]	; (8005b04 <_localeconv_r+0x14>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6a18      	ldr	r0, [r3, #32]
 8005af6:	4b04      	ldr	r3, [pc, #16]	; (8005b08 <_localeconv_r+0x18>)
 8005af8:	2800      	cmp	r0, #0
 8005afa:	bf08      	it	eq
 8005afc:	4618      	moveq	r0, r3
 8005afe:	30f0      	adds	r0, #240	; 0xf0
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	2000000c 	.word	0x2000000c
 8005b08:	20000070 	.word	0x20000070

08005b0c <malloc>:
 8005b0c:	4b02      	ldr	r3, [pc, #8]	; (8005b18 <malloc+0xc>)
 8005b0e:	4601      	mov	r1, r0
 8005b10:	6818      	ldr	r0, [r3, #0]
 8005b12:	f000 bc71 	b.w	80063f8 <_malloc_r>
 8005b16:	bf00      	nop
 8005b18:	2000000c 	.word	0x2000000c

08005b1c <__ascii_mbtowc>:
 8005b1c:	b082      	sub	sp, #8
 8005b1e:	b901      	cbnz	r1, 8005b22 <__ascii_mbtowc+0x6>
 8005b20:	a901      	add	r1, sp, #4
 8005b22:	b142      	cbz	r2, 8005b36 <__ascii_mbtowc+0x1a>
 8005b24:	b14b      	cbz	r3, 8005b3a <__ascii_mbtowc+0x1e>
 8005b26:	7813      	ldrb	r3, [r2, #0]
 8005b28:	600b      	str	r3, [r1, #0]
 8005b2a:	7812      	ldrb	r2, [r2, #0]
 8005b2c:	1c10      	adds	r0, r2, #0
 8005b2e:	bf18      	it	ne
 8005b30:	2001      	movne	r0, #1
 8005b32:	b002      	add	sp, #8
 8005b34:	4770      	bx	lr
 8005b36:	4610      	mov	r0, r2
 8005b38:	e7fb      	b.n	8005b32 <__ascii_mbtowc+0x16>
 8005b3a:	f06f 0001 	mvn.w	r0, #1
 8005b3e:	e7f8      	b.n	8005b32 <__ascii_mbtowc+0x16>

08005b40 <_Balloc>:
 8005b40:	b570      	push	{r4, r5, r6, lr}
 8005b42:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b44:	4604      	mov	r4, r0
 8005b46:	460e      	mov	r6, r1
 8005b48:	b93d      	cbnz	r5, 8005b5a <_Balloc+0x1a>
 8005b4a:	2010      	movs	r0, #16
 8005b4c:	f7ff ffde 	bl	8005b0c <malloc>
 8005b50:	6260      	str	r0, [r4, #36]	; 0x24
 8005b52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b56:	6005      	str	r5, [r0, #0]
 8005b58:	60c5      	str	r5, [r0, #12]
 8005b5a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005b5c:	68eb      	ldr	r3, [r5, #12]
 8005b5e:	b183      	cbz	r3, 8005b82 <_Balloc+0x42>
 8005b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005b68:	b9b8      	cbnz	r0, 8005b9a <_Balloc+0x5a>
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	fa01 f506 	lsl.w	r5, r1, r6
 8005b70:	1d6a      	adds	r2, r5, #5
 8005b72:	0092      	lsls	r2, r2, #2
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fbe2 	bl	800633e <_calloc_r>
 8005b7a:	b160      	cbz	r0, 8005b96 <_Balloc+0x56>
 8005b7c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005b80:	e00e      	b.n	8005ba0 <_Balloc+0x60>
 8005b82:	2221      	movs	r2, #33	; 0x21
 8005b84:	2104      	movs	r1, #4
 8005b86:	4620      	mov	r0, r4
 8005b88:	f000 fbd9 	bl	800633e <_calloc_r>
 8005b8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b8e:	60e8      	str	r0, [r5, #12]
 8005b90:	68db      	ldr	r3, [r3, #12]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e4      	bne.n	8005b60 <_Balloc+0x20>
 8005b96:	2000      	movs	r0, #0
 8005b98:	bd70      	pop	{r4, r5, r6, pc}
 8005b9a:	6802      	ldr	r2, [r0, #0]
 8005b9c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005ba6:	e7f7      	b.n	8005b98 <_Balloc+0x58>

08005ba8 <_Bfree>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005bac:	4606      	mov	r6, r0
 8005bae:	460d      	mov	r5, r1
 8005bb0:	b93c      	cbnz	r4, 8005bc2 <_Bfree+0x1a>
 8005bb2:	2010      	movs	r0, #16
 8005bb4:	f7ff ffaa 	bl	8005b0c <malloc>
 8005bb8:	6270      	str	r0, [r6, #36]	; 0x24
 8005bba:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005bbe:	6004      	str	r4, [r0, #0]
 8005bc0:	60c4      	str	r4, [r0, #12]
 8005bc2:	b13d      	cbz	r5, 8005bd4 <_Bfree+0x2c>
 8005bc4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005bc6:	686a      	ldr	r2, [r5, #4]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005bce:	6029      	str	r1, [r5, #0]
 8005bd0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005bd4:	bd70      	pop	{r4, r5, r6, pc}

08005bd6 <__multadd>:
 8005bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bda:	690d      	ldr	r5, [r1, #16]
 8005bdc:	461f      	mov	r7, r3
 8005bde:	4606      	mov	r6, r0
 8005be0:	460c      	mov	r4, r1
 8005be2:	f101 0c14 	add.w	ip, r1, #20
 8005be6:	2300      	movs	r3, #0
 8005be8:	f8dc 0000 	ldr.w	r0, [ip]
 8005bec:	b281      	uxth	r1, r0
 8005bee:	fb02 7101 	mla	r1, r2, r1, r7
 8005bf2:	0c0f      	lsrs	r7, r1, #16
 8005bf4:	0c00      	lsrs	r0, r0, #16
 8005bf6:	fb02 7000 	mla	r0, r2, r0, r7
 8005bfa:	b289      	uxth	r1, r1
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005c02:	429d      	cmp	r5, r3
 8005c04:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005c08:	f84c 1b04 	str.w	r1, [ip], #4
 8005c0c:	dcec      	bgt.n	8005be8 <__multadd+0x12>
 8005c0e:	b1d7      	cbz	r7, 8005c46 <__multadd+0x70>
 8005c10:	68a3      	ldr	r3, [r4, #8]
 8005c12:	42ab      	cmp	r3, r5
 8005c14:	dc12      	bgt.n	8005c3c <__multadd+0x66>
 8005c16:	6861      	ldr	r1, [r4, #4]
 8005c18:	4630      	mov	r0, r6
 8005c1a:	3101      	adds	r1, #1
 8005c1c:	f7ff ff90 	bl	8005b40 <_Balloc>
 8005c20:	6922      	ldr	r2, [r4, #16]
 8005c22:	3202      	adds	r2, #2
 8005c24:	f104 010c 	add.w	r1, r4, #12
 8005c28:	4680      	mov	r8, r0
 8005c2a:	0092      	lsls	r2, r2, #2
 8005c2c:	300c      	adds	r0, #12
 8005c2e:	f7fd f8c7 	bl	8002dc0 <memcpy>
 8005c32:	4621      	mov	r1, r4
 8005c34:	4630      	mov	r0, r6
 8005c36:	f7ff ffb7 	bl	8005ba8 <_Bfree>
 8005c3a:	4644      	mov	r4, r8
 8005c3c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005c40:	3501      	adds	r5, #1
 8005c42:	615f      	str	r7, [r3, #20]
 8005c44:	6125      	str	r5, [r4, #16]
 8005c46:	4620      	mov	r0, r4
 8005c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005c4c <__s2b>:
 8005c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c50:	460c      	mov	r4, r1
 8005c52:	4615      	mov	r5, r2
 8005c54:	461f      	mov	r7, r3
 8005c56:	2209      	movs	r2, #9
 8005c58:	3308      	adds	r3, #8
 8005c5a:	4606      	mov	r6, r0
 8005c5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005c60:	2100      	movs	r1, #0
 8005c62:	2201      	movs	r2, #1
 8005c64:	429a      	cmp	r2, r3
 8005c66:	db20      	blt.n	8005caa <__s2b+0x5e>
 8005c68:	4630      	mov	r0, r6
 8005c6a:	f7ff ff69 	bl	8005b40 <_Balloc>
 8005c6e:	9b08      	ldr	r3, [sp, #32]
 8005c70:	6143      	str	r3, [r0, #20]
 8005c72:	2d09      	cmp	r5, #9
 8005c74:	f04f 0301 	mov.w	r3, #1
 8005c78:	6103      	str	r3, [r0, #16]
 8005c7a:	dd19      	ble.n	8005cb0 <__s2b+0x64>
 8005c7c:	f104 0809 	add.w	r8, r4, #9
 8005c80:	46c1      	mov	r9, r8
 8005c82:	442c      	add	r4, r5
 8005c84:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005c88:	4601      	mov	r1, r0
 8005c8a:	3b30      	subs	r3, #48	; 0x30
 8005c8c:	220a      	movs	r2, #10
 8005c8e:	4630      	mov	r0, r6
 8005c90:	f7ff ffa1 	bl	8005bd6 <__multadd>
 8005c94:	45a1      	cmp	r9, r4
 8005c96:	d1f5      	bne.n	8005c84 <__s2b+0x38>
 8005c98:	eb08 0405 	add.w	r4, r8, r5
 8005c9c:	3c08      	subs	r4, #8
 8005c9e:	1b2d      	subs	r5, r5, r4
 8005ca0:	1963      	adds	r3, r4, r5
 8005ca2:	42bb      	cmp	r3, r7
 8005ca4:	db07      	blt.n	8005cb6 <__s2b+0x6a>
 8005ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005caa:	0052      	lsls	r2, r2, #1
 8005cac:	3101      	adds	r1, #1
 8005cae:	e7d9      	b.n	8005c64 <__s2b+0x18>
 8005cb0:	340a      	adds	r4, #10
 8005cb2:	2509      	movs	r5, #9
 8005cb4:	e7f3      	b.n	8005c9e <__s2b+0x52>
 8005cb6:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005cba:	4601      	mov	r1, r0
 8005cbc:	3b30      	subs	r3, #48	; 0x30
 8005cbe:	220a      	movs	r2, #10
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff ff88 	bl	8005bd6 <__multadd>
 8005cc6:	e7eb      	b.n	8005ca0 <__s2b+0x54>

08005cc8 <__hi0bits>:
 8005cc8:	0c02      	lsrs	r2, r0, #16
 8005cca:	0412      	lsls	r2, r2, #16
 8005ccc:	4603      	mov	r3, r0
 8005cce:	b9b2      	cbnz	r2, 8005cfe <__hi0bits+0x36>
 8005cd0:	0403      	lsls	r3, r0, #16
 8005cd2:	2010      	movs	r0, #16
 8005cd4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005cd8:	bf04      	itt	eq
 8005cda:	021b      	lsleq	r3, r3, #8
 8005cdc:	3008      	addeq	r0, #8
 8005cde:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005ce2:	bf04      	itt	eq
 8005ce4:	011b      	lsleq	r3, r3, #4
 8005ce6:	3004      	addeq	r0, #4
 8005ce8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005cec:	bf04      	itt	eq
 8005cee:	009b      	lsleq	r3, r3, #2
 8005cf0:	3002      	addeq	r0, #2
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	db06      	blt.n	8005d04 <__hi0bits+0x3c>
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	d503      	bpl.n	8005d02 <__hi0bits+0x3a>
 8005cfa:	3001      	adds	r0, #1
 8005cfc:	4770      	bx	lr
 8005cfe:	2000      	movs	r0, #0
 8005d00:	e7e8      	b.n	8005cd4 <__hi0bits+0xc>
 8005d02:	2020      	movs	r0, #32
 8005d04:	4770      	bx	lr

08005d06 <__lo0bits>:
 8005d06:	6803      	ldr	r3, [r0, #0]
 8005d08:	f013 0207 	ands.w	r2, r3, #7
 8005d0c:	4601      	mov	r1, r0
 8005d0e:	d00b      	beq.n	8005d28 <__lo0bits+0x22>
 8005d10:	07da      	lsls	r2, r3, #31
 8005d12:	d423      	bmi.n	8005d5c <__lo0bits+0x56>
 8005d14:	0798      	lsls	r0, r3, #30
 8005d16:	bf49      	itett	mi
 8005d18:	085b      	lsrmi	r3, r3, #1
 8005d1a:	089b      	lsrpl	r3, r3, #2
 8005d1c:	2001      	movmi	r0, #1
 8005d1e:	600b      	strmi	r3, [r1, #0]
 8005d20:	bf5c      	itt	pl
 8005d22:	600b      	strpl	r3, [r1, #0]
 8005d24:	2002      	movpl	r0, #2
 8005d26:	4770      	bx	lr
 8005d28:	b298      	uxth	r0, r3
 8005d2a:	b9a8      	cbnz	r0, 8005d58 <__lo0bits+0x52>
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	2010      	movs	r0, #16
 8005d30:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005d34:	bf04      	itt	eq
 8005d36:	0a1b      	lsreq	r3, r3, #8
 8005d38:	3008      	addeq	r0, #8
 8005d3a:	071a      	lsls	r2, r3, #28
 8005d3c:	bf04      	itt	eq
 8005d3e:	091b      	lsreq	r3, r3, #4
 8005d40:	3004      	addeq	r0, #4
 8005d42:	079a      	lsls	r2, r3, #30
 8005d44:	bf04      	itt	eq
 8005d46:	089b      	lsreq	r3, r3, #2
 8005d48:	3002      	addeq	r0, #2
 8005d4a:	07da      	lsls	r2, r3, #31
 8005d4c:	d402      	bmi.n	8005d54 <__lo0bits+0x4e>
 8005d4e:	085b      	lsrs	r3, r3, #1
 8005d50:	d006      	beq.n	8005d60 <__lo0bits+0x5a>
 8005d52:	3001      	adds	r0, #1
 8005d54:	600b      	str	r3, [r1, #0]
 8005d56:	4770      	bx	lr
 8005d58:	4610      	mov	r0, r2
 8005d5a:	e7e9      	b.n	8005d30 <__lo0bits+0x2a>
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	4770      	bx	lr
 8005d60:	2020      	movs	r0, #32
 8005d62:	4770      	bx	lr

08005d64 <__i2b>:
 8005d64:	b510      	push	{r4, lr}
 8005d66:	460c      	mov	r4, r1
 8005d68:	2101      	movs	r1, #1
 8005d6a:	f7ff fee9 	bl	8005b40 <_Balloc>
 8005d6e:	2201      	movs	r2, #1
 8005d70:	6144      	str	r4, [r0, #20]
 8005d72:	6102      	str	r2, [r0, #16]
 8005d74:	bd10      	pop	{r4, pc}

08005d76 <__multiply>:
 8005d76:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d7a:	4614      	mov	r4, r2
 8005d7c:	690a      	ldr	r2, [r1, #16]
 8005d7e:	6923      	ldr	r3, [r4, #16]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	bfb8      	it	lt
 8005d84:	460b      	movlt	r3, r1
 8005d86:	4688      	mov	r8, r1
 8005d88:	bfbc      	itt	lt
 8005d8a:	46a0      	movlt	r8, r4
 8005d8c:	461c      	movlt	r4, r3
 8005d8e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005d92:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005d96:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005d9a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005d9e:	eb07 0609 	add.w	r6, r7, r9
 8005da2:	42b3      	cmp	r3, r6
 8005da4:	bfb8      	it	lt
 8005da6:	3101      	addlt	r1, #1
 8005da8:	f7ff feca 	bl	8005b40 <_Balloc>
 8005dac:	f100 0514 	add.w	r5, r0, #20
 8005db0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005db4:	462b      	mov	r3, r5
 8005db6:	2200      	movs	r2, #0
 8005db8:	4573      	cmp	r3, lr
 8005dba:	d316      	bcc.n	8005dea <__multiply+0x74>
 8005dbc:	f104 0214 	add.w	r2, r4, #20
 8005dc0:	f108 0114 	add.w	r1, r8, #20
 8005dc4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005dc8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	9b00      	ldr	r3, [sp, #0]
 8005dd0:	9201      	str	r2, [sp, #4]
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d80c      	bhi.n	8005df0 <__multiply+0x7a>
 8005dd6:	2e00      	cmp	r6, #0
 8005dd8:	dd03      	ble.n	8005de2 <__multiply+0x6c>
 8005dda:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d05d      	beq.n	8005e9e <__multiply+0x128>
 8005de2:	6106      	str	r6, [r0, #16]
 8005de4:	b003      	add	sp, #12
 8005de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dea:	f843 2b04 	str.w	r2, [r3], #4
 8005dee:	e7e3      	b.n	8005db8 <__multiply+0x42>
 8005df0:	f8b2 b000 	ldrh.w	fp, [r2]
 8005df4:	f1bb 0f00 	cmp.w	fp, #0
 8005df8:	d023      	beq.n	8005e42 <__multiply+0xcc>
 8005dfa:	4689      	mov	r9, r1
 8005dfc:	46ac      	mov	ip, r5
 8005dfe:	f04f 0800 	mov.w	r8, #0
 8005e02:	f859 4b04 	ldr.w	r4, [r9], #4
 8005e06:	f8dc a000 	ldr.w	sl, [ip]
 8005e0a:	b2a3      	uxth	r3, r4
 8005e0c:	fa1f fa8a 	uxth.w	sl, sl
 8005e10:	fb0b a303 	mla	r3, fp, r3, sl
 8005e14:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005e18:	f8dc 4000 	ldr.w	r4, [ip]
 8005e1c:	4443      	add	r3, r8
 8005e1e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005e22:	fb0b 840a 	mla	r4, fp, sl, r8
 8005e26:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005e2a:	46e2      	mov	sl, ip
 8005e2c:	b29b      	uxth	r3, r3
 8005e2e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e32:	454f      	cmp	r7, r9
 8005e34:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005e38:	f84a 3b04 	str.w	r3, [sl], #4
 8005e3c:	d82b      	bhi.n	8005e96 <__multiply+0x120>
 8005e3e:	f8cc 8004 	str.w	r8, [ip, #4]
 8005e42:	9b01      	ldr	r3, [sp, #4]
 8005e44:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005e48:	3204      	adds	r2, #4
 8005e4a:	f1ba 0f00 	cmp.w	sl, #0
 8005e4e:	d020      	beq.n	8005e92 <__multiply+0x11c>
 8005e50:	682b      	ldr	r3, [r5, #0]
 8005e52:	4689      	mov	r9, r1
 8005e54:	46a8      	mov	r8, r5
 8005e56:	f04f 0b00 	mov.w	fp, #0
 8005e5a:	f8b9 c000 	ldrh.w	ip, [r9]
 8005e5e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005e62:	fb0a 440c 	mla	r4, sl, ip, r4
 8005e66:	445c      	add	r4, fp
 8005e68:	46c4      	mov	ip, r8
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005e70:	f84c 3b04 	str.w	r3, [ip], #4
 8005e74:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e78:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005e7c:	0c1b      	lsrs	r3, r3, #16
 8005e7e:	fb0a b303 	mla	r3, sl, r3, fp
 8005e82:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005e86:	454f      	cmp	r7, r9
 8005e88:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005e8c:	d805      	bhi.n	8005e9a <__multiply+0x124>
 8005e8e:	f8c8 3004 	str.w	r3, [r8, #4]
 8005e92:	3504      	adds	r5, #4
 8005e94:	e79b      	b.n	8005dce <__multiply+0x58>
 8005e96:	46d4      	mov	ip, sl
 8005e98:	e7b3      	b.n	8005e02 <__multiply+0x8c>
 8005e9a:	46e0      	mov	r8, ip
 8005e9c:	e7dd      	b.n	8005e5a <__multiply+0xe4>
 8005e9e:	3e01      	subs	r6, #1
 8005ea0:	e799      	b.n	8005dd6 <__multiply+0x60>
	...

08005ea4 <__pow5mult>:
 8005ea4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ea8:	4615      	mov	r5, r2
 8005eaa:	f012 0203 	ands.w	r2, r2, #3
 8005eae:	4606      	mov	r6, r0
 8005eb0:	460f      	mov	r7, r1
 8005eb2:	d007      	beq.n	8005ec4 <__pow5mult+0x20>
 8005eb4:	3a01      	subs	r2, #1
 8005eb6:	4c21      	ldr	r4, [pc, #132]	; (8005f3c <__pow5mult+0x98>)
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ebe:	f7ff fe8a 	bl	8005bd6 <__multadd>
 8005ec2:	4607      	mov	r7, r0
 8005ec4:	10ad      	asrs	r5, r5, #2
 8005ec6:	d035      	beq.n	8005f34 <__pow5mult+0x90>
 8005ec8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005eca:	b93c      	cbnz	r4, 8005edc <__pow5mult+0x38>
 8005ecc:	2010      	movs	r0, #16
 8005ece:	f7ff fe1d 	bl	8005b0c <malloc>
 8005ed2:	6270      	str	r0, [r6, #36]	; 0x24
 8005ed4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ed8:	6004      	str	r4, [r0, #0]
 8005eda:	60c4      	str	r4, [r0, #12]
 8005edc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005ee0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ee4:	b94c      	cbnz	r4, 8005efa <__pow5mult+0x56>
 8005ee6:	f240 2171 	movw	r1, #625	; 0x271
 8005eea:	4630      	mov	r0, r6
 8005eec:	f7ff ff3a 	bl	8005d64 <__i2b>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c8 0008 	str.w	r0, [r8, #8]
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	6003      	str	r3, [r0, #0]
 8005efa:	f04f 0800 	mov.w	r8, #0
 8005efe:	07eb      	lsls	r3, r5, #31
 8005f00:	d50a      	bpl.n	8005f18 <__pow5mult+0x74>
 8005f02:	4639      	mov	r1, r7
 8005f04:	4622      	mov	r2, r4
 8005f06:	4630      	mov	r0, r6
 8005f08:	f7ff ff35 	bl	8005d76 <__multiply>
 8005f0c:	4639      	mov	r1, r7
 8005f0e:	4681      	mov	r9, r0
 8005f10:	4630      	mov	r0, r6
 8005f12:	f7ff fe49 	bl	8005ba8 <_Bfree>
 8005f16:	464f      	mov	r7, r9
 8005f18:	106d      	asrs	r5, r5, #1
 8005f1a:	d00b      	beq.n	8005f34 <__pow5mult+0x90>
 8005f1c:	6820      	ldr	r0, [r4, #0]
 8005f1e:	b938      	cbnz	r0, 8005f30 <__pow5mult+0x8c>
 8005f20:	4622      	mov	r2, r4
 8005f22:	4621      	mov	r1, r4
 8005f24:	4630      	mov	r0, r6
 8005f26:	f7ff ff26 	bl	8005d76 <__multiply>
 8005f2a:	6020      	str	r0, [r4, #0]
 8005f2c:	f8c0 8000 	str.w	r8, [r0]
 8005f30:	4604      	mov	r4, r0
 8005f32:	e7e4      	b.n	8005efe <__pow5mult+0x5a>
 8005f34:	4638      	mov	r0, r7
 8005f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f3a:	bf00      	nop
 8005f3c:	08006c10 	.word	0x08006c10

08005f40 <__lshift>:
 8005f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f44:	460c      	mov	r4, r1
 8005f46:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005f4a:	6923      	ldr	r3, [r4, #16]
 8005f4c:	6849      	ldr	r1, [r1, #4]
 8005f4e:	eb0a 0903 	add.w	r9, sl, r3
 8005f52:	68a3      	ldr	r3, [r4, #8]
 8005f54:	4607      	mov	r7, r0
 8005f56:	4616      	mov	r6, r2
 8005f58:	f109 0501 	add.w	r5, r9, #1
 8005f5c:	42ab      	cmp	r3, r5
 8005f5e:	db32      	blt.n	8005fc6 <__lshift+0x86>
 8005f60:	4638      	mov	r0, r7
 8005f62:	f7ff fded 	bl	8005b40 <_Balloc>
 8005f66:	2300      	movs	r3, #0
 8005f68:	4680      	mov	r8, r0
 8005f6a:	f100 0114 	add.w	r1, r0, #20
 8005f6e:	461a      	mov	r2, r3
 8005f70:	4553      	cmp	r3, sl
 8005f72:	db2b      	blt.n	8005fcc <__lshift+0x8c>
 8005f74:	6920      	ldr	r0, [r4, #16]
 8005f76:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f7a:	f104 0314 	add.w	r3, r4, #20
 8005f7e:	f016 021f 	ands.w	r2, r6, #31
 8005f82:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f86:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f8a:	d025      	beq.n	8005fd8 <__lshift+0x98>
 8005f8c:	f1c2 0e20 	rsb	lr, r2, #32
 8005f90:	2000      	movs	r0, #0
 8005f92:	681e      	ldr	r6, [r3, #0]
 8005f94:	468a      	mov	sl, r1
 8005f96:	4096      	lsls	r6, r2
 8005f98:	4330      	orrs	r0, r6
 8005f9a:	f84a 0b04 	str.w	r0, [sl], #4
 8005f9e:	f853 0b04 	ldr.w	r0, [r3], #4
 8005fa2:	459c      	cmp	ip, r3
 8005fa4:	fa20 f00e 	lsr.w	r0, r0, lr
 8005fa8:	d814      	bhi.n	8005fd4 <__lshift+0x94>
 8005faa:	6048      	str	r0, [r1, #4]
 8005fac:	b108      	cbz	r0, 8005fb2 <__lshift+0x72>
 8005fae:	f109 0502 	add.w	r5, r9, #2
 8005fb2:	3d01      	subs	r5, #1
 8005fb4:	4638      	mov	r0, r7
 8005fb6:	f8c8 5010 	str.w	r5, [r8, #16]
 8005fba:	4621      	mov	r1, r4
 8005fbc:	f7ff fdf4 	bl	8005ba8 <_Bfree>
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fc6:	3101      	adds	r1, #1
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	e7c7      	b.n	8005f5c <__lshift+0x1c>
 8005fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	e7cd      	b.n	8005f70 <__lshift+0x30>
 8005fd4:	4651      	mov	r1, sl
 8005fd6:	e7dc      	b.n	8005f92 <__lshift+0x52>
 8005fd8:	3904      	subs	r1, #4
 8005fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fde:	f841 2f04 	str.w	r2, [r1, #4]!
 8005fe2:	459c      	cmp	ip, r3
 8005fe4:	d8f9      	bhi.n	8005fda <__lshift+0x9a>
 8005fe6:	e7e4      	b.n	8005fb2 <__lshift+0x72>

08005fe8 <__mcmp>:
 8005fe8:	6903      	ldr	r3, [r0, #16]
 8005fea:	690a      	ldr	r2, [r1, #16]
 8005fec:	1a9b      	subs	r3, r3, r2
 8005fee:	b530      	push	{r4, r5, lr}
 8005ff0:	d10c      	bne.n	800600c <__mcmp+0x24>
 8005ff2:	0092      	lsls	r2, r2, #2
 8005ff4:	3014      	adds	r0, #20
 8005ff6:	3114      	adds	r1, #20
 8005ff8:	1884      	adds	r4, r0, r2
 8005ffa:	4411      	add	r1, r2
 8005ffc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006000:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006004:	4295      	cmp	r5, r2
 8006006:	d003      	beq.n	8006010 <__mcmp+0x28>
 8006008:	d305      	bcc.n	8006016 <__mcmp+0x2e>
 800600a:	2301      	movs	r3, #1
 800600c:	4618      	mov	r0, r3
 800600e:	bd30      	pop	{r4, r5, pc}
 8006010:	42a0      	cmp	r0, r4
 8006012:	d3f3      	bcc.n	8005ffc <__mcmp+0x14>
 8006014:	e7fa      	b.n	800600c <__mcmp+0x24>
 8006016:	f04f 33ff 	mov.w	r3, #4294967295
 800601a:	e7f7      	b.n	800600c <__mcmp+0x24>

0800601c <__mdiff>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	460d      	mov	r5, r1
 8006022:	4607      	mov	r7, r0
 8006024:	4611      	mov	r1, r2
 8006026:	4628      	mov	r0, r5
 8006028:	4614      	mov	r4, r2
 800602a:	f7ff ffdd 	bl	8005fe8 <__mcmp>
 800602e:	1e06      	subs	r6, r0, #0
 8006030:	d108      	bne.n	8006044 <__mdiff+0x28>
 8006032:	4631      	mov	r1, r6
 8006034:	4638      	mov	r0, r7
 8006036:	f7ff fd83 	bl	8005b40 <_Balloc>
 800603a:	2301      	movs	r3, #1
 800603c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006044:	bfa4      	itt	ge
 8006046:	4623      	movge	r3, r4
 8006048:	462c      	movge	r4, r5
 800604a:	4638      	mov	r0, r7
 800604c:	6861      	ldr	r1, [r4, #4]
 800604e:	bfa6      	itte	ge
 8006050:	461d      	movge	r5, r3
 8006052:	2600      	movge	r6, #0
 8006054:	2601      	movlt	r6, #1
 8006056:	f7ff fd73 	bl	8005b40 <_Balloc>
 800605a:	692b      	ldr	r3, [r5, #16]
 800605c:	60c6      	str	r6, [r0, #12]
 800605e:	6926      	ldr	r6, [r4, #16]
 8006060:	f105 0914 	add.w	r9, r5, #20
 8006064:	f104 0214 	add.w	r2, r4, #20
 8006068:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800606c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006070:	f100 0514 	add.w	r5, r0, #20
 8006074:	f04f 0e00 	mov.w	lr, #0
 8006078:	f852 ab04 	ldr.w	sl, [r2], #4
 800607c:	f859 4b04 	ldr.w	r4, [r9], #4
 8006080:	fa1e f18a 	uxtah	r1, lr, sl
 8006084:	b2a3      	uxth	r3, r4
 8006086:	1ac9      	subs	r1, r1, r3
 8006088:	0c23      	lsrs	r3, r4, #16
 800608a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800608e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006092:	b289      	uxth	r1, r1
 8006094:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006098:	45c8      	cmp	r8, r9
 800609a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800609e:	4694      	mov	ip, r2
 80060a0:	f845 3b04 	str.w	r3, [r5], #4
 80060a4:	d8e8      	bhi.n	8006078 <__mdiff+0x5c>
 80060a6:	45bc      	cmp	ip, r7
 80060a8:	d304      	bcc.n	80060b4 <__mdiff+0x98>
 80060aa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80060ae:	b183      	cbz	r3, 80060d2 <__mdiff+0xb6>
 80060b0:	6106      	str	r6, [r0, #16]
 80060b2:	e7c5      	b.n	8006040 <__mdiff+0x24>
 80060b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 80060b8:	fa1e f381 	uxtah	r3, lr, r1
 80060bc:	141a      	asrs	r2, r3, #16
 80060be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80060c2:	b29b      	uxth	r3, r3
 80060c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060c8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80060cc:	f845 3b04 	str.w	r3, [r5], #4
 80060d0:	e7e9      	b.n	80060a6 <__mdiff+0x8a>
 80060d2:	3e01      	subs	r6, #1
 80060d4:	e7e9      	b.n	80060aa <__mdiff+0x8e>
	...

080060d8 <__ulp>:
 80060d8:	4b12      	ldr	r3, [pc, #72]	; (8006124 <__ulp+0x4c>)
 80060da:	ee10 2a90 	vmov	r2, s1
 80060de:	401a      	ands	r2, r3
 80060e0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	dd04      	ble.n	80060f2 <__ulp+0x1a>
 80060e8:	2000      	movs	r0, #0
 80060ea:	4619      	mov	r1, r3
 80060ec:	ec41 0b10 	vmov	d0, r0, r1
 80060f0:	4770      	bx	lr
 80060f2:	425b      	negs	r3, r3
 80060f4:	151b      	asrs	r3, r3, #20
 80060f6:	2b13      	cmp	r3, #19
 80060f8:	f04f 0000 	mov.w	r0, #0
 80060fc:	f04f 0100 	mov.w	r1, #0
 8006100:	dc04      	bgt.n	800610c <__ulp+0x34>
 8006102:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006106:	fa42 f103 	asr.w	r1, r2, r3
 800610a:	e7ef      	b.n	80060ec <__ulp+0x14>
 800610c:	3b14      	subs	r3, #20
 800610e:	2b1e      	cmp	r3, #30
 8006110:	f04f 0201 	mov.w	r2, #1
 8006114:	bfda      	itte	le
 8006116:	f1c3 031f 	rsble	r3, r3, #31
 800611a:	fa02 f303 	lslle.w	r3, r2, r3
 800611e:	4613      	movgt	r3, r2
 8006120:	4618      	mov	r0, r3
 8006122:	e7e3      	b.n	80060ec <__ulp+0x14>
 8006124:	7ff00000 	.word	0x7ff00000

08006128 <__b2d>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	6905      	ldr	r5, [r0, #16]
 800612c:	f100 0714 	add.w	r7, r0, #20
 8006130:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8006134:	1f2e      	subs	r6, r5, #4
 8006136:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800613a:	4620      	mov	r0, r4
 800613c:	f7ff fdc4 	bl	8005cc8 <__hi0bits>
 8006140:	f1c0 0320 	rsb	r3, r0, #32
 8006144:	280a      	cmp	r0, #10
 8006146:	600b      	str	r3, [r1, #0]
 8006148:	f8df c074 	ldr.w	ip, [pc, #116]	; 80061c0 <__b2d+0x98>
 800614c:	dc14      	bgt.n	8006178 <__b2d+0x50>
 800614e:	f1c0 0e0b 	rsb	lr, r0, #11
 8006152:	fa24 f10e 	lsr.w	r1, r4, lr
 8006156:	42b7      	cmp	r7, r6
 8006158:	ea41 030c 	orr.w	r3, r1, ip
 800615c:	bf34      	ite	cc
 800615e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006162:	2100      	movcs	r1, #0
 8006164:	3015      	adds	r0, #21
 8006166:	fa04 f000 	lsl.w	r0, r4, r0
 800616a:	fa21 f10e 	lsr.w	r1, r1, lr
 800616e:	ea40 0201 	orr.w	r2, r0, r1
 8006172:	ec43 2b10 	vmov	d0, r2, r3
 8006176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006178:	42b7      	cmp	r7, r6
 800617a:	bf3a      	itte	cc
 800617c:	f1a5 0608 	subcc.w	r6, r5, #8
 8006180:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8006184:	2100      	movcs	r1, #0
 8006186:	380b      	subs	r0, #11
 8006188:	d015      	beq.n	80061b6 <__b2d+0x8e>
 800618a:	4084      	lsls	r4, r0
 800618c:	f1c0 0520 	rsb	r5, r0, #32
 8006190:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8006194:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006198:	42be      	cmp	r6, r7
 800619a:	fa21 fc05 	lsr.w	ip, r1, r5
 800619e:	ea44 030c 	orr.w	r3, r4, ip
 80061a2:	bf8c      	ite	hi
 80061a4:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80061a8:	2400      	movls	r4, #0
 80061aa:	fa01 f000 	lsl.w	r0, r1, r0
 80061ae:	40ec      	lsrs	r4, r5
 80061b0:	ea40 0204 	orr.w	r2, r0, r4
 80061b4:	e7dd      	b.n	8006172 <__b2d+0x4a>
 80061b6:	ea44 030c 	orr.w	r3, r4, ip
 80061ba:	460a      	mov	r2, r1
 80061bc:	e7d9      	b.n	8006172 <__b2d+0x4a>
 80061be:	bf00      	nop
 80061c0:	3ff00000 	.word	0x3ff00000

080061c4 <__d2b>:
 80061c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80061c8:	460e      	mov	r6, r1
 80061ca:	2101      	movs	r1, #1
 80061cc:	ec59 8b10 	vmov	r8, r9, d0
 80061d0:	4615      	mov	r5, r2
 80061d2:	f7ff fcb5 	bl	8005b40 <_Balloc>
 80061d6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80061da:	4607      	mov	r7, r0
 80061dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80061e0:	bb34      	cbnz	r4, 8006230 <__d2b+0x6c>
 80061e2:	9301      	str	r3, [sp, #4]
 80061e4:	f1b8 0300 	subs.w	r3, r8, #0
 80061e8:	d027      	beq.n	800623a <__d2b+0x76>
 80061ea:	a802      	add	r0, sp, #8
 80061ec:	f840 3d08 	str.w	r3, [r0, #-8]!
 80061f0:	f7ff fd89 	bl	8005d06 <__lo0bits>
 80061f4:	9900      	ldr	r1, [sp, #0]
 80061f6:	b1f0      	cbz	r0, 8006236 <__d2b+0x72>
 80061f8:	9a01      	ldr	r2, [sp, #4]
 80061fa:	f1c0 0320 	rsb	r3, r0, #32
 80061fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006202:	430b      	orrs	r3, r1
 8006204:	40c2      	lsrs	r2, r0
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	9201      	str	r2, [sp, #4]
 800620a:	9b01      	ldr	r3, [sp, #4]
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	2b00      	cmp	r3, #0
 8006210:	bf14      	ite	ne
 8006212:	2102      	movne	r1, #2
 8006214:	2101      	moveq	r1, #1
 8006216:	6139      	str	r1, [r7, #16]
 8006218:	b1c4      	cbz	r4, 800624c <__d2b+0x88>
 800621a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800621e:	4404      	add	r4, r0
 8006220:	6034      	str	r4, [r6, #0]
 8006222:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006226:	6028      	str	r0, [r5, #0]
 8006228:	4638      	mov	r0, r7
 800622a:	b003      	add	sp, #12
 800622c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006230:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006234:	e7d5      	b.n	80061e2 <__d2b+0x1e>
 8006236:	6179      	str	r1, [r7, #20]
 8006238:	e7e7      	b.n	800620a <__d2b+0x46>
 800623a:	a801      	add	r0, sp, #4
 800623c:	f7ff fd63 	bl	8005d06 <__lo0bits>
 8006240:	9b01      	ldr	r3, [sp, #4]
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	2101      	movs	r1, #1
 8006246:	6139      	str	r1, [r7, #16]
 8006248:	3020      	adds	r0, #32
 800624a:	e7e5      	b.n	8006218 <__d2b+0x54>
 800624c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006250:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006254:	6030      	str	r0, [r6, #0]
 8006256:	6918      	ldr	r0, [r3, #16]
 8006258:	f7ff fd36 	bl	8005cc8 <__hi0bits>
 800625c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006260:	e7e1      	b.n	8006226 <__d2b+0x62>

08006262 <__ratio>:
 8006262:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006266:	4688      	mov	r8, r1
 8006268:	4669      	mov	r1, sp
 800626a:	4681      	mov	r9, r0
 800626c:	f7ff ff5c 	bl	8006128 <__b2d>
 8006270:	a901      	add	r1, sp, #4
 8006272:	4640      	mov	r0, r8
 8006274:	ec57 6b10 	vmov	r6, r7, d0
 8006278:	f7ff ff56 	bl	8006128 <__b2d>
 800627c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006280:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006284:	eba3 0c02 	sub.w	ip, r3, r2
 8006288:	e9dd 3200 	ldrd	r3, r2, [sp]
 800628c:	1a9b      	subs	r3, r3, r2
 800628e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006292:	ec5b ab10 	vmov	sl, fp, d0
 8006296:	2b00      	cmp	r3, #0
 8006298:	bfce      	itee	gt
 800629a:	463a      	movgt	r2, r7
 800629c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80062a0:	465a      	movle	r2, fp
 80062a2:	4659      	mov	r1, fp
 80062a4:	463d      	mov	r5, r7
 80062a6:	bfd4      	ite	le
 80062a8:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80062ac:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80062b0:	4630      	mov	r0, r6
 80062b2:	ee10 2a10 	vmov	r2, s0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4629      	mov	r1, r5
 80062ba:	f7fa fb3f 	bl	800093c <__aeabi_ddiv>
 80062be:	ec41 0b10 	vmov	d0, r0, r1
 80062c2:	b003      	add	sp, #12
 80062c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062c8 <__copybits>:
 80062c8:	3901      	subs	r1, #1
 80062ca:	b510      	push	{r4, lr}
 80062cc:	1149      	asrs	r1, r1, #5
 80062ce:	6914      	ldr	r4, [r2, #16]
 80062d0:	3101      	adds	r1, #1
 80062d2:	f102 0314 	add.w	r3, r2, #20
 80062d6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80062da:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062de:	42a3      	cmp	r3, r4
 80062e0:	4602      	mov	r2, r0
 80062e2:	d303      	bcc.n	80062ec <__copybits+0x24>
 80062e4:	2300      	movs	r3, #0
 80062e6:	428a      	cmp	r2, r1
 80062e8:	d305      	bcc.n	80062f6 <__copybits+0x2e>
 80062ea:	bd10      	pop	{r4, pc}
 80062ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80062f0:	f840 2b04 	str.w	r2, [r0], #4
 80062f4:	e7f3      	b.n	80062de <__copybits+0x16>
 80062f6:	f842 3b04 	str.w	r3, [r2], #4
 80062fa:	e7f4      	b.n	80062e6 <__copybits+0x1e>

080062fc <__any_on>:
 80062fc:	f100 0214 	add.w	r2, r0, #20
 8006300:	6900      	ldr	r0, [r0, #16]
 8006302:	114b      	asrs	r3, r1, #5
 8006304:	4298      	cmp	r0, r3
 8006306:	b510      	push	{r4, lr}
 8006308:	db11      	blt.n	800632e <__any_on+0x32>
 800630a:	dd0a      	ble.n	8006322 <__any_on+0x26>
 800630c:	f011 011f 	ands.w	r1, r1, #31
 8006310:	d007      	beq.n	8006322 <__any_on+0x26>
 8006312:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006316:	fa24 f001 	lsr.w	r0, r4, r1
 800631a:	fa00 f101 	lsl.w	r1, r0, r1
 800631e:	428c      	cmp	r4, r1
 8006320:	d10b      	bne.n	800633a <__any_on+0x3e>
 8006322:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006326:	4293      	cmp	r3, r2
 8006328:	d803      	bhi.n	8006332 <__any_on+0x36>
 800632a:	2000      	movs	r0, #0
 800632c:	bd10      	pop	{r4, pc}
 800632e:	4603      	mov	r3, r0
 8006330:	e7f7      	b.n	8006322 <__any_on+0x26>
 8006332:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006336:	2900      	cmp	r1, #0
 8006338:	d0f5      	beq.n	8006326 <__any_on+0x2a>
 800633a:	2001      	movs	r0, #1
 800633c:	e7f6      	b.n	800632c <__any_on+0x30>

0800633e <_calloc_r>:
 800633e:	b538      	push	{r3, r4, r5, lr}
 8006340:	fb02 f401 	mul.w	r4, r2, r1
 8006344:	4621      	mov	r1, r4
 8006346:	f000 f857 	bl	80063f8 <_malloc_r>
 800634a:	4605      	mov	r5, r0
 800634c:	b118      	cbz	r0, 8006356 <_calloc_r+0x18>
 800634e:	4622      	mov	r2, r4
 8006350:	2100      	movs	r1, #0
 8006352:	f7fc fd40 	bl	8002dd6 <memset>
 8006356:	4628      	mov	r0, r5
 8006358:	bd38      	pop	{r3, r4, r5, pc}
	...

0800635c <_free_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4605      	mov	r5, r0
 8006360:	2900      	cmp	r1, #0
 8006362:	d045      	beq.n	80063f0 <_free_r+0x94>
 8006364:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006368:	1f0c      	subs	r4, r1, #4
 800636a:	2b00      	cmp	r3, #0
 800636c:	bfb8      	it	lt
 800636e:	18e4      	addlt	r4, r4, r3
 8006370:	f000 fa36 	bl	80067e0 <__malloc_lock>
 8006374:	4a1f      	ldr	r2, [pc, #124]	; (80063f4 <_free_r+0x98>)
 8006376:	6813      	ldr	r3, [r2, #0]
 8006378:	4610      	mov	r0, r2
 800637a:	b933      	cbnz	r3, 800638a <_free_r+0x2e>
 800637c:	6063      	str	r3, [r4, #4]
 800637e:	6014      	str	r4, [r2, #0]
 8006380:	4628      	mov	r0, r5
 8006382:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006386:	f000 ba2c 	b.w	80067e2 <__malloc_unlock>
 800638a:	42a3      	cmp	r3, r4
 800638c:	d90c      	bls.n	80063a8 <_free_r+0x4c>
 800638e:	6821      	ldr	r1, [r4, #0]
 8006390:	1862      	adds	r2, r4, r1
 8006392:	4293      	cmp	r3, r2
 8006394:	bf04      	itt	eq
 8006396:	681a      	ldreq	r2, [r3, #0]
 8006398:	685b      	ldreq	r3, [r3, #4]
 800639a:	6063      	str	r3, [r4, #4]
 800639c:	bf04      	itt	eq
 800639e:	1852      	addeq	r2, r2, r1
 80063a0:	6022      	streq	r2, [r4, #0]
 80063a2:	6004      	str	r4, [r0, #0]
 80063a4:	e7ec      	b.n	8006380 <_free_r+0x24>
 80063a6:	4613      	mov	r3, r2
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	b10a      	cbz	r2, 80063b0 <_free_r+0x54>
 80063ac:	42a2      	cmp	r2, r4
 80063ae:	d9fa      	bls.n	80063a6 <_free_r+0x4a>
 80063b0:	6819      	ldr	r1, [r3, #0]
 80063b2:	1858      	adds	r0, r3, r1
 80063b4:	42a0      	cmp	r0, r4
 80063b6:	d10b      	bne.n	80063d0 <_free_r+0x74>
 80063b8:	6820      	ldr	r0, [r4, #0]
 80063ba:	4401      	add	r1, r0
 80063bc:	1858      	adds	r0, r3, r1
 80063be:	4282      	cmp	r2, r0
 80063c0:	6019      	str	r1, [r3, #0]
 80063c2:	d1dd      	bne.n	8006380 <_free_r+0x24>
 80063c4:	6810      	ldr	r0, [r2, #0]
 80063c6:	6852      	ldr	r2, [r2, #4]
 80063c8:	605a      	str	r2, [r3, #4]
 80063ca:	4401      	add	r1, r0
 80063cc:	6019      	str	r1, [r3, #0]
 80063ce:	e7d7      	b.n	8006380 <_free_r+0x24>
 80063d0:	d902      	bls.n	80063d8 <_free_r+0x7c>
 80063d2:	230c      	movs	r3, #12
 80063d4:	602b      	str	r3, [r5, #0]
 80063d6:	e7d3      	b.n	8006380 <_free_r+0x24>
 80063d8:	6820      	ldr	r0, [r4, #0]
 80063da:	1821      	adds	r1, r4, r0
 80063dc:	428a      	cmp	r2, r1
 80063de:	bf04      	itt	eq
 80063e0:	6811      	ldreq	r1, [r2, #0]
 80063e2:	6852      	ldreq	r2, [r2, #4]
 80063e4:	6062      	str	r2, [r4, #4]
 80063e6:	bf04      	itt	eq
 80063e8:	1809      	addeq	r1, r1, r0
 80063ea:	6021      	streq	r1, [r4, #0]
 80063ec:	605c      	str	r4, [r3, #4]
 80063ee:	e7c7      	b.n	8006380 <_free_r+0x24>
 80063f0:	bd38      	pop	{r3, r4, r5, pc}
 80063f2:	bf00      	nop
 80063f4:	200001fc 	.word	0x200001fc

080063f8 <_malloc_r>:
 80063f8:	b570      	push	{r4, r5, r6, lr}
 80063fa:	1ccd      	adds	r5, r1, #3
 80063fc:	f025 0503 	bic.w	r5, r5, #3
 8006400:	3508      	adds	r5, #8
 8006402:	2d0c      	cmp	r5, #12
 8006404:	bf38      	it	cc
 8006406:	250c      	movcc	r5, #12
 8006408:	2d00      	cmp	r5, #0
 800640a:	4606      	mov	r6, r0
 800640c:	db01      	blt.n	8006412 <_malloc_r+0x1a>
 800640e:	42a9      	cmp	r1, r5
 8006410:	d903      	bls.n	800641a <_malloc_r+0x22>
 8006412:	230c      	movs	r3, #12
 8006414:	6033      	str	r3, [r6, #0]
 8006416:	2000      	movs	r0, #0
 8006418:	bd70      	pop	{r4, r5, r6, pc}
 800641a:	f000 f9e1 	bl	80067e0 <__malloc_lock>
 800641e:	4a21      	ldr	r2, [pc, #132]	; (80064a4 <_malloc_r+0xac>)
 8006420:	6814      	ldr	r4, [r2, #0]
 8006422:	4621      	mov	r1, r4
 8006424:	b991      	cbnz	r1, 800644c <_malloc_r+0x54>
 8006426:	4c20      	ldr	r4, [pc, #128]	; (80064a8 <_malloc_r+0xb0>)
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	b91b      	cbnz	r3, 8006434 <_malloc_r+0x3c>
 800642c:	4630      	mov	r0, r6
 800642e:	f000 f98f 	bl	8006750 <_sbrk_r>
 8006432:	6020      	str	r0, [r4, #0]
 8006434:	4629      	mov	r1, r5
 8006436:	4630      	mov	r0, r6
 8006438:	f000 f98a 	bl	8006750 <_sbrk_r>
 800643c:	1c43      	adds	r3, r0, #1
 800643e:	d124      	bne.n	800648a <_malloc_r+0x92>
 8006440:	230c      	movs	r3, #12
 8006442:	6033      	str	r3, [r6, #0]
 8006444:	4630      	mov	r0, r6
 8006446:	f000 f9cc 	bl	80067e2 <__malloc_unlock>
 800644a:	e7e4      	b.n	8006416 <_malloc_r+0x1e>
 800644c:	680b      	ldr	r3, [r1, #0]
 800644e:	1b5b      	subs	r3, r3, r5
 8006450:	d418      	bmi.n	8006484 <_malloc_r+0x8c>
 8006452:	2b0b      	cmp	r3, #11
 8006454:	d90f      	bls.n	8006476 <_malloc_r+0x7e>
 8006456:	600b      	str	r3, [r1, #0]
 8006458:	50cd      	str	r5, [r1, r3]
 800645a:	18cc      	adds	r4, r1, r3
 800645c:	4630      	mov	r0, r6
 800645e:	f000 f9c0 	bl	80067e2 <__malloc_unlock>
 8006462:	f104 000b 	add.w	r0, r4, #11
 8006466:	1d23      	adds	r3, r4, #4
 8006468:	f020 0007 	bic.w	r0, r0, #7
 800646c:	1ac3      	subs	r3, r0, r3
 800646e:	d0d3      	beq.n	8006418 <_malloc_r+0x20>
 8006470:	425a      	negs	r2, r3
 8006472:	50e2      	str	r2, [r4, r3]
 8006474:	e7d0      	b.n	8006418 <_malloc_r+0x20>
 8006476:	428c      	cmp	r4, r1
 8006478:	684b      	ldr	r3, [r1, #4]
 800647a:	bf16      	itet	ne
 800647c:	6063      	strne	r3, [r4, #4]
 800647e:	6013      	streq	r3, [r2, #0]
 8006480:	460c      	movne	r4, r1
 8006482:	e7eb      	b.n	800645c <_malloc_r+0x64>
 8006484:	460c      	mov	r4, r1
 8006486:	6849      	ldr	r1, [r1, #4]
 8006488:	e7cc      	b.n	8006424 <_malloc_r+0x2c>
 800648a:	1cc4      	adds	r4, r0, #3
 800648c:	f024 0403 	bic.w	r4, r4, #3
 8006490:	42a0      	cmp	r0, r4
 8006492:	d005      	beq.n	80064a0 <_malloc_r+0xa8>
 8006494:	1a21      	subs	r1, r4, r0
 8006496:	4630      	mov	r0, r6
 8006498:	f000 f95a 	bl	8006750 <_sbrk_r>
 800649c:	3001      	adds	r0, #1
 800649e:	d0cf      	beq.n	8006440 <_malloc_r+0x48>
 80064a0:	6025      	str	r5, [r4, #0]
 80064a2:	e7db      	b.n	800645c <_malloc_r+0x64>
 80064a4:	200001fc 	.word	0x200001fc
 80064a8:	20000200 	.word	0x20000200

080064ac <__ssputs_r>:
 80064ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064b0:	688e      	ldr	r6, [r1, #8]
 80064b2:	429e      	cmp	r6, r3
 80064b4:	4682      	mov	sl, r0
 80064b6:	460c      	mov	r4, r1
 80064b8:	4690      	mov	r8, r2
 80064ba:	4699      	mov	r9, r3
 80064bc:	d837      	bhi.n	800652e <__ssputs_r+0x82>
 80064be:	898a      	ldrh	r2, [r1, #12]
 80064c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064c4:	d031      	beq.n	800652a <__ssputs_r+0x7e>
 80064c6:	6825      	ldr	r5, [r4, #0]
 80064c8:	6909      	ldr	r1, [r1, #16]
 80064ca:	1a6f      	subs	r7, r5, r1
 80064cc:	6965      	ldr	r5, [r4, #20]
 80064ce:	2302      	movs	r3, #2
 80064d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80064d8:	f109 0301 	add.w	r3, r9, #1
 80064dc:	443b      	add	r3, r7
 80064de:	429d      	cmp	r5, r3
 80064e0:	bf38      	it	cc
 80064e2:	461d      	movcc	r5, r3
 80064e4:	0553      	lsls	r3, r2, #21
 80064e6:	d530      	bpl.n	800654a <__ssputs_r+0x9e>
 80064e8:	4629      	mov	r1, r5
 80064ea:	f7ff ff85 	bl	80063f8 <_malloc_r>
 80064ee:	4606      	mov	r6, r0
 80064f0:	b950      	cbnz	r0, 8006508 <__ssputs_r+0x5c>
 80064f2:	230c      	movs	r3, #12
 80064f4:	f8ca 3000 	str.w	r3, [sl]
 80064f8:	89a3      	ldrh	r3, [r4, #12]
 80064fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064fe:	81a3      	strh	r3, [r4, #12]
 8006500:	f04f 30ff 	mov.w	r0, #4294967295
 8006504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006508:	463a      	mov	r2, r7
 800650a:	6921      	ldr	r1, [r4, #16]
 800650c:	f7fc fc58 	bl	8002dc0 <memcpy>
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651a:	81a3      	strh	r3, [r4, #12]
 800651c:	6126      	str	r6, [r4, #16]
 800651e:	6165      	str	r5, [r4, #20]
 8006520:	443e      	add	r6, r7
 8006522:	1bed      	subs	r5, r5, r7
 8006524:	6026      	str	r6, [r4, #0]
 8006526:	60a5      	str	r5, [r4, #8]
 8006528:	464e      	mov	r6, r9
 800652a:	454e      	cmp	r6, r9
 800652c:	d900      	bls.n	8006530 <__ssputs_r+0x84>
 800652e:	464e      	mov	r6, r9
 8006530:	4632      	mov	r2, r6
 8006532:	4641      	mov	r1, r8
 8006534:	6820      	ldr	r0, [r4, #0]
 8006536:	f000 f93a 	bl	80067ae <memmove>
 800653a:	68a3      	ldr	r3, [r4, #8]
 800653c:	1b9b      	subs	r3, r3, r6
 800653e:	60a3      	str	r3, [r4, #8]
 8006540:	6823      	ldr	r3, [r4, #0]
 8006542:	441e      	add	r6, r3
 8006544:	6026      	str	r6, [r4, #0]
 8006546:	2000      	movs	r0, #0
 8006548:	e7dc      	b.n	8006504 <__ssputs_r+0x58>
 800654a:	462a      	mov	r2, r5
 800654c:	f000 f94a 	bl	80067e4 <_realloc_r>
 8006550:	4606      	mov	r6, r0
 8006552:	2800      	cmp	r0, #0
 8006554:	d1e2      	bne.n	800651c <__ssputs_r+0x70>
 8006556:	6921      	ldr	r1, [r4, #16]
 8006558:	4650      	mov	r0, sl
 800655a:	f7ff feff 	bl	800635c <_free_r>
 800655e:	e7c8      	b.n	80064f2 <__ssputs_r+0x46>

08006560 <_svfiprintf_r>:
 8006560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006564:	461d      	mov	r5, r3
 8006566:	898b      	ldrh	r3, [r1, #12]
 8006568:	061f      	lsls	r7, r3, #24
 800656a:	b09d      	sub	sp, #116	; 0x74
 800656c:	4680      	mov	r8, r0
 800656e:	460c      	mov	r4, r1
 8006570:	4616      	mov	r6, r2
 8006572:	d50f      	bpl.n	8006594 <_svfiprintf_r+0x34>
 8006574:	690b      	ldr	r3, [r1, #16]
 8006576:	b96b      	cbnz	r3, 8006594 <_svfiprintf_r+0x34>
 8006578:	2140      	movs	r1, #64	; 0x40
 800657a:	f7ff ff3d 	bl	80063f8 <_malloc_r>
 800657e:	6020      	str	r0, [r4, #0]
 8006580:	6120      	str	r0, [r4, #16]
 8006582:	b928      	cbnz	r0, 8006590 <_svfiprintf_r+0x30>
 8006584:	230c      	movs	r3, #12
 8006586:	f8c8 3000 	str.w	r3, [r8]
 800658a:	f04f 30ff 	mov.w	r0, #4294967295
 800658e:	e0c8      	b.n	8006722 <_svfiprintf_r+0x1c2>
 8006590:	2340      	movs	r3, #64	; 0x40
 8006592:	6163      	str	r3, [r4, #20]
 8006594:	2300      	movs	r3, #0
 8006596:	9309      	str	r3, [sp, #36]	; 0x24
 8006598:	2320      	movs	r3, #32
 800659a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800659e:	2330      	movs	r3, #48	; 0x30
 80065a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80065a4:	9503      	str	r5, [sp, #12]
 80065a6:	f04f 0b01 	mov.w	fp, #1
 80065aa:	4637      	mov	r7, r6
 80065ac:	463d      	mov	r5, r7
 80065ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80065b2:	b10b      	cbz	r3, 80065b8 <_svfiprintf_r+0x58>
 80065b4:	2b25      	cmp	r3, #37	; 0x25
 80065b6:	d13e      	bne.n	8006636 <_svfiprintf_r+0xd6>
 80065b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80065bc:	d00b      	beq.n	80065d6 <_svfiprintf_r+0x76>
 80065be:	4653      	mov	r3, sl
 80065c0:	4632      	mov	r2, r6
 80065c2:	4621      	mov	r1, r4
 80065c4:	4640      	mov	r0, r8
 80065c6:	f7ff ff71 	bl	80064ac <__ssputs_r>
 80065ca:	3001      	adds	r0, #1
 80065cc:	f000 80a4 	beq.w	8006718 <_svfiprintf_r+0x1b8>
 80065d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d2:	4453      	add	r3, sl
 80065d4:	9309      	str	r3, [sp, #36]	; 0x24
 80065d6:	783b      	ldrb	r3, [r7, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	f000 809d 	beq.w	8006718 <_svfiprintf_r+0x1b8>
 80065de:	2300      	movs	r3, #0
 80065e0:	f04f 32ff 	mov.w	r2, #4294967295
 80065e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065e8:	9304      	str	r3, [sp, #16]
 80065ea:	9307      	str	r3, [sp, #28]
 80065ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065f0:	931a      	str	r3, [sp, #104]	; 0x68
 80065f2:	462f      	mov	r7, r5
 80065f4:	2205      	movs	r2, #5
 80065f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80065fa:	4850      	ldr	r0, [pc, #320]	; (800673c <_svfiprintf_r+0x1dc>)
 80065fc:	f7f9 fe68 	bl	80002d0 <memchr>
 8006600:	9b04      	ldr	r3, [sp, #16]
 8006602:	b9d0      	cbnz	r0, 800663a <_svfiprintf_r+0xda>
 8006604:	06d9      	lsls	r1, r3, #27
 8006606:	bf44      	itt	mi
 8006608:	2220      	movmi	r2, #32
 800660a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800660e:	071a      	lsls	r2, r3, #28
 8006610:	bf44      	itt	mi
 8006612:	222b      	movmi	r2, #43	; 0x2b
 8006614:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006618:	782a      	ldrb	r2, [r5, #0]
 800661a:	2a2a      	cmp	r2, #42	; 0x2a
 800661c:	d015      	beq.n	800664a <_svfiprintf_r+0xea>
 800661e:	9a07      	ldr	r2, [sp, #28]
 8006620:	462f      	mov	r7, r5
 8006622:	2000      	movs	r0, #0
 8006624:	250a      	movs	r5, #10
 8006626:	4639      	mov	r1, r7
 8006628:	f811 3b01 	ldrb.w	r3, [r1], #1
 800662c:	3b30      	subs	r3, #48	; 0x30
 800662e:	2b09      	cmp	r3, #9
 8006630:	d94d      	bls.n	80066ce <_svfiprintf_r+0x16e>
 8006632:	b1b8      	cbz	r0, 8006664 <_svfiprintf_r+0x104>
 8006634:	e00f      	b.n	8006656 <_svfiprintf_r+0xf6>
 8006636:	462f      	mov	r7, r5
 8006638:	e7b8      	b.n	80065ac <_svfiprintf_r+0x4c>
 800663a:	4a40      	ldr	r2, [pc, #256]	; (800673c <_svfiprintf_r+0x1dc>)
 800663c:	1a80      	subs	r0, r0, r2
 800663e:	fa0b f000 	lsl.w	r0, fp, r0
 8006642:	4318      	orrs	r0, r3
 8006644:	9004      	str	r0, [sp, #16]
 8006646:	463d      	mov	r5, r7
 8006648:	e7d3      	b.n	80065f2 <_svfiprintf_r+0x92>
 800664a:	9a03      	ldr	r2, [sp, #12]
 800664c:	1d11      	adds	r1, r2, #4
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	9103      	str	r1, [sp, #12]
 8006652:	2a00      	cmp	r2, #0
 8006654:	db01      	blt.n	800665a <_svfiprintf_r+0xfa>
 8006656:	9207      	str	r2, [sp, #28]
 8006658:	e004      	b.n	8006664 <_svfiprintf_r+0x104>
 800665a:	4252      	negs	r2, r2
 800665c:	f043 0302 	orr.w	r3, r3, #2
 8006660:	9207      	str	r2, [sp, #28]
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	783b      	ldrb	r3, [r7, #0]
 8006666:	2b2e      	cmp	r3, #46	; 0x2e
 8006668:	d10c      	bne.n	8006684 <_svfiprintf_r+0x124>
 800666a:	787b      	ldrb	r3, [r7, #1]
 800666c:	2b2a      	cmp	r3, #42	; 0x2a
 800666e:	d133      	bne.n	80066d8 <_svfiprintf_r+0x178>
 8006670:	9b03      	ldr	r3, [sp, #12]
 8006672:	1d1a      	adds	r2, r3, #4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	9203      	str	r2, [sp, #12]
 8006678:	2b00      	cmp	r3, #0
 800667a:	bfb8      	it	lt
 800667c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006680:	3702      	adds	r7, #2
 8006682:	9305      	str	r3, [sp, #20]
 8006684:	4d2e      	ldr	r5, [pc, #184]	; (8006740 <_svfiprintf_r+0x1e0>)
 8006686:	7839      	ldrb	r1, [r7, #0]
 8006688:	2203      	movs	r2, #3
 800668a:	4628      	mov	r0, r5
 800668c:	f7f9 fe20 	bl	80002d0 <memchr>
 8006690:	b138      	cbz	r0, 80066a2 <_svfiprintf_r+0x142>
 8006692:	2340      	movs	r3, #64	; 0x40
 8006694:	1b40      	subs	r0, r0, r5
 8006696:	fa03 f000 	lsl.w	r0, r3, r0
 800669a:	9b04      	ldr	r3, [sp, #16]
 800669c:	4303      	orrs	r3, r0
 800669e:	3701      	adds	r7, #1
 80066a0:	9304      	str	r3, [sp, #16]
 80066a2:	7839      	ldrb	r1, [r7, #0]
 80066a4:	4827      	ldr	r0, [pc, #156]	; (8006744 <_svfiprintf_r+0x1e4>)
 80066a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80066aa:	2206      	movs	r2, #6
 80066ac:	1c7e      	adds	r6, r7, #1
 80066ae:	f7f9 fe0f 	bl	80002d0 <memchr>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	d038      	beq.n	8006728 <_svfiprintf_r+0x1c8>
 80066b6:	4b24      	ldr	r3, [pc, #144]	; (8006748 <_svfiprintf_r+0x1e8>)
 80066b8:	bb13      	cbnz	r3, 8006700 <_svfiprintf_r+0x1a0>
 80066ba:	9b03      	ldr	r3, [sp, #12]
 80066bc:	3307      	adds	r3, #7
 80066be:	f023 0307 	bic.w	r3, r3, #7
 80066c2:	3308      	adds	r3, #8
 80066c4:	9303      	str	r3, [sp, #12]
 80066c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066c8:	444b      	add	r3, r9
 80066ca:	9309      	str	r3, [sp, #36]	; 0x24
 80066cc:	e76d      	b.n	80065aa <_svfiprintf_r+0x4a>
 80066ce:	fb05 3202 	mla	r2, r5, r2, r3
 80066d2:	2001      	movs	r0, #1
 80066d4:	460f      	mov	r7, r1
 80066d6:	e7a6      	b.n	8006626 <_svfiprintf_r+0xc6>
 80066d8:	2300      	movs	r3, #0
 80066da:	3701      	adds	r7, #1
 80066dc:	9305      	str	r3, [sp, #20]
 80066de:	4619      	mov	r1, r3
 80066e0:	250a      	movs	r5, #10
 80066e2:	4638      	mov	r0, r7
 80066e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066e8:	3a30      	subs	r2, #48	; 0x30
 80066ea:	2a09      	cmp	r2, #9
 80066ec:	d903      	bls.n	80066f6 <_svfiprintf_r+0x196>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0c8      	beq.n	8006684 <_svfiprintf_r+0x124>
 80066f2:	9105      	str	r1, [sp, #20]
 80066f4:	e7c6      	b.n	8006684 <_svfiprintf_r+0x124>
 80066f6:	fb05 2101 	mla	r1, r5, r1, r2
 80066fa:	2301      	movs	r3, #1
 80066fc:	4607      	mov	r7, r0
 80066fe:	e7f0      	b.n	80066e2 <_svfiprintf_r+0x182>
 8006700:	ab03      	add	r3, sp, #12
 8006702:	9300      	str	r3, [sp, #0]
 8006704:	4622      	mov	r2, r4
 8006706:	4b11      	ldr	r3, [pc, #68]	; (800674c <_svfiprintf_r+0x1ec>)
 8006708:	a904      	add	r1, sp, #16
 800670a:	4640      	mov	r0, r8
 800670c:	f7fc fc00 	bl	8002f10 <_printf_float>
 8006710:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006714:	4681      	mov	r9, r0
 8006716:	d1d6      	bne.n	80066c6 <_svfiprintf_r+0x166>
 8006718:	89a3      	ldrh	r3, [r4, #12]
 800671a:	065b      	lsls	r3, r3, #25
 800671c:	f53f af35 	bmi.w	800658a <_svfiprintf_r+0x2a>
 8006720:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006722:	b01d      	add	sp, #116	; 0x74
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	ab03      	add	r3, sp, #12
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	4622      	mov	r2, r4
 800672e:	4b07      	ldr	r3, [pc, #28]	; (800674c <_svfiprintf_r+0x1ec>)
 8006730:	a904      	add	r1, sp, #16
 8006732:	4640      	mov	r0, r8
 8006734:	f7fc fea2 	bl	800347c <_printf_i>
 8006738:	e7ea      	b.n	8006710 <_svfiprintf_r+0x1b0>
 800673a:	bf00      	nop
 800673c:	08006c1c 	.word	0x08006c1c
 8006740:	08006c22 	.word	0x08006c22
 8006744:	08006c26 	.word	0x08006c26
 8006748:	08002f11 	.word	0x08002f11
 800674c:	080064ad 	.word	0x080064ad

08006750 <_sbrk_r>:
 8006750:	b538      	push	{r3, r4, r5, lr}
 8006752:	4c06      	ldr	r4, [pc, #24]	; (800676c <_sbrk_r+0x1c>)
 8006754:	2300      	movs	r3, #0
 8006756:	4605      	mov	r5, r0
 8006758:	4608      	mov	r0, r1
 800675a:	6023      	str	r3, [r4, #0]
 800675c:	f7fa fee8 	bl	8001530 <_sbrk>
 8006760:	1c43      	adds	r3, r0, #1
 8006762:	d102      	bne.n	800676a <_sbrk_r+0x1a>
 8006764:	6823      	ldr	r3, [r4, #0]
 8006766:	b103      	cbz	r3, 800676a <_sbrk_r+0x1a>
 8006768:	602b      	str	r3, [r5, #0]
 800676a:	bd38      	pop	{r3, r4, r5, pc}
 800676c:	20000254 	.word	0x20000254

08006770 <strncmp>:
 8006770:	b510      	push	{r4, lr}
 8006772:	b16a      	cbz	r2, 8006790 <strncmp+0x20>
 8006774:	3901      	subs	r1, #1
 8006776:	1884      	adds	r4, r0, r2
 8006778:	f810 3b01 	ldrb.w	r3, [r0], #1
 800677c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006780:	4293      	cmp	r3, r2
 8006782:	d103      	bne.n	800678c <strncmp+0x1c>
 8006784:	42a0      	cmp	r0, r4
 8006786:	d001      	beq.n	800678c <strncmp+0x1c>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1f5      	bne.n	8006778 <strncmp+0x8>
 800678c:	1a98      	subs	r0, r3, r2
 800678e:	bd10      	pop	{r4, pc}
 8006790:	4610      	mov	r0, r2
 8006792:	e7fc      	b.n	800678e <strncmp+0x1e>

08006794 <__ascii_wctomb>:
 8006794:	b149      	cbz	r1, 80067aa <__ascii_wctomb+0x16>
 8006796:	2aff      	cmp	r2, #255	; 0xff
 8006798:	bf85      	ittet	hi
 800679a:	238a      	movhi	r3, #138	; 0x8a
 800679c:	6003      	strhi	r3, [r0, #0]
 800679e:	700a      	strbls	r2, [r1, #0]
 80067a0:	f04f 30ff 	movhi.w	r0, #4294967295
 80067a4:	bf98      	it	ls
 80067a6:	2001      	movls	r0, #1
 80067a8:	4770      	bx	lr
 80067aa:	4608      	mov	r0, r1
 80067ac:	4770      	bx	lr

080067ae <memmove>:
 80067ae:	4288      	cmp	r0, r1
 80067b0:	b510      	push	{r4, lr}
 80067b2:	eb01 0302 	add.w	r3, r1, r2
 80067b6:	d807      	bhi.n	80067c8 <memmove+0x1a>
 80067b8:	1e42      	subs	r2, r0, #1
 80067ba:	4299      	cmp	r1, r3
 80067bc:	d00a      	beq.n	80067d4 <memmove+0x26>
 80067be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067c2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80067c6:	e7f8      	b.n	80067ba <memmove+0xc>
 80067c8:	4283      	cmp	r3, r0
 80067ca:	d9f5      	bls.n	80067b8 <memmove+0xa>
 80067cc:	1881      	adds	r1, r0, r2
 80067ce:	1ad2      	subs	r2, r2, r3
 80067d0:	42d3      	cmn	r3, r2
 80067d2:	d100      	bne.n	80067d6 <memmove+0x28>
 80067d4:	bd10      	pop	{r4, pc}
 80067d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80067da:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80067de:	e7f7      	b.n	80067d0 <memmove+0x22>

080067e0 <__malloc_lock>:
 80067e0:	4770      	bx	lr

080067e2 <__malloc_unlock>:
 80067e2:	4770      	bx	lr

080067e4 <_realloc_r>:
 80067e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e6:	4607      	mov	r7, r0
 80067e8:	4614      	mov	r4, r2
 80067ea:	460e      	mov	r6, r1
 80067ec:	b921      	cbnz	r1, 80067f8 <_realloc_r+0x14>
 80067ee:	4611      	mov	r1, r2
 80067f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80067f4:	f7ff be00 	b.w	80063f8 <_malloc_r>
 80067f8:	b922      	cbnz	r2, 8006804 <_realloc_r+0x20>
 80067fa:	f7ff fdaf 	bl	800635c <_free_r>
 80067fe:	4625      	mov	r5, r4
 8006800:	4628      	mov	r0, r5
 8006802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006804:	f000 f814 	bl	8006830 <_malloc_usable_size_r>
 8006808:	42a0      	cmp	r0, r4
 800680a:	d20f      	bcs.n	800682c <_realloc_r+0x48>
 800680c:	4621      	mov	r1, r4
 800680e:	4638      	mov	r0, r7
 8006810:	f7ff fdf2 	bl	80063f8 <_malloc_r>
 8006814:	4605      	mov	r5, r0
 8006816:	2800      	cmp	r0, #0
 8006818:	d0f2      	beq.n	8006800 <_realloc_r+0x1c>
 800681a:	4631      	mov	r1, r6
 800681c:	4622      	mov	r2, r4
 800681e:	f7fc facf 	bl	8002dc0 <memcpy>
 8006822:	4631      	mov	r1, r6
 8006824:	4638      	mov	r0, r7
 8006826:	f7ff fd99 	bl	800635c <_free_r>
 800682a:	e7e9      	b.n	8006800 <_realloc_r+0x1c>
 800682c:	4635      	mov	r5, r6
 800682e:	e7e7      	b.n	8006800 <_realloc_r+0x1c>

08006830 <_malloc_usable_size_r>:
 8006830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006834:	1f18      	subs	r0, r3, #4
 8006836:	2b00      	cmp	r3, #0
 8006838:	bfbc      	itt	lt
 800683a:	580b      	ldrlt	r3, [r1, r0]
 800683c:	18c0      	addlt	r0, r0, r3
 800683e:	4770      	bx	lr

08006840 <_init>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr

0800684c <_fini>:
 800684c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684e:	bf00      	nop
 8006850:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006852:	bc08      	pop	{r3}
 8006854:	469e      	mov	lr, r3
 8006856:	4770      	bx	lr
