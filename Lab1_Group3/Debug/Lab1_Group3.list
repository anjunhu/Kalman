
Lab1_Group3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000510  0800b0d8  0800b0d8  0001b0d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b5e8  0800b5e8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b5e8  0800b5e8  0001b5e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b5f0  0800b5f0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b5f0  0800b5f0  0001b5f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b5f4  0800b5f4  0001b5f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b5f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200001e0  0800b7d8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  0800b7d8  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_line   00010be6  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001af5f  00000000  00000000  00030df6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00003c31  00000000  00000000  0004bd55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001180  00000000  00000000  0004f988  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010d860  00000000  00000000  00050b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000f88  00000000  00000000  0015e368  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002bf87  00000000  00000000  0015f2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0018b277  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005404  00000000  00000000  0018b368  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00004275  00000000  00000000  0019076c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800b0bc 	.word	0x0800b0bc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	0800b0bc 	.word	0x0800b0bc

08000200 <kalmanFilterA>:
* int kalmanFilterA (float* InputArray, float* OutputArray, struct KalmanState* kstate, int length  	// R0-R3
* 					 float* DiffArray, float* avgIn, float* avgOut, float* avgDiff);					// on the stack
*/

kalmanFilterA:
			PUSH {R4-R8, LR}		// 6 ints
 8000200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			VSTMDB.f32 SP!,{S4-S14}
 8000204:	ed2d 2a0b 	vpush	{s4-s14}

			MOV R4, R0			// local pointer to current element in InputArray
 8000208:	4604      	mov	r4, r0
			LDR R5, [sp, #68]	// pointer to DiffArray
 800020a:	9d11      	ldr	r5, [sp, #68]	; 0x44
			LDR R6, [sp, #72]	// pointer to avgIn
 800020c:	9e12      	ldr	r6, [sp, #72]	; 0x48
			LDR R7, [sp, #76]	// pointer to avgOut
 800020e:	9f13      	ldr	r7, [sp, #76]	; 0x4c
			LDR R8, [sp, #80]	// pointer to avgDiff
 8000210:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50

			VLDMIA.f32 R2!, {S4-S8} // local copy of kstate
 8000214:	ecb2 2a05 	vldmia	r2!, {s4-s8}


			VMRS R0, FPSCR			// flushing out the error code
 8000218:	eef1 0a10 	vmrs	r0, fpscr
			BIC R0, R0, #15
 800021c:	f020 000f 	bic.w	r0, r0, #15
			VMSR FPSCR, R0
 8000220:	eee1 0a10 	vmsr	fpscr, r0

			VSUB.f32 S11, S11, S11		// Avg In = 0.0
 8000224:	ee75 5ae5 	vsub.f32	s11, s11, s11
			VSUB.f32 S12, S12, S12		// Avg Out = 0.0
 8000228:	ee36 6a46 	vsub.f32	s12, s12, s12
			VSUB.f32 S13, S13, S13		// Avg Diff = 0.0
 800022c:	ee76 6ae6 	vsub.f32	s13, s13, s13
			VMOV.f32 S14, R3
 8000230:	ee07 3a10 	vmov	s14, r3
			VCVT.f32.S32 S14, S14		// (float) length
 8000234:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

08000238 <loop>:

loop:		SUBS R3, R3, #1
 8000238:	3b01      	subs	r3, #1
			BLT return
 800023a:	db25      	blt.n	8000288 <return>

			VLDR.f32 S10, [R4]		// S10 = current InputArray element
 800023c:	ed94 5a00 	vldr	s10, [r4]

			VADD.f32 S7, S7, S4 	// p = p + q
 8000240:	ee73 3a82 	vadd.f32	s7, s7, s4
			VADD.f32 S9, S7, S5 	// p + r
 8000244:	ee73 4aa2 	vadd.f32	s9, s7, s5
			VDIV.f32 S8, S7, S9 	// k = p / (p + r)
 8000248:	ee83 4aa4 	vdiv.f32	s8, s7, s9
			VSUB.f32 S9, S10, S6 	// measurement - x
 800024c:	ee75 4a43 	vsub.f32	s9, s10, s6
			VMLA.f32 S6, S8, S9 	// x = x + k*(measurement - x)
 8000250:	ee04 3a24 	vmla.f32	s6, s8, s9
			VMLS.f32 S7, S8, S7 	// p = p - k*p
 8000254:	ee44 3a63 	vmls.f32	s7, s8, s7

			VSUB.f32 S9, S6, S10
 8000258:	ee73 4a45 	vsub.f32	s9, s6, s10
			VADD.f32 S11, S11, S6	// avgIn += InputArray[i];
 800025c:	ee75 5a83 	vadd.f32	s11, s11, s6
			VADD.f32 S12, S12, S10	// avgOut += OutputArray[i];
 8000260:	ee36 6a05 	vadd.f32	s12, s12, s10
			VADD.f32 S13, S13, S9	// avgDiff += diffArray[i];
 8000264:	ee76 6aa4 	vadd.f32	s13, s13, s9

			VMRS R0, FPSCR
 8000268:	eef1 0a10 	vmrs	r0, fpscr
			ANDS R0, R0, #15		// check for exceptions LSL R0, R0, #28
 800026c:	f010 000f 	ands.w	r0, r0, #15
			BNE exception
 8000270:	d11c      	bne.n	80002ac <exception>

			VSTR.f32 S6, [R1]		// current OutputArray element = x
 8000272:	ed81 3a00 	vstr	s6, [r1]
			VSTR.f32 S9, [R5] 		// diffArray[i] = OutputArray[i] - InputArray[i];
 8000276:	edc5 4a00 	vstr	s9, [r5]

			ADD R4, R4, #4			// Moving on for I, O, D arrays
 800027a:	f104 0404 	add.w	r4, r4, #4
			ADD R1, R1, #4
 800027e:	f101 0104 	add.w	r1, r1, #4
			ADD R5, R5, #4
 8000282:	f105 0504 	add.w	r5, r5, #4
			B loop
 8000286:	e7d7      	b.n	8000238 <loop>

08000288 <return>:

return:
			VDIV.f32 S11, S11, S14	// avgIn = avgIn/(float)length;
 8000288:	eec5 5a87 	vdiv.f32	s11, s11, s14
			VDIV.f32 S12, S12, S14	// avgOut = avgOut/(float)length;
 800028c:	ee86 6a07 	vdiv.f32	s12, s12, s14
			VDIV.f32 S13, S13, S14	// avgDiff = avgDiff/(float)length;
 8000290:	eec6 6a87 	vdiv.f32	s13, s13, s14

			VSTR.f32 S11, [R6]		// pointer to avgIn
 8000294:	edc6 5a00 	vstr	s11, [r6]
			VSTR.f32 S12, [R7]		// pointer to avgOut
 8000298:	ed87 6a00 	vstr	s12, [r7]
			VSTR.f32 S13, [R8]		// pointer to avgDiff
 800029c:	edc8 6a00 	vstr	s13, [r8]

			VSTMDB.f32 R2!, {S4-S8} // update kstate, but only if everything went well...
 80002a0:	ed22 2a05 	vstmdb	r2!, {s4-s8}
			VLDMIA.f32 SP!,{S4-S14}
 80002a4:	ecbd 2a0b 	vpop	{s4-s14}
			POP {R4-R8, PC}
 80002a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080002ac <exception>:

exception:
			VLDMIA.f32 SP!,{S4-S14}
 80002ac:	ecbd 2a0b 	vpop	{s4-s14}
			POP {R4-R8, PC}
 80002b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080002b4 <kalmanFilterA_noStats>:
/**
* int kalmanFilterA_noStats (float* InputArray, float* OutputArray, struct KalmanState* kstate, int length)
*/

kalmanFilterA_noStats:
			PUSH {R4-R7, LR}
 80002b4:	b5f0      	push	{r4, r5, r6, r7, lr}
			VSTMDB.f32 SP!,{S4-S10}
 80002b6:	ed2d 2a07 	vpush	{s4-s10}

			MOV R5, R0				// local pointer to current element in InputArray
 80002ba:	4605      	mov	r5, r0
			MOV R6, R1				// local pointer to current element in OutputArray
 80002bc:	460e      	mov	r6, r1
			MOV R7, R2
 80002be:	4617      	mov	r7, r2
			VLDMIA.f32 R7!, {S4-S8} // local copy of kstate
 80002c0:	ecb7 2a05 	vldmia	r7!, {s4-s8}
			MOV R4, R3 				// local downcounter
 80002c4:	461c      	mov	r4, r3

			VMRS R0, FPSCR
 80002c6:	eef1 0a10 	vmrs	r0, fpscr
			BIC R0, R0, #15
 80002ca:	f020 000f 	bic.w	r0, r0, #15
			VMSR FPSCR, R0
 80002ce:	eee1 0a10 	vmsr	fpscr, r0

080002d2 <loop>:


loop:		SUBS R4, R4, #1
 80002d2:	3c01      	subs	r4, #1
			BLT return
 80002d4:	db19      	blt.n	800030a <return>

			VLDR.f32 S10, [R5]		// S10 = current InputArray element
 80002d6:	ed95 5a00 	vldr	s10, [r5]

			VADD.f32 S7, S7, S4 	// p = p + q
 80002da:	ee73 3a82 	vadd.f32	s7, s7, s4
			VADD.f32 S9, S7, S5 	// p + r
 80002de:	ee73 4aa2 	vadd.f32	s9, s7, s5
			VDIV.f32 S8, S7, S9 	// k = p / (p + r)
 80002e2:	ee83 4aa4 	vdiv.f32	s8, s7, s9
			VSUB.f32 S9, S10, S6 	// measurement - x
 80002e6:	ee75 4a43 	vsub.f32	s9, s10, s6
			VMLA.f32 S6, S8, S9 	// x = x + k*(measurement - x)
 80002ea:	ee04 3a24 	vmla.f32	s6, s8, s9
			VMLS.f32 S7, S8, S7 	// p = p - k*p
 80002ee:	ee44 3a63 	vmls.f32	s7, s8, s7

			VMRS R0, FPSCR
 80002f2:	eef1 0a10 	vmrs	r0, fpscr
			ANDS R0, R0, #15		// check for exceptions LSL R0, R0, #28
 80002f6:	f010 000f 	ands.w	r0, r0, #15
			BNE exception
 80002fa:	d10b      	bne.n	8000314 <exception>

			VSTR.f32 S6, [R6]		// current OutputArray element = x
 80002fc:	ed86 3a00 	vstr	s6, [r6]

			ADD R5, R5, #4
 8000300:	f105 0504 	add.w	r5, r5, #4
			ADD R6, R6, #4
 8000304:	f106 0604 	add.w	r6, r6, #4
			B loop
 8000308:	e7e3      	b.n	80002d2 <loop>

0800030a <return>:

return:
			VSTMDB.f32 R7!, {S4-S8} // update kstate only if everything went well...
 800030a:	ed27 2a05 	vstmdb	r7!, {s4-s8}
			VLDMIA.f32 SP!,{S4-S10}
 800030e:	ecbd 2a07 	vpop	{s4-s10}
			POP {R4-R7, PC}
 8000312:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000314 <exception>:

exception:
			VLDMIA.f32 SP!,{S4-S10}
 8000314:	ecbd 2a07 	vpop	{s4-s10}
			POP {R4-R7, PC}
 8000318:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800031a <kalmanStatsA>:
*		float inAvg, float outAvg, float diffAvg,
*		float* diffStd, float* corrCoef);
*/

kalmanStatsA:
			PUSH {R4-R6, LR}		// 4 ints
 800031a:	b570      	push	{r4, r5, r6, lr}

			MOV R4, R0				// local pointer to current element in InputArray
 800031c:	4604      	mov	r4, r0
			LDR R5, [sp, #16]		// pointer to diffStd
 800031e:	9d04      	ldr	r5, [sp, #16]
			LDR R6, [sp, #20]		// pointer to corrCoef
 8000320:	9e05      	ldr	r6, [sp, #20]

			VSTMDB.f32 SP!,{S4-S8}
 8000322:	ed2d 2a05 	vpush	{s4-s8}

			VMRS R0, FPSCR			// flushing out the error code
 8000326:	eef1 0a10 	vmrs	r0, fpscr
			BIC R0, R0, #15
 800032a:	f020 000f 	bic.w	r0, r0, #15
			VMSR FPSCR, R0
 800032e:	eee1 0a10 	vmsr	fpscr, r0

			VSUB.f32 S7, S7, S7		// stdDiff = 0.0;
 8000332:	ee73 3ae3 	vsub.f32	s7, s7, s7
			VSUB.f32 S8, S8, S8		// corNume = 0.0;
 8000336:	ee34 4a44 	vsub.f32	s8, s8, s8
			VSUB.f32 S9, S9, S9		// corDenoIn = 0.0;
 800033a:	ee74 4ae4 	vsub.f32	s9, s9, s9
			VSUB.f32 S10, S10, S10		// corDenoOut = 0.0;
 800033e:	ee35 5a45 	vsub.f32	s10, s10, s10
			VMOV.f32 S11, R3
 8000342:	ee05 3a90 	vmov	s11, r3
			VCVT.f32.S32 S11, S11		// (float) length
 8000346:	eef8 5ae5 	vcvt.f32.s32	s11, s11

0800034a <loop>:

loop:		SUBS R3, R3, #1
 800034a:	3b01      	subs	r3, #1
			BLT return
 800034c:	db1f      	blt.n	800038e <return>

			VLDR.f32 S4, [R4]		// S4 = current InputArray element
 800034e:	ed94 2a00 	vldr	s4, [r4]
			VLDR.f32 S5, [R1]		// S5 = current OutArray element
 8000352:	edd1 2a00 	vldr	s5, [r1]
			VLDR.f32 S6, [R2]		// S6 = current DiffArray element
 8000356:	ed92 3a00 	vldr	s6, [r2]

			// sumSqDev += powf(array[i] - avg, 2);
			VSUB.f32 S4, S4, S0
 800035a:	ee32 2a40 	vsub.f32	s4, s4, s0
			VSUB.f32 S5, S5, S1
 800035e:	ee72 2ae0 	vsub.f32	s5, s5, s1
			VSUB.f32 S6, S6, S2
 8000362:	ee33 3a41 	vsub.f32	s6, s6, s2
			VMLA.f32 S7, S6, S6		// stdDiff
 8000366:	ee43 3a03 	vmla.f32	s7, s6, s6
			VMLA.f32 S8, S4, S5		// corNume
 800036a:	ee02 4a22 	vmla.f32	s8, s4, s5
			VMLA.f32 S9, S4, S4		// corDenoIn
 800036e:	ee42 4a02 	vmla.f32	s9, s4, s4
			VMLA.f32 S10, S5, S5	// corDenoOut
 8000372:	ee02 5aa2 	vmla.f32	s10, s5, s5

			VMRS R0, FPSCR
 8000376:	eef1 0a10 	vmrs	r0, fpscr
			ANDS R0, R0, #15		// check for exceptions LSL R0, R0, #28
 800037a:	f010 000f 	ands.w	r0, r0, #15
			BNE exception
 800037e:	d117      	bne.n	80003b0 <exception>

			ADD R4, R4, #4			// Moving on for I, O, D arrays
 8000380:	f104 0404 	add.w	r4, r4, #4
			ADD R1, R1, #4
 8000384:	f101 0104 	add.w	r1, r1, #4
			ADD R2, R2, #4
 8000388:	f102 0204 	add.w	r2, r2, #4
			B loop
 800038c:	e7dd      	b.n	800034a <loop>

0800038e <return>:

return:
			VDIV.f32 S7, S7, S11	// varDiff = sumSqDev(diffArray, avgDiff, length) / (float)length;
 800038e:	eec3 3aa5 	vdiv.f32	s7, s7, s11
			VSQRT.f32 S7, S7		// stdDiff
 8000392:	eef1 3ae3 	vsqrt.f32	s7, s7

			VMUL.f32 S9, S9, S10	// corDeno = sqrt((sumSqDev(In)*sumSqDev(Out)));
 8000396:	ee64 4a85 	vmul.f32	s9, s9, s10
			VSQRT.f32 S9, S9
 800039a:	eef1 4ae4 	vsqrt.f32	s9, s9
			VDIV.f32 S9, S8, S9		// corrCoef = num / denom
 800039e:	eec4 4a24 	vdiv.f32	s9, s8, s9

			VSTR.f32 S7, [R5]
 80003a2:	edc5 3a00 	vstr	s7, [r5]
			VSTR.f32 S9, [R6]
 80003a6:	edc6 4a00 	vstr	s9, [r6]

			VLDMIA.f32 SP!,{S4-S8}
 80003aa:	ecbd 2a05 	vpop	{s4-s8}
			POP {R4-R6, PC}
 80003ae:	bd70      	pop	{r4, r5, r6, pc}

080003b0 <exception>:

exception:
			VLDMIA.f32 SP!,{S4-S8}
 80003b0:	ecbd 2a05 	vpop	{s4-s8}
			POP {R4-R6, PC}
 80003b4:	bd70      	pop	{r4, r5, r6, pc}

080003b6 <strlen>:
 80003b6:	4603      	mov	r3, r0
 80003b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003bc:	2a00      	cmp	r2, #0
 80003be:	d1fb      	bne.n	80003b8 <strlen+0x2>
 80003c0:	1a18      	subs	r0, r3, r0
 80003c2:	3801      	subs	r0, #1
 80003c4:	4770      	bx	lr
	...

080003d0 <memchr>:
 80003d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80003d4:	2a10      	cmp	r2, #16
 80003d6:	db2b      	blt.n	8000430 <memchr+0x60>
 80003d8:	f010 0f07 	tst.w	r0, #7
 80003dc:	d008      	beq.n	80003f0 <memchr+0x20>
 80003de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80003e2:	3a01      	subs	r2, #1
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d02d      	beq.n	8000444 <memchr+0x74>
 80003e8:	f010 0f07 	tst.w	r0, #7
 80003ec:	b342      	cbz	r2, 8000440 <memchr+0x70>
 80003ee:	d1f6      	bne.n	80003de <memchr+0xe>
 80003f0:	b4f0      	push	{r4, r5, r6, r7}
 80003f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80003f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80003fa:	f022 0407 	bic.w	r4, r2, #7
 80003fe:	f07f 0700 	mvns.w	r7, #0
 8000402:	2300      	movs	r3, #0
 8000404:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000408:	3c08      	subs	r4, #8
 800040a:	ea85 0501 	eor.w	r5, r5, r1
 800040e:	ea86 0601 	eor.w	r6, r6, r1
 8000412:	fa85 f547 	uadd8	r5, r5, r7
 8000416:	faa3 f587 	sel	r5, r3, r7
 800041a:	fa86 f647 	uadd8	r6, r6, r7
 800041e:	faa5 f687 	sel	r6, r5, r7
 8000422:	b98e      	cbnz	r6, 8000448 <memchr+0x78>
 8000424:	d1ee      	bne.n	8000404 <memchr+0x34>
 8000426:	bcf0      	pop	{r4, r5, r6, r7}
 8000428:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800042c:	f002 0207 	and.w	r2, r2, #7
 8000430:	b132      	cbz	r2, 8000440 <memchr+0x70>
 8000432:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000436:	3a01      	subs	r2, #1
 8000438:	ea83 0301 	eor.w	r3, r3, r1
 800043c:	b113      	cbz	r3, 8000444 <memchr+0x74>
 800043e:	d1f8      	bne.n	8000432 <memchr+0x62>
 8000440:	2000      	movs	r0, #0
 8000442:	4770      	bx	lr
 8000444:	3801      	subs	r0, #1
 8000446:	4770      	bx	lr
 8000448:	2d00      	cmp	r5, #0
 800044a:	bf06      	itte	eq
 800044c:	4635      	moveq	r5, r6
 800044e:	3803      	subeq	r0, #3
 8000450:	3807      	subne	r0, #7
 8000452:	f015 0f01 	tst.w	r5, #1
 8000456:	d107      	bne.n	8000468 <memchr+0x98>
 8000458:	3001      	adds	r0, #1
 800045a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800045e:	bf02      	ittt	eq
 8000460:	3001      	addeq	r0, #1
 8000462:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000466:	3001      	addeq	r0, #1
 8000468:	bcf0      	pop	{r4, r5, r6, r7}
 800046a:	3801      	subs	r0, #1
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop

08000470 <__aeabi_drsub>:
 8000470:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000474:	e002      	b.n	800047c <__adddf3>
 8000476:	bf00      	nop

08000478 <__aeabi_dsub>:
 8000478:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800047c <__adddf3>:
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000482:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	bf1f      	itttt	ne
 8000492:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000496:	ea55 0c02 	orrsne.w	ip, r5, r2
 800049a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a2:	f000 80e2 	beq.w	800066a <__adddf3+0x1ee>
 80004a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004ae:	bfb8      	it	lt
 80004b0:	426d      	neglt	r5, r5
 80004b2:	dd0c      	ble.n	80004ce <__adddf3+0x52>
 80004b4:	442c      	add	r4, r5
 80004b6:	ea80 0202 	eor.w	r2, r0, r2
 80004ba:	ea81 0303 	eor.w	r3, r1, r3
 80004be:	ea82 0000 	eor.w	r0, r2, r0
 80004c2:	ea83 0101 	eor.w	r1, r3, r1
 80004c6:	ea80 0202 	eor.w	r2, r0, r2
 80004ca:	ea81 0303 	eor.w	r3, r1, r3
 80004ce:	2d36      	cmp	r5, #54	; 0x36
 80004d0:	bf88      	it	hi
 80004d2:	bd30      	pophi	{r4, r5, pc}
 80004d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e4:	d002      	beq.n	80004ec <__adddf3+0x70>
 80004e6:	4240      	negs	r0, r0
 80004e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f8:	d002      	beq.n	8000500 <__adddf3+0x84>
 80004fa:	4252      	negs	r2, r2
 80004fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000500:	ea94 0f05 	teq	r4, r5
 8000504:	f000 80a7 	beq.w	8000656 <__adddf3+0x1da>
 8000508:	f1a4 0401 	sub.w	r4, r4, #1
 800050c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000510:	db0d      	blt.n	800052e <__adddf3+0xb2>
 8000512:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000516:	fa22 f205 	lsr.w	r2, r2, r5
 800051a:	1880      	adds	r0, r0, r2
 800051c:	f141 0100 	adc.w	r1, r1, #0
 8000520:	fa03 f20e 	lsl.w	r2, r3, lr
 8000524:	1880      	adds	r0, r0, r2
 8000526:	fa43 f305 	asr.w	r3, r3, r5
 800052a:	4159      	adcs	r1, r3
 800052c:	e00e      	b.n	800054c <__adddf3+0xd0>
 800052e:	f1a5 0520 	sub.w	r5, r5, #32
 8000532:	f10e 0e20 	add.w	lr, lr, #32
 8000536:	2a01      	cmp	r2, #1
 8000538:	fa03 fc0e 	lsl.w	ip, r3, lr
 800053c:	bf28      	it	cs
 800053e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000542:	fa43 f305 	asr.w	r3, r3, r5
 8000546:	18c0      	adds	r0, r0, r3
 8000548:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800054c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000550:	d507      	bpl.n	8000562 <__adddf3+0xe6>
 8000552:	f04f 0e00 	mov.w	lr, #0
 8000556:	f1dc 0c00 	rsbs	ip, ip, #0
 800055a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000562:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000566:	d31b      	bcc.n	80005a0 <__adddf3+0x124>
 8000568:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800056c:	d30c      	bcc.n	8000588 <__adddf3+0x10c>
 800056e:	0849      	lsrs	r1, r1, #1
 8000570:	ea5f 0030 	movs.w	r0, r0, rrx
 8000574:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000578:	f104 0401 	add.w	r4, r4, #1
 800057c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000580:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000584:	f080 809a 	bcs.w	80006bc <__adddf3+0x240>
 8000588:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	ea41 0105 	orr.w	r1, r1, r5
 800059e:	bd30      	pop	{r4, r5, pc}
 80005a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a4:	4140      	adcs	r0, r0
 80005a6:	eb41 0101 	adc.w	r1, r1, r1
 80005aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80005ae:	f1a4 0401 	sub.w	r4, r4, #1
 80005b2:	d1e9      	bne.n	8000588 <__adddf3+0x10c>
 80005b4:	f091 0f00 	teq	r1, #0
 80005b8:	bf04      	itt	eq
 80005ba:	4601      	moveq	r1, r0
 80005bc:	2000      	moveq	r0, #0
 80005be:	fab1 f381 	clz	r3, r1
 80005c2:	bf08      	it	eq
 80005c4:	3320      	addeq	r3, #32
 80005c6:	f1a3 030b 	sub.w	r3, r3, #11
 80005ca:	f1b3 0220 	subs.w	r2, r3, #32
 80005ce:	da0c      	bge.n	80005ea <__adddf3+0x16e>
 80005d0:	320c      	adds	r2, #12
 80005d2:	dd08      	ble.n	80005e6 <__adddf3+0x16a>
 80005d4:	f102 0c14 	add.w	ip, r2, #20
 80005d8:	f1c2 020c 	rsb	r2, r2, #12
 80005dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80005e0:	fa21 f102 	lsr.w	r1, r1, r2
 80005e4:	e00c      	b.n	8000600 <__adddf3+0x184>
 80005e6:	f102 0214 	add.w	r2, r2, #20
 80005ea:	bfd8      	it	le
 80005ec:	f1c2 0c20 	rsble	ip, r2, #32
 80005f0:	fa01 f102 	lsl.w	r1, r1, r2
 80005f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f8:	bfdc      	itt	le
 80005fa:	ea41 010c 	orrle.w	r1, r1, ip
 80005fe:	4090      	lslle	r0, r2
 8000600:	1ae4      	subs	r4, r4, r3
 8000602:	bfa2      	ittt	ge
 8000604:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000608:	4329      	orrge	r1, r5
 800060a:	bd30      	popge	{r4, r5, pc}
 800060c:	ea6f 0404 	mvn.w	r4, r4
 8000610:	3c1f      	subs	r4, #31
 8000612:	da1c      	bge.n	800064e <__adddf3+0x1d2>
 8000614:	340c      	adds	r4, #12
 8000616:	dc0e      	bgt.n	8000636 <__adddf3+0x1ba>
 8000618:	f104 0414 	add.w	r4, r4, #20
 800061c:	f1c4 0220 	rsb	r2, r4, #32
 8000620:	fa20 f004 	lsr.w	r0, r0, r4
 8000624:	fa01 f302 	lsl.w	r3, r1, r2
 8000628:	ea40 0003 	orr.w	r0, r0, r3
 800062c:	fa21 f304 	lsr.w	r3, r1, r4
 8000630:	ea45 0103 	orr.w	r1, r5, r3
 8000634:	bd30      	pop	{r4, r5, pc}
 8000636:	f1c4 040c 	rsb	r4, r4, #12
 800063a:	f1c4 0220 	rsb	r2, r4, #32
 800063e:	fa20 f002 	lsr.w	r0, r0, r2
 8000642:	fa01 f304 	lsl.w	r3, r1, r4
 8000646:	ea40 0003 	orr.w	r0, r0, r3
 800064a:	4629      	mov	r1, r5
 800064c:	bd30      	pop	{r4, r5, pc}
 800064e:	fa21 f004 	lsr.w	r0, r1, r4
 8000652:	4629      	mov	r1, r5
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	f094 0f00 	teq	r4, #0
 800065a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065e:	bf06      	itte	eq
 8000660:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000664:	3401      	addeq	r4, #1
 8000666:	3d01      	subne	r5, #1
 8000668:	e74e      	b.n	8000508 <__adddf3+0x8c>
 800066a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066e:	bf18      	it	ne
 8000670:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000674:	d029      	beq.n	80006ca <__adddf3+0x24e>
 8000676:	ea94 0f05 	teq	r4, r5
 800067a:	bf08      	it	eq
 800067c:	ea90 0f02 	teqeq	r0, r2
 8000680:	d005      	beq.n	800068e <__adddf3+0x212>
 8000682:	ea54 0c00 	orrs.w	ip, r4, r0
 8000686:	bf04      	itt	eq
 8000688:	4619      	moveq	r1, r3
 800068a:	4610      	moveq	r0, r2
 800068c:	bd30      	pop	{r4, r5, pc}
 800068e:	ea91 0f03 	teq	r1, r3
 8000692:	bf1e      	ittt	ne
 8000694:	2100      	movne	r1, #0
 8000696:	2000      	movne	r0, #0
 8000698:	bd30      	popne	{r4, r5, pc}
 800069a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069e:	d105      	bne.n	80006ac <__adddf3+0x230>
 80006a0:	0040      	lsls	r0, r0, #1
 80006a2:	4149      	adcs	r1, r1
 80006a4:	bf28      	it	cs
 80006a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006aa:	bd30      	pop	{r4, r5, pc}
 80006ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006b0:	bf3c      	itt	cc
 80006b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b6:	bd30      	popcc	{r4, r5, pc}
 80006b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ce:	bf1a      	itte	ne
 80006d0:	4619      	movne	r1, r3
 80006d2:	4610      	movne	r0, r2
 80006d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d8:	bf1c      	itt	ne
 80006da:	460b      	movne	r3, r1
 80006dc:	4602      	movne	r2, r0
 80006de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006e2:	bf06      	itte	eq
 80006e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e8:	ea91 0f03 	teqeq	r1, r3
 80006ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	bf00      	nop

080006f4 <__aeabi_ui2d>:
 80006f4:	f090 0f00 	teq	r0, #0
 80006f8:	bf04      	itt	eq
 80006fa:	2100      	moveq	r1, #0
 80006fc:	4770      	bxeq	lr
 80006fe:	b530      	push	{r4, r5, lr}
 8000700:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000704:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000708:	f04f 0500 	mov.w	r5, #0
 800070c:	f04f 0100 	mov.w	r1, #0
 8000710:	e750      	b.n	80005b4 <__adddf3+0x138>
 8000712:	bf00      	nop

08000714 <__aeabi_i2d>:
 8000714:	f090 0f00 	teq	r0, #0
 8000718:	bf04      	itt	eq
 800071a:	2100      	moveq	r1, #0
 800071c:	4770      	bxeq	lr
 800071e:	b530      	push	{r4, r5, lr}
 8000720:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000724:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000728:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800072c:	bf48      	it	mi
 800072e:	4240      	negmi	r0, r0
 8000730:	f04f 0100 	mov.w	r1, #0
 8000734:	e73e      	b.n	80005b4 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_f2d>:
 8000738:	0042      	lsls	r2, r0, #1
 800073a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000742:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000746:	bf1f      	itttt	ne
 8000748:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800074c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000750:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000754:	4770      	bxne	lr
 8000756:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800075a:	bf08      	it	eq
 800075c:	4770      	bxeq	lr
 800075e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000762:	bf04      	itt	eq
 8000764:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000768:	4770      	bxeq	lr
 800076a:	b530      	push	{r4, r5, lr}
 800076c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000770:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000774:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000778:	e71c      	b.n	80005b4 <__adddf3+0x138>
 800077a:	bf00      	nop

0800077c <__aeabi_ul2d>:
 800077c:	ea50 0201 	orrs.w	r2, r0, r1
 8000780:	bf08      	it	eq
 8000782:	4770      	bxeq	lr
 8000784:	b530      	push	{r4, r5, lr}
 8000786:	f04f 0500 	mov.w	r5, #0
 800078a:	e00a      	b.n	80007a2 <__aeabi_l2d+0x16>

0800078c <__aeabi_l2d>:
 800078c:	ea50 0201 	orrs.w	r2, r0, r1
 8000790:	bf08      	it	eq
 8000792:	4770      	bxeq	lr
 8000794:	b530      	push	{r4, r5, lr}
 8000796:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800079a:	d502      	bpl.n	80007a2 <__aeabi_l2d+0x16>
 800079c:	4240      	negs	r0, r0
 800079e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007ae:	f43f aed8 	beq.w	8000562 <__adddf3+0xe6>
 80007b2:	f04f 0203 	mov.w	r2, #3
 80007b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ba:	bf18      	it	ne
 80007bc:	3203      	addne	r2, #3
 80007be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c2:	bf18      	it	ne
 80007c4:	3203      	addne	r2, #3
 80007c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007ca:	f1c2 0320 	rsb	r3, r2, #32
 80007ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80007d2:	fa20 f002 	lsr.w	r0, r0, r2
 80007d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80007da:	ea40 000e 	orr.w	r0, r0, lr
 80007de:	fa21 f102 	lsr.w	r1, r1, r2
 80007e2:	4414      	add	r4, r2
 80007e4:	e6bd      	b.n	8000562 <__adddf3+0xe6>
 80007e6:	bf00      	nop

080007e8 <__aeabi_dmul>:
 80007e8:	b570      	push	{r4, r5, r6, lr}
 80007ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f6:	bf1d      	ittte	ne
 80007f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007fc:	ea94 0f0c 	teqne	r4, ip
 8000800:	ea95 0f0c 	teqne	r5, ip
 8000804:	f000 f8de 	bleq	80009c4 <__aeabi_dmul+0x1dc>
 8000808:	442c      	add	r4, r5
 800080a:	ea81 0603 	eor.w	r6, r1, r3
 800080e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000812:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000816:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800081a:	bf18      	it	ne
 800081c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000820:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000824:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000828:	d038      	beq.n	800089c <__aeabi_dmul+0xb4>
 800082a:	fba0 ce02 	umull	ip, lr, r0, r2
 800082e:	f04f 0500 	mov.w	r5, #0
 8000832:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000836:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800083a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800083e:	f04f 0600 	mov.w	r6, #0
 8000842:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000846:	f09c 0f00 	teq	ip, #0
 800084a:	bf18      	it	ne
 800084c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000850:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000854:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000858:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800085c:	d204      	bcs.n	8000868 <__aeabi_dmul+0x80>
 800085e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000862:	416d      	adcs	r5, r5
 8000864:	eb46 0606 	adc.w	r6, r6, r6
 8000868:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800086c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000870:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000874:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000878:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800087c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000880:	bf88      	it	hi
 8000882:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000886:	d81e      	bhi.n	80008c6 <__aeabi_dmul+0xde>
 8000888:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800088c:	bf08      	it	eq
 800088e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000892:	f150 0000 	adcs.w	r0, r0, #0
 8000896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80008a0:	ea46 0101 	orr.w	r1, r6, r1
 80008a4:	ea40 0002 	orr.w	r0, r0, r2
 80008a8:	ea81 0103 	eor.w	r1, r1, r3
 80008ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	f300 80ab 	bgt.w	8000a20 <__aeabi_dmul+0x238>
 80008ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80008ce:	bfde      	ittt	le
 80008d0:	2000      	movle	r0, #0
 80008d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80008d6:	bd70      	pople	{r4, r5, r6, pc}
 80008d8:	f1c4 0400 	rsb	r4, r4, #0
 80008dc:	3c20      	subs	r4, #32
 80008de:	da35      	bge.n	800094c <__aeabi_dmul+0x164>
 80008e0:	340c      	adds	r4, #12
 80008e2:	dc1b      	bgt.n	800091c <__aeabi_dmul+0x134>
 80008e4:	f104 0414 	add.w	r4, r4, #20
 80008e8:	f1c4 0520 	rsb	r5, r4, #32
 80008ec:	fa00 f305 	lsl.w	r3, r0, r5
 80008f0:	fa20 f004 	lsr.w	r0, r0, r4
 80008f4:	fa01 f205 	lsl.w	r2, r1, r5
 80008f8:	ea40 0002 	orr.w	r0, r0, r2
 80008fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000900:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000904:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000908:	fa21 f604 	lsr.w	r6, r1, r4
 800090c:	eb42 0106 	adc.w	r1, r2, r6
 8000910:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000914:	bf08      	it	eq
 8000916:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800091a:	bd70      	pop	{r4, r5, r6, pc}
 800091c:	f1c4 040c 	rsb	r4, r4, #12
 8000920:	f1c4 0520 	rsb	r5, r4, #32
 8000924:	fa00 f304 	lsl.w	r3, r0, r4
 8000928:	fa20 f005 	lsr.w	r0, r0, r5
 800092c:	fa01 f204 	lsl.w	r2, r1, r4
 8000930:	ea40 0002 	orr.w	r0, r0, r2
 8000934:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000938:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800093c:	f141 0100 	adc.w	r1, r1, #0
 8000940:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000944:	bf08      	it	eq
 8000946:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	f1c4 0520 	rsb	r5, r4, #32
 8000950:	fa00 f205 	lsl.w	r2, r0, r5
 8000954:	ea4e 0e02 	orr.w	lr, lr, r2
 8000958:	fa20 f304 	lsr.w	r3, r0, r4
 800095c:	fa01 f205 	lsl.w	r2, r1, r5
 8000960:	ea43 0302 	orr.w	r3, r3, r2
 8000964:	fa21 f004 	lsr.w	r0, r1, r4
 8000968:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800096c:	fa21 f204 	lsr.w	r2, r1, r4
 8000970:	ea20 0002 	bic.w	r0, r0, r2
 8000974:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000978:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800097c:	bf08      	it	eq
 800097e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000982:	bd70      	pop	{r4, r5, r6, pc}
 8000984:	f094 0f00 	teq	r4, #0
 8000988:	d10f      	bne.n	80009aa <__aeabi_dmul+0x1c2>
 800098a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800098e:	0040      	lsls	r0, r0, #1
 8000990:	eb41 0101 	adc.w	r1, r1, r1
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	bf08      	it	eq
 800099a:	3c01      	subeq	r4, #1
 800099c:	d0f7      	beq.n	800098e <__aeabi_dmul+0x1a6>
 800099e:	ea41 0106 	orr.w	r1, r1, r6
 80009a2:	f095 0f00 	teq	r5, #0
 80009a6:	bf18      	it	ne
 80009a8:	4770      	bxne	lr
 80009aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80009ae:	0052      	lsls	r2, r2, #1
 80009b0:	eb43 0303 	adc.w	r3, r3, r3
 80009b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80009b8:	bf08      	it	eq
 80009ba:	3d01      	subeq	r5, #1
 80009bc:	d0f7      	beq.n	80009ae <__aeabi_dmul+0x1c6>
 80009be:	ea43 0306 	orr.w	r3, r3, r6
 80009c2:	4770      	bx	lr
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009cc:	bf18      	it	ne
 80009ce:	ea95 0f0c 	teqne	r5, ip
 80009d2:	d00c      	beq.n	80009ee <__aeabi_dmul+0x206>
 80009d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009de:	d1d1      	bne.n	8000984 <__aeabi_dmul+0x19c>
 80009e0:	ea81 0103 	eor.w	r1, r1, r3
 80009e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	bd70      	pop	{r4, r5, r6, pc}
 80009ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f2:	bf06      	itte	eq
 80009f4:	4610      	moveq	r0, r2
 80009f6:	4619      	moveq	r1, r3
 80009f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fc:	d019      	beq.n	8000a32 <__aeabi_dmul+0x24a>
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	d102      	bne.n	8000a0a <__aeabi_dmul+0x222>
 8000a04:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a08:	d113      	bne.n	8000a32 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	d105      	bne.n	8000a1c <__aeabi_dmul+0x234>
 8000a10:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a14:	bf1c      	itt	ne
 8000a16:	4610      	movne	r0, r2
 8000a18:	4619      	movne	r1, r3
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dmul+0x24a>
 8000a1c:	ea81 0103 	eor.w	r1, r1, r3
 8000a20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a24:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a28:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
 8000a32:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a36:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a3a:	bd70      	pop	{r4, r5, r6, pc}

08000a3c <__aeabi_ddiv>:
 8000a3c:	b570      	push	{r4, r5, r6, lr}
 8000a3e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a42:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000a46:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000a4a:	bf1d      	ittte	ne
 8000a4c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000a50:	ea94 0f0c 	teqne	r4, ip
 8000a54:	ea95 0f0c 	teqne	r5, ip
 8000a58:	f000 f8a7 	bleq	8000baa <__aeabi_ddiv+0x16e>
 8000a5c:	eba4 0405 	sub.w	r4, r4, r5
 8000a60:	ea81 0e03 	eor.w	lr, r1, r3
 8000a64:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a68:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000a6c:	f000 8088 	beq.w	8000b80 <__aeabi_ddiv+0x144>
 8000a70:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000a74:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000a78:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000a7c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000a80:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000a84:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000a88:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000a8c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000a90:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000a94:	429d      	cmp	r5, r3
 8000a96:	bf08      	it	eq
 8000a98:	4296      	cmpeq	r6, r2
 8000a9a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000a9e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000aa2:	d202      	bcs.n	8000aaa <__aeabi_ddiv+0x6e>
 8000aa4:	085b      	lsrs	r3, r3, #1
 8000aa6:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aaa:	1ab6      	subs	r6, r6, r2
 8000aac:	eb65 0503 	sbc.w	r5, r5, r3
 8000ab0:	085b      	lsrs	r3, r3, #1
 8000ab2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ab6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000aba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000abe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ac2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ac6:	bf22      	ittt	cs
 8000ac8:	1ab6      	subcs	r6, r6, r2
 8000aca:	4675      	movcs	r5, lr
 8000acc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ad0:	085b      	lsrs	r3, r3, #1
 8000ad2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ad6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000ada:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000ade:	bf22      	ittt	cs
 8000ae0:	1ab6      	subcs	r6, r6, r2
 8000ae2:	4675      	movcs	r5, lr
 8000ae4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ae8:	085b      	lsrs	r3, r3, #1
 8000aea:	ea4f 0232 	mov.w	r2, r2, rrx
 8000aee:	ebb6 0e02 	subs.w	lr, r6, r2
 8000af2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000af6:	bf22      	ittt	cs
 8000af8:	1ab6      	subcs	r6, r6, r2
 8000afa:	4675      	movcs	r5, lr
 8000afc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b00:	085b      	lsrs	r3, r3, #1
 8000b02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b0e:	bf22      	ittt	cs
 8000b10:	1ab6      	subcs	r6, r6, r2
 8000b12:	4675      	movcs	r5, lr
 8000b14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b1c:	d018      	beq.n	8000b50 <__aeabi_ddiv+0x114>
 8000b1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b3a:	d1c0      	bne.n	8000abe <__aeabi_ddiv+0x82>
 8000b3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b40:	d10b      	bne.n	8000b5a <__aeabi_ddiv+0x11e>
 8000b42:	ea41 0100 	orr.w	r1, r1, r0
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000b4e:	e7b6      	b.n	8000abe <__aeabi_ddiv+0x82>
 8000b50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000b54:	bf04      	itt	eq
 8000b56:	4301      	orreq	r1, r0
 8000b58:	2000      	moveq	r0, #0
 8000b5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000b5e:	bf88      	it	hi
 8000b60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000b64:	f63f aeaf 	bhi.w	80008c6 <__aeabi_dmul+0xde>
 8000b68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000b6c:	bf04      	itt	eq
 8000b6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000b72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000b76:	f150 0000 	adcs.w	r0, r0, #0
 8000b7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000b7e:	bd70      	pop	{r4, r5, r6, pc}
 8000b80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000b84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000b88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000b8c:	bfc2      	ittt	gt
 8000b8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000b92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000b96:	bd70      	popgt	{r4, r5, r6, pc}
 8000b98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9c:	f04f 0e00 	mov.w	lr, #0
 8000ba0:	3c01      	subs	r4, #1
 8000ba2:	e690      	b.n	80008c6 <__aeabi_dmul+0xde>
 8000ba4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ba8:	e68d      	b.n	80008c6 <__aeabi_dmul+0xde>
 8000baa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000bae:	ea94 0f0c 	teq	r4, ip
 8000bb2:	bf08      	it	eq
 8000bb4:	ea95 0f0c 	teqeq	r5, ip
 8000bb8:	f43f af3b 	beq.w	8000a32 <__aeabi_dmul+0x24a>
 8000bbc:	ea94 0f0c 	teq	r4, ip
 8000bc0:	d10a      	bne.n	8000bd8 <__aeabi_ddiv+0x19c>
 8000bc2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000bc6:	f47f af34 	bne.w	8000a32 <__aeabi_dmul+0x24a>
 8000bca:	ea95 0f0c 	teq	r5, ip
 8000bce:	f47f af25 	bne.w	8000a1c <__aeabi_dmul+0x234>
 8000bd2:	4610      	mov	r0, r2
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	e72c      	b.n	8000a32 <__aeabi_dmul+0x24a>
 8000bd8:	ea95 0f0c 	teq	r5, ip
 8000bdc:	d106      	bne.n	8000bec <__aeabi_ddiv+0x1b0>
 8000bde:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000be2:	f43f aefd 	beq.w	80009e0 <__aeabi_dmul+0x1f8>
 8000be6:	4610      	mov	r0, r2
 8000be8:	4619      	mov	r1, r3
 8000bea:	e722      	b.n	8000a32 <__aeabi_dmul+0x24a>
 8000bec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000bf0:	bf18      	it	ne
 8000bf2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000bf6:	f47f aec5 	bne.w	8000984 <__aeabi_dmul+0x19c>
 8000bfa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000bfe:	f47f af0d 	bne.w	8000a1c <__aeabi_dmul+0x234>
 8000c02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c06:	f47f aeeb 	bne.w	80009e0 <__aeabi_dmul+0x1f8>
 8000c0a:	e712      	b.n	8000a32 <__aeabi_dmul+0x24a>

08000c0c <__gedf2>:
 8000c0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000c10:	e006      	b.n	8000c20 <__cmpdf2+0x4>
 8000c12:	bf00      	nop

08000c14 <__ledf2>:
 8000c14:	f04f 0c01 	mov.w	ip, #1
 8000c18:	e002      	b.n	8000c20 <__cmpdf2+0x4>
 8000c1a:	bf00      	nop

08000c1c <__cmpdf2>:
 8000c1c:	f04f 0c01 	mov.w	ip, #1
 8000c20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	bf18      	it	ne
 8000c32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000c36:	d01b      	beq.n	8000c70 <__cmpdf2+0x54>
 8000c38:	b001      	add	sp, #4
 8000c3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000c3e:	bf0c      	ite	eq
 8000c40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000c44:	ea91 0f03 	teqne	r1, r3
 8000c48:	bf02      	ittt	eq
 8000c4a:	ea90 0f02 	teqeq	r0, r2
 8000c4e:	2000      	moveq	r0, #0
 8000c50:	4770      	bxeq	lr
 8000c52:	f110 0f00 	cmn.w	r0, #0
 8000c56:	ea91 0f03 	teq	r1, r3
 8000c5a:	bf58      	it	pl
 8000c5c:	4299      	cmppl	r1, r3
 8000c5e:	bf08      	it	eq
 8000c60:	4290      	cmpeq	r0, r2
 8000c62:	bf2c      	ite	cs
 8000c64:	17d8      	asrcs	r0, r3, #31
 8000c66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000c6a:	f040 0001 	orr.w	r0, r0, #1
 8000c6e:	4770      	bx	lr
 8000c70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c78:	d102      	bne.n	8000c80 <__cmpdf2+0x64>
 8000c7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c7e:	d107      	bne.n	8000c90 <__cmpdf2+0x74>
 8000c80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c88:	d1d6      	bne.n	8000c38 <__cmpdf2+0x1c>
 8000c8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c8e:	d0d3      	beq.n	8000c38 <__cmpdf2+0x1c>
 8000c90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_cdrcmple>:
 8000c98:	4684      	mov	ip, r0
 8000c9a:	4610      	mov	r0, r2
 8000c9c:	4662      	mov	r2, ip
 8000c9e:	468c      	mov	ip, r1
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4663      	mov	r3, ip
 8000ca4:	e000      	b.n	8000ca8 <__aeabi_cdcmpeq>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_cdcmpeq>:
 8000ca8:	b501      	push	{r0, lr}
 8000caa:	f7ff ffb7 	bl	8000c1c <__cmpdf2>
 8000cae:	2800      	cmp	r0, #0
 8000cb0:	bf48      	it	mi
 8000cb2:	f110 0f00 	cmnmi.w	r0, #0
 8000cb6:	bd01      	pop	{r0, pc}

08000cb8 <__aeabi_dcmpeq>:
 8000cb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cbc:	f7ff fff4 	bl	8000ca8 <__aeabi_cdcmpeq>
 8000cc0:	bf0c      	ite	eq
 8000cc2:	2001      	moveq	r0, #1
 8000cc4:	2000      	movne	r0, #0
 8000cc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cca:	bf00      	nop

08000ccc <__aeabi_dcmplt>:
 8000ccc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cd0:	f7ff ffea 	bl	8000ca8 <__aeabi_cdcmpeq>
 8000cd4:	bf34      	ite	cc
 8000cd6:	2001      	movcc	r0, #1
 8000cd8:	2000      	movcs	r0, #0
 8000cda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cde:	bf00      	nop

08000ce0 <__aeabi_dcmple>:
 8000ce0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ce4:	f7ff ffe0 	bl	8000ca8 <__aeabi_cdcmpeq>
 8000ce8:	bf94      	ite	ls
 8000cea:	2001      	movls	r0, #1
 8000cec:	2000      	movhi	r0, #0
 8000cee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000cf2:	bf00      	nop

08000cf4 <__aeabi_dcmpge>:
 8000cf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000cf8:	f7ff ffce 	bl	8000c98 <__aeabi_cdrcmple>
 8000cfc:	bf94      	ite	ls
 8000cfe:	2001      	movls	r0, #1
 8000d00:	2000      	movhi	r0, #0
 8000d02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d06:	bf00      	nop

08000d08 <__aeabi_dcmpgt>:
 8000d08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d0c:	f7ff ffc4 	bl	8000c98 <__aeabi_cdrcmple>
 8000d10:	bf34      	ite	cc
 8000d12:	2001      	movcc	r0, #1
 8000d14:	2000      	movcs	r0, #0
 8000d16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d1a:	bf00      	nop

08000d1c <__aeabi_dcmpun>:
 8000d1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d24:	d102      	bne.n	8000d2c <__aeabi_dcmpun+0x10>
 8000d26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d2a:	d10a      	bne.n	8000d42 <__aeabi_dcmpun+0x26>
 8000d2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d34:	d102      	bne.n	8000d3c <__aeabi_dcmpun+0x20>
 8000d36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d3a:	d102      	bne.n	8000d42 <__aeabi_dcmpun+0x26>
 8000d3c:	f04f 0000 	mov.w	r0, #0
 8000d40:	4770      	bx	lr
 8000d42:	f04f 0001 	mov.w	r0, #1
 8000d46:	4770      	bx	lr

08000d48 <__aeabi_d2iz>:
 8000d48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d50:	d215      	bcs.n	8000d7e <__aeabi_d2iz+0x36>
 8000d52:	d511      	bpl.n	8000d78 <__aeabi_d2iz+0x30>
 8000d54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d5c:	d912      	bls.n	8000d84 <__aeabi_d2iz+0x3c>
 8000d5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000d6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000d6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000d72:	bf18      	it	ne
 8000d74:	4240      	negne	r0, r0
 8000d76:	4770      	bx	lr
 8000d78:	f04f 0000 	mov.w	r0, #0
 8000d7c:	4770      	bx	lr
 8000d7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000d82:	d105      	bne.n	8000d90 <__aeabi_d2iz+0x48>
 8000d84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000d88:	bf08      	it	eq
 8000d8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d8e:	4770      	bx	lr
 8000d90:	f04f 0000 	mov.w	r0, #0
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2uiz>:
 8000d98:	004a      	lsls	r2, r1, #1
 8000d9a:	d211      	bcs.n	8000dc0 <__aeabi_d2uiz+0x28>
 8000d9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000da0:	d211      	bcs.n	8000dc6 <__aeabi_d2uiz+0x2e>
 8000da2:	d50d      	bpl.n	8000dc0 <__aeabi_d2uiz+0x28>
 8000da4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000da8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dac:	d40e      	bmi.n	8000dcc <__aeabi_d2uiz+0x34>
 8000dae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000db2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000dba:	fa23 f002 	lsr.w	r0, r3, r2
 8000dbe:	4770      	bx	lr
 8000dc0:	f04f 0000 	mov.w	r0, #0
 8000dc4:	4770      	bx	lr
 8000dc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000dca:	d102      	bne.n	8000dd2 <__aeabi_d2uiz+0x3a>
 8000dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd0:	4770      	bx	lr
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	4770      	bx	lr

08000dd8 <__aeabi_d2f>:
 8000dd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ddc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000de0:	bf24      	itt	cs
 8000de2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000de6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000dea:	d90d      	bls.n	8000e08 <__aeabi_d2f+0x30>
 8000dec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000df0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000df4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000df8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000dfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000e00:	bf08      	it	eq
 8000e02:	f020 0001 	biceq.w	r0, r0, #1
 8000e06:	4770      	bx	lr
 8000e08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000e0c:	d121      	bne.n	8000e52 <__aeabi_d2f+0x7a>
 8000e0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000e12:	bfbc      	itt	lt
 8000e14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000e18:	4770      	bxlt	lr
 8000e1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000e1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000e22:	f1c2 0218 	rsb	r2, r2, #24
 8000e26:	f1c2 0c20 	rsb	ip, r2, #32
 8000e2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000e2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000e32:	bf18      	it	ne
 8000e34:	f040 0001 	orrne.w	r0, r0, #1
 8000e38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000e40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000e44:	ea40 000c 	orr.w	r0, r0, ip
 8000e48:	fa23 f302 	lsr.w	r3, r3, r2
 8000e4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000e50:	e7cc      	b.n	8000dec <__aeabi_d2f+0x14>
 8000e52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000e56:	d107      	bne.n	8000e68 <__aeabi_d2f+0x90>
 8000e58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000e5c:	bf1e      	ittt	ne
 8000e5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000e62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000e66:	4770      	bxne	lr
 8000e68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000e6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_uldivmod>:
 8000e78:	b953      	cbnz	r3, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7a:	b94a      	cbnz	r2, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	bf08      	it	eq
 8000e80:	2800      	cmpeq	r0, #0
 8000e82:	bf1c      	itt	ne
 8000e84:	f04f 31ff 	movne.w	r1, #4294967295
 8000e88:	f04f 30ff 	movne.w	r0, #4294967295
 8000e8c:	f000 b972 	b.w	8001174 <__aeabi_idiv0>
 8000e90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e98:	f000 f806 	bl	8000ea8 <__udivmoddi4>
 8000e9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea4:	b004      	add	sp, #16
 8000ea6:	4770      	bx	lr

08000ea8 <__udivmoddi4>:
 8000ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eac:	9e08      	ldr	r6, [sp, #32]
 8000eae:	4604      	mov	r4, r0
 8000eb0:	4688      	mov	r8, r1
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d14b      	bne.n	8000f4e <__udivmoddi4+0xa6>
 8000eb6:	428a      	cmp	r2, r1
 8000eb8:	4615      	mov	r5, r2
 8000eba:	d967      	bls.n	8000f8c <__udivmoddi4+0xe4>
 8000ebc:	fab2 f282 	clz	r2, r2
 8000ec0:	b14a      	cbz	r2, 8000ed6 <__udivmoddi4+0x2e>
 8000ec2:	f1c2 0720 	rsb	r7, r2, #32
 8000ec6:	fa01 f302 	lsl.w	r3, r1, r2
 8000eca:	fa20 f707 	lsr.w	r7, r0, r7
 8000ece:	4095      	lsls	r5, r2
 8000ed0:	ea47 0803 	orr.w	r8, r7, r3
 8000ed4:	4094      	lsls	r4, r2
 8000ed6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eda:	0c23      	lsrs	r3, r4, #16
 8000edc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ee0:	fa1f fc85 	uxth.w	ip, r5
 8000ee4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ee8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000eec:	fb07 f10c 	mul.w	r1, r7, ip
 8000ef0:	4299      	cmp	r1, r3
 8000ef2:	d909      	bls.n	8000f08 <__udivmoddi4+0x60>
 8000ef4:	18eb      	adds	r3, r5, r3
 8000ef6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000efa:	f080 811b 	bcs.w	8001134 <__udivmoddi4+0x28c>
 8000efe:	4299      	cmp	r1, r3
 8000f00:	f240 8118 	bls.w	8001134 <__udivmoddi4+0x28c>
 8000f04:	3f02      	subs	r7, #2
 8000f06:	442b      	add	r3, r5
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000f1c:	45a4      	cmp	ip, r4
 8000f1e:	d909      	bls.n	8000f34 <__udivmoddi4+0x8c>
 8000f20:	192c      	adds	r4, r5, r4
 8000f22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f26:	f080 8107 	bcs.w	8001138 <__udivmoddi4+0x290>
 8000f2a:	45a4      	cmp	ip, r4
 8000f2c:	f240 8104 	bls.w	8001138 <__udivmoddi4+0x290>
 8000f30:	3802      	subs	r0, #2
 8000f32:	442c      	add	r4, r5
 8000f34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000f38:	eba4 040c 	sub.w	r4, r4, ip
 8000f3c:	2700      	movs	r7, #0
 8000f3e:	b11e      	cbz	r6, 8000f48 <__udivmoddi4+0xa0>
 8000f40:	40d4      	lsrs	r4, r2
 8000f42:	2300      	movs	r3, #0
 8000f44:	e9c6 4300 	strd	r4, r3, [r6]
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d909      	bls.n	8000f66 <__udivmoddi4+0xbe>
 8000f52:	2e00      	cmp	r6, #0
 8000f54:	f000 80eb 	beq.w	800112e <__udivmoddi4+0x286>
 8000f58:	2700      	movs	r7, #0
 8000f5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000f5e:	4638      	mov	r0, r7
 8000f60:	4639      	mov	r1, r7
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	fab3 f783 	clz	r7, r3
 8000f6a:	2f00      	cmp	r7, #0
 8000f6c:	d147      	bne.n	8000ffe <__udivmoddi4+0x156>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d302      	bcc.n	8000f78 <__udivmoddi4+0xd0>
 8000f72:	4282      	cmp	r2, r0
 8000f74:	f200 80fa 	bhi.w	800116c <__udivmoddi4+0x2c4>
 8000f78:	1a84      	subs	r4, r0, r2
 8000f7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f7e:	2001      	movs	r0, #1
 8000f80:	4698      	mov	r8, r3
 8000f82:	2e00      	cmp	r6, #0
 8000f84:	d0e0      	beq.n	8000f48 <__udivmoddi4+0xa0>
 8000f86:	e9c6 4800 	strd	r4, r8, [r6]
 8000f8a:	e7dd      	b.n	8000f48 <__udivmoddi4+0xa0>
 8000f8c:	b902      	cbnz	r2, 8000f90 <__udivmoddi4+0xe8>
 8000f8e:	deff      	udf	#255	; 0xff
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	f040 808f 	bne.w	80010b8 <__udivmoddi4+0x210>
 8000f9a:	1b49      	subs	r1, r1, r5
 8000f9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fa0:	fa1f f885 	uxth.w	r8, r5
 8000fa4:	2701      	movs	r7, #1
 8000fa6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000faa:	0c23      	lsrs	r3, r4, #16
 8000fac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000fb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fb4:	fb08 f10c 	mul.w	r1, r8, ip
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d907      	bls.n	8000fcc <__udivmoddi4+0x124>
 8000fbc:	18eb      	adds	r3, r5, r3
 8000fbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000fc2:	d202      	bcs.n	8000fca <__udivmoddi4+0x122>
 8000fc4:	4299      	cmp	r1, r3
 8000fc6:	f200 80cd 	bhi.w	8001164 <__udivmoddi4+0x2bc>
 8000fca:	4684      	mov	ip, r0
 8000fcc:	1a59      	subs	r1, r3, r1
 8000fce:	b2a3      	uxth	r3, r4
 8000fd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000fd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000fdc:	fb08 f800 	mul.w	r8, r8, r0
 8000fe0:	45a0      	cmp	r8, r4
 8000fe2:	d907      	bls.n	8000ff4 <__udivmoddi4+0x14c>
 8000fe4:	192c      	adds	r4, r5, r4
 8000fe6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000fea:	d202      	bcs.n	8000ff2 <__udivmoddi4+0x14a>
 8000fec:	45a0      	cmp	r8, r4
 8000fee:	f200 80b6 	bhi.w	800115e <__udivmoddi4+0x2b6>
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	eba4 0408 	sub.w	r4, r4, r8
 8000ff8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ffc:	e79f      	b.n	8000f3e <__udivmoddi4+0x96>
 8000ffe:	f1c7 0c20 	rsb	ip, r7, #32
 8001002:	40bb      	lsls	r3, r7
 8001004:	fa22 fe0c 	lsr.w	lr, r2, ip
 8001008:	ea4e 0e03 	orr.w	lr, lr, r3
 800100c:	fa01 f407 	lsl.w	r4, r1, r7
 8001010:	fa20 f50c 	lsr.w	r5, r0, ip
 8001014:	fa21 f30c 	lsr.w	r3, r1, ip
 8001018:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800101c:	4325      	orrs	r5, r4
 800101e:	fbb3 f9f8 	udiv	r9, r3, r8
 8001022:	0c2c      	lsrs	r4, r5, #16
 8001024:	fb08 3319 	mls	r3, r8, r9, r3
 8001028:	fa1f fa8e 	uxth.w	sl, lr
 800102c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8001030:	fb09 f40a 	mul.w	r4, r9, sl
 8001034:	429c      	cmp	r4, r3
 8001036:	fa02 f207 	lsl.w	r2, r2, r7
 800103a:	fa00 f107 	lsl.w	r1, r0, r7
 800103e:	d90b      	bls.n	8001058 <__udivmoddi4+0x1b0>
 8001040:	eb1e 0303 	adds.w	r3, lr, r3
 8001044:	f109 30ff 	add.w	r0, r9, #4294967295
 8001048:	f080 8087 	bcs.w	800115a <__udivmoddi4+0x2b2>
 800104c:	429c      	cmp	r4, r3
 800104e:	f240 8084 	bls.w	800115a <__udivmoddi4+0x2b2>
 8001052:	f1a9 0902 	sub.w	r9, r9, #2
 8001056:	4473      	add	r3, lr
 8001058:	1b1b      	subs	r3, r3, r4
 800105a:	b2ad      	uxth	r5, r5
 800105c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001060:	fb08 3310 	mls	r3, r8, r0, r3
 8001064:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8001068:	fb00 fa0a 	mul.w	sl, r0, sl
 800106c:	45a2      	cmp	sl, r4
 800106e:	d908      	bls.n	8001082 <__udivmoddi4+0x1da>
 8001070:	eb1e 0404 	adds.w	r4, lr, r4
 8001074:	f100 33ff 	add.w	r3, r0, #4294967295
 8001078:	d26b      	bcs.n	8001152 <__udivmoddi4+0x2aa>
 800107a:	45a2      	cmp	sl, r4
 800107c:	d969      	bls.n	8001152 <__udivmoddi4+0x2aa>
 800107e:	3802      	subs	r0, #2
 8001080:	4474      	add	r4, lr
 8001082:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001086:	fba0 8902 	umull	r8, r9, r0, r2
 800108a:	eba4 040a 	sub.w	r4, r4, sl
 800108e:	454c      	cmp	r4, r9
 8001090:	46c2      	mov	sl, r8
 8001092:	464b      	mov	r3, r9
 8001094:	d354      	bcc.n	8001140 <__udivmoddi4+0x298>
 8001096:	d051      	beq.n	800113c <__udivmoddi4+0x294>
 8001098:	2e00      	cmp	r6, #0
 800109a:	d069      	beq.n	8001170 <__udivmoddi4+0x2c8>
 800109c:	ebb1 050a 	subs.w	r5, r1, sl
 80010a0:	eb64 0403 	sbc.w	r4, r4, r3
 80010a4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80010a8:	40fd      	lsrs	r5, r7
 80010aa:	40fc      	lsrs	r4, r7
 80010ac:	ea4c 0505 	orr.w	r5, ip, r5
 80010b0:	e9c6 5400 	strd	r5, r4, [r6]
 80010b4:	2700      	movs	r7, #0
 80010b6:	e747      	b.n	8000f48 <__udivmoddi4+0xa0>
 80010b8:	f1c2 0320 	rsb	r3, r2, #32
 80010bc:	fa20 f703 	lsr.w	r7, r0, r3
 80010c0:	4095      	lsls	r5, r2
 80010c2:	fa01 f002 	lsl.w	r0, r1, r2
 80010c6:	fa21 f303 	lsr.w	r3, r1, r3
 80010ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80010ce:	4338      	orrs	r0, r7
 80010d0:	0c01      	lsrs	r1, r0, #16
 80010d2:	fbb3 f7fe 	udiv	r7, r3, lr
 80010d6:	fa1f f885 	uxth.w	r8, r5
 80010da:	fb0e 3317 	mls	r3, lr, r7, r3
 80010de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80010e2:	fb07 f308 	mul.w	r3, r7, r8
 80010e6:	428b      	cmp	r3, r1
 80010e8:	fa04 f402 	lsl.w	r4, r4, r2
 80010ec:	d907      	bls.n	80010fe <__udivmoddi4+0x256>
 80010ee:	1869      	adds	r1, r5, r1
 80010f0:	f107 3cff 	add.w	ip, r7, #4294967295
 80010f4:	d22f      	bcs.n	8001156 <__udivmoddi4+0x2ae>
 80010f6:	428b      	cmp	r3, r1
 80010f8:	d92d      	bls.n	8001156 <__udivmoddi4+0x2ae>
 80010fa:	3f02      	subs	r7, #2
 80010fc:	4429      	add	r1, r5
 80010fe:	1acb      	subs	r3, r1, r3
 8001100:	b281      	uxth	r1, r0
 8001102:	fbb3 f0fe 	udiv	r0, r3, lr
 8001106:	fb0e 3310 	mls	r3, lr, r0, r3
 800110a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800110e:	fb00 f308 	mul.w	r3, r0, r8
 8001112:	428b      	cmp	r3, r1
 8001114:	d907      	bls.n	8001126 <__udivmoddi4+0x27e>
 8001116:	1869      	adds	r1, r5, r1
 8001118:	f100 3cff 	add.w	ip, r0, #4294967295
 800111c:	d217      	bcs.n	800114e <__udivmoddi4+0x2a6>
 800111e:	428b      	cmp	r3, r1
 8001120:	d915      	bls.n	800114e <__udivmoddi4+0x2a6>
 8001122:	3802      	subs	r0, #2
 8001124:	4429      	add	r1, r5
 8001126:	1ac9      	subs	r1, r1, r3
 8001128:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800112c:	e73b      	b.n	8000fa6 <__udivmoddi4+0xfe>
 800112e:	4637      	mov	r7, r6
 8001130:	4630      	mov	r0, r6
 8001132:	e709      	b.n	8000f48 <__udivmoddi4+0xa0>
 8001134:	4607      	mov	r7, r0
 8001136:	e6e7      	b.n	8000f08 <__udivmoddi4+0x60>
 8001138:	4618      	mov	r0, r3
 800113a:	e6fb      	b.n	8000f34 <__udivmoddi4+0x8c>
 800113c:	4541      	cmp	r1, r8
 800113e:	d2ab      	bcs.n	8001098 <__udivmoddi4+0x1f0>
 8001140:	ebb8 0a02 	subs.w	sl, r8, r2
 8001144:	eb69 020e 	sbc.w	r2, r9, lr
 8001148:	3801      	subs	r0, #1
 800114a:	4613      	mov	r3, r2
 800114c:	e7a4      	b.n	8001098 <__udivmoddi4+0x1f0>
 800114e:	4660      	mov	r0, ip
 8001150:	e7e9      	b.n	8001126 <__udivmoddi4+0x27e>
 8001152:	4618      	mov	r0, r3
 8001154:	e795      	b.n	8001082 <__udivmoddi4+0x1da>
 8001156:	4667      	mov	r7, ip
 8001158:	e7d1      	b.n	80010fe <__udivmoddi4+0x256>
 800115a:	4681      	mov	r9, r0
 800115c:	e77c      	b.n	8001058 <__udivmoddi4+0x1b0>
 800115e:	3802      	subs	r0, #2
 8001160:	442c      	add	r4, r5
 8001162:	e747      	b.n	8000ff4 <__udivmoddi4+0x14c>
 8001164:	f1ac 0c02 	sub.w	ip, ip, #2
 8001168:	442b      	add	r3, r5
 800116a:	e72f      	b.n	8000fcc <__udivmoddi4+0x124>
 800116c:	4638      	mov	r0, r7
 800116e:	e708      	b.n	8000f82 <__udivmoddi4+0xda>
 8001170:	4637      	mov	r7, r6
 8001172:	e6e9      	b.n	8000f48 <__udivmoddi4+0xa0>

08001174 <__aeabi_idiv0>:
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <kalmanFilterC>:
#include "main.h"
#include "math.h"
#include "lab1util.h"
#include "cmsis_gcc.h"

int kalmanFilterC(float* InputArray, float* OutputArray, struct KalmanState* kstate, int length, int analysis){
 8001178:	b5b0      	push	{r4, r5, r7, lr}
 800117a:	b098      	sub	sp, #96	; 0x60
 800117c:	af02      	add	r7, sp, #8
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
 8001184:	603b      	str	r3, [r7, #0]
 8001186:	466b      	mov	r3, sp
 8001188:	461d      	mov	r5, r3
	float avgIn = 0.0;
 800118a:	f04f 0300 	mov.w	r3, #0
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
	float avgOut = 0.0;
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	64fb      	str	r3, [r7, #76]	; 0x4c
	float avgDiff = 0.0;
 8001196:	f04f 0300 	mov.w	r3, #0
 800119a:	653b      	str	r3, [r7, #80]	; 0x50
	float stdDiff = 0.0;
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	647b      	str	r3, [r7, #68]	; 0x44
	float varDiff = 0.0;
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
	float corrCoef = 0.0;
 80011a8:	f04f 0300 	mov.w	r3, #0
 80011ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	// a. Subtraction of original and data obtained by Kalman filter tracking.
	float diffArray[length];
 80011ae:	6838      	ldr	r0, [r7, #0]
 80011b0:	1e43      	subs	r3, r0, #1
 80011b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80011b4:	4603      	mov	r3, r0
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	f04f 0300 	mov.w	r3, #0
 80011c0:	f04f 0400 	mov.w	r4, #0
 80011c4:	0154      	lsls	r4, r2, #5
 80011c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011ca:	014b      	lsls	r3, r1, #5
 80011cc:	4603      	mov	r3, r0
 80011ce:	4619      	mov	r1, r3
 80011d0:	f04f 0200 	mov.w	r2, #0
 80011d4:	f04f 0300 	mov.w	r3, #0
 80011d8:	f04f 0400 	mov.w	r4, #0
 80011dc:	0154      	lsls	r4, r2, #5
 80011de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011e2:	014b      	lsls	r3, r1, #5
 80011e4:	4603      	mov	r3, r0
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	3303      	adds	r3, #3
 80011ea:	3307      	adds	r3, #7
 80011ec:	08db      	lsrs	r3, r3, #3
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	ebad 0d03 	sub.w	sp, sp, r3
 80011f4:	ab02      	add	r3, sp, #8
 80011f6:	3303      	adds	r3, #3
 80011f8:	089b      	lsrs	r3, r3, #2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	637b      	str	r3, [r7, #52]	; 0x34
	float corrArray[length*2-1];
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	1e58      	subs	r0, r3, #1
 8001204:	1e43      	subs	r3, r0, #1
 8001206:	633b      	str	r3, [r7, #48]	; 0x30
 8001208:	4603      	mov	r3, r0
 800120a:	4619      	mov	r1, r3
 800120c:	f04f 0200 	mov.w	r2, #0
 8001210:	f04f 0300 	mov.w	r3, #0
 8001214:	f04f 0400 	mov.w	r4, #0
 8001218:	0154      	lsls	r4, r2, #5
 800121a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800121e:	014b      	lsls	r3, r1, #5
 8001220:	4603      	mov	r3, r0
 8001222:	4619      	mov	r1, r3
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	f04f 0300 	mov.w	r3, #0
 800122c:	f04f 0400 	mov.w	r4, #0
 8001230:	0154      	lsls	r4, r2, #5
 8001232:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001236:	014b      	lsls	r3, r1, #5
 8001238:	4603      	mov	r3, r0
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	3303      	adds	r3, #3
 800123e:	3307      	adds	r3, #7
 8001240:	08db      	lsrs	r3, r3, #3
 8001242:	00db      	lsls	r3, r3, #3
 8001244:	ebad 0d03 	sub.w	sp, sp, r3
 8001248:	ab02      	add	r3, sp, #8
 800124a:	3303      	adds	r3, #3
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
	float convArray[length*2-1];
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	1e58      	subs	r0, r3, #1
 8001258:	1e43      	subs	r3, r0, #1
 800125a:	62bb      	str	r3, [r7, #40]	; 0x28
 800125c:	4603      	mov	r3, r0
 800125e:	4619      	mov	r1, r3
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	f04f 0400 	mov.w	r4, #0
 800126c:	0154      	lsls	r4, r2, #5
 800126e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001272:	014b      	lsls	r3, r1, #5
 8001274:	4603      	mov	r3, r0
 8001276:	4619      	mov	r1, r3
 8001278:	f04f 0200 	mov.w	r2, #0
 800127c:	f04f 0300 	mov.w	r3, #0
 8001280:	f04f 0400 	mov.w	r4, #0
 8001284:	0154      	lsls	r4, r2, #5
 8001286:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800128a:	014b      	lsls	r3, r1, #5
 800128c:	4603      	mov	r3, r0
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	3303      	adds	r3, #3
 8001292:	3307      	adds	r3, #7
 8001294:	08db      	lsrs	r3, r3, #3
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	ebad 0d03 	sub.w	sp, sp, r3
 800129c:	ab02      	add	r3, sp, #8
 800129e:	3303      	adds	r3, #3
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	009b      	lsls	r3, r3, #2
 80012a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80012a6:	eef1 3a10 	vmrs	r3, fpscr
 80012aa:	617b      	str	r3, [r7, #20]
  return(result);
 80012ac:	697b      	ldr	r3, [r7, #20]

	__set_FPSCR(__get_FPSCR() & 0xFFFFFFF0);
 80012ae:	f023 030f 	bic.w	r3, r3, #15
 80012b2:	61bb      	str	r3, [r7, #24]
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	eee1 3a10 	vmsr	fpscr, r3
	int status = 0;
 80012ba:	2300      	movs	r3, #0
 80012bc:	623b      	str	r3, [r7, #32]

	for(int i = 0; i < length; i++){
 80012be:	2300      	movs	r3, #0
 80012c0:	657b      	str	r3, [r7, #84]	; 0x54
 80012c2:	e054      	b.n	800136e <kalmanFilterC+0x1f6>
		float updateResult = kalmanUpdateC(kstate, InputArray[i]);
 80012c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4413      	add	r3, r2
 80012cc:	edd3 7a00 	vldr	s15, [r3]
 80012d0:	eeb0 0a67 	vmov.f32	s0, s15
 80012d4:	6878      	ldr	r0, [r7, #4]
 80012d6:	f000 fdad 	bl	8001e34 <kalmanUpdateC>
 80012da:	ed87 0a07 	vstr	s0, [r7, #28]
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80012de:	eef1 3a10 	vmrs	r3, fpscr
 80012e2:	613b      	str	r3, [r7, #16]
  return(result);
 80012e4:	693b      	ldr	r3, [r7, #16]
		status = __get_FPSCR() & 0x0000000F;
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	623b      	str	r3, [r7, #32]
		if (status != 0)
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <kalmanFilterC+0x17e>
			return status;
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	e098      	b.n	8001428 <kalmanFilterC+0x2b0>
		OutputArray[i] = updateResult;
 80012f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	4413      	add	r3, r2
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	601a      	str	r2, [r3, #0]

		if (analysis != 0){
 8001302:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001304:	2b00      	cmp	r3, #0
 8001306:	d02f      	beq.n	8001368 <kalmanFilterC+0x1f0>
			diffArray[i] = updateResult - InputArray[i];
 8001308:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	4413      	add	r3, r2
 8001310:	edd3 7a00 	vldr	s15, [r3]
 8001314:	ed97 7a07 	vldr	s14, [r7, #28]
 8001318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800131c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800131e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4413      	add	r3, r2
 8001324:	edc3 7a00 	vstr	s15, [r3]
			avgIn += InputArray[i];
 8001328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	68fa      	ldr	r2, [r7, #12]
 800132e:	4413      	add	r3, r2
 8001330:	edd3 7a00 	vldr	s15, [r3]
 8001334:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800133c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			avgOut += updateResult;
 8001340:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001344:	edd7 7a07 	vldr	s15, [r7, #28]
 8001348:	ee77 7a27 	vadd.f32	s15, s14, s15
 800134c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			avgDiff += diffArray[i];
 8001350:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001352:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4413      	add	r3, r2
 8001358:	edd3 7a00 	vldr	s15, [r3]
 800135c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001360:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001364:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
	for(int i = 0; i < length; i++){
 8001368:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800136a:	3301      	adds	r3, #1
 800136c:	657b      	str	r3, [r7, #84]	; 0x54
 800136e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	dba6      	blt.n	80012c4 <kalmanFilterC+0x14c>
		}

	}

	if (analysis != 0){
 8001376:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001378:	2b00      	cmp	r3, #0
 800137a:	d054      	beq.n	8001426 <kalmanFilterC+0x2ae>
		// b. Calculation of the standard deviation and the average of the difference obtained in a).
		avgIn = avgIn/(float)length;
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	ee07 3a90 	vmov	s15, r3
 8001382:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001386:	edd7 6a12 	vldr	s13, [r7, #72]	; 0x48
 800138a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800138e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		avgOut = avgOut/(float)length;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	ee07 3a90 	vmov	s15, r3
 8001398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800139c:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 80013a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		avgDiff = avgDiff/(float)length;
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	ee07 3a90 	vmov	s15, r3
 80013ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013b2:	edd7 6a14 	vldr	s13, [r7, #80]	; 0x50
 80013b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013ba:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50

		varDiff = sumSqDev(diffArray, avgDiff, length) / (float)length;
 80013be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013c0:	6839      	ldr	r1, [r7, #0]
 80013c2:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 f936 	bl	8001638 <sumSqDev>
 80013cc:	eef0 6a40 	vmov.f32	s13, s0
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013de:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		stdDiff = powf(varDiff, 0.5);
 80013e2:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80013e6:	ed97 0a10 	vldr	s0, [r7, #64]	; 0x40
 80013ea:	f009 f867 	bl	800a4bc <powf>
 80013ee:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44

		// c. Calculation of the correlation between the original and tracked vectors.
		corrCoef = corrCoefC(InputArray, OutputArray, avgIn, avgOut, length);
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	edd7 0a13 	vldr	s1, [r7, #76]	; 0x4c
 80013f8:	ed97 0a12 	vldr	s0, [r7, #72]	; 0x48
 80013fc:	68b9      	ldr	r1, [r7, #8]
 80013fe:	68f8      	ldr	r0, [r7, #12]
 8001400:	f000 f94e 	bl	80016a0 <corrCoefC>
 8001404:	ed87 0a0f 	vstr	s0, [r7, #60]	; 0x3c
		status = corrC(InputArray, OutputArray, corrArray, length);
 8001408:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	68b9      	ldr	r1, [r7, #8]
 800140e:	68f8      	ldr	r0, [r7, #12]
 8001410:	f000 f9ca 	bl	80017a8 <corrC>
 8001414:	6238      	str	r0, [r7, #32]

		// d. Calculation of the convolution between the two vectors.
		convC(InputArray, OutputArray, convArray, length, length);
 8001416:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68b9      	ldr	r1, [r7, #8]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 fa35 	bl	8001890 <convC>
	}
	return 0;
 8001426:	2300      	movs	r3, #0
 8001428:	46ad      	mov	sp, r5
}
 800142a:	4618      	mov	r0, r3
 800142c:	3758      	adds	r7, #88	; 0x58
 800142e:	46bd      	mov	sp, r7
 8001430:	bdb0      	pop	{r4, r5, r7, pc}

08001432 <kalmanFilterAinC>:


int kalmanFilterAinC(float* InputArray, float* OutputArray, struct KalmanState* kstate, int length, int analysis){
 8001432:	b5b0      	push	{r4, r5, r7, lr}
 8001434:	b096      	sub	sp, #88	; 0x58
 8001436:	af04      	add	r7, sp, #16
 8001438:	60f8      	str	r0, [r7, #12]
 800143a:	60b9      	str	r1, [r7, #8]
 800143c:	607a      	str	r2, [r7, #4]
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	466b      	mov	r3, sp
 8001442:	461d      	mov	r5, r3
	// a. Subtraction of original and data obtained by Kalman filter tracking.
	float diffArray[length];
 8001444:	6838      	ldr	r0, [r7, #0]
 8001446:	1e43      	subs	r3, r0, #1
 8001448:	647b      	str	r3, [r7, #68]	; 0x44
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	f04f 0400 	mov.w	r4, #0
 800145a:	0154      	lsls	r4, r2, #5
 800145c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001460:	014b      	lsls	r3, r1, #5
 8001462:	4603      	mov	r3, r0
 8001464:	4619      	mov	r1, r3
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	f04f 0400 	mov.w	r4, #0
 8001472:	0154      	lsls	r4, r2, #5
 8001474:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001478:	014b      	lsls	r3, r1, #5
 800147a:	4603      	mov	r3, r0
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	3303      	adds	r3, #3
 8001480:	3307      	adds	r3, #7
 8001482:	08db      	lsrs	r3, r3, #3
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	ebad 0d03 	sub.w	sp, sp, r3
 800148a:	ab04      	add	r3, sp, #16
 800148c:	3303      	adds	r3, #3
 800148e:	089b      	lsrs	r3, r3, #2
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	63fb      	str	r3, [r7, #60]	; 0x3c

	// b. Calculation of the standard deviation and the average of the difference obtained in a).
	float avgDiff = 0.0;
 8001494:	f04f 0300 	mov.w	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
	float stdDiff = 0.0;
 800149a:	f04f 0300 	mov.w	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
	float varDiff = 0.0;
 80014a0:	f04f 0300 	mov.w	r3, #0
 80014a4:	63bb      	str	r3, [r7, #56]	; 0x38

	// c. Correlation
	float avgIn = 0.0;
 80014a6:	f04f 0300 	mov.w	r3, #0
 80014aa:	61fb      	str	r3, [r7, #28]
	float avgOut = 0.0;
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
	float corrCoef = 0.0;
 80014b2:	f04f 0300 	mov.w	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

	float convArray[length*2-1];
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	1e58      	subs	r0, r3, #1
 80014be:	1e43      	subs	r3, r0, #1
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
 80014c2:	4603      	mov	r3, r0
 80014c4:	4619      	mov	r1, r3
 80014c6:	f04f 0200 	mov.w	r2, #0
 80014ca:	f04f 0300 	mov.w	r3, #0
 80014ce:	f04f 0400 	mov.w	r4, #0
 80014d2:	0154      	lsls	r4, r2, #5
 80014d4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014d8:	014b      	lsls	r3, r1, #5
 80014da:	4603      	mov	r3, r0
 80014dc:	4619      	mov	r1, r3
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	f04f 0400 	mov.w	r4, #0
 80014ea:	0154      	lsls	r4, r2, #5
 80014ec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014f0:	014b      	lsls	r3, r1, #5
 80014f2:	4603      	mov	r3, r0
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	3303      	adds	r3, #3
 80014f8:	3307      	adds	r3, #7
 80014fa:	08db      	lsrs	r3, r3, #3
 80014fc:	00db      	lsls	r3, r3, #3
 80014fe:	ebad 0d03 	sub.w	sp, sp, r3
 8001502:	ab04      	add	r3, sp, #16
 8001504:	3303      	adds	r3, #3
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	633b      	str	r3, [r7, #48]	; 0x30
	float corrArray[length*2-1];
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	005b      	lsls	r3, r3, #1
 8001510:	1e58      	subs	r0, r3, #1
 8001512:	1e43      	subs	r3, r0, #1
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001516:	4603      	mov	r3, r0
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 0200 	mov.w	r2, #0
 800151e:	f04f 0300 	mov.w	r3, #0
 8001522:	f04f 0400 	mov.w	r4, #0
 8001526:	0154      	lsls	r4, r2, #5
 8001528:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800152c:	014b      	lsls	r3, r1, #5
 800152e:	4603      	mov	r3, r0
 8001530:	4619      	mov	r1, r3
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	f04f 0400 	mov.w	r4, #0
 800153e:	0154      	lsls	r4, r2, #5
 8001540:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001544:	014b      	lsls	r3, r1, #5
 8001546:	4603      	mov	r3, r0
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	3303      	adds	r3, #3
 800154c:	3307      	adds	r3, #7
 800154e:	08db      	lsrs	r3, r3, #3
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	ebad 0d03 	sub.w	sp, sp, r3
 8001556:	ab04      	add	r3, sp, #16
 8001558:	3303      	adds	r3, #3
 800155a:	089b      	lsrs	r3, r3, #2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28

	int status = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	643b      	str	r3, [r7, #64]	; 0x40

	if (analysis == 0){
 8001564:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001566:	2b00      	cmp	r3, #0
 8001568:	d10b      	bne.n	8001582 <kalmanFilterAinC+0x150>
		status = kalmanFilterA_noStats(InputArray, OutputArray, kstate, length);
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	68b9      	ldr	r1, [r7, #8]
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7fe fe9f 	bl	80002b4 <kalmanFilterA_noStats>
 8001576:	6438      	str	r0, [r7, #64]	; 0x40
		if (status != 0)
 8001578:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800157a:	2b00      	cmp	r3, #0
 800157c:	d056      	beq.n	800162c <kalmanFilterAinC+0x1fa>
			return status;
 800157e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001580:	e055      	b.n	800162e <kalmanFilterAinC+0x1fc>
	}
	else {
		status = kalmanFilterA(InputArray, OutputArray, kstate, length,
 8001582:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001584:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001588:	9203      	str	r2, [sp, #12]
 800158a:	f107 0218 	add.w	r2, r7, #24
 800158e:	9202      	str	r2, [sp, #8]
 8001590:	f107 021c 	add.w	r2, r7, #28
 8001594:	9201      	str	r2, [sp, #4]
 8001596:	9300      	str	r3, [sp, #0]
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f7fe fe2e 	bl	8000200 <kalmanFilterA>
 80015a4:	6438      	str	r0, [r7, #64]	; 0x40
			diffArray, &avgIn, &avgOut, &avgDiff);
		if (status != 0)
 80015a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <kalmanFilterAinC+0x17e>
			return status;
 80015ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ae:	e03e      	b.n	800162e <kalmanFilterAinC+0x1fc>

		status = kalmanStatsA(InputArray, OutputArray, diffArray, length,
 80015b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80015b2:	edd7 7a07 	vldr	s15, [r7, #28]
 80015b6:	ed97 7a06 	vldr	s14, [r7, #24]
 80015ba:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	9301      	str	r3, [sp, #4]
 80015c4:	f107 0320 	add.w	r3, r7, #32
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	eeb0 1a66 	vmov.f32	s2, s13
 80015ce:	eef0 0a47 	vmov.f32	s1, s14
 80015d2:	eeb0 0a67 	vmov.f32	s0, s15
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	68b9      	ldr	r1, [r7, #8]
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f7fe fe9d 	bl	800031a <kalmanStatsA>
 80015e0:	6438      	str	r0, [r7, #64]	; 0x40
					avgIn, avgOut, avgDiff,
					&stdDiff, &corrCoef);
		if (status != 0)
 80015e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <kalmanFilterAinC+0x1ba>
			return status;
 80015e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80015ea:	e020      	b.n	800162e <kalmanFilterAinC+0x1fc>

		// c. Calculation of the correlation between the original and tracked vectors.
		corrCoef = corrCoefC(InputArray, OutputArray, avgIn, avgOut, length);
 80015ec:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f0:	ed97 7a06 	vldr	s14, [r7, #24]
 80015f4:	683a      	ldr	r2, [r7, #0]
 80015f6:	eef0 0a47 	vmov.f32	s1, s14
 80015fa:	eeb0 0a67 	vmov.f32	s0, s15
 80015fe:	68b9      	ldr	r1, [r7, #8]
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f84d 	bl	80016a0 <corrCoefC>
 8001606:	eef0 7a40 	vmov.f32	s15, s0
 800160a:	edc7 7a05 	vstr	s15, [r7, #20]
		status = corrC(InputArray, OutputArray, corrArray, length);
 800160e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68b9      	ldr	r1, [r7, #8]
 8001614:	68f8      	ldr	r0, [r7, #12]
 8001616:	f000 f8c7 	bl	80017a8 <corrC>
 800161a:	6438      	str	r0, [r7, #64]	; 0x40

		// d. Calculation of the convolution between the two vectors.
		convC(InputArray, OutputArray, convArray, length, length);
 800161c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	68b9      	ldr	r1, [r7, #8]
 8001626:	68f8      	ldr	r0, [r7, #12]
 8001628:	f000 f932 	bl	8001890 <convC>
	}

	return status;
 800162c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800162e:	46ad      	mov	sp, r5
}
 8001630:	4618      	mov	r0, r3
 8001632:	3748      	adds	r7, #72	; 0x48
 8001634:	46bd      	mov	sp, r7
 8001636:	bdb0      	pop	{r4, r5, r7, pc}

08001638 <sumSqDev>:

/*
 * PART II
 */

float sumSqDev (float* inputArray, float avg, int length){
 8001638:	b580      	push	{r7, lr}
 800163a:	b086      	sub	sp, #24
 800163c:	af00      	add	r7, sp, #0
 800163e:	60f8      	str	r0, [r7, #12]
 8001640:	ed87 0a02 	vstr	s0, [r7, #8]
 8001644:	6079      	str	r1, [r7, #4]
	float sumSqDev = 0.0;
 8001646:	f04f 0300 	mov.w	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < length; i++){
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	e01a      	b.n	8001688 <sumSqDev+0x50>
		sumSqDev += powf(inputArray[i] - avg, 2);
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	4413      	add	r3, r2
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001662:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001666:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	f008 ff25 	bl	800a4bc <powf>
 8001672:	eeb0 7a40 	vmov.f32	s14, s0
 8001676:	edd7 7a05 	vldr	s15, [r7, #20]
 800167a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800167e:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < length; i++){
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	3301      	adds	r3, #1
 8001686:	613b      	str	r3, [r7, #16]
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	429a      	cmp	r2, r3
 800168e:	dbe0      	blt.n	8001652 <sumSqDev+0x1a>
	}
	return sumSqDev;
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	ee07 3a90 	vmov	s15, r3
}
 8001696:	eeb0 0a67 	vmov.f32	s0, s15
 800169a:	3718      	adds	r7, #24
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <corrCoefC>:

float corrCoefC (float* inputArray1, float* inputArray2, float avg1, float avg2, int length){
 80016a0:	b5b0      	push	{r4, r5, r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6178      	str	r0, [r7, #20]
 80016a8:	6139      	str	r1, [r7, #16]
 80016aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80016ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	float corNume = 0.0;
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	float corDenoX = 0.0;
 80016ba:	f04f 0300 	mov.w	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
	float corDenoY = 0.0;
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	; 0x24

	for(int i = 0; i < length; i++){
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
 80016ca:	e03e      	b.n	800174a <corrCoefC+0xaa>
		float xi_xbar = inputArray1[i] - avg1;
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4413      	add	r3, r2
 80016d4:	ed93 7a00 	vldr	s14, [r3]
 80016d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	edc7 7a07 	vstr	s15, [r7, #28]
		float yi_ybar = inputArray2[i] - avg2;
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	009b      	lsls	r3, r3, #2
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4413      	add	r3, r2
 80016ec:	ed93 7a00 	vldr	s14, [r3]
 80016f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80016f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f8:	edc7 7a06 	vstr	s15, [r7, #24]
		corNume += xi_xbar*yi_ybar;
 80016fc:	ed97 7a07 	vldr	s14, [r7, #28]
 8001700:	edd7 7a06 	vldr	s15, [r7, #24]
 8001704:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001708:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800170c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001710:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		corDenoX += xi_xbar*xi_xbar;
 8001714:	ed97 7a07 	vldr	s14, [r7, #28]
 8001718:	edd7 7a07 	vldr	s15, [r7, #28]
 800171c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001720:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
		corDenoY += yi_ybar*yi_ybar;
 800172c:	ed97 7a06 	vldr	s14, [r7, #24]
 8001730:	edd7 7a06 	vldr	s15, [r7, #24]
 8001734:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001738:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800173c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001740:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = 0; i < length; i++){
 8001744:	6a3b      	ldr	r3, [r7, #32]
 8001746:	3301      	adds	r3, #1
 8001748:	623b      	str	r3, [r7, #32]
 800174a:	6a3a      	ldr	r2, [r7, #32]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	429a      	cmp	r2, r3
 8001750:	dbbc      	blt.n	80016cc <corrCoefC+0x2c>
	}
	corNume = corNume / sqrt(corDenoX*corDenoY);
 8001752:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001754:	f7fe fff0 	bl	8000738 <__aeabi_f2d>
 8001758:	4604      	mov	r4, r0
 800175a:	460d      	mov	r5, r1
 800175c:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 8001760:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001768:	ee17 0a90 	vmov	r0, s15
 800176c:	f7fe ffe4 	bl	8000738 <__aeabi_f2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	ec43 2b10 	vmov	d0, r2, r3
 8001778:	f008 fe46 	bl	800a408 <sqrt>
 800177c:	ec53 2b10 	vmov	r2, r3, d0
 8001780:	4620      	mov	r0, r4
 8001782:	4629      	mov	r1, r5
 8001784:	f7ff f95a 	bl	8000a3c <__aeabi_ddiv>
 8001788:	4603      	mov	r3, r0
 800178a:	460c      	mov	r4, r1
 800178c:	4618      	mov	r0, r3
 800178e:	4621      	mov	r1, r4
 8001790:	f7ff fb22 	bl	8000dd8 <__aeabi_d2f>
 8001794:	4603      	mov	r3, r0
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c

	return corNume;
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	ee07 3a90 	vmov	s15, r3
}
 800179e:	eeb0 0a67 	vmov.f32	s0, s15
 80017a2:	3730      	adds	r7, #48	; 0x30
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bdb0      	pop	{r4, r5, r7, pc}

080017a8 <corrC>:

int corrC (float* inputArrayL, float* inputArrayS, float* corrArray, int length){
 80017a8:	b480      	push	{r7}
 80017aa:	b08b      	sub	sp, #44	; 0x2c
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
 80017b4:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < length + length -1; i++){
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
 80017ba:	e05c      	b.n	8001876 <corrC+0xce>
		float temp = 0.0;
 80017bc:	f04f 0300 	mov.w	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
		if (i<length){
 80017c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	da26      	bge.n	8001818 <corrC+0x70>
			int k = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
			for (int j = length-1-i; j <length; j++){
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	1e5a      	subs	r2, r3, #1
 80017d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	e019      	b.n	800180e <corrC+0x66>
				temp += inputArrayL[k] * inputArrayS[j];
 80017da:	69fb      	ldr	r3, [r7, #28]
 80017dc:	009b      	lsls	r3, r3, #2
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	4413      	add	r3, r2
 80017e2:	ed93 7a00 	vldr	s14, [r3]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	68ba      	ldr	r2, [r7, #8]
 80017ec:	4413      	add	r3, r2
 80017ee:	edd3 7a00 	vldr	s15, [r3]
 80017f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017f6:	ed97 7a08 	vldr	s14, [r7, #32]
 80017fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fe:	edc7 7a08 	vstr	s15, [r7, #32]
				k++;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3301      	adds	r3, #1
 8001806:	61fb      	str	r3, [r7, #28]
			for (int j = length-1-i; j <length; j++){
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	3301      	adds	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	dbe1      	blt.n	80017da <corrC+0x32>
 8001816:	e025      	b.n	8001864 <corrC+0xbc>
			}
		}
		else{
			int j = 0 ;
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
			for (int k = i-length+1; k < length; k++){
 800181c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	3301      	adds	r3, #1
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	e019      	b.n	800185c <corrC+0xb4>
				temp += inputArrayL[k] * inputArrayS[j];
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4413      	add	r3, r2
 8001830:	ed93 7a00 	vldr	s14, [r3]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	4413      	add	r3, r2
 800183c:	edd3 7a00 	vldr	s15, [r3]
 8001840:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001844:	ed97 7a08 	vldr	s14, [r7, #32]
 8001848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800184c:	edc7 7a08 	vstr	s15, [r7, #32]
				j++;
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3301      	adds	r3, #1
 8001854:	617b      	str	r3, [r7, #20]
			for (int k = i-length+1; k < length; k++){
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	3301      	adds	r3, #1
 800185a:	613b      	str	r3, [r7, #16]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	dbe1      	blt.n	8001828 <corrC+0x80>
			}

		}
		corrArray[i] = temp;
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	4413      	add	r3, r2
 800186c:	6a3a      	ldr	r2, [r7, #32]
 800186e:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < length + length -1; i++){
 8001870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001872:	3301      	adds	r3, #1
 8001874:	627b      	str	r3, [r7, #36]	; 0x24
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	3b01      	subs	r3, #1
 800187c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800187e:	429a      	cmp	r2, r3
 8001880:	db9c      	blt.n	80017bc <corrC+0x14>
	}
	return 0;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	372c      	adds	r7, #44	; 0x2c
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <convC>:


int convC (float* inputArrayL, float* inputArrayS, float* convolvedArray, int lengthL, int lengthS){
 8001890:	b480      	push	{r7}
 8001892:	b087      	sub	sp, #28
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
 800189c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < lengthS + lengthL -1; i++){
 800189e:	2300      	movs	r3, #0
 80018a0:	617b      	str	r3, [r7, #20]
 80018a2:	e03b      	b.n	800191c <convC+0x8c>
		convolvedArray[i] = 0.0;
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < lengthL && i>=j ; j++){
 80018b2:	2300      	movs	r3, #0
 80018b4:	613b      	str	r3, [r7, #16]
 80018b6:	e026      	b.n	8001906 <convC+0x76>
				if ((i-j) < lengthS){
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	6a3a      	ldr	r2, [r7, #32]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	dd1d      	ble.n	8001900 <convC+0x70>
					convolvedArray[i] += inputArrayL[j] * inputArrayS[i-j];
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	4413      	add	r3, r2
 80018cc:	ed93 7a00 	vldr	s14, [r3]
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	edd3 6a00 	vldr	s13, [r3]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	68ba      	ldr	r2, [r7, #8]
 80018e6:	4413      	add	r3, r2
 80018e8:	edd3 7a00 	vldr	s15, [r3]
 80018ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4413      	add	r3, r2
 80018f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018fc:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 0; j < lengthL && i>=j ; j++){
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	3301      	adds	r3, #1
 8001904:	613b      	str	r3, [r7, #16]
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	429a      	cmp	r2, r3
 800190c:	da03      	bge.n	8001916 <convC+0x86>
 800190e:	697a      	ldr	r2, [r7, #20]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	429a      	cmp	r2, r3
 8001914:	dad0      	bge.n	80018b8 <convC+0x28>
	for (int i = 0; i < lengthS + lengthL -1; i++){
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	3301      	adds	r3, #1
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	6a3a      	ldr	r2, [r7, #32]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	4413      	add	r3, r2
 8001922:	3b01      	subs	r3, #1
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	429a      	cmp	r2, r3
 8001928:	dbbc      	blt.n	80018a4 <convC+0x14>
				}

			}
		}
	return 0;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	371c      	adds	r7, #28
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <kalmanFilterL>:
#include "main.h"
#include "lab1util.h"
#include "arm_math.h"
#include "cmsis_gcc.h"

int kalmanFilterL(const float* InputArray, float* OutputArray, struct KalmanState* ksp, int length, int analysis){
 8001938:	b580      	push	{r7, lr}
 800193a:	b098      	sub	sp, #96	; 0x60
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	603b      	str	r3, [r7, #0]
	arm_biquad_casd_df1_inst_f32 filter_obj;
	uint16_t numStages = 1;
 8001946:	2301      	movs	r3, #1
 8001948:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint32_t blockSize = 1;
 800194c:	2301      	movs	r3, #1
 800194e:	653b      	str	r3, [r7, #80]	; 0x50
	float32_t pCoeffs[5] = {0.0, 0.0, 0.0, 0.0, 0.0};
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
	float32_t pState[4];
	arm_biquad_cascade_df1_init_f32 (&filter_obj, numStages, pCoeffs, pState);
 8001960:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8001964:	b2d9      	uxtb	r1, r3
 8001966:	f107 0310 	add.w	r3, r7, #16
 800196a:	f107 0220 	add.w	r2, r7, #32
 800196e:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001972:	f004 fd85 	bl	8006480 <arm_biquad_cascade_df1_init_f32>
	pState[2] = ksp->x;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	61bb      	str	r3, [r7, #24]
	float temp = 0.0;
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001982:	eef1 3a10 	vmrs	r3, fpscr
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8001988:	6c7b      	ldr	r3, [r7, #68]	; 0x44

	__set_FPSCR(__get_FPSCR() & 0xFFFFFFF0);
 800198a:	f023 030f 	bic.w	r3, r3, #15
 800198e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8001990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001992:	eee1 3a10 	vmsr	fpscr, r3
	int status = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	65fb      	str	r3, [r7, #92]	; 0x5c

	for(int i = 0; i < length; i++){
 800199a:	2300      	movs	r3, #0
 800199c:	65bb      	str	r3, [r7, #88]	; 0x58
 800199e:	e05c      	b.n	8001a5a <kalmanFilterL+0x122>
		ksp->p += ksp->q;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	ed93 7a03 	vldr	s14, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	edd3 7a00 	vldr	s15, [r3]
 80019ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	edc3 7a03 	vstr	s15, [r3, #12]
//		arm_add_f32(&ksp->p, &ksp->q, &ksp->p, 1);

		ksp->k = ksp->p / (ksp->p + ksp->r);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	ed93 7a03 	vldr	s14, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80019c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edc3 7a04 	vstr	s15, [r3, #16]
//		arm_add_f32(&ksp->p, &ksp->r, &temp, 1);
//		ksp->k = ksp->p / temp;

		pCoeffs[0] = ksp->k;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	691b      	ldr	r3, [r3, #16]
 80019da:	623b      	str	r3, [r7, #32]
//		arm_copy_f32(&ksp->k, pCoeffs, 1);
		pCoeffs[3] = 1-(ksp->k);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	edd3 7a04 	vldr	s15, [r3, #16]
 80019e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80019e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
//		arm_negate_f32(&ksp->k, pCoeffs+3, 1);
//		arm_offset_f32(pCoeffs+3, 1.0, pCoeffs+3, 1);

		filter_obj.pCoeffs = pCoeffs;
 80019ee:	f107 0320 	add.w	r3, r7, #32
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
		arm_biquad_cascade_df1_f32(&filter_obj, InputArray+i, OutputArray+i, blockSize);
 80019f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	68fa      	ldr	r2, [r7, #12]
 80019fa:	18d1      	adds	r1, r2, r3
 80019fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	441a      	add	r2, r3
 8001a04:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0a:	f004 fd45 	bl	8006498 <arm_biquad_cascade_df1_f32>

		ksp->x = *(OutputArray+i);
 8001a0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	68ba      	ldr	r2, [r7, #8]
 8001a14:	4413      	add	r3, r2
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
//		arm_copy_f32(OutputArray+i, &ksp->x, 1);

		ksp->p -= ksp->k * ksp->p;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	ed93 7a03 	vldr	s14, [r3, #12]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	edd3 6a04 	vldr	s13, [r3, #16]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	edc3 7a03 	vstr	s15, [r3, #12]
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001a3c:	eef1 3a10 	vmrs	r3, fpscr
 8001a40:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8001a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
//		arm_mult_f32(&ksp->p, &ksp->k, &temp, 1);
//		arm_sub_f32(&ksp->p, &temp, &ksp->p, 1);

		status = __get_FPSCR() & 0x0000000F;
 8001a44:	f003 030f 	and.w	r3, r3, #15
 8001a48:	65fb      	str	r3, [r7, #92]	; 0x5c
		if (status != 0)
 8001a4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <kalmanFilterL+0x11c>
			return status;
 8001a50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a52:	e011      	b.n	8001a78 <kalmanFilterL+0x140>
	for(int i = 0; i < length; i++){
 8001a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001a56:	3301      	adds	r3, #1
 8001a58:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	429a      	cmp	r2, r3
 8001a60:	db9e      	blt.n	80019a0 <kalmanFilterL+0x68>
	}

	if (analysis != 0){
 8001a62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d006      	beq.n	8001a76 <kalmanFilterL+0x13e>
		status = dsp_analysis(InputArray, OutputArray, (uint32_t)length);
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	68f8      	ldr	r0, [r7, #12]
 8001a70:	f000 f86b 	bl	8001b4a <dsp_analysis>
 8001a74:	65f8      	str	r0, [r7, #92]	; 0x5c
	}

	return status;
 8001a76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3760      	adds	r7, #96	; 0x60
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <kalmanFilterAinL>:



int kalmanFilterAinL(float* InputArray, float* OutputArray, struct KalmanState* ksp, int length, int analysis){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	60b9      	str	r1, [r7, #8]
 8001a8a:	607a      	str	r2, [r7, #4]
 8001a8c:	603b      	str	r3, [r7, #0]
	int status = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
	status = kalmanFilterA_noStats(InputArray, OutputArray, ksp, length);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	68f8      	ldr	r0, [r7, #12]
 8001a9a:	f7fe fc0b 	bl	80002b4 <kalmanFilterA_noStats>
 8001a9e:	6178      	str	r0, [r7, #20]
	if (status != 0)
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d001      	beq.n	8001aaa <kalmanFilterAinL+0x2a>
		return status;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	e00a      	b.n	8001ac0 <kalmanFilterAinL+0x40>

	if (analysis != 0){
 8001aaa:	6a3b      	ldr	r3, [r7, #32]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d006      	beq.n	8001abe <kalmanFilterAinL+0x3e>
		status = dsp_analysis(InputArray, OutputArray, (uint32_t)length);
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	68f8      	ldr	r0, [r7, #12]
 8001ab8:	f000 f847 	bl	8001b4a <dsp_analysis>
 8001abc:	6178      	str	r0, [r7, #20]
	}

	return status;
 8001abe:	697b      	ldr	r3, [r7, #20]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <kalmanFilterCinL>:



int kalmanFilterCinL(float* InputArray, float* OutputArray, struct KalmanState* ksp, int length, int analysis){
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	60b9      	str	r1, [r7, #8]
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	603b      	str	r3, [r7, #0]
	int status = 0;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
	for(int i = 0; i < length; i++){
 8001ada:	2300      	movs	r3, #0
 8001adc:	61bb      	str	r3, [r7, #24]
 8001ade:	e021      	b.n	8001b24 <kalmanFilterCinL+0x5c>
		float updateResult = kalmanUpdateC(ksp, InputArray[i]);
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	eeb0 0a67 	vmov.f32	s0, s15
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 f99f 	bl	8001e34 <kalmanUpdateC>
 8001af6:	ed87 0a05 	vstr	s0, [r7, #20]
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001afa:	eef1 3a10 	vmrs	r3, fpscr
 8001afe:	613b      	str	r3, [r7, #16]
  return(result);
 8001b00:	693b      	ldr	r3, [r7, #16]
		status = __get_FPSCR() & 0x0000000F;
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	61fb      	str	r3, [r7, #28]
		if (status != 0)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <kalmanFilterCinL+0x4a>
			return status;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	e017      	b.n	8001b42 <kalmanFilterCinL+0x7a>
		OutputArray[i] = updateResult;
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	4413      	add	r3, r2
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	3301      	adds	r3, #1
 8001b22:	61bb      	str	r3, [r7, #24]
 8001b24:	69ba      	ldr	r2, [r7, #24]
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	dbd9      	blt.n	8001ae0 <kalmanFilterCinL+0x18>
	}

	if (analysis != 0){
 8001b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d006      	beq.n	8001b40 <kalmanFilterCinL+0x78>
		status = dsp_analysis(InputArray, OutputArray, (uint32_t)length);
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	461a      	mov	r2, r3
 8001b36:	68b9      	ldr	r1, [r7, #8]
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	f000 f806 	bl	8001b4a <dsp_analysis>
 8001b3e:	61f8      	str	r0, [r7, #28]
	}

	return status;
 8001b40:	69fb      	ldr	r3, [r7, #28]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3720      	adds	r7, #32
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <dsp_analysis>:





int dsp_analysis (float* InputArray, float* OutputArray, uint32_t u_len){
 8001b4a:	b5b0      	push	{r4, r5, r7, lr}
 8001b4c:	b09e      	sub	sp, #120	; 0x78
 8001b4e:	af02      	add	r7, sp, #8
 8001b50:	60f8      	str	r0, [r7, #12]
 8001b52:	60b9      	str	r1, [r7, #8]
 8001b54:	607a      	str	r2, [r7, #4]
 8001b56:	466b      	mov	r3, sp
 8001b58:	461d      	mov	r5, r3
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001b5a:	eef1 3a10 	vmrs	r3, fpscr
 8001b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8001b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
	// clear error flags
	__set_FPSCR(__get_FPSCR() & 0xFFFFFFF0);
 8001b62:	f023 030f 	bic.w	r3, r3, #15
 8001b66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8001b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6a:	eee1 3a10 	vmsr	fpscr, r3
	float flength = (float) u_len;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b78:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	// a. Subtraction of original and data obtained by Kalman filter tracking.
	float diffArray[u_len];
 8001b7c:	6878      	ldr	r0, [r7, #4]
 8001b7e:	4603      	mov	r3, r0
 8001b80:	3b01      	subs	r3, #1
 8001b82:	667b      	str	r3, [r7, #100]	; 0x64
 8001b84:	4601      	mov	r1, r0
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	f04f 0300 	mov.w	r3, #0
 8001b8e:	f04f 0400 	mov.w	r4, #0
 8001b92:	0154      	lsls	r4, r2, #5
 8001b94:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b98:	014b      	lsls	r3, r1, #5
 8001b9a:	4601      	mov	r1, r0
 8001b9c:	f04f 0200 	mov.w	r2, #0
 8001ba0:	f04f 0300 	mov.w	r3, #0
 8001ba4:	f04f 0400 	mov.w	r4, #0
 8001ba8:	0154      	lsls	r4, r2, #5
 8001baa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001bae:	014b      	lsls	r3, r1, #5
 8001bb0:	0083      	lsls	r3, r0, #2
 8001bb2:	3303      	adds	r3, #3
 8001bb4:	3307      	adds	r3, #7
 8001bb6:	08db      	lsrs	r3, r3, #3
 8001bb8:	00db      	lsls	r3, r3, #3
 8001bba:	ebad 0d03 	sub.w	sp, sp, r3
 8001bbe:	ab02      	add	r3, sp, #8
 8001bc0:	3303      	adds	r3, #3
 8001bc2:	089b      	lsrs	r3, r3, #2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	66bb      	str	r3, [r7, #104]	; 0x68
	arm_sub_f32(OutputArray, InputArray, diffArray, u_len);
 8001bc8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68f9      	ldr	r1, [r7, #12]
 8001bce:	68b8      	ldr	r0, [r7, #8]
 8001bd0:	f004 fd60 	bl	8006694 <arm_sub_f32>

	// b. Calculation of the standard deviation and the average of the difference obtained in a).
	float avgDiff = 0.0;
 8001bd4:	f04f 0300 	mov.w	r3, #0
 8001bd8:	633b      	str	r3, [r7, #48]	; 0x30
	float stdDiff = 0.0;
 8001bda:	f04f 0300 	mov.w	r3, #0
 8001bde:	62fb      	str	r3, [r7, #44]	; 0x2c
	arm_mean_f32(diffArray, u_len, &avgDiff);
 8001be0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001be2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f003 febb 	bl	8005964 <arm_mean_f32>
	arm_std_f32(diffArray, u_len, &stdDiff);
 8001bee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001bf0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001bf4:	6879      	ldr	r1, [r7, #4]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f003 fdc6 	bl	8005788 <arm_std_f32>

	// c. Calculation of the correlation between the original and tracked vectors.
	float corrArray[u_len*2-1];
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	1e58      	subs	r0, r3, #1
 8001c02:	4603      	mov	r3, r0
 8001c04:	3b01      	subs	r3, #1
 8001c06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c08:	4601      	mov	r1, r0
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	f04f 0400 	mov.w	r4, #0
 8001c16:	0154      	lsls	r4, r2, #5
 8001c18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c1c:	014b      	lsls	r3, r1, #5
 8001c1e:	4601      	mov	r1, r0
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	f04f 0300 	mov.w	r3, #0
 8001c28:	f04f 0400 	mov.w	r4, #0
 8001c2c:	0154      	lsls	r4, r2, #5
 8001c2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c32:	014b      	lsls	r3, r1, #5
 8001c34:	0083      	lsls	r3, r0, #2
 8001c36:	3303      	adds	r3, #3
 8001c38:	3307      	adds	r3, #7
 8001c3a:	08db      	lsrs	r3, r3, #3
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c42:	ab02      	add	r3, sp, #8
 8001c44:	3303      	adds	r3, #3
 8001c46:	089b      	lsrs	r3, r3, #2
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	663b      	str	r3, [r7, #96]	; 0x60
	arm_correlate_f32(InputArray, u_len, OutputArray, u_len, corrArray);
 8001c4c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	6879      	ldr	r1, [r7, #4]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f003 fec2 	bl	80059e0 <arm_correlate_f32>

	float avgIn = 0.0;
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	62bb      	str	r3, [r7, #40]	; 0x28
	float avgOut = 0.0;
 8001c62:	f04f 0300 	mov.w	r3, #0
 8001c66:	627b      	str	r3, [r7, #36]	; 0x24
	float corrCoef = 0.0;
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
	float corrNume = 0.0;
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
	float tempAryIn[u_len];
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	4603      	mov	r3, r0
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	65bb      	str	r3, [r7, #88]	; 0x58
 8001c7c:	4601      	mov	r1, r0
 8001c7e:	f04f 0200 	mov.w	r2, #0
 8001c82:	f04f 0300 	mov.w	r3, #0
 8001c86:	f04f 0400 	mov.w	r4, #0
 8001c8a:	0154      	lsls	r4, r2, #5
 8001c8c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c90:	014b      	lsls	r3, r1, #5
 8001c92:	4601      	mov	r1, r0
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	f04f 0400 	mov.w	r4, #0
 8001ca0:	0154      	lsls	r4, r2, #5
 8001ca2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ca6:	014b      	lsls	r3, r1, #5
 8001ca8:	0083      	lsls	r3, r0, #2
 8001caa:	3303      	adds	r3, #3
 8001cac:	3307      	adds	r3, #7
 8001cae:	08db      	lsrs	r3, r3, #3
 8001cb0:	00db      	lsls	r3, r3, #3
 8001cb2:	ebad 0d03 	sub.w	sp, sp, r3
 8001cb6:	ab02      	add	r3, sp, #8
 8001cb8:	3303      	adds	r3, #3
 8001cba:	089b      	lsrs	r3, r3, #2
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	657b      	str	r3, [r7, #84]	; 0x54
	float tempAryOut[u_len];
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	653b      	str	r3, [r7, #80]	; 0x50
 8001cc8:	4601      	mov	r1, r0
 8001cca:	f04f 0200 	mov.w	r2, #0
 8001cce:	f04f 0300 	mov.w	r3, #0
 8001cd2:	f04f 0400 	mov.w	r4, #0
 8001cd6:	0154      	lsls	r4, r2, #5
 8001cd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cdc:	014b      	lsls	r3, r1, #5
 8001cde:	4601      	mov	r1, r0
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	f04f 0400 	mov.w	r4, #0
 8001cec:	0154      	lsls	r4, r2, #5
 8001cee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cf2:	014b      	lsls	r3, r1, #5
 8001cf4:	0083      	lsls	r3, r0, #2
 8001cf6:	3303      	adds	r3, #3
 8001cf8:	3307      	adds	r3, #7
 8001cfa:	08db      	lsrs	r3, r3, #3
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	ebad 0d03 	sub.w	sp, sp, r3
 8001d02:	ab02      	add	r3, sp, #8
 8001d04:	3303      	adds	r3, #3
 8001d06:	089b      	lsrs	r3, r3, #2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
	float corDeno = 0.0;
 8001d0c:	f04f 0300 	mov.w	r3, #0
 8001d10:	61fb      	str	r3, [r7, #28]
	arm_mean_f32(InputArray, u_len, &avgIn);
 8001d12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d16:	461a      	mov	r2, r3
 8001d18:	6879      	ldr	r1, [r7, #4]
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f003 fe22 	bl	8005964 <arm_mean_f32>
	arm_mean_f32(OutputArray, u_len, &avgOut);
 8001d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d24:	461a      	mov	r2, r3
 8001d26:	6879      	ldr	r1, [r7, #4]
 8001d28:	68b8      	ldr	r0, [r7, #8]
 8001d2a:	f003 fe1b 	bl	8005964 <arm_mean_f32>
	arm_offset_f32(InputArray, -avgIn, tempAryIn, u_len);
 8001d2e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001d32:	eef1 7a67 	vneg.f32	s15, s15
 8001d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d40:	68f8      	ldr	r0, [r7, #12]
 8001d42:	f004 fd01 	bl	8006748 <arm_offset_f32>
	arm_offset_f32(OutputArray, -avgOut, tempAryOut, u_len);
 8001d46:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001d4a:	eef1 7a67 	vneg.f32	s15, s15
 8001d4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	4619      	mov	r1, r3
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	68b8      	ldr	r0, [r7, #8]
 8001d5a:	f004 fcf5 	bl	8006748 <arm_offset_f32>
	arm_dot_prod_f32(tempAryIn, tempAryOut, u_len, &corrNume);
 8001d5e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8001d60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001d62:	f107 0320 	add.w	r3, r7, #32
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	f004 fd8c 	bl	8006884 <arm_dot_prod_f32>
	float rms_in;
	float rms_out;
	arm_rms_f32 (tempAryIn, u_len, &rms_in);
 8001d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d6e:	f107 0218 	add.w	r2, r7, #24
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f003 fd91 	bl	800589c <arm_rms_f32>
	arm_rms_f32 (tempAryOut, u_len, &rms_out);
 8001d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d7c:	f107 0214 	add.w	r2, r7, #20
 8001d80:	6879      	ldr	r1, [r7, #4]
 8001d82:	4618      	mov	r0, r3
 8001d84:	f003 fd8a 	bl	800589c <arm_rms_f32>
	arm_mult_f32(&rms_in, &rms_out, &corDeno, 1);
 8001d88:	f107 021c 	add.w	r2, r7, #28
 8001d8c:	f107 0114 	add.w	r1, r7, #20
 8001d90:	f107 0018 	add.w	r0, r7, #24
 8001d94:	2301      	movs	r3, #1
 8001d96:	f004 fd1b 	bl	80067d0 <arm_mult_f32>
	arm_mult_f32(&corDeno, &flength, &corDeno, 1);
 8001d9a:	f107 021c 	add.w	r2, r7, #28
 8001d9e:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001da2:	f107 001c 	add.w	r0, r7, #28
 8001da6:	2301      	movs	r3, #1
 8001da8:	f004 fd12 	bl	80067d0 <arm_mult_f32>
	corrCoef = corrNume/corDeno;
 8001dac:	edd7 6a08 	vldr	s13, [r7, #32]
 8001db0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001db8:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	// d. Calculation of the convolution between the two vectors.
	float convArray[u_len*2-1];
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	005b      	lsls	r3, r3, #1
 8001dc0:	1e58      	subs	r0, r3, #1
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8001dc8:	4601      	mov	r1, r0
 8001dca:	f04f 0200 	mov.w	r2, #0
 8001dce:	f04f 0300 	mov.w	r3, #0
 8001dd2:	f04f 0400 	mov.w	r4, #0
 8001dd6:	0154      	lsls	r4, r2, #5
 8001dd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ddc:	014b      	lsls	r3, r1, #5
 8001dde:	4601      	mov	r1, r0
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	f04f 0400 	mov.w	r4, #0
 8001dec:	0154      	lsls	r4, r2, #5
 8001dee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001df2:	014b      	lsls	r3, r1, #5
 8001df4:	0083      	lsls	r3, r0, #2
 8001df6:	3303      	adds	r3, #3
 8001df8:	3307      	adds	r3, #7
 8001dfa:	08db      	lsrs	r3, r3, #3
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	ebad 0d03 	sub.w	sp, sp, r3
 8001e02:	ab02      	add	r3, sp, #8
 8001e04:	3303      	adds	r3, #3
 8001e06:	089b      	lsrs	r3, r3, #2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	647b      	str	r3, [r7, #68]	; 0x44
	arm_conv_f32(InputArray, u_len, OutputArray, u_len, convArray);
 8001e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	6879      	ldr	r1, [r7, #4]
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f004 f898 	bl	8005f4c <arm_conv_f32>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001e1c:	eef1 3a10 	vmrs	r3, fpscr
 8001e20:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8001e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40

	return  __get_FPSCR() & 0x0000000F;
 8001e24:	f003 030f 	and.w	r3, r3, #15
 8001e28:	46ad      	mov	sp, r5
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3770      	adds	r7, #112	; 0x70
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001e34 <kalmanUpdateC>:
 */
#include "math.h"
#include "string.h"
#include "lab1util.h"

float kalmanUpdateC(struct KalmanState* ksp, float measurement){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	ed87 0a00 	vstr	s0, [r7]
//			|| isinf(ksp->k) || isinf(ksp->p) || isinf(ksp->q) || isinf(ksp->x) || isinf(ksp->r)){
//		return NAN;
//	}

	struct KalmanState ks;
	memcpy(&ks, ksp, sizeof(ks));
 8001e40:	f107 030c 	add.w	r3, r7, #12
 8001e44:	2214      	movs	r2, #20
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f004 fd9d 	bl	8006988 <memcpy>

	ks.p += ks.q;
 8001e4e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e52:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e5a:	edc7 7a06 	vstr	s15, [r7, #24]
	ks.k = ks.p / (ks.p + ks.r);
 8001e5e:	edd7 6a06 	vldr	s13, [r7, #24]
 8001e62:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e66:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e72:	edc7 7a07 	vstr	s15, [r7, #28]
	ks.x += ks.k * (measurement - ks.x);
 8001e76:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e82:	ed97 6a00 	vldr	s12, [r7]
 8001e86:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e8a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	edc7 7a05 	vstr	s15, [r7, #20]
	ks.p -= ks.k * ks.p;
 8001e96:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8001e9e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ea2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eaa:	edc7 7a06 	vstr	s15, [r7, #24]

	if (isnan(ks.k) || isinf(ks.p) || isinf(ks.x) || isnan(ks.x)
 8001eae:	edd7 7a07 	vldr	s15, [r7, #28]
 8001eb2:	eef4 7a67 	vcmp.f32	s15, s15
 8001eb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eba:	d646      	bvs.n	8001f4a <kalmanUpdateC+0x116>
 8001ebc:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ec0:	eef0 7ae7 	vabs.f32	s15, s15
 8001ec4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001f6c <kalmanUpdateC+0x138>
 8001ec8:	eef4 7a47 	vcmp.f32	s15, s14
 8001ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ed0:	bfd4      	ite	le
 8001ed2:	2301      	movle	r3, #1
 8001ed4:	2300      	movgt	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	f083 0301 	eor.w	r3, r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d133      	bne.n	8001f4a <kalmanUpdateC+0x116>
 8001ee2:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ee6:	eef0 7ae7 	vabs.f32	s15, s15
 8001eea:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001f6c <kalmanUpdateC+0x138>
 8001eee:	eef4 7a47 	vcmp.f32	s15, s14
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	bfd4      	ite	le
 8001ef8:	2301      	movle	r3, #1
 8001efa:	2300      	movgt	r3, #0
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	f083 0301 	eor.w	r3, r3, #1
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d120      	bne.n	8001f4a <kalmanUpdateC+0x116>
 8001f08:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f0c:	eef4 7a67 	vcmp.f32	s15, s15
 8001f10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f14:	d619      	bvs.n	8001f4a <kalmanUpdateC+0x116>
			|| isnan(ks.p) || isinf(ks.k))	return NAN;
 8001f16:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f1a:	eef4 7a67 	vcmp.f32	s15, s15
 8001f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f22:	d612      	bvs.n	8001f4a <kalmanUpdateC+0x116>
 8001f24:	edd7 7a07 	vldr	s15, [r7, #28]
 8001f28:	eef0 7ae7 	vabs.f32	s15, s15
	if (isnan(ks.k) || isinf(ks.p) || isinf(ks.x) || isnan(ks.x)
 8001f2c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001f6c <kalmanUpdateC+0x138>
 8001f30:	eef4 7a47 	vcmp.f32	s15, s14
 8001f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f38:	bfd4      	ite	le
 8001f3a:	2301      	movle	r3, #1
 8001f3c:	2300      	movgt	r3, #0
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <kalmanUpdateC+0x11a>
			|| isnan(ks.p) || isinf(ks.k))	return NAN;
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <kalmanUpdateC+0x13c>)
 8001f4c:	e007      	b.n	8001f5e <kalmanUpdateC+0x12a>

	memcpy(ksp, &ks, sizeof(ks));
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	2214      	movs	r2, #20
 8001f54:	4619      	mov	r1, r3
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f004 fd16 	bl	8006988 <memcpy>
	return ks.x;
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	ee07 3a90 	vmov	s15, r3
}
 8001f62:	eeb0 0a67 	vmov.f32	s0, s15
 8001f66:	3720      	adds	r7, #32
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	7f7fffff 	.word	0x7f7fffff
 8001f70:	7fc00000 	.word	0x7fc00000

08001f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f74:	b5b0      	push	{r4, r5, r7, lr}
 8001f76:	f5ad 6da7 	sub.w	sp, sp, #1336	; 0x538
 8001f7a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f7c:	f000 fbff 	bl	800277e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f80:	f000 f980 	bl	8002284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f84:	f000 fa8e 	bl	80024a4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001f88:	f000 f9f2 	bl	8002370 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001f8c:	f000 fa3e 	bl	800240c <MX_USART1_UART_Init>
 		  .k = 0.0
   };
#endif

  //////////////////////////////////////// Assembly
  struct KalmanState ks5AC = {
 8001f90:	4bb8      	ldr	r3, [pc, #736]	; (8002274 <main+0x300>)
 8001f92:	f507 649f 	add.w	r4, r7, #1272	; 0x4f8
 8001f96:	461d      	mov	r5, r3
 8001f98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f9c:	682b      	ldr	r3, [r5, #0]
 8001f9e:	6023      	str	r3, [r4, #0]
 		  .r = 0.9,
 		  .x = 5,
 		  .p = 0.01,
 		  .k = 0.0
   };
  struct KalmanState ks50 = {
 8001fa0:	4bb5      	ldr	r3, [pc, #724]	; (8002278 <main+0x304>)
 8001fa2:	f207 44e4 	addw	r4, r7, #1252	; 0x4e4
 8001fa6:	461d      	mov	r5, r3
 8001fa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001faa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fac:	682b      	ldr	r3, [r5, #0]
 8001fae:	6023      	str	r3, [r4, #0]
 		  .x = 50,
 		  .p = 0.01,
 		  .k = 0.0
   };
///////////////////////////////////////// Plain C
  struct KalmanState ks5C = {
 8001fb0:	4bb0      	ldr	r3, [pc, #704]	; (8002274 <main+0x300>)
 8001fb2:	f507 649a 	add.w	r4, r7, #1232	; 0x4d0
 8001fb6:	461d      	mov	r5, r3
 8001fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fbc:	682b      	ldr	r3, [r5, #0]
 8001fbe:	6023      	str	r3, [r4, #0]
   		  .p = 0.01,
   		  .k = 0.0
   };

///////////////////////////////////////// CIMSIS-DSP
   struct KalmanState ks5L = {
 8001fc0:	4bac      	ldr	r3, [pc, #688]	; (8002274 <main+0x300>)
 8001fc2:	f207 44bc 	addw	r4, r7, #1212	; 0x4bc
 8001fc6:	461d      	mov	r5, r3
 8001fc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fcc:	682b      	ldr	r3, [r5, #0]
 8001fce:	6023      	str	r3, [r4, #0]
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ksZero, 101, 0);
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ksOverflow, 101, 0);
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ksUnderflow, 101, 0);
#endif

  float TEST_ARRAY[101] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706, 10.4858891793, 10.1104642352, 9.51066931906, 9.75755656493, 9.82154078273, 10.2906541933, 10.4861328671, 9.57321181356, 9.70882714139, 10.4359069357, 9.70644021369, 10.2709894039, 10.0823149505, 10.2954563443, 9.57130449017, 9.66832136479, 10.4521677502, 10.4287240667, 10.1833650752, 10.0066049721, 10.3279461634, 10.4767210803, 10.3790964606, 10.1937408814, 10.0318963522, 10.4939180917, 10.2381858895, 9.59703103024, 9.62757986516, 10.1816981174, 9.65703773168, 10.3905666599, 10.0941977598, 9.93515274393, 9.71017053437, 10.0303874259, 10.0173504397, 9.69022731474, 9.73902896102, 9.52524419732, 10.3270730526, 9.54695650657, 10.3573960542, 9.88773266876, 10.1685038683, 10.1683694089, 9.88406620159, 10.3290065898, 10.2547227265, 10.4733422906, 10.0133952458, 10.4205693583, 9.71335255372, 9.89061396699, 10.1652744131, 10.2580948608, 10.3465431058, 9.98446410493, 9.79376005657, 10.202518901, 9.83867150985, 9.89532986869, 10.2885062658, 9.97748768804, 10.0403923759, 10.1538911808, 9.78303667556, 9.72420149909, 9.59117495073, 10.1716116012, 10.2015818969, 9.90650056596, 10.3251329834, 10.4550120431, 10.4925749165, 10.1548177178, 9.60547133785, 10.4644672766, 10.2326496615, 10.2279703226, 10.3535284606, 10.2437410625, 10.3851531317, 9.90784804928, 9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087, 9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486, 10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991, 9.5799256668};
 8001fd0:	f507 734a 	add.w	r3, r7, #808	; 0x328
 8001fd4:	4aa9      	ldr	r2, [pc, #676]	; (800227c <main+0x308>)
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	4611      	mov	r1, r2
 8001fda:	f44f 73ca 	mov.w	r3, #404	; 0x194
 8001fde:	461a      	mov	r2, r3
 8001fe0:	f004 fcd2 	bl	8006988 <memcpy>

  int resultholder = 12345;
 8001fe4:	f243 0339 	movw	r3, #12345	; 0x3039
 8001fe8:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c

  float output[101];


  memset(output, 0, sizeof(output));
 8001fec:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8001ff0:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f004 fcd1 	bl	800699e <memset>
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ks5AC, 101, 1);
 8001ffc:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8002000:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8002004:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8002008:	2301      	movs	r3, #1
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2365      	movs	r3, #101	; 0x65
 800200e:	f7ff fa10 	bl	8001432 <kalmanFilterAinC>
 8002012:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c

  memset(output, 0, sizeof(output));
 8002016:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 800201a:	f44f 72ca 	mov.w	r2, #404	; 0x194
 800201e:	2100      	movs	r1, #0
 8002020:	4618      	mov	r0, r3
 8002022:	f004 fcbc 	bl	800699e <memset>
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ks5C, 101, 1);
 8002026:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800202a:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800202e:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8002032:	2301      	movs	r3, #1
 8002034:	9300      	str	r3, [sp, #0]
 8002036:	2365      	movs	r3, #101	; 0x65
 8002038:	f7ff f89e 	bl	8001178 <kalmanFilterC>
 800203c:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c

  memset(output, 0, sizeof(output));
 8002040:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8002044:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8002048:	2100      	movs	r1, #0
 800204a:	4618      	mov	r0, r3
 800204c:	f004 fca7 	bl	800699e <memset>
  resultholder = kalmanFilterL(TEST_ARRAY, output, &ks5L, 101, 1);
 8002050:	f207 42bc 	addw	r2, r7, #1212	; 0x4bc
 8002054:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8002058:	f507 704a 	add.w	r0, r7, #808	; 0x328
 800205c:	2301      	movs	r3, #1
 800205e:	9300      	str	r3, [sp, #0]
 8002060:	2365      	movs	r3, #101	; 0x65
 8002062:	f7ff fc69 	bl	8001938 <kalmanFilterL>
 8002066:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c

  float output50[101];
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ks50, 101, 1);
 800206a:	f207 42e4 	addw	r2, r7, #1252	; 0x4e4
 800206e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8002072:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8002076:	2301      	movs	r3, #1
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2365      	movs	r3, #101	; 0x65
 800207c:	f7ff f9d9 	bl	8001432 <kalmanFilterAinC>
 8002080:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ITM_Port32(31) = 111;
 8002084:	4b7e      	ldr	r3, [pc, #504]	; (8002280 <main+0x30c>)
 8002086:	226f      	movs	r2, #111	; 0x6f
 8002088:	601a      	str	r2, [r3, #0]
	  // A vs C with stats in C
	  for (int i=0; i<1000; i++){
 800208a:	2300      	movs	r3, #0
 800208c:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8002090:	e011      	b.n	80020b6 <main+0x142>
		  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ks5AC, 101, 1);
 8002092:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8002096:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800209a:	f507 704a 	add.w	r0, r7, #808	; 0x328
 800209e:	2301      	movs	r3, #1
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2365      	movs	r3, #101	; 0x65
 80020a4:	f7ff f9c5 	bl	8001432 <kalmanFilterAinC>
 80020a8:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	  for (int i=0; i<1000; i++){
 80020ac:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80020b0:	3301      	adds	r3, #1
 80020b2:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 80020b6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80020ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020be:	dbe8      	blt.n	8002092 <main+0x11e>
	  }
	  ITM_Port32(31) = 222;
 80020c0:	4b6f      	ldr	r3, [pc, #444]	; (8002280 <main+0x30c>)
 80020c2:	22de      	movs	r2, #222	; 0xde
 80020c4:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 80020c6:	2300      	movs	r3, #0
 80020c8:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 80020cc:	e011      	b.n	80020f2 <main+0x17e>
		  resultholder = kalmanFilterC(TEST_ARRAY, output, &ks5AC, 101, 1);
 80020ce:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80020d2:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 80020d6:	f507 704a 	add.w	r0, r7, #808	; 0x328
 80020da:	2301      	movs	r3, #1
 80020dc:	9300      	str	r3, [sp, #0]
 80020de:	2365      	movs	r3, #101	; 0x65
 80020e0:	f7ff f84a 	bl	8001178 <kalmanFilterC>
 80020e4:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	  for (int i=0; i<1000; i++){
 80020e8:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80020ec:	3301      	adds	r3, #1
 80020ee:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
 80020f2:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 80020f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80020fa:	dbe8      	blt.n	80020ce <main+0x15a>
	  }


	  // A vs C vs L with stats in L
	  ITM_Port32(31) = 333;
 80020fc:	4b60      	ldr	r3, [pc, #384]	; (8002280 <main+0x30c>)
 80020fe:	f240 124d 	movw	r2, #333	; 0x14d
 8002102:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 8002104:	2300      	movs	r3, #0
 8002106:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 800210a:	e011      	b.n	8002130 <main+0x1bc>
		  resultholder = kalmanFilterAinL(TEST_ARRAY, output, &ks5AC, 101, 1);
 800210c:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 8002110:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8002114:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8002118:	2301      	movs	r3, #1
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2365      	movs	r3, #101	; 0x65
 800211e:	f7ff fcaf 	bl	8001a80 <kalmanFilterAinL>
 8002122:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	  for (int i=0; i<1000; i++){
 8002126:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800212a:	3301      	adds	r3, #1
 800212c:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8002130:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8002134:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002138:	dbe8      	blt.n	800210c <main+0x198>
	  }
	  ITM_Port32(31) = 444;
 800213a:	4b51      	ldr	r3, [pc, #324]	; (8002280 <main+0x30c>)
 800213c:	f44f 72de 	mov.w	r2, #444	; 0x1bc
 8002140:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 8002142:	2300      	movs	r3, #0
 8002144:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 8002148:	e011      	b.n	800216e <main+0x1fa>
		  resultholder = kalmanFilterCinL(TEST_ARRAY, output, &ks5C, 101, 1);
 800214a:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800214e:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8002152:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8002156:	2301      	movs	r3, #1
 8002158:	9300      	str	r3, [sp, #0]
 800215a:	2365      	movs	r3, #101	; 0x65
 800215c:	f7ff fcb4 	bl	8001ac8 <kalmanFilterCinL>
 8002160:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	  for (int i=0; i<1000; i++){
 8002164:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002168:	3301      	adds	r3, #1
 800216a:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
 800216e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8002172:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002176:	dbe8      	blt.n	800214a <main+0x1d6>
	  }
	  ITM_Port32(31) = 555;
 8002178:	4b41      	ldr	r3, [pc, #260]	; (8002280 <main+0x30c>)
 800217a:	f240 222b 	movw	r2, #555	; 0x22b
 800217e:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8002186:	e011      	b.n	80021ac <main+0x238>
		  resultholder = kalmanFilterL(TEST_ARRAY, output, &ks5C, 101, 1);
 8002188:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 800218c:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 8002190:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8002194:	2301      	movs	r3, #1
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2365      	movs	r3, #101	; 0x65
 800219a:	f7ff fbcd 	bl	8001938 <kalmanFilterL>
 800219e:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	  for (int i=0; i<1000; i++){
 80021a2:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80021a6:	3301      	adds	r3, #1
 80021a8:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 80021ac:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 80021b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b4:	dbe8      	blt.n	8002188 <main+0x214>
	  }


	  // A vs C vs L, no stats
	  ITM_Port32(31) = 6666;
 80021b6:	4b32      	ldr	r3, [pc, #200]	; (8002280 <main+0x30c>)
 80021b8:	f641 220a 	movw	r2, #6666	; 0x1a0a
 80021bc:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 80021be:	2300      	movs	r3, #0
 80021c0:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80021c4:	e011      	b.n	80021ea <main+0x276>
		  resultholder = kalmanFilterAinL(TEST_ARRAY, output, &ks5AC, 101, 0);
 80021c6:	f507 629f 	add.w	r2, r7, #1272	; 0x4f8
 80021ca:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 80021ce:	f507 704a 	add.w	r0, r7, #808	; 0x328
 80021d2:	2300      	movs	r3, #0
 80021d4:	9300      	str	r3, [sp, #0]
 80021d6:	2365      	movs	r3, #101	; 0x65
 80021d8:	f7ff fc52 	bl	8001a80 <kalmanFilterAinL>
 80021dc:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	  for (int i=0; i<1000; i++){
 80021e0:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80021e4:	3301      	adds	r3, #1
 80021e6:	f8c7 3518 	str.w	r3, [r7, #1304]	; 0x518
 80021ea:	f8d7 3518 	ldr.w	r3, [r7, #1304]	; 0x518
 80021ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021f2:	dbe8      	blt.n	80021c6 <main+0x252>
	  }
	  ITM_Port32(31) = 7777;
 80021f4:	4b22      	ldr	r3, [pc, #136]	; (8002280 <main+0x30c>)
 80021f6:	f641 6261 	movw	r2, #7777	; 0x1e61
 80021fa:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 80021fc:	2300      	movs	r3, #0
 80021fe:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8002202:	e011      	b.n	8002228 <main+0x2b4>
		  resultholder = kalmanFilterC(TEST_ARRAY, output, &ks5C, 101, 0);
 8002204:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8002208:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800220c:	f507 704a 	add.w	r0, r7, #808	; 0x328
 8002210:	2300      	movs	r3, #0
 8002212:	9300      	str	r3, [sp, #0]
 8002214:	2365      	movs	r3, #101	; 0x65
 8002216:	f7fe ffaf 	bl	8001178 <kalmanFilterC>
 800221a:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	  for (int i=0; i<1000; i++){
 800221e:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 8002222:	3301      	adds	r3, #1
 8002224:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8002228:	f8d7 3514 	ldr.w	r3, [r7, #1300]	; 0x514
 800222c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002230:	dbe8      	blt.n	8002204 <main+0x290>
	  }
	  ITM_Port32(31) = 8888;
 8002232:	4b13      	ldr	r3, [pc, #76]	; (8002280 <main+0x30c>)
 8002234:	f242 22b8 	movw	r2, #8888	; 0x22b8
 8002238:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8002240:	e011      	b.n	8002266 <main+0x2f2>
		  resultholder = kalmanFilterL(TEST_ARRAY, output, &ks5C, 101, 0);
 8002242:	f507 629a 	add.w	r2, r7, #1232	; 0x4d0
 8002246:	f507 71ca 	add.w	r1, r7, #404	; 0x194
 800224a:	f507 704a 	add.w	r0, r7, #808	; 0x328
 800224e:	2300      	movs	r3, #0
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2365      	movs	r3, #101	; 0x65
 8002254:	f7ff fb70 	bl	8001938 <kalmanFilterL>
 8002258:	f8c7 050c 	str.w	r0, [r7, #1292]	; 0x50c
	  for (int i=0; i<1000; i++){
 800225c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 8002260:	3301      	adds	r3, #1
 8002262:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
 8002266:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
 800226a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800226e:	dbe8      	blt.n	8002242 <main+0x2ce>
	  ITM_Port32(31) = 111;
 8002270:	e708      	b.n	8002084 <main+0x110>
 8002272:	bf00      	nop
 8002274:	0800b0d8 	.word	0x0800b0d8
 8002278:	0800b0ec 	.word	0x0800b0ec
 800227c:	0800b100 	.word	0x0800b100
 8002280:	e000007c 	.word	0xe000007c

08002284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b0bc      	sub	sp, #240	; 0xf0
 8002288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800228a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800228e:	2244      	movs	r2, #68	; 0x44
 8002290:	2100      	movs	r1, #0
 8002292:	4618      	mov	r0, r3
 8002294:	f004 fb83 	bl	800699e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002298:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	2294      	movs	r2, #148	; 0x94
 80022ac:	2100      	movs	r1, #0
 80022ae:	4618      	mov	r0, r3
 80022b0:	f004 fb75 	bl	800699e <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 fd6f 	bl	8002d98 <HAL_PWREx_ControlVoltageScaling>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d001      	beq.n	80022c4 <SystemClock_Config+0x40>
  {
    Error_Handler();
 80022c0:	f000 f914 	bl	80024ec <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80022c4:	2310      	movs	r3, #16
 80022c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80022ca:	2301      	movs	r3, #1
 80022cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80022d6:	2360      	movs	r3, #96	; 0x60
 80022d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022dc:	2302      	movs	r3, #2
 80022de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80022e2:	2301      	movs	r3, #1
 80022e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80022e8:	2301      	movs	r3, #1
 80022ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80022ee:	233c      	movs	r3, #60	; 0x3c
 80022f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022f4:	2302      	movs	r3, #2
 80022f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80022fa:	2302      	movs	r3, #2
 80022fc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002300:	2302      	movs	r3, #2
 8002302:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002306:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800230a:	4618      	mov	r0, r3
 800230c:	f000 fde8 	bl	8002ee0 <HAL_RCC_OscConfig>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8002316:	f000 f8e9 	bl	80024ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800231a:	230f      	movs	r3, #15
 800231c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002320:	2303      	movs	r3, #3
 8002322:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002326:	2300      	movs	r3, #0
 8002328:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800232c:	2300      	movs	r3, #0
 800232e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002332:	2300      	movs	r3, #0
 8002334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002338:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800233c:	2105      	movs	r1, #5
 800233e:	4618      	mov	r0, r3
 8002340:	f001 f9f4 	bl	800372c <HAL_RCC_ClockConfig>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800234a:	f000 f8cf 	bl	80024ec <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800234e:	2301      	movs	r3, #1
 8002350:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002352:	2300      	movs	r3, #0
 8002354:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002356:	1d3b      	adds	r3, r7, #4
 8002358:	4618      	mov	r0, r3
 800235a:	f001 fc97 	bl	8003c8c <HAL_RCCEx_PeriphCLKConfig>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8002364:	f000 f8c2 	bl	80024ec <Error_Handler>
  }
}
 8002368:	bf00      	nop
 800236a:	37f0      	adds	r7, #240	; 0xf0
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}

08002370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b088      	sub	sp, #32
 8002374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002376:	f107 0310 	add.w	r3, r7, #16
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]
 8002380:	609a      	str	r2, [r3, #8]
 8002382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <MX_TIM2_Init+0x98>)
 8002390:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002394:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8002396:	4b1c      	ldr	r3, [pc, #112]	; (8002408 <MX_TIM2_Init+0x98>)
 8002398:	f64e 2260 	movw	r2, #60000	; 0xea60
 800239c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800239e:	4b1a      	ldr	r3, [pc, #104]	; (8002408 <MX_TIM2_Init+0x98>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80023a4:	4b18      	ldr	r3, [pc, #96]	; (8002408 <MX_TIM2_Init+0x98>)
 80023a6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80023aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <MX_TIM2_Init+0x98>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023b2:	4b15      	ldr	r3, [pc, #84]	; (8002408 <MX_TIM2_Init+0x98>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023b8:	4813      	ldr	r0, [pc, #76]	; (8002408 <MX_TIM2_Init+0x98>)
 80023ba:	f002 f96f 	bl	800469c <HAL_TIM_Base_Init>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80023c4:	f000 f892 	bl	80024ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ce:	f107 0310 	add.w	r3, r7, #16
 80023d2:	4619      	mov	r1, r3
 80023d4:	480c      	ldr	r0, [pc, #48]	; (8002408 <MX_TIM2_Init+0x98>)
 80023d6:	f002 f9b8 	bl	800474a <HAL_TIM_ConfigClockSource>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80023e0:	f000 f884 	bl	80024ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e4:	2300      	movs	r3, #0
 80023e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e8:	2300      	movs	r3, #0
 80023ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023ec:	1d3b      	adds	r3, r7, #4
 80023ee:	4619      	mov	r1, r3
 80023f0:	4805      	ldr	r0, [pc, #20]	; (8002408 <MX_TIM2_Init+0x98>)
 80023f2:	f002 fb97 	bl	8004b24 <HAL_TIMEx_MasterConfigSynchronization>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80023fc:	f000 f876 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002400:	bf00      	nop
 8002402:	3720      	adds	r7, #32
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20000294 	.word	0x20000294

0800240c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002410:	4b22      	ldr	r3, [pc, #136]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002412:	4a23      	ldr	r2, [pc, #140]	; (80024a0 <MX_USART1_UART_Init+0x94>)
 8002414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002416:	4b21      	ldr	r3, [pc, #132]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800241c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800241e:	4b1f      	ldr	r3, [pc, #124]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002420:	2200      	movs	r2, #0
 8002422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002424:	4b1d      	ldr	r3, [pc, #116]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002426:	2200      	movs	r2, #0
 8002428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800242a:	4b1c      	ldr	r3, [pc, #112]	; (800249c <MX_USART1_UART_Init+0x90>)
 800242c:	2200      	movs	r2, #0
 800242e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002430:	4b1a      	ldr	r3, [pc, #104]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002432:	220c      	movs	r2, #12
 8002434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800243c:	4b17      	ldr	r3, [pc, #92]	; (800249c <MX_USART1_UART_Init+0x90>)
 800243e:	2200      	movs	r2, #0
 8002440:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002442:	4b16      	ldr	r3, [pc, #88]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002444:	2200      	movs	r2, #0
 8002446:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002448:	4b14      	ldr	r3, [pc, #80]	; (800249c <MX_USART1_UART_Init+0x90>)
 800244a:	2200      	movs	r2, #0
 800244c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800244e:	4b13      	ldr	r3, [pc, #76]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002450:	2200      	movs	r2, #0
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002454:	4811      	ldr	r0, [pc, #68]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002456:	f002 fbed 	bl	8004c34 <HAL_UART_Init>
 800245a:	4603      	mov	r3, r0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d001      	beq.n	8002464 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002460:	f000 f844 	bl	80024ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002464:	2100      	movs	r1, #0
 8002466:	480d      	ldr	r0, [pc, #52]	; (800249c <MX_USART1_UART_Init+0x90>)
 8002468:	f003 f8a9 	bl	80055be <HAL_UARTEx_SetTxFifoThreshold>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d001      	beq.n	8002476 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002472:	f000 f83b 	bl	80024ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002476:	2100      	movs	r1, #0
 8002478:	4808      	ldr	r0, [pc, #32]	; (800249c <MX_USART1_UART_Init+0x90>)
 800247a:	f003 f8de 	bl	800563a <HAL_UARTEx_SetRxFifoThreshold>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002484:	f000 f832 	bl	80024ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002488:	4804      	ldr	r0, [pc, #16]	; (800249c <MX_USART1_UART_Init+0x90>)
 800248a:	f003 f85f 	bl	800554c <HAL_UARTEx_DisableFifoMode>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002494:	f000 f82a 	bl	80024ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002498:	bf00      	nop
 800249a:	bd80      	pop	{r7, pc}
 800249c:	20000208 	.word	0x20000208
 80024a0:	40013800 	.word	0x40013800

080024a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80024aa:	4b0f      	ldr	r3, [pc, #60]	; (80024e8 <MX_GPIO_Init+0x44>)
 80024ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ae:	4a0e      	ldr	r2, [pc, #56]	; (80024e8 <MX_GPIO_Init+0x44>)
 80024b0:	f043 0301 	orr.w	r3, r3, #1
 80024b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024b6:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <MX_GPIO_Init+0x44>)
 80024b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ba:	f003 0301 	and.w	r3, r3, #1
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80024c2:	4b09      	ldr	r3, [pc, #36]	; (80024e8 <MX_GPIO_Init+0x44>)
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	4a08      	ldr	r2, [pc, #32]	; (80024e8 <MX_GPIO_Init+0x44>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <MX_GPIO_Init+0x44>)
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	603b      	str	r3, [r7, #0]
 80024d8:	683b      	ldr	r3, [r7, #0]

}
 80024da:	bf00      	nop
 80024dc:	370c      	adds	r7, #12
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000

080024ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80024f0:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f2:	e7fe      	b.n	80024f2 <Error_Handler+0x6>

080024f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	4b0f      	ldr	r3, [pc, #60]	; (8002538 <HAL_MspInit+0x44>)
 80024fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024fe:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <HAL_MspInit+0x44>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6613      	str	r3, [r2, #96]	; 0x60
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <HAL_MspInit+0x44>)
 8002508:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	607b      	str	r3, [r7, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_MspInit+0x44>)
 8002514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_MspInit+0x44>)
 8002518:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251c:	6593      	str	r3, [r2, #88]	; 0x58
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_MspInit+0x44>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002522:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002526:	603b      	str	r3, [r7, #0]
 8002528:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	40021000 	.word	0x40021000

0800253c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800253c:	b480      	push	{r7}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800254c:	d10b      	bne.n	8002566 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800254e:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_TIM_Base_MspInit+0x38>)
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <HAL_TIM_Base_MspInit+0x38>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6593      	str	r3, [r2, #88]	; 0x58
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <HAL_TIM_Base_MspInit+0x38>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	40021000 	.word	0x40021000

08002578 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b08a      	sub	sp, #40	; 0x28
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002580:	f107 0314 	add.w	r3, r7, #20
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	605a      	str	r2, [r3, #4]
 800258a:	609a      	str	r2, [r3, #8]
 800258c:	60da      	str	r2, [r3, #12]
 800258e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a18      	ldr	r2, [pc, #96]	; (80025f8 <HAL_UART_MspInit+0x80>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d129      	bne.n	80025ee <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <HAL_UART_MspInit+0x84>)
 800259c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800259e:	4a17      	ldr	r2, [pc, #92]	; (80025fc <HAL_UART_MspInit+0x84>)
 80025a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a4:	6613      	str	r3, [r2, #96]	; 0x60
 80025a6:	4b15      	ldr	r3, [pc, #84]	; (80025fc <HAL_UART_MspInit+0x84>)
 80025a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025ae:	613b      	str	r3, [r7, #16]
 80025b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <HAL_UART_MspInit+0x84>)
 80025b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025b6:	4a11      	ldr	r2, [pc, #68]	; (80025fc <HAL_UART_MspInit+0x84>)
 80025b8:	f043 0301 	orr.w	r3, r3, #1
 80025bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_UART_MspInit+0x84>)
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d0:	2302      	movs	r3, #2
 80025d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d4:	2300      	movs	r3, #0
 80025d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d8:	2303      	movs	r3, #3
 80025da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80025dc:	2307      	movs	r3, #7
 80025de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e0:	f107 0314 	add.w	r3, r7, #20
 80025e4:	4619      	mov	r1, r3
 80025e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025ea:	f000 fa23 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80025ee:	bf00      	nop
 80025f0:	3728      	adds	r7, #40	; 0x28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	40013800 	.word	0x40013800
 80025fc:	40021000 	.word	0x40021000

08002600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <NMI_Handler+0x4>

08002606 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800260a:	e7fe      	b.n	800260a <HardFault_Handler+0x4>

0800260c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002610:	e7fe      	b.n	8002610 <MemManage_Handler+0x4>

08002612 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002612:	b480      	push	{r7}
 8002614:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002616:	e7fe      	b.n	8002616 <BusFault_Handler+0x4>

08002618 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800261c:	e7fe      	b.n	800261c <UsageFault_Handler+0x4>

0800261e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800261e:	b480      	push	{r7}
 8002620:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002622:	bf00      	nop
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr

0800263a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800264c:	f000 f8ec 	bl	8002828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <_sbrk+0x5c>)
 800265e:	4b15      	ldr	r3, [pc, #84]	; (80026b4 <_sbrk+0x60>)
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d102      	bne.n	8002676 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002670:	4b11      	ldr	r3, [pc, #68]	; (80026b8 <_sbrk+0x64>)
 8002672:	4a12      	ldr	r2, [pc, #72]	; (80026bc <_sbrk+0x68>)
 8002674:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <_sbrk+0x64>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	429a      	cmp	r2, r3
 8002682:	d207      	bcs.n	8002694 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002684:	f004 f956 	bl	8006934 <__errno>
 8002688:	4602      	mov	r2, r0
 800268a:	230c      	movs	r3, #12
 800268c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800268e:	f04f 33ff 	mov.w	r3, #4294967295
 8002692:	e009      	b.n	80026a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002694:	4b08      	ldr	r3, [pc, #32]	; (80026b8 <_sbrk+0x64>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800269a:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <_sbrk+0x64>)
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4413      	add	r3, r2
 80026a2:	4a05      	ldr	r2, [pc, #20]	; (80026b8 <_sbrk+0x64>)
 80026a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026a6:	68fb      	ldr	r3, [r7, #12]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	200a0000 	.word	0x200a0000
 80026b4:	00000400 	.word	0x00000400
 80026b8:	200001fc 	.word	0x200001fc
 80026bc:	200002e8 	.word	0x200002e8

080026c0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80026c0:	b480      	push	{r7}
 80026c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <SystemInit+0x64>)
 80026c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ca:	4a16      	ldr	r2, [pc, #88]	; (8002724 <SystemInit+0x64>)
 80026cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80026d4:	4b14      	ldr	r3, [pc, #80]	; (8002728 <SystemInit+0x68>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <SystemInit+0x68>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80026e0:	4b11      	ldr	r3, [pc, #68]	; (8002728 <SystemInit+0x68>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80026e6:	4b10      	ldr	r3, [pc, #64]	; (8002728 <SystemInit+0x68>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <SystemInit+0x68>)
 80026ec:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80026f0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80026f4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80026f6:	4b0c      	ldr	r3, [pc, #48]	; (8002728 <SystemInit+0x68>)
 80026f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026fc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80026fe:	4b0a      	ldr	r3, [pc, #40]	; (8002728 <SystemInit+0x68>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a09      	ldr	r2, [pc, #36]	; (8002728 <SystemInit+0x68>)
 8002704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800270a:	4b07      	ldr	r3, [pc, #28]	; (8002728 <SystemInit+0x68>)
 800270c:	2200      	movs	r2, #0
 800270e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002710:	4b04      	ldr	r3, [pc, #16]	; (8002724 <SystemInit+0x64>)
 8002712:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002716:	609a      	str	r2, [r3, #8]
#endif
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	e000ed00 	.word	0xe000ed00
 8002728:	40021000 	.word	0x40021000

0800272c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800272c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002764 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002730:	f7ff ffc6 	bl	80026c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002734:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002736:	e003      	b.n	8002740 <LoopCopyDataInit>

08002738 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800273a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800273c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800273e:	3104      	adds	r1, #4

08002740 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002740:	480a      	ldr	r0, [pc, #40]	; (800276c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002742:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002744:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002746:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002748:	d3f6      	bcc.n	8002738 <CopyDataInit>
	ldr	r2, =_sbss
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <LoopForever+0x12>)
	b	LoopFillZerobss
 800274c:	e002      	b.n	8002754 <LoopFillZerobss>

0800274e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800274e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002750:	f842 3b04 	str.w	r3, [r2], #4

08002754 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002754:	4b08      	ldr	r3, [pc, #32]	; (8002778 <LoopForever+0x16>)
	cmp	r2, r3
 8002756:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002758:	d3f9      	bcc.n	800274e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800275a:	f004 f8f1 	bl	8006940 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800275e:	f7ff fc09 	bl	8001f74 <main>

08002762 <LoopForever>:

LoopForever:
    b LoopForever
 8002762:	e7fe      	b.n	8002762 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002764:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8002768:	0800b5f8 	.word	0x0800b5f8
	ldr	r0, =_sdata
 800276c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002770:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8002774:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8002778:	200002e8 	.word	0x200002e8

0800277c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800277c:	e7fe      	b.n	800277c <ADC1_IRQHandler>

0800277e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b082      	sub	sp, #8
 8002782:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002788:	2003      	movs	r0, #3
 800278a:	f000 f91f 	bl	80029cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800278e:	2000      	movs	r0, #0
 8002790:	f000 f80e 	bl	80027b0 <HAL_InitTick>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d002      	beq.n	80027a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	71fb      	strb	r3, [r7, #7]
 800279e:	e001      	b.n	80027a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80027a0:	f7ff fea8 	bl	80024f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80027a4:	79fb      	ldrb	r3, [r7, #7]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3708      	adds	r7, #8
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80027b8:	2300      	movs	r3, #0
 80027ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80027bc:	4b17      	ldr	r3, [pc, #92]	; (800281c <HAL_InitTick+0x6c>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d023      	beq.n	800280c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80027c4:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_InitTick+0x70>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b14      	ldr	r3, [pc, #80]	; (800281c <HAL_InitTick+0x6c>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	4619      	mov	r1, r3
 80027ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f91d 	bl	8002a1a <HAL_SYSTICK_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10f      	bne.n	8002806 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	d809      	bhi.n	8002800 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027ec:	2200      	movs	r2, #0
 80027ee:	6879      	ldr	r1, [r7, #4]
 80027f0:	f04f 30ff 	mov.w	r0, #4294967295
 80027f4:	f000 f8f5 	bl	80029e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80027f8:	4a0a      	ldr	r2, [pc, #40]	; (8002824 <HAL_InitTick+0x74>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
 80027fe:	e007      	b.n	8002810 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e004      	b.n	8002810 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	e001      	b.n	8002810 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000008 	.word	0x20000008
 8002820:	20000000 	.word	0x20000000
 8002824:	20000004 	.word	0x20000004

08002828 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800282c:	4b06      	ldr	r3, [pc, #24]	; (8002848 <HAL_IncTick+0x20>)
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	461a      	mov	r2, r3
 8002832:	4b06      	ldr	r3, [pc, #24]	; (800284c <HAL_IncTick+0x24>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4413      	add	r3, r2
 8002838:	4a04      	ldr	r2, [pc, #16]	; (800284c <HAL_IncTick+0x24>)
 800283a:	6013      	str	r3, [r2, #0]
}
 800283c:	bf00      	nop
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	20000008 	.word	0x20000008
 800284c:	200002e0 	.word	0x200002e0

08002850 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  return uwTick;
 8002854:	4b03      	ldr	r3, [pc, #12]	; (8002864 <HAL_GetTick+0x14>)
 8002856:	681b      	ldr	r3, [r3, #0]
}
 8002858:	4618      	mov	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	200002e0 	.word	0x200002e0

08002868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002868:	b480      	push	{r7}
 800286a:	b085      	sub	sp, #20
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <__NVIC_SetPriorityGrouping+0x44>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800287e:	68ba      	ldr	r2, [r7, #8]
 8002880:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002884:	4013      	ands	r3, r2
 8002886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002890:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800289a:	4a04      	ldr	r2, [pc, #16]	; (80028ac <__NVIC_SetPriorityGrouping+0x44>)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	60d3      	str	r3, [r2, #12]
}
 80028a0:	bf00      	nop
 80028a2:	3714      	adds	r7, #20
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028b4:	4b04      	ldr	r3, [pc, #16]	; (80028c8 <__NVIC_GetPriorityGrouping+0x18>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	0a1b      	lsrs	r3, r3, #8
 80028ba:	f003 0307 	and.w	r3, r3, #7
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	e000ed00 	.word	0xe000ed00

080028cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	6039      	str	r1, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	db0a      	blt.n	80028f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	b2da      	uxtb	r2, r3
 80028e4:	490c      	ldr	r1, [pc, #48]	; (8002918 <__NVIC_SetPriority+0x4c>)
 80028e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ea:	0112      	lsls	r2, r2, #4
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	440b      	add	r3, r1
 80028f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028f4:	e00a      	b.n	800290c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4908      	ldr	r1, [pc, #32]	; (800291c <__NVIC_SetPriority+0x50>)
 80028fc:	79fb      	ldrb	r3, [r7, #7]
 80028fe:	f003 030f 	and.w	r3, r3, #15
 8002902:	3b04      	subs	r3, #4
 8002904:	0112      	lsls	r2, r2, #4
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	440b      	add	r3, r1
 800290a:	761a      	strb	r2, [r3, #24]
}
 800290c:	bf00      	nop
 800290e:	370c      	adds	r7, #12
 8002910:	46bd      	mov	sp, r7
 8002912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002916:	4770      	bx	lr
 8002918:	e000e100 	.word	0xe000e100
 800291c:	e000ed00 	.word	0xe000ed00

08002920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002920:	b480      	push	{r7}
 8002922:	b089      	sub	sp, #36	; 0x24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f003 0307 	and.w	r3, r3, #7
 8002932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	f1c3 0307 	rsb	r3, r3, #7
 800293a:	2b04      	cmp	r3, #4
 800293c:	bf28      	it	cs
 800293e:	2304      	movcs	r3, #4
 8002940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002942:	69fb      	ldr	r3, [r7, #28]
 8002944:	3304      	adds	r3, #4
 8002946:	2b06      	cmp	r3, #6
 8002948:	d902      	bls.n	8002950 <NVIC_EncodePriority+0x30>
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	3b03      	subs	r3, #3
 800294e:	e000      	b.n	8002952 <NVIC_EncodePriority+0x32>
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002954:	f04f 32ff 	mov.w	r2, #4294967295
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	fa02 f303 	lsl.w	r3, r2, r3
 800295e:	43da      	mvns	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	401a      	ands	r2, r3
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002968:	f04f 31ff 	mov.w	r1, #4294967295
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	fa01 f303 	lsl.w	r3, r1, r3
 8002972:	43d9      	mvns	r1, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002978:	4313      	orrs	r3, r2
         );
}
 800297a:	4618      	mov	r0, r3
 800297c:	3724      	adds	r7, #36	; 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3b01      	subs	r3, #1
 8002994:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002998:	d301      	bcc.n	800299e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800299a:	2301      	movs	r3, #1
 800299c:	e00f      	b.n	80029be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800299e:	4a0a      	ldr	r2, [pc, #40]	; (80029c8 <SysTick_Config+0x40>)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3b01      	subs	r3, #1
 80029a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029a6:	210f      	movs	r1, #15
 80029a8:	f04f 30ff 	mov.w	r0, #4294967295
 80029ac:	f7ff ff8e 	bl	80028cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029b0:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <SysTick_Config+0x40>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <SysTick_Config+0x40>)
 80029b8:	2207      	movs	r2, #7
 80029ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	e000e010 	.word	0xe000e010

080029cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f7ff ff47 	bl	8002868 <__NVIC_SetPriorityGrouping>
}
 80029da:	bf00      	nop
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b086      	sub	sp, #24
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	4603      	mov	r3, r0
 80029ea:	60b9      	str	r1, [r7, #8]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80029f0:	2300      	movs	r3, #0
 80029f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029f4:	f7ff ff5c 	bl	80028b0 <__NVIC_GetPriorityGrouping>
 80029f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	68b9      	ldr	r1, [r7, #8]
 80029fe:	6978      	ldr	r0, [r7, #20]
 8002a00:	f7ff ff8e 	bl	8002920 <NVIC_EncodePriority>
 8002a04:	4602      	mov	r2, r0
 8002a06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff ff5d 	bl	80028cc <__NVIC_SetPriority>
}
 8002a12:	bf00      	nop
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff ffb0 	bl	8002988 <SysTick_Config>
 8002a28:	4603      	mov	r3, r0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
	...

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a42:	e166      	b.n	8002d12 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	4013      	ands	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8158 	beq.w	8002d0c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d00b      	beq.n	8002a7c <HAL_GPIO_Init+0x48>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d007      	beq.n	8002a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a70:	2b11      	cmp	r3, #17
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b12      	cmp	r3, #18
 8002a7a:	d130      	bne.n	8002ade <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	2203      	movs	r2, #3
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	4013      	ands	r3, r2
 8002a92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	f003 0201 	and.w	r2, r3, #1
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	693a      	ldr	r2, [r7, #16]
 8002adc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	2203      	movs	r2, #3
 8002aea:	fa02 f303 	lsl.w	r3, r2, r3
 8002aee:	43db      	mvns	r3, r3
 8002af0:	693a      	ldr	r2, [r7, #16]
 8002af2:	4013      	ands	r3, r2
 8002af4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	fa02 f303 	lsl.w	r3, r2, r3
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d003      	beq.n	8002b1e <HAL_GPIO_Init+0xea>
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	2b12      	cmp	r3, #18
 8002b1c:	d123      	bne.n	8002b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	08da      	lsrs	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	6939      	ldr	r1, [r7, #16]
 8002b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2203      	movs	r2, #3
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0203 	and.w	r2, r3, #3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80b2 	beq.w	8002d0c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ba8:	4b61      	ldr	r3, [pc, #388]	; (8002d30 <HAL_GPIO_Init+0x2fc>)
 8002baa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bac:	4a60      	ldr	r2, [pc, #384]	; (8002d30 <HAL_GPIO_Init+0x2fc>)
 8002bae:	f043 0301 	orr.w	r3, r3, #1
 8002bb2:	6613      	str	r3, [r2, #96]	; 0x60
 8002bb4:	4b5e      	ldr	r3, [pc, #376]	; (8002d30 <HAL_GPIO_Init+0x2fc>)
 8002bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb8:	f003 0301 	and.w	r3, r3, #1
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bc0:	4a5c      	ldr	r2, [pc, #368]	; (8002d34 <HAL_GPIO_Init+0x300>)
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	089b      	lsrs	r3, r3, #2
 8002bc6:	3302      	adds	r3, #2
 8002bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f003 0303 	and.w	r3, r3, #3
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	220f      	movs	r2, #15
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bea:	d02b      	beq.n	8002c44 <HAL_GPIO_Init+0x210>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a52      	ldr	r2, [pc, #328]	; (8002d38 <HAL_GPIO_Init+0x304>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d025      	beq.n	8002c40 <HAL_GPIO_Init+0x20c>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a51      	ldr	r2, [pc, #324]	; (8002d3c <HAL_GPIO_Init+0x308>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d01f      	beq.n	8002c3c <HAL_GPIO_Init+0x208>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a50      	ldr	r2, [pc, #320]	; (8002d40 <HAL_GPIO_Init+0x30c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d019      	beq.n	8002c38 <HAL_GPIO_Init+0x204>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a4f      	ldr	r2, [pc, #316]	; (8002d44 <HAL_GPIO_Init+0x310>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_GPIO_Init+0x200>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a4e      	ldr	r2, [pc, #312]	; (8002d48 <HAL_GPIO_Init+0x314>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00d      	beq.n	8002c30 <HAL_GPIO_Init+0x1fc>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a4d      	ldr	r2, [pc, #308]	; (8002d4c <HAL_GPIO_Init+0x318>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <HAL_GPIO_Init+0x1f8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a4c      	ldr	r2, [pc, #304]	; (8002d50 <HAL_GPIO_Init+0x31c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d101      	bne.n	8002c28 <HAL_GPIO_Init+0x1f4>
 8002c24:	2307      	movs	r3, #7
 8002c26:	e00e      	b.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c28:	2308      	movs	r3, #8
 8002c2a:	e00c      	b.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c2c:	2306      	movs	r3, #6
 8002c2e:	e00a      	b.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c30:	2305      	movs	r3, #5
 8002c32:	e008      	b.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c34:	2304      	movs	r3, #4
 8002c36:	e006      	b.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c38:	2303      	movs	r3, #3
 8002c3a:	e004      	b.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	e002      	b.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c40:	2301      	movs	r3, #1
 8002c42:	e000      	b.n	8002c46 <HAL_GPIO_Init+0x212>
 8002c44:	2300      	movs	r3, #0
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	f002 0203 	and.w	r2, r2, #3
 8002c4c:	0092      	lsls	r2, r2, #2
 8002c4e:	4093      	lsls	r3, r2
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	4313      	orrs	r3, r2
 8002c54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c56:	4937      	ldr	r1, [pc, #220]	; (8002d34 <HAL_GPIO_Init+0x300>)
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	089b      	lsrs	r3, r3, #2
 8002c5c:	3302      	adds	r3, #2
 8002c5e:	693a      	ldr	r2, [r7, #16]
 8002c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002c64:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c88:	4a32      	ldr	r2, [pc, #200]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002c8e:	4b31      	ldr	r3, [pc, #196]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	693a      	ldr	r2, [r7, #16]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cb2:	4a28      	ldr	r2, [pc, #160]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cb8:	4b26      	ldr	r3, [pc, #152]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cdc:	4a1d      	ldr	r2, [pc, #116]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002ce2:	4b1c      	ldr	r3, [pc, #112]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	43db      	mvns	r3, r3
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	4013      	ands	r3, r2
 8002cf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d06:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <HAL_GPIO_Init+0x320>)
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f47f ae91 	bne.w	8002a44 <HAL_GPIO_Init+0x10>
  }
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	40010000 	.word	0x40010000
 8002d38:	48000400 	.word	0x48000400
 8002d3c:	48000800 	.word	0x48000800
 8002d40:	48000c00 	.word	0x48000c00
 8002d44:	48001000 	.word	0x48001000
 8002d48:	48001400 	.word	0x48001400
 8002d4c:	48001800 	.word	0x48001800
 8002d50:	48001c00 	.word	0x48001c00
 8002d54:	40010400 	.word	0x40010400

08002d58 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d68:	d102      	bne.n	8002d70 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d6e:	e00b      	b.n	8002d88 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002d70:	4b08      	ldr	r3, [pc, #32]	; (8002d94 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d7e:	d102      	bne.n	8002d86 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002d80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d84:	e000      	b.n	8002d88 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002d86:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40007000 	.word	0x40007000

08002d98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d141      	bne.n	8002e2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002da6:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db2:	d131      	bne.n	8002e18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002db4:	4b47      	ldr	r3, [pc, #284]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002db6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dba:	4a46      	ldr	r2, [pc, #280]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc4:	4b43      	ldr	r3, [pc, #268]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dcc:	4a41      	ldr	r2, [pc, #260]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002dd4:	4b40      	ldr	r3, [pc, #256]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2232      	movs	r2, #50	; 0x32
 8002dda:	fb02 f303 	mul.w	r3, r2, r3
 8002dde:	4a3f      	ldr	r2, [pc, #252]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002de0:	fba2 2303 	umull	r2, r3, r2, r3
 8002de4:	0c9b      	lsrs	r3, r3, #18
 8002de6:	3301      	adds	r3, #1
 8002de8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dea:	e002      	b.n	8002df2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df2:	4b38      	ldr	r3, [pc, #224]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df4:	695b      	ldr	r3, [r3, #20]
 8002df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dfe:	d102      	bne.n	8002e06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f2      	bne.n	8002dec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e06:	4b33      	ldr	r3, [pc, #204]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e12:	d158      	bne.n	8002ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e057      	b.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e18:	4b2e      	ldr	r3, [pc, #184]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e1e:	4a2d      	ldr	r2, [pc, #180]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e28:	e04d      	b.n	8002ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e30:	d141      	bne.n	8002eb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e32:	4b28      	ldr	r3, [pc, #160]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d131      	bne.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e40:	4b24      	ldr	r3, [pc, #144]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e46:	4a23      	ldr	r2, [pc, #140]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e50:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e58:	4a1e      	ldr	r2, [pc, #120]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002e60:	4b1d      	ldr	r3, [pc, #116]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2232      	movs	r2, #50	; 0x32
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	0c9b      	lsrs	r3, r3, #18
 8002e72:	3301      	adds	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e76:	e002      	b.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8a:	d102      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f2      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e92:	4b10      	ldr	r3, [pc, #64]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d112      	bne.n	8002ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e011      	b.n	8002ec8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea4:	4b0b      	ldr	r3, [pc, #44]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002eb4:	e007      	b.n	8002ec6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ebe:	4a05      	ldr	r2, [pc, #20]	; (8002ed4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40007000 	.word	0x40007000
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	431bde83 	.word	0x431bde83

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b088      	sub	sp, #32
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d102      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	f000 bc16 	b.w	8003720 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef4:	4ba0      	ldr	r3, [pc, #640]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f003 030c 	and.w	r3, r3, #12
 8002efc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002efe:	4b9e      	ldr	r3, [pc, #632]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 80e4 	beq.w	80030de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d007      	beq.n	8002f2c <HAL_RCC_OscConfig+0x4c>
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	f040 808b 	bne.w	800303a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	f040 8087 	bne.w	800303a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f2c:	4b92      	ldr	r3, [pc, #584]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0302 	and.w	r3, r3, #2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_OscConfig+0x64>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e3ed      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a1a      	ldr	r2, [r3, #32]
 8002f48:	4b8b      	ldr	r3, [pc, #556]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0308 	and.w	r3, r3, #8
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d004      	beq.n	8002f5e <HAL_RCC_OscConfig+0x7e>
 8002f54:	4b88      	ldr	r3, [pc, #544]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5c:	e005      	b.n	8002f6a <HAL_RCC_OscConfig+0x8a>
 8002f5e:	4b86      	ldr	r3, [pc, #536]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f64:	091b      	lsrs	r3, r3, #4
 8002f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d223      	bcs.n	8002fb6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fdc8 	bl	8003b08 <RCC_SetFlashLatencyFromMSIRange>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e3ce      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f82:	4b7d      	ldr	r3, [pc, #500]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7c      	ldr	r2, [pc, #496]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002f88:	f043 0308 	orr.w	r3, r3, #8
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b7a      	ldr	r3, [pc, #488]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4977      	ldr	r1, [pc, #476]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fa0:	4b75      	ldr	r3, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	021b      	lsls	r3, r3, #8
 8002fae:	4972      	ldr	r1, [pc, #456]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	604b      	str	r3, [r1, #4]
 8002fb4:	e025      	b.n	8003002 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fb6:	4b70      	ldr	r3, [pc, #448]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a6f      	ldr	r2, [pc, #444]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002fbc:	f043 0308 	orr.w	r3, r3, #8
 8002fc0:	6013      	str	r3, [r2, #0]
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	496a      	ldr	r1, [pc, #424]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fd4:	4b68      	ldr	r3, [pc, #416]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	021b      	lsls	r3, r3, #8
 8002fe2:	4965      	ldr	r1, [pc, #404]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d109      	bne.n	8003002 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 fd88 	bl	8003b08 <RCC_SetFlashLatencyFromMSIRange>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d001      	beq.n	8003002 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e38e      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003002:	f000 fcbf 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003006:	4601      	mov	r1, r0
 8003008:	4b5b      	ldr	r3, [pc, #364]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	4a5a      	ldr	r2, [pc, #360]	; (800317c <HAL_RCC_OscConfig+0x29c>)
 8003014:	5cd3      	ldrb	r3, [r2, r3]
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	fa21 f303 	lsr.w	r3, r1, r3
 800301e:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_RCC_OscConfig+0x2a0>)
 8003020:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003022:	4b58      	ldr	r3, [pc, #352]	; (8003184 <HAL_RCC_OscConfig+0x2a4>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4618      	mov	r0, r3
 8003028:	f7ff fbc2 	bl	80027b0 <HAL_InitTick>
 800302c:	4603      	mov	r3, r0
 800302e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d052      	beq.n	80030dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003036:	7bfb      	ldrb	r3, [r7, #15]
 8003038:	e372      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d032      	beq.n	80030a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003042:	4b4d      	ldr	r3, [pc, #308]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a4c      	ldr	r2, [pc, #304]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003048:	f043 0301 	orr.w	r3, r3, #1
 800304c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800304e:	f7ff fbff 	bl	8002850 <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003056:	f7ff fbfb 	bl	8002850 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e35b      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003068:	4b43      	ldr	r3, [pc, #268]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003074:	4b40      	ldr	r3, [pc, #256]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a3f      	ldr	r2, [pc, #252]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 800307a:	f043 0308 	orr.w	r3, r3, #8
 800307e:	6013      	str	r3, [r2, #0]
 8003080:	4b3d      	ldr	r3, [pc, #244]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6a1b      	ldr	r3, [r3, #32]
 800308c:	493a      	ldr	r1, [pc, #232]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 800308e:	4313      	orrs	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003092:	4b39      	ldr	r3, [pc, #228]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	021b      	lsls	r3, r3, #8
 80030a0:	4935      	ldr	r1, [pc, #212]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	604b      	str	r3, [r1, #4]
 80030a6:	e01a      	b.n	80030de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030a8:	4b33      	ldr	r3, [pc, #204]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a32      	ldr	r2, [pc, #200]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030b4:	f7ff fbcc 	bl	8002850 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030ba:	e008      	b.n	80030ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030bc:	f7ff fbc8 	bl	8002850 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e328      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030ce:	4b2a      	ldr	r3, [pc, #168]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1f0      	bne.n	80030bc <HAL_RCC_OscConfig+0x1dc>
 80030da:	e000      	b.n	80030de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d073      	beq.n	80031d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b08      	cmp	r3, #8
 80030ee:	d005      	beq.n	80030fc <HAL_RCC_OscConfig+0x21c>
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2b0c      	cmp	r3, #12
 80030f4:	d10e      	bne.n	8003114 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d10b      	bne.n	8003114 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030fc:	4b1e      	ldr	r3, [pc, #120]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003104:	2b00      	cmp	r3, #0
 8003106:	d063      	beq.n	80031d0 <HAL_RCC_OscConfig+0x2f0>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d15f      	bne.n	80031d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e305      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800311c:	d106      	bne.n	800312c <HAL_RCC_OscConfig+0x24c>
 800311e:	4b16      	ldr	r3, [pc, #88]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a15      	ldr	r2, [pc, #84]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	e01d      	b.n	8003168 <HAL_RCC_OscConfig+0x288>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x270>
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a0f      	ldr	r2, [pc, #60]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 800313c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003140:	6013      	str	r3, [r2, #0]
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a0c      	ldr	r2, [pc, #48]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800314c:	6013      	str	r3, [r2, #0]
 800314e:	e00b      	b.n	8003168 <HAL_RCC_OscConfig+0x288>
 8003150:	4b09      	ldr	r3, [pc, #36]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a08      	ldr	r2, [pc, #32]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800315a:	6013      	str	r3, [r2, #0]
 800315c:	4b06      	ldr	r3, [pc, #24]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a05      	ldr	r2, [pc, #20]	; (8003178 <HAL_RCC_OscConfig+0x298>)
 8003162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d01b      	beq.n	80031a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7ff fb6e 	bl	8002850 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003176:	e010      	b.n	800319a <HAL_RCC_OscConfig+0x2ba>
 8003178:	40021000 	.word	0x40021000
 800317c:	0800b2a4 	.word	0x0800b2a4
 8003180:	20000000 	.word	0x20000000
 8003184:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003188:	f7ff fb62 	bl	8002850 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b64      	cmp	r3, #100	; 0x64
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e2c2      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800319a:	4baf      	ldr	r3, [pc, #700]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x2a8>
 80031a6:	e014      	b.n	80031d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7ff fb52 	bl	8002850 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7ff fb4e 	bl	8002850 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	; 0x64
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e2ae      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031c2:	4ba5      	ldr	r3, [pc, #660]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x2d0>
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d060      	beq.n	80032a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	2b04      	cmp	r3, #4
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_OscConfig+0x310>
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	d119      	bne.n	800321e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d116      	bne.n	800321e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031f0:	4b99      	ldr	r3, [pc, #612]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_RCC_OscConfig+0x328>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d101      	bne.n	8003208 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e28b      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003208:	4b93      	ldr	r3, [pc, #588]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	691b      	ldr	r3, [r3, #16]
 8003214:	061b      	lsls	r3, r3, #24
 8003216:	4990      	ldr	r1, [pc, #576]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800321c:	e040      	b.n	80032a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d023      	beq.n	800326e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003226:	4b8c      	ldr	r3, [pc, #560]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a8b      	ldr	r2, [pc, #556]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003230:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003232:	f7ff fb0d 	bl	8002850 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800323a:	f7ff fb09 	bl	8002850 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e269      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800324c:	4b82      	ldr	r3, [pc, #520]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003258:	4b7f      	ldr	r3, [pc, #508]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	061b      	lsls	r3, r3, #24
 8003266:	497c      	ldr	r1, [pc, #496]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
 800326c:	e018      	b.n	80032a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800326e:	4b7a      	ldr	r3, [pc, #488]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a79      	ldr	r2, [pc, #484]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 8003274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7ff fae9 	bl	8002850 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003282:	f7ff fae5 	bl	8002850 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e245      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003294:	4b70      	ldr	r3, [pc, #448]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 0308 	and.w	r3, r3, #8
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d03c      	beq.n	8003326 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	695b      	ldr	r3, [r3, #20]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01c      	beq.n	80032ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032b4:	4b68      	ldr	r3, [pc, #416]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80032b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ba:	4a67      	ldr	r2, [pc, #412]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80032bc:	f043 0301 	orr.w	r3, r3, #1
 80032c0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032c4:	f7ff fac4 	bl	8002850 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032cc:	f7ff fac0 	bl	8002850 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e220      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032de:	4b5e      	ldr	r3, [pc, #376]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80032e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d0ef      	beq.n	80032cc <HAL_RCC_OscConfig+0x3ec>
 80032ec:	e01b      	b.n	8003326 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032ee:	4b5a      	ldr	r3, [pc, #360]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80032f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032f4:	4a58      	ldr	r2, [pc, #352]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80032f6:	f023 0301 	bic.w	r3, r3, #1
 80032fa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032fe:	f7ff faa7 	bl	8002850 <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003306:	f7ff faa3 	bl	8002850 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e203      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003318:	4b4f      	ldr	r3, [pc, #316]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 800331a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ef      	bne.n	8003306 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0304 	and.w	r3, r3, #4
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 80a6 	beq.w	8003480 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003334:	2300      	movs	r3, #0
 8003336:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003338:	4b47      	ldr	r3, [pc, #284]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d10d      	bne.n	8003360 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003344:	4b44      	ldr	r3, [pc, #272]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003348:	4a43      	ldr	r2, [pc, #268]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 800334a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800334e:	6593      	str	r3, [r2, #88]	; 0x58
 8003350:	4b41      	ldr	r3, [pc, #260]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 8003352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003358:	60bb      	str	r3, [r7, #8]
 800335a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800335c:	2301      	movs	r3, #1
 800335e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003360:	4b3e      	ldr	r3, [pc, #248]	; (800345c <HAL_RCC_OscConfig+0x57c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003368:	2b00      	cmp	r3, #0
 800336a:	d118      	bne.n	800339e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800336c:	4b3b      	ldr	r3, [pc, #236]	; (800345c <HAL_RCC_OscConfig+0x57c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3a      	ldr	r2, [pc, #232]	; (800345c <HAL_RCC_OscConfig+0x57c>)
 8003372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003376:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003378:	f7ff fa6a 	bl	8002850 <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003380:	f7ff fa66 	bl	8002850 <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e1c6      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003392:	4b32      	ldr	r3, [pc, #200]	; (800345c <HAL_RCC_OscConfig+0x57c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d108      	bne.n	80033b8 <HAL_RCC_OscConfig+0x4d8>
 80033a6:	4b2c      	ldr	r3, [pc, #176]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ac:	4a2a      	ldr	r2, [pc, #168]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033ae:	f043 0301 	orr.w	r3, r3, #1
 80033b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b6:	e024      	b.n	8003402 <HAL_RCC_OscConfig+0x522>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d110      	bne.n	80033e2 <HAL_RCC_OscConfig+0x502>
 80033c0:	4b25      	ldr	r3, [pc, #148]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033c6:	4a24      	ldr	r2, [pc, #144]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033c8:	f043 0304 	orr.w	r3, r3, #4
 80033cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033d0:	4b21      	ldr	r3, [pc, #132]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033d6:	4a20      	ldr	r2, [pc, #128]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033d8:	f043 0301 	orr.w	r3, r3, #1
 80033dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e0:	e00f      	b.n	8003402 <HAL_RCC_OscConfig+0x522>
 80033e2:	4b1d      	ldr	r3, [pc, #116]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033e8:	4a1b      	ldr	r2, [pc, #108]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033ea:	f023 0301 	bic.w	r3, r3, #1
 80033ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033f2:	4b19      	ldr	r3, [pc, #100]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033f8:	4a17      	ldr	r2, [pc, #92]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 80033fa:	f023 0304 	bic.w	r3, r3, #4
 80033fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d016      	beq.n	8003438 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800340a:	f7ff fa21 	bl	8002850 <HAL_GetTick>
 800340e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003410:	e00a      	b.n	8003428 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003412:	f7ff fa1d 	bl	8002850 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003420:	4293      	cmp	r3, r2
 8003422:	d901      	bls.n	8003428 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	e17b      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003428:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <HAL_RCC_OscConfig+0x578>)
 800342a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d0ed      	beq.n	8003412 <HAL_RCC_OscConfig+0x532>
 8003436:	e01a      	b.n	800346e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7ff fa0a 	bl	8002850 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800343e:	e00f      	b.n	8003460 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7ff fa06 	bl	8002850 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d906      	bls.n	8003460 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e164      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
 8003456:	bf00      	nop
 8003458:	40021000 	.word	0x40021000
 800345c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003460:	4ba8      	ldr	r3, [pc, #672]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1e8      	bne.n	8003440 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800346e:	7ffb      	ldrb	r3, [r7, #31]
 8003470:	2b01      	cmp	r3, #1
 8003472:	d105      	bne.n	8003480 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003474:	4ba3      	ldr	r3, [pc, #652]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	4aa2      	ldr	r2, [pc, #648]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 800347a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800347e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d03c      	beq.n	8003506 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01c      	beq.n	80034ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003494:	4b9b      	ldr	r3, [pc, #620]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003496:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800349a:	4a9a      	ldr	r2, [pc, #616]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 800349c:	f043 0301 	orr.w	r3, r3, #1
 80034a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034a4:	f7ff f9d4 	bl	8002850 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034aa:	e008      	b.n	80034be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ac:	f7ff f9d0 	bl	8002850 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	2b02      	cmp	r3, #2
 80034b8:	d901      	bls.n	80034be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034ba:	2303      	movs	r3, #3
 80034bc:	e130      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034be:	4b91      	ldr	r3, [pc, #580]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80034c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0ef      	beq.n	80034ac <HAL_RCC_OscConfig+0x5cc>
 80034cc:	e01b      	b.n	8003506 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034ce:	4b8d      	ldr	r3, [pc, #564]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80034d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034d4:	4a8b      	ldr	r2, [pc, #556]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034de:	f7ff f9b7 	bl	8002850 <HAL_GetTick>
 80034e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e4:	e008      	b.n	80034f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034e6:	f7ff f9b3 	bl	8002850 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	2b02      	cmp	r3, #2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e113      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034f8:	4b82      	ldr	r3, [pc, #520]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80034fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1ef      	bne.n	80034e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 8107 	beq.w	800371e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	2b02      	cmp	r3, #2
 8003516:	f040 80cb 	bne.w	80036b0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800351a:	4b7a      	ldr	r3, [pc, #488]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f003 0203 	and.w	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	429a      	cmp	r2, r3
 800352c:	d12c      	bne.n	8003588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003538:	3b01      	subs	r3, #1
 800353a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800353c:	429a      	cmp	r2, r3
 800353e:	d123      	bne.n	8003588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800354a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800354c:	429a      	cmp	r2, r3
 800354e:	d11b      	bne.n	8003588 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800355c:	429a      	cmp	r2, r3
 800355e:	d113      	bne.n	8003588 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	085b      	lsrs	r3, r3, #1
 800356c:	3b01      	subs	r3, #1
 800356e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d109      	bne.n	8003588 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357e:	085b      	lsrs	r3, r3, #1
 8003580:	3b01      	subs	r3, #1
 8003582:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003584:	429a      	cmp	r2, r3
 8003586:	d06d      	beq.n	8003664 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	2b0c      	cmp	r3, #12
 800358c:	d068      	beq.n	8003660 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800358e:	4b5d      	ldr	r3, [pc, #372]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d105      	bne.n	80035a6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800359a:	4b5a      	ldr	r3, [pc, #360]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0ba      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80035aa:	4b56      	ldr	r3, [pc, #344]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a55      	ldr	r2, [pc, #340]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80035b0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035b4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80035b6:	f7ff f94b 	bl	8002850 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035be:	f7ff f947 	bl	8002850 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e0a7      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035d0:	4b4c      	ldr	r3, [pc, #304]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1f0      	bne.n	80035be <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035dc:	4b49      	ldr	r3, [pc, #292]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	4b49      	ldr	r3, [pc, #292]	; (8003708 <HAL_RCC_OscConfig+0x828>)
 80035e2:	4013      	ands	r3, r2
 80035e4:	687a      	ldr	r2, [r7, #4]
 80035e6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035ec:	3a01      	subs	r2, #1
 80035ee:	0112      	lsls	r2, r2, #4
 80035f0:	4311      	orrs	r1, r2
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035f6:	0212      	lsls	r2, r2, #8
 80035f8:	4311      	orrs	r1, r2
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035fe:	0852      	lsrs	r2, r2, #1
 8003600:	3a01      	subs	r2, #1
 8003602:	0552      	lsls	r2, r2, #21
 8003604:	4311      	orrs	r1, r2
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800360a:	0852      	lsrs	r2, r2, #1
 800360c:	3a01      	subs	r2, #1
 800360e:	0652      	lsls	r2, r2, #25
 8003610:	4311      	orrs	r1, r2
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003616:	06d2      	lsls	r2, r2, #27
 8003618:	430a      	orrs	r2, r1
 800361a:	493a      	ldr	r1, [pc, #232]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 800361c:	4313      	orrs	r3, r2
 800361e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003620:	4b38      	ldr	r3, [pc, #224]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a37      	ldr	r2, [pc, #220]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800362a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800362c:	4b35      	ldr	r3, [pc, #212]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	4a34      	ldr	r2, [pc, #208]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003636:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003638:	f7ff f90a 	bl	8002850 <HAL_GetTick>
 800363c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800363e:	e008      	b.n	8003652 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003640:	f7ff f906 	bl	8002850 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	2b02      	cmp	r3, #2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e066      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003652:	4b2c      	ldr	r3, [pc, #176]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0f0      	beq.n	8003640 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800365e:	e05e      	b.n	800371e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e05d      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003664:	4b27      	ldr	r3, [pc, #156]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d156      	bne.n	800371e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003670:	4b24      	ldr	r3, [pc, #144]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003676:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800367a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 8003682:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003686:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003688:	f7ff f8e2 	bl	8002850 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003690:	f7ff f8de 	bl	8002850 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e03e      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036a2:	4b18      	ldr	r3, [pc, #96]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0x7b0>
 80036ae:	e036      	b.n	800371e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	2b0c      	cmp	r3, #12
 80036b4:	d031      	beq.n	800371a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036b6:	4b13      	ldr	r3, [pc, #76]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a12      	ldr	r2, [pc, #72]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80036bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80036c2:	4b10      	ldr	r3, [pc, #64]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d105      	bne.n	80036da <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80036ce:	4b0d      	ldr	r3, [pc, #52]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	4a0c      	ldr	r2, [pc, #48]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80036d4:	f023 0303 	bic.w	r3, r3, #3
 80036d8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80036da:	4b0a      	ldr	r3, [pc, #40]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_OscConfig+0x824>)
 80036e0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80036e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ea:	f7ff f8b1 	bl	8002850 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f0:	e00c      	b.n	800370c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036f2:	f7ff f8ad 	bl	8002850 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d905      	bls.n	800370c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e00d      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
 8003704:	40021000 	.word	0x40021000
 8003708:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_RCC_OscConfig+0x848>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ec      	bne.n	80036f2 <HAL_RCC_OscConfig+0x812>
 8003718:	e001      	b.n	800371e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	e000      	b.n	8003720 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3720      	adds	r7, #32
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40021000 	.word	0x40021000

0800372c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e10f      	b.n	8003964 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003744:	4b89      	ldr	r3, [pc, #548]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 030f 	and.w	r3, r3, #15
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d910      	bls.n	8003774 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003752:	4b86      	ldr	r3, [pc, #536]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 020f 	bic.w	r2, r3, #15
 800375a:	4984      	ldr	r1, [pc, #528]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4313      	orrs	r3, r2
 8003760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003762:	4b82      	ldr	r3, [pc, #520]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	683a      	ldr	r2, [r7, #0]
 800376c:	429a      	cmp	r2, r3
 800376e:	d001      	beq.n	8003774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e0f7      	b.n	8003964 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8089 	beq.w	8003894 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b03      	cmp	r3, #3
 8003788:	d133      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378a:	4b79      	ldr	r3, [pc, #484]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d101      	bne.n	800379a <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0e4      	b.n	8003964 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800379a:	f000 fa0f 	bl	8003bbc <RCC_GetSysClockFreqFromPLLSource>
 800379e:	4602      	mov	r2, r0
 80037a0:	4b74      	ldr	r3, [pc, #464]	; (8003974 <HAL_RCC_ClockConfig+0x248>)
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d955      	bls.n	8003852 <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037a6:	4b72      	ldr	r3, [pc, #456]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037b2:	4b6f      	ldr	r3, [pc, #444]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037ba:	4a6d      	ldr	r2, [pc, #436]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037c0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037c2:	2380      	movs	r3, #128	; 0x80
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e044      	b.n	8003852 <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d03e      	beq.n	8003852 <HAL_RCC_ClockConfig+0x126>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d13a      	bne.n	8003852 <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80037dc:	4b64      	ldr	r3, [pc, #400]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037e4:	4a62      	ldr	r2, [pc, #392]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80037ea:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	617b      	str	r3, [r7, #20]
 80037f0:	e02f      	b.n	8003852 <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d107      	bne.n	800380a <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037fa:	4b5d      	ldr	r3, [pc, #372]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003802:	2b00      	cmp	r3, #0
 8003804:	d115      	bne.n	8003832 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e0ac      	b.n	8003964 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d107      	bne.n	8003822 <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003812:	4b57      	ldr	r3, [pc, #348]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e0a0      	b.n	8003964 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003822:	4b53      	ldr	r3, [pc, #332]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800382a:	2b00      	cmp	r3, #0
 800382c:	d101      	bne.n	8003832 <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e098      	b.n	8003964 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003832:	f000 f8a7 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003836:	4602      	mov	r2, r0
 8003838:	4b4e      	ldr	r3, [pc, #312]	; (8003974 <HAL_RCC_ClockConfig+0x248>)
 800383a:	429a      	cmp	r2, r3
 800383c:	d909      	bls.n	8003852 <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800383e:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003846:	4a4a      	ldr	r2, [pc, #296]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003852:	4b47      	ldr	r3, [pc, #284]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f023 0203 	bic.w	r2, r3, #3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	4944      	ldr	r1, [pc, #272]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003860:	4313      	orrs	r3, r2
 8003862:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003864:	f7fe fff4 	bl	8002850 <HAL_GetTick>
 8003868:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800386a:	e00a      	b.n	8003882 <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386c:	f7fe fff0 	bl	8002850 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	1ad3      	subs	r3, r2, r3
 8003876:	f241 3288 	movw	r2, #5000	; 0x1388
 800387a:	4293      	cmp	r3, r2
 800387c:	d901      	bls.n	8003882 <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800387e:	2303      	movs	r3, #3
 8003880:	e070      	b.n	8003964 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003882:	4b3b      	ldr	r3, [pc, #236]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	f003 020c 	and.w	r2, r3, #12
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	429a      	cmp	r2, r3
 8003892:	d1eb      	bne.n	800386c <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d009      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038a0:	4b33      	ldr	r3, [pc, #204]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	4930      	ldr	r1, [pc, #192]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	608b      	str	r3, [r1, #8]
 80038b2:	e008      	b.n	80038c6 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2b80      	cmp	r3, #128	; 0x80
 80038b8:	d105      	bne.n	80038c6 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80038ba:	4b2d      	ldr	r3, [pc, #180]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4a2c      	ldr	r2, [pc, #176]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 80038c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038c4:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c6:	4b29      	ldr	r3, [pc, #164]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d210      	bcs.n	80038f6 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d4:	4b25      	ldr	r3, [pc, #148]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f023 020f 	bic.w	r2, r3, #15
 80038dc:	4923      	ldr	r1, [pc, #140]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e4:	4b21      	ldr	r3, [pc, #132]	; (800396c <HAL_RCC_ClockConfig+0x240>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 030f 	and.w	r3, r3, #15
 80038ec:	683a      	ldr	r2, [r7, #0]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d001      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e036      	b.n	8003964 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0304 	and.w	r3, r3, #4
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d008      	beq.n	8003914 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003902:	4b1b      	ldr	r3, [pc, #108]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	4918      	ldr	r1, [pc, #96]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003910:	4313      	orrs	r3, r2
 8003912:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0308 	and.w	r3, r3, #8
 800391c:	2b00      	cmp	r3, #0
 800391e:	d009      	beq.n	8003934 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003920:	4b13      	ldr	r3, [pc, #76]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	00db      	lsls	r3, r3, #3
 800392e:	4910      	ldr	r1, [pc, #64]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 8003930:	4313      	orrs	r3, r2
 8003932:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003934:	f000 f826 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8003938:	4601      	mov	r1, r0
 800393a:	4b0d      	ldr	r3, [pc, #52]	; (8003970 <HAL_RCC_ClockConfig+0x244>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 030f 	and.w	r3, r3, #15
 8003944:	4a0c      	ldr	r2, [pc, #48]	; (8003978 <HAL_RCC_ClockConfig+0x24c>)
 8003946:	5cd3      	ldrb	r3, [r2, r3]
 8003948:	f003 031f 	and.w	r3, r3, #31
 800394c:	fa21 f303 	lsr.w	r3, r1, r3
 8003950:	4a0a      	ldr	r2, [pc, #40]	; (800397c <HAL_RCC_ClockConfig+0x250>)
 8003952:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003954:	4b0a      	ldr	r3, [pc, #40]	; (8003980 <HAL_RCC_ClockConfig+0x254>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fe ff29 	bl	80027b0 <HAL_InitTick>
 800395e:	4603      	mov	r3, r0
 8003960:	73fb      	strb	r3, [r7, #15]

  return status;
 8003962:	7bfb      	ldrb	r3, [r7, #15]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3718      	adds	r7, #24
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40022000 	.word	0x40022000
 8003970:	40021000 	.word	0x40021000
 8003974:	04c4b400 	.word	0x04c4b400
 8003978:	0800b2a4 	.word	0x0800b2a4
 800397c:	20000000 	.word	0x20000000
 8003980:	20000004 	.word	0x20000004

08003984 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	2300      	movs	r3, #0
 8003990:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003992:	4b3d      	ldr	r3, [pc, #244]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f003 030c 	and.w	r3, r3, #12
 800399a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800399c:	4b3a      	ldr	r3, [pc, #232]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d005      	beq.n	80039b8 <HAL_RCC_GetSysClockFreq+0x34>
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d121      	bne.n	80039f6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d11e      	bne.n	80039f6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039b8:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 0308 	and.w	r3, r3, #8
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d107      	bne.n	80039d4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039c4:	4b30      	ldr	r3, [pc, #192]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 80039c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80039ca:	0a1b      	lsrs	r3, r3, #8
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	61fb      	str	r3, [r7, #28]
 80039d2:	e005      	b.n	80039e0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039d4:	4b2c      	ldr	r3, [pc, #176]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	091b      	lsrs	r3, r3, #4
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039e0:	4a2a      	ldr	r2, [pc, #168]	; (8003a8c <HAL_RCC_GetSysClockFreq+0x108>)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039e8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10d      	bne.n	8003a0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039f4:	e00a      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b04      	cmp	r3, #4
 80039fa:	d102      	bne.n	8003a02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80039fc:	4b24      	ldr	r3, [pc, #144]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x10c>)
 80039fe:	61bb      	str	r3, [r7, #24]
 8003a00:	e004      	b.n	8003a0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b08      	cmp	r3, #8
 8003a06:	d101      	bne.n	8003a0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a08:	4b22      	ldr	r3, [pc, #136]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	2b0c      	cmp	r3, #12
 8003a10:	d133      	bne.n	8003a7a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a12:	4b1d      	ldr	r3, [pc, #116]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	f003 0303 	and.w	r3, r3, #3
 8003a1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d002      	beq.n	8003a28 <HAL_RCC_GetSysClockFreq+0xa4>
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d003      	beq.n	8003a2e <HAL_RCC_GetSysClockFreq+0xaa>
 8003a26:	e005      	b.n	8003a34 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a28:	4b19      	ldr	r3, [pc, #100]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003a2a:	617b      	str	r3, [r7, #20]
      break;
 8003a2c:	e005      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a2e:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a30:	617b      	str	r3, [r7, #20]
      break;
 8003a32:	e002      	b.n	8003a3a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	617b      	str	r3, [r7, #20]
      break;
 8003a38:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a3a:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 030f 	and.w	r3, r3, #15
 8003a44:	3301      	adds	r3, #1
 8003a46:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a48:	4b0f      	ldr	r3, [pc, #60]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	0a1b      	lsrs	r3, r3, #8
 8003a4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	fb02 f203 	mul.w	r2, r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_GetSysClockFreq+0x104>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0e5b      	lsrs	r3, r3, #25
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a7a:	69bb      	ldr	r3, [r7, #24]
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3724      	adds	r7, #36	; 0x24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	0800b2bc 	.word	0x0800b2bc
 8003a90:	00f42400 	.word	0x00f42400
 8003a94:	007a1200 	.word	0x007a1200

08003a98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a9c:	4b03      	ldr	r3, [pc, #12]	; (8003aac <HAL_RCC_GetHCLKFreq+0x14>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000000 	.word	0x20000000

08003ab0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003ab4:	f7ff fff0 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ab8:	4601      	mov	r1, r0
 8003aba:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	4a04      	ldr	r2, [pc, #16]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003ac6:	5cd3      	ldrb	r3, [r2, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	0800b2b4 	.word	0x0800b2b4

08003adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003ae0:	f7ff ffda 	bl	8003a98 <HAL_RCC_GetHCLKFreq>
 8003ae4:	4601      	mov	r1, r0
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0adb      	lsrs	r3, r3, #11
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4a04      	ldr	r2, [pc, #16]	; (8003b04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003af2:	5cd3      	ldrb	r3, [r2, r3]
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	40021000 	.word	0x40021000
 8003b04:	0800b2b4 	.word	0x0800b2b4

08003b08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003b14:	4b27      	ldr	r3, [pc, #156]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003b20:	f7ff f91a 	bl	8002d58 <HAL_PWREx_GetVoltageRange>
 8003b24:	6178      	str	r0, [r7, #20]
 8003b26:	e014      	b.n	8003b52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b28:	4b22      	ldr	r3, [pc, #136]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2c:	4a21      	ldr	r2, [pc, #132]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b32:	6593      	str	r3, [r2, #88]	; 0x58
 8003b34:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3c:	60fb      	str	r3, [r7, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003b40:	f7ff f90a 	bl	8002d58 <HAL_PWREx_GetVoltageRange>
 8003b44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003b46:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4a:	4a1a      	ldr	r2, [pc, #104]	; (8003bb4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003b4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b58:	d10b      	bne.n	8003b72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b80      	cmp	r3, #128	; 0x80
 8003b5e:	d913      	bls.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2ba0      	cmp	r3, #160	; 0xa0
 8003b64:	d902      	bls.n	8003b6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b66:	2302      	movs	r3, #2
 8003b68:	613b      	str	r3, [r7, #16]
 8003b6a:	e00d      	b.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	613b      	str	r3, [r7, #16]
 8003b70:	e00a      	b.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b7f      	cmp	r3, #127	; 0x7f
 8003b76:	d902      	bls.n	8003b7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003b78:	2302      	movs	r3, #2
 8003b7a:	613b      	str	r3, [r7, #16]
 8003b7c:	e004      	b.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b70      	cmp	r3, #112	; 0x70
 8003b82:	d101      	bne.n	8003b88 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b84:	2301      	movs	r3, #1
 8003b86:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f023 020f 	bic.w	r2, r3, #15
 8003b90:	4909      	ldr	r1, [pc, #36]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b98:	4b07      	ldr	r3, [pc, #28]	; (8003bb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d001      	beq.n	8003baa <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40021000 	.word	0x40021000
 8003bb8:	40022000 	.word	0x40022000

08003bbc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b087      	sub	sp, #28
 8003bc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8003bc6:	4b2d      	ldr	r3, [pc, #180]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0303 	and.w	r3, r3, #3
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d118      	bne.n	8003c04 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bd2:	4b2a      	ldr	r3, [pc, #168]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0308 	and.w	r3, r3, #8
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d107      	bne.n	8003bee <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bde:	4b27      	ldr	r3, [pc, #156]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003be4:	0a1b      	lsrs	r3, r3, #8
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	617b      	str	r3, [r7, #20]
 8003bec:	e005      	b.n	8003bfa <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003bee:	4b23      	ldr	r3, [pc, #140]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	091b      	lsrs	r3, r3, #4
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003bfa:	4a21      	ldr	r2, [pc, #132]	; (8003c80 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c02:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c04:	4b1d      	ldr	r3, [pc, #116]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2b02      	cmp	r3, #2
 8003c12:	d002      	beq.n	8003c1a <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8003c14:	2b03      	cmp	r3, #3
 8003c16:	d003      	beq.n	8003c20 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003c18:	e005      	b.n	8003c26 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003c1a:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003c1c:	613b      	str	r3, [r7, #16]
    break;
 8003c1e:	e005      	b.n	8003c2c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003c20:	4b19      	ldr	r3, [pc, #100]	; (8003c88 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003c22:	613b      	str	r3, [r7, #16]
    break;
 8003c24:	e002      	b.n	8003c2c <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	613b      	str	r3, [r7, #16]
    break;
 8003c2a:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c2c:	4b13      	ldr	r3, [pc, #76]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	091b      	lsrs	r3, r3, #4
 8003c32:	f003 030f 	and.w	r3, r3, #15
 8003c36:	3301      	adds	r3, #1
 8003c38:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c3a:	4b10      	ldr	r3, [pc, #64]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	fb02 f203 	mul.w	r2, r2, r3
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c50:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c52:	4b0a      	ldr	r3, [pc, #40]	; (8003c7c <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	0e5b      	lsrs	r3, r3, #25
 8003c58:	f003 0303 	and.w	r3, r3, #3
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c6a:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003c6c:	683b      	ldr	r3, [r7, #0]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	371c      	adds	r7, #28
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr
 8003c7a:	bf00      	nop
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	0800b2bc 	.word	0x0800b2bc
 8003c84:	00f42400 	.word	0x00f42400
 8003c88:	007a1200 	.word	0x007a1200

08003c8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b086      	sub	sp, #24
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003c94:	2300      	movs	r3, #0
 8003c96:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003c98:	2300      	movs	r3, #0
 8003c9a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d03d      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d00b      	beq.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d804      	bhi.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00e      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d015      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003cbc:	e01d      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003cbe:	2b60      	cmp	r3, #96	; 0x60
 8003cc0:	d01e      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d01c      	beq.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003cc6:	e018      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003cc8:	4b86      	ldr	r3, [pc, #536]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	4a85      	ldr	r2, [pc, #532]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003cce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003cd2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cd4:	e015      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	3304      	adds	r3, #4
 8003cda:	2100      	movs	r1, #0
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f000 fafd 	bl	80042dc <RCCEx_PLLSAI1_Config>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ce6:	e00c      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3320      	adds	r3, #32
 8003cec:	2100      	movs	r1, #0
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f000 fbe4 	bl	80044bc <RCCEx_PLLSAI2_Config>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003cf8:	e003      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8003cfe:	e000      	b.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d02:	7cfb      	ldrb	r3, [r7, #19]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d08:	4b76      	ldr	r3, [pc, #472]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d0e:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d16:	4973      	ldr	r1, [pc, #460]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003d1e:	e001      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d20:	7cfb      	ldrb	r3, [r7, #19]
 8003d22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d042      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d38:	d00f      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d3e:	d805      	bhi.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d011      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003d44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d48:	d017      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003d4a:	e01f      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003d4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d50:	d01f      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d56:	d01c      	beq.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003d58:	e018      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d5a:	4b62      	ldr	r3, [pc, #392]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	4a61      	ldr	r2, [pc, #388]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d64:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d66:	e015      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3304      	adds	r3, #4
 8003d6c:	2100      	movs	r1, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f000 fab4 	bl	80042dc <RCCEx_PLLSAI1_Config>
 8003d74:	4603      	mov	r3, r0
 8003d76:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d78:	e00c      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3320      	adds	r3, #32
 8003d7e:	2100      	movs	r1, #0
 8003d80:	4618      	mov	r0, r3
 8003d82:	f000 fb9b 	bl	80044bc <RCCEx_PLLSAI2_Config>
 8003d86:	4603      	mov	r3, r0
 8003d88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003d8a:	e003      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	74fb      	strb	r3, [r7, #19]
      break;
 8003d90:	e000      	b.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 8003d92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003d94:	7cfb      	ldrb	r3, [r7, #19]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10b      	bne.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d9a:	4b52      	ldr	r3, [pc, #328]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003d9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003da0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003da8:	494e      	ldr	r1, [pc, #312]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003db0:	e001      	b.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003db2:	7cfb      	ldrb	r3, [r7, #19]
 8003db4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 809f 	beq.w	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003dc8:	4b46      	ldr	r3, [pc, #280]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d101      	bne.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	e000      	b.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003dd8:	2300      	movs	r3, #0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00d      	beq.n	8003dfa <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dde:	4b41      	ldr	r3, [pc, #260]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de2:	4a40      	ldr	r2, [pc, #256]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003de4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003de8:	6593      	str	r3, [r2, #88]	; 0x58
 8003dea:	4b3e      	ldr	r3, [pc, #248]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	60bb      	str	r3, [r7, #8]
 8003df4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003df6:	2301      	movs	r3, #1
 8003df8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003dfa:	4b3b      	ldr	r3, [pc, #236]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a3a      	ldr	r2, [pc, #232]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e04:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e06:	f7fe fd23 	bl	8002850 <HAL_GetTick>
 8003e0a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e0c:	e009      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e0e:	f7fe fd1f 	bl	8002850 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d902      	bls.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	74fb      	strb	r3, [r7, #19]
        break;
 8003e20:	e005      	b.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003e22:	4b31      	ldr	r3, [pc, #196]	; (8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d0ef      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003e2e:	7cfb      	ldrb	r3, [r7, #19]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d15b      	bne.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003e34:	4b2b      	ldr	r3, [pc, #172]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e3e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d01f      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d019      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e52:	4b24      	ldr	r3, [pc, #144]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e5e:	4b21      	ldr	r3, [pc, #132]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	4a1f      	ldr	r2, [pc, #124]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e74:	4a1b      	ldr	r2, [pc, #108]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e7e:	4a19      	ldr	r2, [pc, #100]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f003 0301 	and.w	r3, r3, #1
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d016      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e90:	f7fe fcde 	bl	8002850 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e96:	e00b      	b.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fe fcda 	bl	8002850 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d902      	bls.n	8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	74fb      	strb	r3, [r7, #19]
            break;
 8003eae:	e006      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003eb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d0ec      	beq.n	8003e98 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003ebe:	7cfb      	ldrb	r3, [r7, #19]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d10c      	bne.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ec4:	4b07      	ldr	r3, [pc, #28]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003edc:	e008      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ede:	7cfb      	ldrb	r3, [r7, #19]
 8003ee0:	74bb      	strb	r3, [r7, #18]
 8003ee2:	e005      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x264>
 8003ee4:	40021000 	.word	0x40021000
 8003ee8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eec:	7cfb      	ldrb	r3, [r7, #19]
 8003eee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ef0:	7c7b      	ldrb	r3, [r7, #17]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef6:	4ba0      	ldr	r3, [pc, #640]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003efa:	4a9f      	ldr	r2, [pc, #636]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f0e:	4b9a      	ldr	r3, [pc, #616]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f14:	f023 0203 	bic.w	r2, r3, #3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	4996      	ldr	r1, [pc, #600]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f30:	4b91      	ldr	r3, [pc, #580]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f36:	f023 020c 	bic.w	r2, r3, #12
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	498e      	ldr	r1, [pc, #568]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0304 	and.w	r3, r3, #4
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f52:	4b89      	ldr	r3, [pc, #548]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f58:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f60:	4985      	ldr	r1, [pc, #532]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f62:	4313      	orrs	r3, r2
 8003f64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0308 	and.w	r3, r3, #8
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f74:	4b80      	ldr	r3, [pc, #512]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f82:	497d      	ldr	r1, [pc, #500]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f84:	4313      	orrs	r3, r2
 8003f86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003f96:	4b78      	ldr	r3, [pc, #480]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fa4:	4974      	ldr	r1, [pc, #464]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fb8:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fbe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc6:	496c      	ldr	r1, [pc, #432]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fda:	4b67      	ldr	r3, [pc, #412]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fe0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003fe8:	4963      	ldr	r1, [pc, #396]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00a      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ffc:	4b5e      	ldr	r3, [pc, #376]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004002:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800400a:	495b      	ldr	r1, [pc, #364]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800400c:	4313      	orrs	r3, r2
 800400e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00a      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800401e:	4b56      	ldr	r3, [pc, #344]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004024:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800402c:	4952      	ldr	r1, [pc, #328]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800402e:	4313      	orrs	r3, r2
 8004030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00a      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004040:	4b4d      	ldr	r3, [pc, #308]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004046:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800404e:	494a      	ldr	r1, [pc, #296]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00a      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004062:	4b45      	ldr	r3, [pc, #276]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004070:	4941      	ldr	r1, [pc, #260]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004072:	4313      	orrs	r3, r2
 8004074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d00a      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004084:	4b3c      	ldr	r3, [pc, #240]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004086:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800408a:	f023 0203 	bic.w	r2, r3, #3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004092:	4939      	ldr	r1, [pc, #228]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004094:	4313      	orrs	r3, r2
 8004096:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d028      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a6:	4b34      	ldr	r3, [pc, #208]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040b4:	4930      	ldr	r1, [pc, #192]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c4:	d106      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c6:	4b2c      	ldr	r3, [pc, #176]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	4a2b      	ldr	r2, [pc, #172]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80040cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040d0:	60d3      	str	r3, [r2, #12]
 80040d2:	e011      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040dc:	d10c      	bne.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3304      	adds	r3, #4
 80040e2:	2101      	movs	r1, #1
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f8f9 	bl	80042dc <RCCEx_PLLSAI1_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80040ee:	7cfb      	ldrb	r3, [r7, #19]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80040f4:	7cfb      	ldrb	r3, [r7, #19]
 80040f6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d04d      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800410c:	d108      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800410e:	4b1a      	ldr	r3, [pc, #104]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004110:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004114:	4a18      	ldr	r2, [pc, #96]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004116:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800411a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800411e:	e012      	b.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8004120:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004122:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004128:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800412c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800413e:	490e      	ldr	r1, [pc, #56]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800414e:	d106      	bne.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004150:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a08      	ldr	r2, [pc, #32]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004156:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800415a:	60d3      	str	r3, [r2, #12]
 800415c:	e020      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004162:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004166:	d109      	bne.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004168:	4b03      	ldr	r3, [pc, #12]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	4a02      	ldr	r2, [pc, #8]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800416e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004172:	60d3      	str	r3, [r2, #12]
 8004174:	e014      	b.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004180:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004184:	d10c      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	3304      	adds	r3, #4
 800418a:	2101      	movs	r1, #1
 800418c:	4618      	mov	r0, r3
 800418e:	f000 f8a5 	bl	80042dc <RCCEx_PLLSAI1_Config>
 8004192:	4603      	mov	r3, r0
 8004194:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d001      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d028      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041ac:	4b4a      	ldr	r3, [pc, #296]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041ba:	4947      	ldr	r1, [pc, #284]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041bc:	4313      	orrs	r3, r2
 80041be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ca:	d106      	bne.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041cc:	4b42      	ldr	r3, [pc, #264]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4a41      	ldr	r2, [pc, #260]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80041d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041d6:	60d3      	str	r3, [r2, #12]
 80041d8:	e011      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041e2:	d10c      	bne.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3304      	adds	r3, #4
 80041e8:	2101      	movs	r1, #1
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f876 	bl	80042dc <RCCEx_PLLSAI1_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80041f4:	7cfb      	ldrb	r3, [r7, #19]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80041fa:	7cfb      	ldrb	r3, [r7, #19]
 80041fc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01e      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800420a:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004210:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800421a:	492f      	ldr	r1, [pc, #188]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004228:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800422c:	d10c      	bne.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	3304      	adds	r3, #4
 8004232:	2102      	movs	r1, #2
 8004234:	4618      	mov	r0, r3
 8004236:	f000 f851 	bl	80042dc <RCCEx_PLLSAI1_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800423e:	7cfb      	ldrb	r3, [r7, #19]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d001      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8004244:	7cfb      	ldrb	r3, [r7, #19]
 8004246:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00b      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004254:	4b20      	ldr	r3, [pc, #128]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004256:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800425a:	f023 0204 	bic.w	r2, r3, #4
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004264:	491c      	ldr	r1, [pc, #112]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8004266:	4313      	orrs	r3, r2
 8004268:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00b      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004278:	4b17      	ldr	r3, [pc, #92]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800427a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800427e:	f023 0218 	bic.w	r2, r3, #24
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	4913      	ldr	r1, [pc, #76]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d017      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800429c:	4b0e      	ldr	r3, [pc, #56]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800429e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ac:	490a      	ldr	r1, [pc, #40]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042be:	d105      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	4a04      	ldr	r2, [pc, #16]	; (80042d8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80042c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80042cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3718      	adds	r7, #24
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000

080042dc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80042ea:	4b70      	ldr	r3, [pc, #448]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0303 	and.w	r3, r3, #3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00e      	beq.n	8004314 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042f6:	4b6d      	ldr	r3, [pc, #436]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	f003 0203 	and.w	r2, r3, #3
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d103      	bne.n	800430e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
       ||
 800430a:	2b00      	cmp	r3, #0
 800430c:	d13f      	bne.n	800438e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	73fb      	strb	r3, [r7, #15]
 8004312:	e03c      	b.n	800438e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	2b02      	cmp	r3, #2
 800431a:	d00c      	beq.n	8004336 <RCCEx_PLLSAI1_Config+0x5a>
 800431c:	2b03      	cmp	r3, #3
 800431e:	d013      	beq.n	8004348 <RCCEx_PLLSAI1_Config+0x6c>
 8004320:	2b01      	cmp	r3, #1
 8004322:	d120      	bne.n	8004366 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004324:	4b61      	ldr	r3, [pc, #388]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d11d      	bne.n	800436c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004334:	e01a      	b.n	800436c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004336:	4b5d      	ldr	r3, [pc, #372]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800433e:	2b00      	cmp	r3, #0
 8004340:	d116      	bne.n	8004370 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004346:	e013      	b.n	8004370 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004348:	4b58      	ldr	r3, [pc, #352]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10f      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004354:	4b55      	ldr	r3, [pc, #340]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d109      	bne.n	8004374 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004364:	e006      	b.n	8004374 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	73fb      	strb	r3, [r7, #15]
      break;
 800436a:	e004      	b.n	8004376 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800436c:	bf00      	nop
 800436e:	e002      	b.n	8004376 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004370:	bf00      	nop
 8004372:	e000      	b.n	8004376 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8004374:	bf00      	nop
    }

    if(status == HAL_OK)
 8004376:	7bfb      	ldrb	r3, [r7, #15]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800437c:	4b4b      	ldr	r3, [pc, #300]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	f023 0203 	bic.w	r2, r3, #3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4948      	ldr	r1, [pc, #288]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800438a:	4313      	orrs	r3, r2
 800438c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800438e:	7bfb      	ldrb	r3, [r7, #15]
 8004390:	2b00      	cmp	r3, #0
 8004392:	f040 8086 	bne.w	80044a2 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004396:	4b45      	ldr	r3, [pc, #276]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a44      	ldr	r2, [pc, #272]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800439c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80043a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a2:	f7fe fa55 	bl	8002850 <HAL_GetTick>
 80043a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043a8:	e009      	b.n	80043be <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80043aa:	f7fe fa51 	bl	8002850 <HAL_GetTick>
 80043ae:	4602      	mov	r2, r0
 80043b0:	68bb      	ldr	r3, [r7, #8]
 80043b2:	1ad3      	subs	r3, r2, r3
 80043b4:	2b02      	cmp	r3, #2
 80043b6:	d902      	bls.n	80043be <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 80043b8:	2303      	movs	r3, #3
 80043ba:	73fb      	strb	r3, [r7, #15]
        break;
 80043bc:	e005      	b.n	80043ca <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80043be:	4b3b      	ldr	r3, [pc, #236]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1ef      	bne.n	80043aa <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80043ca:	7bfb      	ldrb	r3, [r7, #15]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d168      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d113      	bne.n	80043fe <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043d6:	4b35      	ldr	r3, [pc, #212]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	4b35      	ldr	r3, [pc, #212]	; (80044b0 <RCCEx_PLLSAI1_Config+0x1d4>)
 80043dc:	4013      	ands	r3, r2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6892      	ldr	r2, [r2, #8]
 80043e2:	0211      	lsls	r1, r2, #8
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68d2      	ldr	r2, [r2, #12]
 80043e8:	06d2      	lsls	r2, r2, #27
 80043ea:	4311      	orrs	r1, r2
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6852      	ldr	r2, [r2, #4]
 80043f0:	3a01      	subs	r2, #1
 80043f2:	0112      	lsls	r2, r2, #4
 80043f4:	430a      	orrs	r2, r1
 80043f6:	492d      	ldr	r1, [pc, #180]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	610b      	str	r3, [r1, #16]
 80043fc:	e02d      	b.n	800445a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d115      	bne.n	8004430 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004404:	4b29      	ldr	r3, [pc, #164]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004406:	691a      	ldr	r2, [r3, #16]
 8004408:	4b2a      	ldr	r3, [pc, #168]	; (80044b4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800440a:	4013      	ands	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6892      	ldr	r2, [r2, #8]
 8004410:	0211      	lsls	r1, r2, #8
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6912      	ldr	r2, [r2, #16]
 8004416:	0852      	lsrs	r2, r2, #1
 8004418:	3a01      	subs	r2, #1
 800441a:	0552      	lsls	r2, r2, #21
 800441c:	4311      	orrs	r1, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6852      	ldr	r2, [r2, #4]
 8004422:	3a01      	subs	r2, #1
 8004424:	0112      	lsls	r2, r2, #4
 8004426:	430a      	orrs	r2, r1
 8004428:	4920      	ldr	r1, [pc, #128]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	610b      	str	r3, [r1, #16]
 800442e:	e014      	b.n	800445a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004430:	4b1e      	ldr	r3, [pc, #120]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004432:	691a      	ldr	r2, [r3, #16]
 8004434:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004436:	4013      	ands	r3, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	6892      	ldr	r2, [r2, #8]
 800443c:	0211      	lsls	r1, r2, #8
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6952      	ldr	r2, [r2, #20]
 8004442:	0852      	lsrs	r2, r2, #1
 8004444:	3a01      	subs	r2, #1
 8004446:	0652      	lsls	r2, r2, #25
 8004448:	4311      	orrs	r1, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6852      	ldr	r2, [r2, #4]
 800444e:	3a01      	subs	r2, #1
 8004450:	0112      	lsls	r2, r2, #4
 8004452:	430a      	orrs	r2, r1
 8004454:	4915      	ldr	r1, [pc, #84]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004456:	4313      	orrs	r3, r2
 8004458:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800445a:	4b14      	ldr	r3, [pc, #80]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a13      	ldr	r2, [pc, #76]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004460:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004464:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004466:	f7fe f9f3 	bl	8002850 <HAL_GetTick>
 800446a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800446c:	e009      	b.n	8004482 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800446e:	f7fe f9ef 	bl	8002850 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b02      	cmp	r3, #2
 800447a:	d902      	bls.n	8004482 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800447c:	2303      	movs	r3, #3
 800447e:	73fb      	strb	r3, [r7, #15]
          break;
 8004480:	e005      	b.n	800448e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004482:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0ef      	beq.n	800446e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800448e:	7bfb      	ldrb	r3, [r7, #15]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d106      	bne.n	80044a2 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004494:	4b05      	ldr	r3, [pc, #20]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <RCCEx_PLLSAI1_Config+0x1d0>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	40021000 	.word	0x40021000
 80044b0:	07ff800f 	.word	0x07ff800f
 80044b4:	ff9f800f 	.word	0xff9f800f
 80044b8:	f9ff800f 	.word	0xf9ff800f

080044bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80044c6:	2300      	movs	r3, #0
 80044c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80044ca:	4b70      	ldr	r3, [pc, #448]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00e      	beq.n	80044f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80044d6:	4b6d      	ldr	r3, [pc, #436]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f003 0203 	and.w	r2, r3, #3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d103      	bne.n	80044ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
       ||
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d13f      	bne.n	800456e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	73fb      	strb	r3, [r7, #15]
 80044f2:	e03c      	b.n	800456e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d00c      	beq.n	8004516 <RCCEx_PLLSAI2_Config+0x5a>
 80044fc:	2b03      	cmp	r3, #3
 80044fe:	d013      	beq.n	8004528 <RCCEx_PLLSAI2_Config+0x6c>
 8004500:	2b01      	cmp	r3, #1
 8004502:	d120      	bne.n	8004546 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004504:	4b61      	ldr	r3, [pc, #388]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d11d      	bne.n	800454c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004514:	e01a      	b.n	800454c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004516:	4b5d      	ldr	r3, [pc, #372]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451e:	2b00      	cmp	r3, #0
 8004520:	d116      	bne.n	8004550 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004526:	e013      	b.n	8004550 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004528:	4b58      	ldr	r3, [pc, #352]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10f      	bne.n	8004554 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004534:	4b55      	ldr	r3, [pc, #340]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8004540:	2301      	movs	r3, #1
 8004542:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004544:	e006      	b.n	8004554 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	73fb      	strb	r3, [r7, #15]
      break;
 800454a:	e004      	b.n	8004556 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 800454c:	bf00      	nop
 800454e:	e002      	b.n	8004556 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004550:	bf00      	nop
 8004552:	e000      	b.n	8004556 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8004554:	bf00      	nop
    }

    if(status == HAL_OK)
 8004556:	7bfb      	ldrb	r3, [r7, #15]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d108      	bne.n	800456e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800455c:	4b4b      	ldr	r3, [pc, #300]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f023 0203 	bic.w	r2, r3, #3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4948      	ldr	r1, [pc, #288]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 800456a:	4313      	orrs	r3, r2
 800456c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f040 8086 	bne.w	8004682 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004576:	4b45      	ldr	r3, [pc, #276]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a44      	ldr	r2, [pc, #272]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 800457c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004580:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004582:	f7fe f965 	bl	8002850 <HAL_GetTick>
 8004586:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004588:	e009      	b.n	800459e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800458a:	f7fe f961 	bl	8002850 <HAL_GetTick>
 800458e:	4602      	mov	r2, r0
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	1ad3      	subs	r3, r2, r3
 8004594:	2b02      	cmp	r3, #2
 8004596:	d902      	bls.n	800459e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8004598:	2303      	movs	r3, #3
 800459a:	73fb      	strb	r3, [r7, #15]
        break;
 800459c:	e005      	b.n	80045aa <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800459e:	4b3b      	ldr	r3, [pc, #236]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1ef      	bne.n	800458a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80045aa:	7bfb      	ldrb	r3, [r7, #15]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d168      	bne.n	8004682 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d113      	bne.n	80045de <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045b6:	4b35      	ldr	r3, [pc, #212]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	4b35      	ldr	r3, [pc, #212]	; (8004690 <RCCEx_PLLSAI2_Config+0x1d4>)
 80045bc:	4013      	ands	r3, r2
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	6892      	ldr	r2, [r2, #8]
 80045c2:	0211      	lsls	r1, r2, #8
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	68d2      	ldr	r2, [r2, #12]
 80045c8:	06d2      	lsls	r2, r2, #27
 80045ca:	4311      	orrs	r1, r2
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	6852      	ldr	r2, [r2, #4]
 80045d0:	3a01      	subs	r2, #1
 80045d2:	0112      	lsls	r2, r2, #4
 80045d4:	430a      	orrs	r2, r1
 80045d6:	492d      	ldr	r1, [pc, #180]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	614b      	str	r3, [r1, #20]
 80045dc:	e02d      	b.n	800463a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d115      	bne.n	8004610 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80045e4:	4b29      	ldr	r3, [pc, #164]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	4b2a      	ldr	r3, [pc, #168]	; (8004694 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045ea:	4013      	ands	r3, r2
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	6892      	ldr	r2, [r2, #8]
 80045f0:	0211      	lsls	r1, r2, #8
 80045f2:	687a      	ldr	r2, [r7, #4]
 80045f4:	6912      	ldr	r2, [r2, #16]
 80045f6:	0852      	lsrs	r2, r2, #1
 80045f8:	3a01      	subs	r2, #1
 80045fa:	0552      	lsls	r2, r2, #21
 80045fc:	4311      	orrs	r1, r2
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	6852      	ldr	r2, [r2, #4]
 8004602:	3a01      	subs	r2, #1
 8004604:	0112      	lsls	r2, r2, #4
 8004606:	430a      	orrs	r2, r1
 8004608:	4920      	ldr	r1, [pc, #128]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 800460a:	4313      	orrs	r3, r2
 800460c:	614b      	str	r3, [r1, #20]
 800460e:	e014      	b.n	800463a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004610:	4b1e      	ldr	r3, [pc, #120]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	4b20      	ldr	r3, [pc, #128]	; (8004698 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004616:	4013      	ands	r3, r2
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6892      	ldr	r2, [r2, #8]
 800461c:	0211      	lsls	r1, r2, #8
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6952      	ldr	r2, [r2, #20]
 8004622:	0852      	lsrs	r2, r2, #1
 8004624:	3a01      	subs	r2, #1
 8004626:	0652      	lsls	r2, r2, #25
 8004628:	4311      	orrs	r1, r2
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	6852      	ldr	r2, [r2, #4]
 800462e:	3a01      	subs	r2, #1
 8004630:	0112      	lsls	r2, r2, #4
 8004632:	430a      	orrs	r2, r1
 8004634:	4915      	ldr	r1, [pc, #84]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004636:	4313      	orrs	r3, r2
 8004638:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800463a:	4b14      	ldr	r3, [pc, #80]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a13      	ldr	r2, [pc, #76]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004646:	f7fe f903 	bl	8002850 <HAL_GetTick>
 800464a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800464c:	e009      	b.n	8004662 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800464e:	f7fe f8ff 	bl	8002850 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	2b02      	cmp	r3, #2
 800465a:	d902      	bls.n	8004662 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	73fb      	strb	r3, [r7, #15]
          break;
 8004660:	e005      	b.n	800466e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004662:	4b0a      	ldr	r3, [pc, #40]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d0ef      	beq.n	800464e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d106      	bne.n	8004682 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004674:	4b05      	ldr	r3, [pc, #20]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 8004676:	695a      	ldr	r2, [r3, #20]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	4903      	ldr	r1, [pc, #12]	; (800468c <RCCEx_PLLSAI2_Config+0x1d0>)
 800467e:	4313      	orrs	r3, r2
 8004680:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004682:	7bfb      	ldrb	r3, [r7, #15]
}
 8004684:	4618      	mov	r0, r3
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	40021000 	.word	0x40021000
 8004690:	07ff800f 	.word	0x07ff800f
 8004694:	ff9f800f 	.word	0xff9f800f
 8004698:	f9ff800f 	.word	0xf9ff800f

0800469c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d101      	bne.n	80046ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046aa:	2301      	movs	r3, #1
 80046ac:	e049      	b.n	8004742 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d106      	bne.n	80046c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fd ff3a 	bl	800253c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2202      	movs	r2, #2
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681a      	ldr	r2, [r3, #0]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	4619      	mov	r1, r3
 80046da:	4610      	mov	r0, r2
 80046dc:	f000 f8ee 	bl	80048bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2201      	movs	r2, #1
 800472c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2201      	movs	r2, #1
 800473c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_TIM_ConfigClockSource+0x18>
 800475e:	2302      	movs	r3, #2
 8004760:	e0a8      	b.n	80048b4 <HAL_TIM_ConfigClockSource+0x16a>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004780:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004784:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800478c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d067      	beq.n	800486e <HAL_TIM_ConfigClockSource+0x124>
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d80b      	bhi.n	80047ba <HAL_TIM_ConfigClockSource+0x70>
 80047a2:	2b10      	cmp	r3, #16
 80047a4:	d073      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x144>
 80047a6:	2b10      	cmp	r3, #16
 80047a8:	d802      	bhi.n	80047b0 <HAL_TIM_ConfigClockSource+0x66>
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d06f      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80047ae:	e078      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047b0:	2b20      	cmp	r3, #32
 80047b2:	d06c      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x144>
 80047b4:	2b30      	cmp	r3, #48	; 0x30
 80047b6:	d06a      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x144>
      break;
 80047b8:	e073      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047ba:	2b70      	cmp	r3, #112	; 0x70
 80047bc:	d00d      	beq.n	80047da <HAL_TIM_ConfigClockSource+0x90>
 80047be:	2b70      	cmp	r3, #112	; 0x70
 80047c0:	d804      	bhi.n	80047cc <HAL_TIM_ConfigClockSource+0x82>
 80047c2:	2b50      	cmp	r3, #80	; 0x50
 80047c4:	d033      	beq.n	800482e <HAL_TIM_ConfigClockSource+0xe4>
 80047c6:	2b60      	cmp	r3, #96	; 0x60
 80047c8:	d041      	beq.n	800484e <HAL_TIM_ConfigClockSource+0x104>
      break;
 80047ca:	e06a      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80047cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d0:	d066      	beq.n	80048a0 <HAL_TIM_ConfigClockSource+0x156>
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d6:	d017      	beq.n	8004808 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 80047d8:	e063      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6818      	ldr	r0, [r3, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	6899      	ldr	r1, [r3, #8]
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685a      	ldr	r2, [r3, #4]
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f000 f97b 	bl	8004ae4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	609a      	str	r2, [r3, #8]
      break;
 8004806:	e04c      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6818      	ldr	r0, [r3, #0]
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	6899      	ldr	r1, [r3, #8]
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	f000 f964 	bl	8004ae4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689a      	ldr	r2, [r3, #8]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800482a:	609a      	str	r2, [r3, #8]
      break;
 800482c:	e039      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6818      	ldr	r0, [r3, #0]
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	6859      	ldr	r1, [r3, #4]
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	461a      	mov	r2, r3
 800483c:	f000 f8d8 	bl	80049f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2150      	movs	r1, #80	; 0x50
 8004846:	4618      	mov	r0, r3
 8004848:	f000 f931 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 800484c:	e029      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	6859      	ldr	r1, [r3, #4]
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	461a      	mov	r2, r3
 800485c:	f000 f8f7 	bl	8004a4e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2160      	movs	r1, #96	; 0x60
 8004866:	4618      	mov	r0, r3
 8004868:	f000 f921 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 800486c:	e019      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	461a      	mov	r2, r3
 800487c:	f000 f8b8 	bl	80049f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2140      	movs	r1, #64	; 0x40
 8004886:	4618      	mov	r0, r3
 8004888:	f000 f911 	bl	8004aae <TIM_ITRx_SetConfig>
      break;
 800488c:	e009      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681a      	ldr	r2, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4619      	mov	r1, r3
 8004898:	4610      	mov	r0, r2
 800489a:	f000 f908 	bl	8004aae <TIM_ITRx_SetConfig>
        break;
 800489e:	e000      	b.n	80048a2 <HAL_TIM_ConfigClockSource+0x158>
      break;
 80048a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3710      	adds	r7, #16
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	4a40      	ldr	r2, [pc, #256]	; (80049d0 <TIM_Base_SetConfig+0x114>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d013      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048da:	d00f      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a3d      	ldr	r2, [pc, #244]	; (80049d4 <TIM_Base_SetConfig+0x118>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d00b      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a3c      	ldr	r2, [pc, #240]	; (80049d8 <TIM_Base_SetConfig+0x11c>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d007      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	4a3b      	ldr	r2, [pc, #236]	; (80049dc <TIM_Base_SetConfig+0x120>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d003      	beq.n	80048fc <TIM_Base_SetConfig+0x40>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	4a3a      	ldr	r2, [pc, #232]	; (80049e0 <TIM_Base_SetConfig+0x124>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d108      	bne.n	800490e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004902:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4313      	orrs	r3, r2
 800490c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a2f      	ldr	r2, [pc, #188]	; (80049d0 <TIM_Base_SetConfig+0x114>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d01f      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800491c:	d01b      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a2c      	ldr	r2, [pc, #176]	; (80049d4 <TIM_Base_SetConfig+0x118>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d017      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a2b      	ldr	r2, [pc, #172]	; (80049d8 <TIM_Base_SetConfig+0x11c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a2a      	ldr	r2, [pc, #168]	; (80049dc <TIM_Base_SetConfig+0x120>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00f      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a29      	ldr	r2, [pc, #164]	; (80049e0 <TIM_Base_SetConfig+0x124>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d00b      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a28      	ldr	r2, [pc, #160]	; (80049e4 <TIM_Base_SetConfig+0x128>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d007      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <TIM_Base_SetConfig+0x12c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d003      	beq.n	8004956 <TIM_Base_SetConfig+0x9a>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <TIM_Base_SetConfig+0x130>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d108      	bne.n	8004968 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800495c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	4313      	orrs	r3, r2
 8004966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	689a      	ldr	r2, [r3, #8]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a10      	ldr	r2, [pc, #64]	; (80049d0 <TIM_Base_SetConfig+0x114>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d00f      	beq.n	80049b4 <TIM_Base_SetConfig+0xf8>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a12      	ldr	r2, [pc, #72]	; (80049e0 <TIM_Base_SetConfig+0x124>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00b      	beq.n	80049b4 <TIM_Base_SetConfig+0xf8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a11      	ldr	r2, [pc, #68]	; (80049e4 <TIM_Base_SetConfig+0x128>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d007      	beq.n	80049b4 <TIM_Base_SetConfig+0xf8>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <TIM_Base_SetConfig+0x12c>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d003      	beq.n	80049b4 <TIM_Base_SetConfig+0xf8>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a0f      	ldr	r2, [pc, #60]	; (80049ec <TIM_Base_SetConfig+0x130>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d103      	bne.n	80049bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	615a      	str	r2, [r3, #20]
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	40012c00 	.word	0x40012c00
 80049d4:	40000400 	.word	0x40000400
 80049d8:	40000800 	.word	0x40000800
 80049dc:	40000c00 	.word	0x40000c00
 80049e0:	40013400 	.word	0x40013400
 80049e4:	40014000 	.word	0x40014000
 80049e8:	40014400 	.word	0x40014400
 80049ec:	40014800 	.word	0x40014800

080049f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b087      	sub	sp, #28
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	60f8      	str	r0, [r7, #12]
 80049f8:	60b9      	str	r1, [r7, #8]
 80049fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	f023 0201 	bic.w	r2, r3, #1
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f023 030a 	bic.w	r3, r3, #10
 8004a2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	4313      	orrs	r3, r2
 8004a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	693a      	ldr	r2, [r7, #16]
 8004a3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	621a      	str	r2, [r3, #32]
}
 8004a42:	bf00      	nop
 8004a44:	371c      	adds	r7, #28
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b087      	sub	sp, #28
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	f023 0210 	bic.w	r2, r3, #16
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a1b      	ldr	r3, [r3, #32]
 8004a70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	031b      	lsls	r3, r3, #12
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a8c:	68bb      	ldr	r3, [r7, #8]
 8004a8e:	011b      	lsls	r3, r3, #4
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	693a      	ldr	r2, [r7, #16]
 8004aa0:	621a      	str	r2, [r3, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	371c      	adds	r7, #28
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b085      	sub	sp, #20
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f043 0307 	orr.w	r3, r3, #7
 8004ad0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	609a      	str	r2, [r3, #8]
}
 8004ad8:	bf00      	nop
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b087      	sub	sp, #28
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
 8004af0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004afe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	431a      	orrs	r2, r3
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	697a      	ldr	r2, [r7, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	697a      	ldr	r2, [r7, #20]
 8004b16:	609a      	str	r2, [r3, #8]
}
 8004b18:	bf00      	nop
 8004b1a:	371c      	adds	r7, #28
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b22:	4770      	bx	lr

08004b24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b085      	sub	sp, #20
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e068      	b.n	8004c0e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a2e      	ldr	r2, [pc, #184]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a2d      	ldr	r2, [pc, #180]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d108      	bne.n	8004b82 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004b76:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b88:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	; (8004c1c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d01d      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bae:	d018      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a1b      	ldr	r2, [pc, #108]	; (8004c24 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d013      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a1a      	ldr	r2, [pc, #104]	; (8004c28 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d00e      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a18      	ldr	r2, [pc, #96]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d009      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a13      	ldr	r2, [pc, #76]	; (8004c20 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d004      	beq.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a14      	ldr	r2, [pc, #80]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d10c      	bne.n	8004bfc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	4313      	orrs	r3, r2
 8004bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2201      	movs	r2, #1
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	40012c00 	.word	0x40012c00
 8004c20:	40013400 	.word	0x40013400
 8004c24:	40000400 	.word	0x40000400
 8004c28:	40000800 	.word	0x40000800
 8004c2c:	40000c00 	.word	0x40000c00
 8004c30:	40014000 	.word	0x40014000

08004c34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b082      	sub	sp, #8
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d101      	bne.n	8004c46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e042      	b.n	8004ccc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d106      	bne.n	8004c5e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	f7fd fc8d 	bl	8002578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2224      	movs	r2, #36	; 0x24
 8004c62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f022 0201 	bic.w	r2, r2, #1
 8004c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f82c 	bl	8004cd4 <UART_SetConfig>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d101      	bne.n	8004c86 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c82:	2301      	movs	r3, #1
 8004c84:	e022      	b.n	8004ccc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d002      	beq.n	8004c94 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 faf2 	bl	8005278 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	689a      	ldr	r2, [r3, #8]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 fb79 	bl	80053bc <UART_CheckIdleState>
 8004cca:	4603      	mov	r3, r0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3708      	adds	r7, #8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004cd4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8004cd8:	b088      	sub	sp, #32
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	4313      	orrs	r3, r2
 8004d02:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4bb1      	ldr	r3, [pc, #708]	; (8004fd0 <UART_SetConfig+0x2fc>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	69f9      	ldr	r1, [r7, #28]
 8004d14:	430b      	orrs	r3, r1
 8004d16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68da      	ldr	r2, [r3, #12]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	430a      	orrs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	699b      	ldr	r3, [r3, #24]
 8004d32:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4aa6      	ldr	r2, [pc, #664]	; (8004fd4 <UART_SetConfig+0x300>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d004      	beq.n	8004d48 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004d52:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	6812      	ldr	r2, [r2, #0]
 8004d5a:	69f9      	ldr	r1, [r7, #28]
 8004d5c:	430b      	orrs	r3, r1
 8004d5e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d66:	f023 010f 	bic.w	r1, r3, #15
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a97      	ldr	r2, [pc, #604]	; (8004fd8 <UART_SetConfig+0x304>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d121      	bne.n	8004dc4 <UART_SetConfig+0xf0>
 8004d80:	4b96      	ldr	r3, [pc, #600]	; (8004fdc <UART_SetConfig+0x308>)
 8004d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b03      	cmp	r3, #3
 8004d8c:	d816      	bhi.n	8004dbc <UART_SetConfig+0xe8>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <UART_SetConfig+0xc0>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004da5 	.word	0x08004da5
 8004d98:	08004db1 	.word	0x08004db1
 8004d9c:	08004dab 	.word	0x08004dab
 8004da0:	08004db7 	.word	0x08004db7
 8004da4:	2301      	movs	r3, #1
 8004da6:	76fb      	strb	r3, [r7, #27]
 8004da8:	e0e8      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004daa:	2302      	movs	r3, #2
 8004dac:	76fb      	strb	r3, [r7, #27]
 8004dae:	e0e5      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004db0:	2304      	movs	r3, #4
 8004db2:	76fb      	strb	r3, [r7, #27]
 8004db4:	e0e2      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004db6:	2308      	movs	r3, #8
 8004db8:	76fb      	strb	r3, [r7, #27]
 8004dba:	e0df      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004dbc:	2310      	movs	r3, #16
 8004dbe:	76fb      	strb	r3, [r7, #27]
 8004dc0:	bf00      	nop
 8004dc2:	e0db      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a85      	ldr	r2, [pc, #532]	; (8004fe0 <UART_SetConfig+0x30c>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d134      	bne.n	8004e38 <UART_SetConfig+0x164>
 8004dce:	4b83      	ldr	r3, [pc, #524]	; (8004fdc <UART_SetConfig+0x308>)
 8004dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd4:	f003 030c 	and.w	r3, r3, #12
 8004dd8:	2b0c      	cmp	r3, #12
 8004dda:	d829      	bhi.n	8004e30 <UART_SetConfig+0x15c>
 8004ddc:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <UART_SetConfig+0x110>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e19 	.word	0x08004e19
 8004de8:	08004e31 	.word	0x08004e31
 8004dec:	08004e31 	.word	0x08004e31
 8004df0:	08004e31 	.word	0x08004e31
 8004df4:	08004e25 	.word	0x08004e25
 8004df8:	08004e31 	.word	0x08004e31
 8004dfc:	08004e31 	.word	0x08004e31
 8004e00:	08004e31 	.word	0x08004e31
 8004e04:	08004e1f 	.word	0x08004e1f
 8004e08:	08004e31 	.word	0x08004e31
 8004e0c:	08004e31 	.word	0x08004e31
 8004e10:	08004e31 	.word	0x08004e31
 8004e14:	08004e2b 	.word	0x08004e2b
 8004e18:	2300      	movs	r3, #0
 8004e1a:	76fb      	strb	r3, [r7, #27]
 8004e1c:	e0ae      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	76fb      	strb	r3, [r7, #27]
 8004e22:	e0ab      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e24:	2304      	movs	r3, #4
 8004e26:	76fb      	strb	r3, [r7, #27]
 8004e28:	e0a8      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e2a:	2308      	movs	r3, #8
 8004e2c:	76fb      	strb	r3, [r7, #27]
 8004e2e:	e0a5      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e30:	2310      	movs	r3, #16
 8004e32:	76fb      	strb	r3, [r7, #27]
 8004e34:	bf00      	nop
 8004e36:	e0a1      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a69      	ldr	r2, [pc, #420]	; (8004fe4 <UART_SetConfig+0x310>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d120      	bne.n	8004e84 <UART_SetConfig+0x1b0>
 8004e42:	4b66      	ldr	r3, [pc, #408]	; (8004fdc <UART_SetConfig+0x308>)
 8004e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e48:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d00f      	beq.n	8004e70 <UART_SetConfig+0x19c>
 8004e50:	2b10      	cmp	r3, #16
 8004e52:	d802      	bhi.n	8004e5a <UART_SetConfig+0x186>
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <UART_SetConfig+0x190>
 8004e58:	e010      	b.n	8004e7c <UART_SetConfig+0x1a8>
 8004e5a:	2b20      	cmp	r3, #32
 8004e5c:	d005      	beq.n	8004e6a <UART_SetConfig+0x196>
 8004e5e:	2b30      	cmp	r3, #48	; 0x30
 8004e60:	d009      	beq.n	8004e76 <UART_SetConfig+0x1a2>
 8004e62:	e00b      	b.n	8004e7c <UART_SetConfig+0x1a8>
 8004e64:	2300      	movs	r3, #0
 8004e66:	76fb      	strb	r3, [r7, #27]
 8004e68:	e088      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	76fb      	strb	r3, [r7, #27]
 8004e6e:	e085      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e70:	2304      	movs	r3, #4
 8004e72:	76fb      	strb	r3, [r7, #27]
 8004e74:	e082      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e76:	2308      	movs	r3, #8
 8004e78:	76fb      	strb	r3, [r7, #27]
 8004e7a:	e07f      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e7c:	2310      	movs	r3, #16
 8004e7e:	76fb      	strb	r3, [r7, #27]
 8004e80:	bf00      	nop
 8004e82:	e07b      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a57      	ldr	r2, [pc, #348]	; (8004fe8 <UART_SetConfig+0x314>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d120      	bne.n	8004ed0 <UART_SetConfig+0x1fc>
 8004e8e:	4b53      	ldr	r3, [pc, #332]	; (8004fdc <UART_SetConfig+0x308>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e98:	2b40      	cmp	r3, #64	; 0x40
 8004e9a:	d00f      	beq.n	8004ebc <UART_SetConfig+0x1e8>
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	d802      	bhi.n	8004ea6 <UART_SetConfig+0x1d2>
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d005      	beq.n	8004eb0 <UART_SetConfig+0x1dc>
 8004ea4:	e010      	b.n	8004ec8 <UART_SetConfig+0x1f4>
 8004ea6:	2b80      	cmp	r3, #128	; 0x80
 8004ea8:	d005      	beq.n	8004eb6 <UART_SetConfig+0x1e2>
 8004eaa:	2bc0      	cmp	r3, #192	; 0xc0
 8004eac:	d009      	beq.n	8004ec2 <UART_SetConfig+0x1ee>
 8004eae:	e00b      	b.n	8004ec8 <UART_SetConfig+0x1f4>
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	76fb      	strb	r3, [r7, #27]
 8004eb4:	e062      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004eb6:	2302      	movs	r3, #2
 8004eb8:	76fb      	strb	r3, [r7, #27]
 8004eba:	e05f      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	76fb      	strb	r3, [r7, #27]
 8004ec0:	e05c      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004ec2:	2308      	movs	r3, #8
 8004ec4:	76fb      	strb	r3, [r7, #27]
 8004ec6:	e059      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004ec8:	2310      	movs	r3, #16
 8004eca:	76fb      	strb	r3, [r7, #27]
 8004ecc:	bf00      	nop
 8004ece:	e055      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a45      	ldr	r2, [pc, #276]	; (8004fec <UART_SetConfig+0x318>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d124      	bne.n	8004f24 <UART_SetConfig+0x250>
 8004eda:	4b40      	ldr	r3, [pc, #256]	; (8004fdc <UART_SetConfig+0x308>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ee8:	d012      	beq.n	8004f10 <UART_SetConfig+0x23c>
 8004eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eee:	d802      	bhi.n	8004ef6 <UART_SetConfig+0x222>
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d007      	beq.n	8004f04 <UART_SetConfig+0x230>
 8004ef4:	e012      	b.n	8004f1c <UART_SetConfig+0x248>
 8004ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004efa:	d006      	beq.n	8004f0a <UART_SetConfig+0x236>
 8004efc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f00:	d009      	beq.n	8004f16 <UART_SetConfig+0x242>
 8004f02:	e00b      	b.n	8004f1c <UART_SetConfig+0x248>
 8004f04:	2300      	movs	r3, #0
 8004f06:	76fb      	strb	r3, [r7, #27]
 8004f08:	e038      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f0a:	2302      	movs	r3, #2
 8004f0c:	76fb      	strb	r3, [r7, #27]
 8004f0e:	e035      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f10:	2304      	movs	r3, #4
 8004f12:	76fb      	strb	r3, [r7, #27]
 8004f14:	e032      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f16:	2308      	movs	r3, #8
 8004f18:	76fb      	strb	r3, [r7, #27]
 8004f1a:	e02f      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f1c:	2310      	movs	r3, #16
 8004f1e:	76fb      	strb	r3, [r7, #27]
 8004f20:	bf00      	nop
 8004f22:	e02b      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2a      	ldr	r2, [pc, #168]	; (8004fd4 <UART_SetConfig+0x300>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d124      	bne.n	8004f78 <UART_SetConfig+0x2a4>
 8004f2e:	4b2b      	ldr	r3, [pc, #172]	; (8004fdc <UART_SetConfig+0x308>)
 8004f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f34:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f3c:	d012      	beq.n	8004f64 <UART_SetConfig+0x290>
 8004f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f42:	d802      	bhi.n	8004f4a <UART_SetConfig+0x276>
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d007      	beq.n	8004f58 <UART_SetConfig+0x284>
 8004f48:	e012      	b.n	8004f70 <UART_SetConfig+0x29c>
 8004f4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f4e:	d006      	beq.n	8004f5e <UART_SetConfig+0x28a>
 8004f50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004f54:	d009      	beq.n	8004f6a <UART_SetConfig+0x296>
 8004f56:	e00b      	b.n	8004f70 <UART_SetConfig+0x29c>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	76fb      	strb	r3, [r7, #27]
 8004f5c:	e00e      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	76fb      	strb	r3, [r7, #27]
 8004f62:	e00b      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f64:	2304      	movs	r3, #4
 8004f66:	76fb      	strb	r3, [r7, #27]
 8004f68:	e008      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f6a:	2308      	movs	r3, #8
 8004f6c:	76fb      	strb	r3, [r7, #27]
 8004f6e:	e005      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f70:	2310      	movs	r3, #16
 8004f72:	76fb      	strb	r3, [r7, #27]
 8004f74:	bf00      	nop
 8004f76:	e001      	b.n	8004f7c <UART_SetConfig+0x2a8>
 8004f78:	2310      	movs	r3, #16
 8004f7a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a14      	ldr	r2, [pc, #80]	; (8004fd4 <UART_SetConfig+0x300>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	f040 80a1 	bne.w	80050ca <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004f88:	7efb      	ldrb	r3, [r7, #27]
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d836      	bhi.n	8004ffc <UART_SetConfig+0x328>
 8004f8e:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0x2c0>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fb9 	.word	0x08004fb9
 8004f98:	08004ffd 	.word	0x08004ffd
 8004f9c:	08004fc1 	.word	0x08004fc1
 8004fa0:	08004ffd 	.word	0x08004ffd
 8004fa4:	08004fc7 	.word	0x08004fc7
 8004fa8:	08004ffd 	.word	0x08004ffd
 8004fac:	08004ffd 	.word	0x08004ffd
 8004fb0:	08004ffd 	.word	0x08004ffd
 8004fb4:	08004ff5 	.word	0x08004ff5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb8:	f7fe fd7a 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 8004fbc:	6178      	str	r0, [r7, #20]
        break;
 8004fbe:	e022      	b.n	8005006 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc0:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <UART_SetConfig+0x31c>)
 8004fc2:	617b      	str	r3, [r7, #20]
        break;
 8004fc4:	e01f      	b.n	8005006 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fc6:	f7fe fcdd 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 8004fca:	6178      	str	r0, [r7, #20]
        break;
 8004fcc:	e01b      	b.n	8005006 <UART_SetConfig+0x332>
 8004fce:	bf00      	nop
 8004fd0:	cfff69f3 	.word	0xcfff69f3
 8004fd4:	40008000 	.word	0x40008000
 8004fd8:	40013800 	.word	0x40013800
 8004fdc:	40021000 	.word	0x40021000
 8004fe0:	40004400 	.word	0x40004400
 8004fe4:	40004800 	.word	0x40004800
 8004fe8:	40004c00 	.word	0x40004c00
 8004fec:	40005000 	.word	0x40005000
 8004ff0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ff4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ff8:	617b      	str	r3, [r7, #20]
        break;
 8004ffa:	e004      	b.n	8005006 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	76bb      	strb	r3, [r7, #26]
        break;
 8005004:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 811d 	beq.w	8005248 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005012:	4a97      	ldr	r2, [pc, #604]	; (8005270 <UART_SetConfig+0x59c>)
 8005014:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005018:	461a      	mov	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005020:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685a      	ldr	r2, [r3, #4]
 8005026:	4613      	mov	r3, r2
 8005028:	005b      	lsls	r3, r3, #1
 800502a:	4413      	add	r3, r2
 800502c:	68ba      	ldr	r2, [r7, #8]
 800502e:	429a      	cmp	r2, r3
 8005030:	d305      	bcc.n	800503e <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005038:	68ba      	ldr	r2, [r7, #8]
 800503a:	429a      	cmp	r2, r3
 800503c:	d902      	bls.n	8005044 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	76bb      	strb	r3, [r7, #26]
 8005042:	e101      	b.n	8005248 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	4618      	mov	r0, r3
 8005048:	f04f 0100 	mov.w	r1, #0
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	4a87      	ldr	r2, [pc, #540]	; (8005270 <UART_SetConfig+0x59c>)
 8005052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005056:	b29b      	uxth	r3, r3
 8005058:	f04f 0400 	mov.w	r4, #0
 800505c:	461a      	mov	r2, r3
 800505e:	4623      	mov	r3, r4
 8005060:	f7fb ff0a 	bl	8000e78 <__aeabi_uldivmod>
 8005064:	4603      	mov	r3, r0
 8005066:	460c      	mov	r4, r1
 8005068:	4619      	mov	r1, r3
 800506a:	4622      	mov	r2, r4
 800506c:	f04f 0300 	mov.w	r3, #0
 8005070:	f04f 0400 	mov.w	r4, #0
 8005074:	0214      	lsls	r4, r2, #8
 8005076:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800507a:	020b      	lsls	r3, r1, #8
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6852      	ldr	r2, [r2, #4]
 8005080:	0852      	lsrs	r2, r2, #1
 8005082:	4611      	mov	r1, r2
 8005084:	f04f 0200 	mov.w	r2, #0
 8005088:	eb13 0b01 	adds.w	fp, r3, r1
 800508c:	eb44 0c02 	adc.w	ip, r4, r2
 8005090:	4658      	mov	r0, fp
 8005092:	4661      	mov	r1, ip
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f04f 0400 	mov.w	r4, #0
 800509c:	461a      	mov	r2, r3
 800509e:	4623      	mov	r3, r4
 80050a0:	f7fb feea 	bl	8000e78 <__aeabi_uldivmod>
 80050a4:	4603      	mov	r3, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050b0:	d308      	bcc.n	80050c4 <UART_SetConfig+0x3f0>
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050b8:	d204      	bcs.n	80050c4 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	60da      	str	r2, [r3, #12]
 80050c2:	e0c1      	b.n	8005248 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	76bb      	strb	r3, [r7, #26]
 80050c8:	e0be      	b.n	8005248 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69db      	ldr	r3, [r3, #28]
 80050ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d2:	d164      	bne.n	800519e <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80050d4:	7efb      	ldrb	r3, [r7, #27]
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d827      	bhi.n	800512a <UART_SetConfig+0x456>
 80050da:	a201      	add	r2, pc, #4	; (adr r2, 80050e0 <UART_SetConfig+0x40c>)
 80050dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e0:	08005105 	.word	0x08005105
 80050e4:	0800510d 	.word	0x0800510d
 80050e8:	08005115 	.word	0x08005115
 80050ec:	0800512b 	.word	0x0800512b
 80050f0:	0800511b 	.word	0x0800511b
 80050f4:	0800512b 	.word	0x0800512b
 80050f8:	0800512b 	.word	0x0800512b
 80050fc:	0800512b 	.word	0x0800512b
 8005100:	08005123 	.word	0x08005123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005104:	f7fe fcd4 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 8005108:	6178      	str	r0, [r7, #20]
        break;
 800510a:	e013      	b.n	8005134 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800510c:	f7fe fce6 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 8005110:	6178      	str	r0, [r7, #20]
        break;
 8005112:	e00f      	b.n	8005134 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005114:	4b57      	ldr	r3, [pc, #348]	; (8005274 <UART_SetConfig+0x5a0>)
 8005116:	617b      	str	r3, [r7, #20]
        break;
 8005118:	e00c      	b.n	8005134 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800511a:	f7fe fc33 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 800511e:	6178      	str	r0, [r7, #20]
        break;
 8005120:	e008      	b.n	8005134 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005126:	617b      	str	r3, [r7, #20]
        break;
 8005128:	e004      	b.n	8005134 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800512e:	2301      	movs	r3, #1
 8005130:	76bb      	strb	r3, [r7, #26]
        break;
 8005132:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b00      	cmp	r3, #0
 8005138:	f000 8086 	beq.w	8005248 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005140:	4a4b      	ldr	r2, [pc, #300]	; (8005270 <UART_SetConfig+0x59c>)
 8005142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005146:	461a      	mov	r2, r3
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	fbb3 f3f2 	udiv	r3, r3, r2
 800514e:	005a      	lsls	r2, r3, #1
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	441a      	add	r2, r3
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005160:	b29b      	uxth	r3, r3
 8005162:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	2b0f      	cmp	r3, #15
 8005168:	d916      	bls.n	8005198 <UART_SetConfig+0x4c4>
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005170:	d212      	bcs.n	8005198 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	b29b      	uxth	r3, r3
 8005176:	f023 030f 	bic.w	r3, r3, #15
 800517a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	b29b      	uxth	r3, r3
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	b29a      	uxth	r2, r3
 8005188:	89fb      	ldrh	r3, [r7, #14]
 800518a:	4313      	orrs	r3, r2
 800518c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	89fa      	ldrh	r2, [r7, #14]
 8005194:	60da      	str	r2, [r3, #12]
 8005196:	e057      	b.n	8005248 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	76bb      	strb	r3, [r7, #26]
 800519c:	e054      	b.n	8005248 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800519e:	7efb      	ldrb	r3, [r7, #27]
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d828      	bhi.n	80051f6 <UART_SetConfig+0x522>
 80051a4:	a201      	add	r2, pc, #4	; (adr r2, 80051ac <UART_SetConfig+0x4d8>)
 80051a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051aa:	bf00      	nop
 80051ac:	080051d1 	.word	0x080051d1
 80051b0:	080051d9 	.word	0x080051d9
 80051b4:	080051e1 	.word	0x080051e1
 80051b8:	080051f7 	.word	0x080051f7
 80051bc:	080051e7 	.word	0x080051e7
 80051c0:	080051f7 	.word	0x080051f7
 80051c4:	080051f7 	.word	0x080051f7
 80051c8:	080051f7 	.word	0x080051f7
 80051cc:	080051ef 	.word	0x080051ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051d0:	f7fe fc6e 	bl	8003ab0 <HAL_RCC_GetPCLK1Freq>
 80051d4:	6178      	str	r0, [r7, #20]
        break;
 80051d6:	e013      	b.n	8005200 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80051d8:	f7fe fc80 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 80051dc:	6178      	str	r0, [r7, #20]
        break;
 80051de:	e00f      	b.n	8005200 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80051e0:	4b24      	ldr	r3, [pc, #144]	; (8005274 <UART_SetConfig+0x5a0>)
 80051e2:	617b      	str	r3, [r7, #20]
        break;
 80051e4:	e00c      	b.n	8005200 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80051e6:	f7fe fbcd 	bl	8003984 <HAL_RCC_GetSysClockFreq>
 80051ea:	6178      	str	r0, [r7, #20]
        break;
 80051ec:	e008      	b.n	8005200 <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f2:	617b      	str	r3, [r7, #20]
        break;
 80051f4:	e004      	b.n	8005200 <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	76bb      	strb	r3, [r7, #26]
        break;
 80051fe:	bf00      	nop
    }

    if (pclk != 0U)
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d020      	beq.n	8005248 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	4a19      	ldr	r2, [pc, #100]	; (8005270 <UART_SetConfig+0x59c>)
 800520c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005210:	461a      	mov	r2, r3
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	fbb3 f2f2 	udiv	r2, r3, r2
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	685b      	ldr	r3, [r3, #4]
 800521c:	085b      	lsrs	r3, r3, #1
 800521e:	441a      	add	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	fbb2 f3f3 	udiv	r3, r2, r3
 8005228:	b29b      	uxth	r3, r3
 800522a:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	2b0f      	cmp	r3, #15
 8005230:	d908      	bls.n	8005244 <UART_SetConfig+0x570>
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005238:	d204      	bcs.n	8005244 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	60da      	str	r2, [r3, #12]
 8005242:	e001      	b.n	8005248 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005264:	7ebb      	ldrb	r3, [r7, #26]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8005270:	0800b2ec 	.word	0x0800b2ec
 8005274:	00f42400 	.word	0x00f42400

08005278 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005284:	f003 0301 	and.w	r3, r3, #1
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00a      	beq.n	80052a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00a      	beq.n	80052c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	430a      	orrs	r2, r1
 80052c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d00a      	beq.n	80052e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	430a      	orrs	r2, r1
 80052e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00a      	beq.n	8005308 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	430a      	orrs	r2, r1
 8005306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00a      	beq.n	800532a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	430a      	orrs	r2, r1
 8005328:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b00      	cmp	r3, #0
 8005334:	d00a      	beq.n	800534c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	430a      	orrs	r2, r1
 800534a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005354:	2b00      	cmp	r3, #0
 8005356:	d01a      	beq.n	800538e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	430a      	orrs	r2, r1
 800536c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005372:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005376:	d10a      	bne.n	800538e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	430a      	orrs	r2, r1
 800538c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00a      	beq.n	80053b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	685b      	ldr	r3, [r3, #4]
 80053a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	605a      	str	r2, [r3, #4]
  }
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b086      	sub	sp, #24
 80053c0:	af02      	add	r7, sp, #8
 80053c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80053cc:	f7fd fa40 	bl	8002850 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b08      	cmp	r3, #8
 80053de:	d10e      	bne.n	80053fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	2200      	movs	r2, #0
 80053ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 f82c 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 80053f4:	4603      	mov	r3, r0
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d001      	beq.n	80053fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e022      	b.n	8005444 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0304 	and.w	r3, r3, #4
 8005408:	2b04      	cmp	r3, #4
 800540a:	d10e      	bne.n	800542a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800540c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	2200      	movs	r2, #0
 8005416:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f816 	bl	800544c <UART_WaitOnFlagUntilTimeout>
 8005420:	4603      	mov	r3, r0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005426:	2303      	movs	r3, #3
 8005428:	e00c      	b.n	8005444 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2220      	movs	r2, #32
 800542e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	603b      	str	r3, [r7, #0]
 8005458:	4613      	mov	r3, r2
 800545a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800545c:	e062      	b.n	8005524 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005464:	d05e      	beq.n	8005524 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005466:	f7fd f9f3 	bl	8002850 <HAL_GetTick>
 800546a:	4602      	mov	r2, r0
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	1ad3      	subs	r3, r2, r3
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	429a      	cmp	r2, r3
 8005474:	d302      	bcc.n	800547c <UART_WaitOnFlagUntilTimeout+0x30>
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d11d      	bne.n	80054b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800548a:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689a      	ldr	r2, [r3, #8]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 0201 	bic.w	r2, r2, #1
 800549a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2220      	movs	r2, #32
 80054a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e045      	b.n	8005544 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0304 	and.w	r3, r3, #4
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d02e      	beq.n	8005524 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69db      	ldr	r3, [r3, #28]
 80054cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054d4:	d126      	bne.n	8005524 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80054de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80054ee:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f022 0201 	bic.w	r2, r2, #1
 80054fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2220      	movs	r2, #32
 8005504:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2220      	movs	r2, #32
 800550c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2220      	movs	r2, #32
 8005514:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e00f      	b.n	8005544 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69da      	ldr	r2, [r3, #28]
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	4013      	ands	r3, r2
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	429a      	cmp	r2, r3
 8005532:	bf0c      	ite	eq
 8005534:	2301      	moveq	r3, #1
 8005536:	2300      	movne	r3, #0
 8005538:	b2db      	uxtb	r3, r3
 800553a:	461a      	mov	r2, r3
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	429a      	cmp	r2, r3
 8005540:	d08d      	beq.n	800545e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_UARTEx_DisableFifoMode+0x16>
 800555e:	2302      	movs	r3, #2
 8005560:	e027      	b.n	80055b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2224      	movs	r2, #36	; 0x24
 800556e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f022 0201 	bic.w	r2, r2, #1
 8005588:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005590:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80055b0:	2300      	movs	r3, #0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e02d      	b.n	8005632 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2224      	movs	r2, #36	; 0x24
 80055e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f850 	bl	80056b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b084      	sub	sp, #16
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800564e:	2302      	movs	r3, #2
 8005650:	e02d      	b.n	80056ae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2224      	movs	r2, #36	; 0x24
 800565e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f022 0201 	bic.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	430a      	orrs	r2, r1
 800568c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f812 	bl	80056b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2220      	movs	r2, #32
 80056a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
	...

080056b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b089      	sub	sp, #36	; 0x24
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80056c0:	4a2f      	ldr	r2, [pc, #188]	; (8005780 <UARTEx_SetNbDataToProcess+0xc8>)
 80056c2:	f107 0314 	add.w	r3, r7, #20
 80056c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056ca:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80056ce:	4a2d      	ldr	r2, [pc, #180]	; (8005784 <UARTEx_SetNbDataToProcess+0xcc>)
 80056d0:	f107 030c 	add.w	r3, r7, #12
 80056d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80056d8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d108      	bne.n	80056f6 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80056f4:	e03d      	b.n	8005772 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80056f6:	2308      	movs	r3, #8
 80056f8:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80056fa:	2308      	movs	r3, #8
 80056fc:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	0e5b      	lsrs	r3, r3, #25
 8005706:	b2db      	uxtb	r3, r3
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	0f5b      	lsrs	r3, r3, #29
 8005716:	b2db      	uxtb	r3, r3
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800571e:	7fbb      	ldrb	r3, [r7, #30]
 8005720:	7f3a      	ldrb	r2, [r7, #28]
 8005722:	f107 0120 	add.w	r1, r7, #32
 8005726:	440a      	add	r2, r1
 8005728:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800572c:	fb02 f303 	mul.w	r3, r2, r3
 8005730:	7f3a      	ldrb	r2, [r7, #28]
 8005732:	f107 0120 	add.w	r1, r7, #32
 8005736:	440a      	add	r2, r1
 8005738:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800573c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005740:	b29a      	uxth	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005748:	7ffb      	ldrb	r3, [r7, #31]
 800574a:	7f7a      	ldrb	r2, [r7, #29]
 800574c:	f107 0120 	add.w	r1, r7, #32
 8005750:	440a      	add	r2, r1
 8005752:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	7f7a      	ldrb	r2, [r7, #29]
 800575c:	f107 0120 	add.w	r1, r7, #32
 8005760:	440a      	add	r2, r1
 8005762:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005766:	fb93 f3f2 	sdiv	r3, r3, r2
 800576a:	b29a      	uxth	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005772:	bf00      	nop
 8005774:	3724      	adds	r7, #36	; 0x24
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	0800b294 	.word	0x0800b294
 8005784:	0800b29c 	.word	0x0800b29c

08005788 <arm_std_f32>:
 8005788:	2901      	cmp	r1, #1
 800578a:	d97d      	bls.n	8005888 <arm_std_f32+0x100>
 800578c:	b530      	push	{r4, r5, lr}
 800578e:	ed2d 8b02 	vpush	{d8}
 8005792:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8005898 <arm_std_f32+0x110>
 8005796:	088d      	lsrs	r5, r1, #2
 8005798:	b083      	sub	sp, #12
 800579a:	eef0 4a47 	vmov.f32	s9, s14
 800579e:	d028      	beq.n	80057f2 <arm_std_f32+0x6a>
 80057a0:	f100 0310 	add.w	r3, r0, #16
 80057a4:	462c      	mov	r4, r5
 80057a6:	ed53 7a04 	vldr	s15, [r3, #-16]
 80057aa:	ed13 5a03 	vldr	s10, [r3, #-12]
 80057ae:	ed53 5a02 	vldr	s11, [r3, #-8]
 80057b2:	ed13 6a01 	vldr	s12, [r3, #-4]
 80057b6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 80057ba:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80057be:	ee36 7a87 	vadd.f32	s14, s13, s14
 80057c2:	ee65 6a05 	vmul.f32	s13, s10, s10
 80057c6:	ee77 7a85 	vadd.f32	s15, s15, s10
 80057ca:	ee76 6a87 	vadd.f32	s13, s13, s14
 80057ce:	ee25 7aa5 	vmul.f32	s14, s11, s11
 80057d2:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80057d6:	ee77 6a26 	vadd.f32	s13, s14, s13
 80057da:	ee26 7a06 	vmul.f32	s14, s12, s12
 80057de:	3c01      	subs	r4, #1
 80057e0:	ee77 4a86 	vadd.f32	s9, s15, s12
 80057e4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80057e8:	f103 0310 	add.w	r3, r3, #16
 80057ec:	d1db      	bne.n	80057a6 <arm_std_f32+0x1e>
 80057ee:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80057f2:	f011 0303 	ands.w	r3, r1, #3
 80057f6:	d01b      	beq.n	8005830 <arm_std_f32+0xa8>
 80057f8:	edd0 7a00 	vldr	s15, [r0]
 80057fc:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005800:	3b01      	subs	r3, #1
 8005802:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8005806:	ee37 7a26 	vadd.f32	s14, s14, s13
 800580a:	d011      	beq.n	8005830 <arm_std_f32+0xa8>
 800580c:	edd0 7a01 	vldr	s15, [r0, #4]
 8005810:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005814:	2b01      	cmp	r3, #1
 8005816:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800581a:	ee37 7a26 	vadd.f32	s14, s14, s13
 800581e:	d007      	beq.n	8005830 <arm_std_f32+0xa8>
 8005820:	edd0 7a02 	vldr	s15, [r0, #8]
 8005824:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8005828:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800582c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005830:	ee07 1a90 	vmov	s15, r1
 8005834:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005838:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800583c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8005840:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8005844:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8005848:	ee87 0a06 	vdiv.f32	s0, s14, s12
 800584c:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8005850:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8005854:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005858:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800585c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005860:	db0c      	blt.n	800587c <arm_std_f32+0xf4>
 8005862:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800586a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800586e:	d40e      	bmi.n	800588e <arm_std_f32+0x106>
 8005870:	ed82 8a00 	vstr	s16, [r2]
 8005874:	b003      	add	sp, #12
 8005876:	ecbd 8b02 	vpop	{d8}
 800587a:	bd30      	pop	{r4, r5, pc}
 800587c:	2300      	movs	r3, #0
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	b003      	add	sp, #12
 8005882:	ecbd 8b02 	vpop	{d8}
 8005886:	bd30      	pop	{r4, r5, pc}
 8005888:	2300      	movs	r3, #0
 800588a:	6013      	str	r3, [r2, #0]
 800588c:	4770      	bx	lr
 800588e:	9201      	str	r2, [sp, #4]
 8005890:	f004 ff78 	bl	800a784 <sqrtf>
 8005894:	9a01      	ldr	r2, [sp, #4]
 8005896:	e7eb      	b.n	8005870 <arm_std_f32+0xe8>
 8005898:	00000000 	.word	0x00000000

0800589c <arm_rms_f32>:
 800589c:	b530      	push	{r4, r5, lr}
 800589e:	ed2d 8b02 	vpush	{d8}
 80058a2:	088d      	lsrs	r5, r1, #2
 80058a4:	b083      	sub	sp, #12
 80058a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005960 <arm_rms_f32+0xc4>
 80058aa:	d020      	beq.n	80058ee <arm_rms_f32+0x52>
 80058ac:	f100 0310 	add.w	r3, r0, #16
 80058b0:	462c      	mov	r4, r5
 80058b2:	ed53 6a04 	vldr	s13, [r3, #-16]
 80058b6:	ed13 7a03 	vldr	s14, [r3, #-12]
 80058ba:	ed53 7a02 	vldr	s15, [r3, #-8]
 80058be:	ed13 6a01 	vldr	s12, [r3, #-4]
 80058c2:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80058c6:	ee27 7a07 	vmul.f32	s14, s14, s14
 80058ca:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80058ce:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80058d2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80058d6:	ee26 6a06 	vmul.f32	s12, s12, s12
 80058da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80058de:	3c01      	subs	r4, #1
 80058e0:	f103 0310 	add.w	r3, r3, #16
 80058e4:	ee76 5a27 	vadd.f32	s11, s12, s15
 80058e8:	d1e3      	bne.n	80058b2 <arm_rms_f32+0x16>
 80058ea:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80058ee:	f011 0303 	ands.w	r3, r1, #3
 80058f2:	d015      	beq.n	8005920 <arm_rms_f32+0x84>
 80058f4:	edd0 7a00 	vldr	s15, [r0]
 80058f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80058fc:	3b01      	subs	r3, #1
 80058fe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005902:	d00d      	beq.n	8005920 <arm_rms_f32+0x84>
 8005904:	edd0 7a01 	vldr	s15, [r0, #4]
 8005908:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800590c:	2b01      	cmp	r3, #1
 800590e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005912:	d005      	beq.n	8005920 <arm_rms_f32+0x84>
 8005914:	edd0 7a02 	vldr	s15, [r0, #8]
 8005918:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800591c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005920:	ee07 1a90 	vmov	s15, r1
 8005924:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005928:	2300      	movs	r3, #0
 800592a:	ee85 0aa7 	vdiv.f32	s0, s11, s15
 800592e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005936:	db0c      	blt.n	8005952 <arm_rms_f32+0xb6>
 8005938:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800593c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005940:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005944:	d407      	bmi.n	8005956 <arm_rms_f32+0xba>
 8005946:	ed82 8a00 	vstr	s16, [r2]
 800594a:	b003      	add	sp, #12
 800594c:	ecbd 8b02 	vpop	{d8}
 8005950:	bd30      	pop	{r4, r5, pc}
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	e7f9      	b.n	800594a <arm_rms_f32+0xae>
 8005956:	9201      	str	r2, [sp, #4]
 8005958:	f004 ff14 	bl	800a784 <sqrtf>
 800595c:	9a01      	ldr	r2, [sp, #4]
 800595e:	e7f2      	b.n	8005946 <arm_rms_f32+0xaa>
 8005960:	00000000 	.word	0x00000000

08005964 <arm_mean_f32>:
 8005964:	b430      	push	{r4, r5}
 8005966:	088d      	lsrs	r5, r1, #2
 8005968:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80059dc <arm_mean_f32+0x78>
 800596c:	d018      	beq.n	80059a0 <arm_mean_f32+0x3c>
 800596e:	f100 0310 	add.w	r3, r0, #16
 8005972:	462c      	mov	r4, r5
 8005974:	ed53 5a04 	vldr	s11, [r3, #-16]
 8005978:	ed13 6a03 	vldr	s12, [r3, #-12]
 800597c:	ed53 6a02 	vldr	s13, [r3, #-8]
 8005980:	ed13 7a01 	vldr	s14, [r3, #-4]
 8005984:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8005988:	3c01      	subs	r4, #1
 800598a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800598e:	f103 0310 	add.w	r3, r3, #16
 8005992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005996:	ee77 7a87 	vadd.f32	s15, s15, s14
 800599a:	d1eb      	bne.n	8005974 <arm_mean_f32+0x10>
 800599c:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 80059a0:	f011 0303 	ands.w	r3, r1, #3
 80059a4:	d00f      	beq.n	80059c6 <arm_mean_f32+0x62>
 80059a6:	ed90 7a00 	vldr	s14, [r0]
 80059aa:	3b01      	subs	r3, #1
 80059ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059b0:	d009      	beq.n	80059c6 <arm_mean_f32+0x62>
 80059b2:	ed90 7a01 	vldr	s14, [r0, #4]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80059bc:	bf1c      	itt	ne
 80059be:	ed90 7a02 	vldrne	s14, [r0, #8]
 80059c2:	ee77 7a87 	vaddne.f32	s15, s15, s14
 80059c6:	ee07 1a10 	vmov	s14, r1
 80059ca:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80059ce:	bc30      	pop	{r4, r5}
 80059d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80059d4:	edc2 6a00 	vstr	s13, [r2]
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	00000000 	.word	0x00000000

080059e0 <arm_correlate_f32>:
 80059e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059e4:	4299      	cmp	r1, r3
 80059e6:	b08d      	sub	sp, #52	; 0x34
 80059e8:	f0c0 824c 	bcc.w	8005e84 <arm_correlate_f32+0x4a4>
 80059ec:	9c16      	ldr	r4, [sp, #88]	; 0x58
 80059ee:	eba1 0c03 	sub.w	ip, r1, r3
 80059f2:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 80059f6:	f04f 0e04 	mov.w	lr, #4
 80059fa:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 80059fe:	3101      	adds	r1, #1
 8005a00:	1ac9      	subs	r1, r1, r3
 8005a02:	3c01      	subs	r4, #1
 8005a04:	1e5e      	subs	r6, r3, #1
 8005a06:	9102      	str	r1, [sp, #8]
 8005a08:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8005a0c:	f000 8294 	beq.w	8005f38 <arm_correlate_f32+0x558>
 8005a10:	eddf 7a53 	vldr	s15, [pc, #332]	; 8005b60 <arm_correlate_f32+0x180>
 8005a14:	f1a1 0804 	sub.w	r8, r1, #4
 8005a18:	46e1      	mov	r9, ip
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	2401      	movs	r4, #1
 8005a1e:	f014 0703 	ands.w	r7, r4, #3
 8005a22:	d01b      	beq.n	8005a5c <arm_correlate_f32+0x7c>
 8005a24:	ed91 7a00 	vldr	s14, [r1]
 8005a28:	edd5 6a00 	vldr	s13, [r5]
 8005a2c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005a30:	3f01      	subs	r7, #1
 8005a32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a36:	d011      	beq.n	8005a5c <arm_correlate_f32+0x7c>
 8005a38:	ed91 7a01 	vldr	s14, [r1, #4]
 8005a3c:	edd5 6a01 	vldr	s13, [r5, #4]
 8005a40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005a44:	2f01      	cmp	r7, #1
 8005a46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a4a:	d007      	beq.n	8005a5c <arm_correlate_f32+0x7c>
 8005a4c:	ed95 7a02 	vldr	s14, [r5, #8]
 8005a50:	edd1 6a02 	vldr	s13, [r1, #8]
 8005a54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a5c:	1c67      	adds	r7, r4, #1
 8005a5e:	42bb      	cmp	r3, r7
 8005a60:	edc9 7a00 	vstr	s15, [r9]
 8005a64:	4641      	mov	r1, r8
 8005a66:	44f1      	add	r9, lr
 8005a68:	d03a      	beq.n	8005ae0 <arm_correlate_f32+0x100>
 8005a6a:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8005a6e:	f000 8267 	beq.w	8005f40 <arm_correlate_f32+0x560>
 8005a72:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8005a76:	f100 0110 	add.w	r1, r0, #16
 8005a7a:	eddf 7a39 	vldr	s15, [pc, #228]	; 8005b60 <arm_correlate_f32+0x180>
 8005a7e:	eb01 050a 	add.w	r5, r1, sl
 8005a82:	f108 0410 	add.w	r4, r8, #16
 8005a86:	ed11 7a04 	vldr	s14, [r1, #-16]
 8005a8a:	ed54 3a04 	vldr	s7, [r4, #-16]
 8005a8e:	ed11 6a03 	vldr	s12, [r1, #-12]
 8005a92:	ed14 4a03 	vldr	s8, [r4, #-12]
 8005a96:	ed51 6a02 	vldr	s13, [r1, #-8]
 8005a9a:	ed54 4a02 	vldr	s9, [r4, #-8]
 8005a9e:	ed51 5a01 	vldr	s11, [r1, #-4]
 8005aa2:	ed14 5a01 	vldr	s10, [r4, #-4]
 8005aa6:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005aaa:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005aae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ab2:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8005ab6:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005aba:	ee65 6a85 	vmul.f32	s13, s11, s10
 8005abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ac2:	3110      	adds	r1, #16
 8005ac4:	428d      	cmp	r5, r1
 8005ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005aca:	f104 0410 	add.w	r4, r4, #16
 8005ace:	d1da      	bne.n	8005a86 <arm_correlate_f32+0xa6>
 8005ad0:	eb00 050a 	add.w	r5, r0, sl
 8005ad4:	eb08 010a 	add.w	r1, r8, sl
 8005ad8:	f1a8 0804 	sub.w	r8, r8, #4
 8005adc:	463c      	mov	r4, r7
 8005ade:	e79e      	b.n	8005a1e <arm_correlate_f32+0x3e>
 8005ae0:	2b03      	cmp	r3, #3
 8005ae2:	fb0e cc04 	mla	ip, lr, r4, ip
 8005ae6:	f240 81dd 	bls.w	8005ea4 <arm_correlate_f32+0x4c4>
 8005aea:	9b02      	ldr	r3, [sp, #8]
 8005aec:	0899      	lsrs	r1, r3, #2
 8005aee:	9103      	str	r1, [sp, #12]
 8005af0:	f000 8220 	beq.w	8005f34 <arm_correlate_f32+0x554>
 8005af4:	08bb      	lsrs	r3, r7, #2
 8005af6:	f007 0403 	and.w	r4, r7, #3
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	011b      	lsls	r3, r3, #4
 8005afe:	f103 0b0c 	add.w	fp, r3, #12
 8005b02:	18d5      	adds	r5, r2, r3
 8005b04:	1e63      	subs	r3, r4, #1
 8005b06:	0109      	lsls	r1, r1, #4
 8005b08:	9306      	str	r3, [sp, #24]
 8005b0a:	f100 080c 	add.w	r8, r0, #12
 8005b0e:	9401      	str	r4, [sp, #4]
 8005b10:	9104      	str	r1, [sp, #16]
 8005b12:	ea4f 048e 	mov.w	r4, lr, lsl #2
 8005b16:	4441      	add	r1, r8
 8005b18:	f102 0310 	add.w	r3, r2, #16
 8005b1c:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8005b20:	9e06      	ldr	r6, [sp, #24]
 8005b22:	9405      	str	r4, [sp, #20]
 8005b24:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 8005b28:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8005b2c:	46e1      	mov	r9, ip
 8005b2e:	4483      	add	fp, r0
 8005b30:	460f      	mov	r7, r1
 8005b32:	920b      	str	r2, [sp, #44]	; 0x2c
 8005b34:	469c      	mov	ip, r3
 8005b36:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8005b60 <arm_correlate_f32+0x180>
 8005b3a:	ed58 1a03 	vldr	s3, [r8, #-12]
 8005b3e:	ed18 2a02 	vldr	s4, [r8, #-8]
 8005b42:	ed58 2a01 	vldr	s5, [r8, #-4]
 8005b46:	ed98 0a00 	vldr	s0, [r8]
 8005b4a:	9900      	ldr	r1, [sp, #0]
 8005b4c:	eef0 5a46 	vmov.f32	s11, s12
 8005b50:	eeb0 5a46 	vmov.f32	s10, s12
 8005b54:	eef0 4a46 	vmov.f32	s9, s12
 8005b58:	4663      	mov	r3, ip
 8005b5a:	4642      	mov	r2, r8
 8005b5c:	e005      	b.n	8005b6a <arm_correlate_f32+0x18a>
 8005b5e:	bf00      	nop
 8005b60:	00000000 	.word	0x00000000
 8005b64:	ed90 0a04 	vldr	s0, [r0, #16]
 8005b68:	3210      	adds	r2, #16
 8005b6a:	ed53 6a04 	vldr	s13, [r3, #-16]
 8005b6e:	ed13 7a03 	vldr	s14, [r3, #-12]
 8005b72:	ed53 7a02 	vldr	s15, [r3, #-8]
 8005b76:	ed13 1a01 	vldr	s2, [r3, #-4]
 8005b7a:	ee62 3a26 	vmul.f32	s7, s4, s13
 8005b7e:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8005b82:	ee61 0aa6 	vmul.f32	s1, s3, s13
 8005b86:	edd2 1a01 	vldr	s3, [r2, #4]
 8005b8a:	ee66 6a80 	vmul.f32	s13, s13, s0
 8005b8e:	ee22 3a07 	vmul.f32	s6, s4, s14
 8005b92:	ee33 5a85 	vadd.f32	s10, s7, s10
 8005b96:	ee74 5a25 	vadd.f32	s11, s8, s11
 8005b9a:	ee62 3a87 	vmul.f32	s7, s5, s14
 8005b9e:	ee20 4a07 	vmul.f32	s8, s0, s14
 8005ba2:	ee70 4aa4 	vadd.f32	s9, s1, s9
 8005ba6:	ee36 6a86 	vadd.f32	s12, s13, s12
 8005baa:	ed92 2a02 	vldr	s4, [r2, #8]
 8005bae:	ee27 7a21 	vmul.f32	s14, s14, s3
 8005bb2:	ee73 3a85 	vadd.f32	s7, s7, s10
 8005bb6:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005bba:	ee20 5a27 	vmul.f32	s10, s0, s15
 8005bbe:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005bc2:	ee34 4a25 	vadd.f32	s8, s8, s11
 8005bc6:	ee62 4aa7 	vmul.f32	s9, s5, s15
 8005bca:	ee61 5aa7 	vmul.f32	s11, s3, s15
 8005bce:	edd2 2a03 	vldr	s5, [r2, #12]
 8005bd2:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005bd6:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005bda:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005bde:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005be2:	ee20 0a01 	vmul.f32	s0, s0, s2
 8005be6:	ee61 3a81 	vmul.f32	s7, s3, s2
 8005bea:	ee75 5a84 	vadd.f32	s11, s11, s8
 8005bee:	ee22 7a01 	vmul.f32	s14, s4, s2
 8005bf2:	ee21 6a22 	vmul.f32	s12, s2, s5
 8005bf6:	3901      	subs	r1, #1
 8005bf8:	f103 0310 	add.w	r3, r3, #16
 8005bfc:	ee70 4a24 	vadd.f32	s9, s0, s9
 8005c00:	ee33 5a85 	vadd.f32	s10, s7, s10
 8005c04:	ee77 5a25 	vadd.f32	s11, s14, s11
 8005c08:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	d1a9      	bne.n	8005b64 <arm_correlate_f32+0x184>
 8005c10:	9b01      	ldr	r3, [sp, #4]
 8005c12:	b3f3      	cbz	r3, 8005c92 <arm_correlate_f32+0x2b2>
 8005c14:	edd5 7a00 	vldr	s15, [r5]
 8005c18:	ed9b 4a00 	vldr	s8, [fp]
 8005c1c:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8005c20:	ee62 3a27 	vmul.f32	s7, s4, s15
 8005c24:	ee22 7aa7 	vmul.f32	s14, s5, s15
 8005c28:	ee64 7a27 	vmul.f32	s15, s8, s15
 8005c2c:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8005c30:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005c34:	ee75 5a87 	vadd.f32	s11, s11, s14
 8005c38:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c3c:	b34e      	cbz	r6, 8005c92 <arm_correlate_f32+0x2b2>
 8005c3e:	edd5 7a01 	vldr	s15, [r5, #4]
 8005c42:	eddb 6a01 	vldr	s13, [fp, #4]
 8005c46:	ee22 7a27 	vmul.f32	s14, s4, s15
 8005c4a:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8005c4e:	ee67 3a84 	vmul.f32	s7, s15, s8
 8005c52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005c56:	2e01      	cmp	r6, #1
 8005c58:	ee74 4a87 	vadd.f32	s9, s9, s14
 8005c5c:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005c60:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8005c64:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005c68:	d013      	beq.n	8005c92 <arm_correlate_f32+0x2b2>
 8005c6a:	ed95 7a02 	vldr	s14, [r5, #8]
 8005c6e:	eddb 3a02 	vldr	s7, [fp, #8]
 8005c72:	ee62 7a87 	vmul.f32	s15, s5, s14
 8005c76:	ee27 4a04 	vmul.f32	s8, s14, s8
 8005c7a:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005c7e:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005c82:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8005c86:	ee35 5a04 	vadd.f32	s10, s10, s8
 8005c8a:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8005c8e:	ee36 6a07 	vadd.f32	s12, s12, s14
 8005c92:	f108 0810 	add.w	r8, r8, #16
 8005c96:	eb09 020e 	add.w	r2, r9, lr
 8005c9a:	eb0a 030e 	add.w	r3, sl, lr
 8005c9e:	4547      	cmp	r7, r8
 8005ca0:	edc9 4a00 	vstr	s9, [r9]
 8005ca4:	f10b 0b10 	add.w	fp, fp, #16
 8005ca8:	ed82 5a00 	vstr	s10, [r2]
 8005cac:	44a1      	add	r9, r4
 8005cae:	edca 5a00 	vstr	s11, [sl]
 8005cb2:	ed83 6a00 	vstr	s12, [r3]
 8005cb6:	44a2      	add	sl, r4
 8005cb8:	f47f af3d 	bne.w	8005b36 <arm_correlate_f32+0x156>
 8005cbc:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 8005cc0:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 8005cc4:	9b03      	ldr	r3, [sp, #12]
 8005cc6:	9c05      	ldr	r4, [sp, #20]
 8005cc8:	9904      	ldr	r1, [sp, #16]
 8005cca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005ccc:	fb04 cc03 	mla	ip, r4, r3, ip
 8005cd0:	4401      	add	r1, r0
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	460d      	mov	r5, r1
 8005cd6:	9303      	str	r3, [sp, #12]
 8005cd8:	9b02      	ldr	r3, [sp, #8]
 8005cda:	f013 0303 	ands.w	r3, r3, #3
 8005cde:	9301      	str	r3, [sp, #4]
 8005ce0:	d071      	beq.n	8005dc6 <arm_correlate_f32+0x3e6>
 8005ce2:	9903      	ldr	r1, [sp, #12]
 8005ce4:	9205      	str	r2, [sp, #20]
 8005ce6:	f007 0403 	and.w	r4, r7, #3
 8005cea:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8005cee:	1c4f      	adds	r7, r1, #1
 8005cf0:	1859      	adds	r1, r3, r1
 8005cf2:	1d03      	adds	r3, r0, #4
 8005cf4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005cf8:	9400      	str	r4, [sp, #0]
 8005cfa:	f102 0110 	add.w	r1, r2, #16
 8005cfe:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8005d02:	3c01      	subs	r4, #1
 8005d04:	e9cd 6003 	strd	r6, r0, [sp, #12]
 8005d08:	eb02 090a 	add.w	r9, r2, sl
 8005d0c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005d10:	46e0      	mov	r8, ip
 8005d12:	4618      	mov	r0, r3
 8005d14:	460e      	mov	r6, r1
 8005d16:	4622      	mov	r2, r4
 8005d18:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8005b60 <arm_correlate_f32+0x180>
 8005d1c:	f105 0110 	add.w	r1, r5, #16
 8005d20:	4633      	mov	r3, r6
 8005d22:	465c      	mov	r4, fp
 8005d24:	ed11 7a04 	vldr	s14, [r1, #-16]
 8005d28:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005d2c:	ed11 6a03 	vldr	s12, [r1, #-12]
 8005d30:	ed13 4a03 	vldr	s8, [r3, #-12]
 8005d34:	ed51 6a02 	vldr	s13, [r1, #-8]
 8005d38:	ed53 4a02 	vldr	s9, [r3, #-8]
 8005d3c:	ed51 5a01 	vldr	s11, [r1, #-4]
 8005d40:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005d44:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005d48:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005d4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d50:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8005d54:	ee76 7a27 	vadd.f32	s15, s12, s15
 8005d58:	ee65 6a85 	vmul.f32	s13, s11, s10
 8005d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d60:	3c01      	subs	r4, #1
 8005d62:	f101 0110 	add.w	r1, r1, #16
 8005d66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d6a:	f103 0310 	add.w	r3, r3, #16
 8005d6e:	d1d9      	bne.n	8005d24 <arm_correlate_f32+0x344>
 8005d70:	9b00      	ldr	r3, [sp, #0]
 8005d72:	4455      	add	r5, sl
 8005d74:	b1d3      	cbz	r3, 8005dac <arm_correlate_f32+0x3cc>
 8005d76:	ed99 7a00 	vldr	s14, [r9]
 8005d7a:	edd5 6a00 	vldr	s13, [r5]
 8005d7e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005d82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d86:	b18a      	cbz	r2, 8005dac <arm_correlate_f32+0x3cc>
 8005d88:	ed99 7a01 	vldr	s14, [r9, #4]
 8005d8c:	edd5 6a01 	vldr	s13, [r5, #4]
 8005d90:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005d94:	2a01      	cmp	r2, #1
 8005d96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d9a:	d007      	beq.n	8005dac <arm_correlate_f32+0x3cc>
 8005d9c:	ed95 7a02 	vldr	s14, [r5, #8]
 8005da0:	edd9 6a02 	vldr	s13, [r9, #8]
 8005da4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005da8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dac:	463d      	mov	r5, r7
 8005dae:	3704      	adds	r7, #4
 8005db0:	42b8      	cmp	r0, r7
 8005db2:	edc8 7a00 	vstr	s15, [r8]
 8005db6:	44f0      	add	r8, lr
 8005db8:	d1ae      	bne.n	8005d18 <arm_correlate_f32+0x338>
 8005dba:	9b01      	ldr	r3, [sp, #4]
 8005dbc:	9a05      	ldr	r2, [sp, #20]
 8005dbe:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 8005dc2:	fb0e cc03 	mla	ip, lr, r3, ip
 8005dc6:	9b02      	ldr	r3, [sp, #8]
 8005dc8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005dcc:	08b5      	lsrs	r5, r6, #2
 8005dce:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8005b60 <arm_correlate_f32+0x180>
 8005dd2:	f000 80ac 	beq.w	8005f2e <arm_correlate_f32+0x54e>
 8005dd6:	f100 0110 	add.w	r1, r0, #16
 8005dda:	f102 0310 	add.w	r3, r2, #16
 8005dde:	462c      	mov	r4, r5
 8005de0:	ed51 6a04 	vldr	s13, [r1, #-16]
 8005de4:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005de8:	ed11 7a03 	vldr	s14, [r1, #-12]
 8005dec:	ed13 4a03 	vldr	s8, [r3, #-12]
 8005df0:	ed51 7a02 	vldr	s15, [r1, #-8]
 8005df4:	ed53 4a02 	vldr	s9, [r3, #-8]
 8005df8:	ed11 6a01 	vldr	s12, [r1, #-4]
 8005dfc:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005e00:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005e04:	ee27 7a04 	vmul.f32	s14, s14, s8
 8005e08:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005e0c:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8005e10:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005e14:	ee66 6a05 	vmul.f32	s13, s12, s10
 8005e18:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005e1c:	3c01      	subs	r4, #1
 8005e1e:	f101 0110 	add.w	r1, r1, #16
 8005e22:	ee76 5aa7 	vadd.f32	s11, s13, s15
 8005e26:	f103 0310 	add.w	r3, r3, #16
 8005e2a:	d1d9      	bne.n	8005de0 <arm_correlate_f32+0x400>
 8005e2c:	012d      	lsls	r5, r5, #4
 8005e2e:	1941      	adds	r1, r0, r5
 8005e30:	4415      	add	r5, r2
 8005e32:	f016 0303 	ands.w	r3, r6, #3
 8005e36:	d01b      	beq.n	8005e70 <arm_correlate_f32+0x490>
 8005e38:	edd5 7a00 	vldr	s15, [r5]
 8005e3c:	ed91 7a00 	vldr	s14, [r1]
 8005e40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e44:	3b01      	subs	r3, #1
 8005e46:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005e4a:	d011      	beq.n	8005e70 <arm_correlate_f32+0x490>
 8005e4c:	edd5 7a01 	vldr	s15, [r5, #4]
 8005e50:	ed91 7a01 	vldr	s14, [r1, #4]
 8005e54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005e5e:	d007      	beq.n	8005e70 <arm_correlate_f32+0x490>
 8005e60:	edd1 7a02 	vldr	s15, [r1, #8]
 8005e64:	ed95 7a02 	vldr	s14, [r5, #8]
 8005e68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005e6c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005e70:	3e01      	subs	r6, #1
 8005e72:	edcc 5a00 	vstr	s11, [ip]
 8005e76:	f100 0004 	add.w	r0, r0, #4
 8005e7a:	44f4      	add	ip, lr
 8005e7c:	d1a6      	bne.n	8005dcc <arm_correlate_f32+0x3ec>
 8005e7e:	b00d      	add	sp, #52	; 0x34
 8005e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e84:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8005e88:	4606      	mov	r6, r0
 8005e8a:	3c02      	subs	r4, #2
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005e90:	440c      	add	r4, r1
 8005e92:	460d      	mov	r5, r1
 8005e94:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4632      	mov	r2, r6
 8005e9c:	f06f 0e03 	mvn.w	lr, #3
 8005ea0:	462b      	mov	r3, r5
 8005ea2:	e5aa      	b.n	80059fa <arm_correlate_f32+0x1a>
 8005ea4:	9902      	ldr	r1, [sp, #8]
 8005ea6:	2900      	cmp	r1, #0
 8005ea8:	d090      	beq.n	8005dcc <arm_correlate_f32+0x3ec>
 8005eaa:	9902      	ldr	r1, [sp, #8]
 8005eac:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8005b60 <arm_correlate_f32+0x180>
 8005eb0:	ea4f 0881 	mov.w	r8, r1, lsl #2
 8005eb4:	eb00 0708 	add.w	r7, r0, r8
 8005eb8:	4601      	mov	r1, r0
 8005eba:	4665      	mov	r5, ip
 8005ebc:	e020      	b.n	8005f00 <arm_correlate_f32+0x520>
 8005ebe:	edd2 7a00 	vldr	s15, [r2]
 8005ec2:	ecb4 7a01 	vldmia	r4!, {s14}
 8005ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005eca:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005ece:	b18e      	cbz	r6, 8005ef4 <arm_correlate_f32+0x514>
 8005ed0:	ed92 7a01 	vldr	s14, [r2, #4]
 8005ed4:	edd1 6a01 	vldr	s13, [r1, #4]
 8005ed8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ee2:	d007      	beq.n	8005ef4 <arm_correlate_f32+0x514>
 8005ee4:	ed91 7a02 	vldr	s14, [r1, #8]
 8005ee8:	edd2 6a02 	vldr	s13, [r2, #8]
 8005eec:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005ef0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ef4:	42bc      	cmp	r4, r7
 8005ef6:	edc5 7a00 	vstr	s15, [r5]
 8005efa:	4621      	mov	r1, r4
 8005efc:	4475      	add	r5, lr
 8005efe:	d00b      	beq.n	8005f18 <arm_correlate_f32+0x538>
 8005f00:	460c      	mov	r4, r1
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1db      	bne.n	8005ebe <arm_correlate_f32+0x4de>
 8005f06:	1d0c      	adds	r4, r1, #4
 8005f08:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8005f48 <arm_correlate_f32+0x568>
 8005f0c:	42bc      	cmp	r4, r7
 8005f0e:	edc5 7a00 	vstr	s15, [r5]
 8005f12:	4621      	mov	r1, r4
 8005f14:	4475      	add	r5, lr
 8005f16:	d1f3      	bne.n	8005f00 <arm_correlate_f32+0x520>
 8005f18:	9b02      	ldr	r3, [sp, #8]
 8005f1a:	4440      	add	r0, r8
 8005f1c:	fb0e cc03 	mla	ip, lr, r3, ip
 8005f20:	2e00      	cmp	r6, #0
 8005f22:	d0ac      	beq.n	8005e7e <arm_correlate_f32+0x49e>
 8005f24:	08b5      	lsrs	r5, r6, #2
 8005f26:	eddf 5a08 	vldr	s11, [pc, #32]	; 8005f48 <arm_correlate_f32+0x568>
 8005f2a:	f47f af54 	bne.w	8005dd6 <arm_correlate_f32+0x3f6>
 8005f2e:	4615      	mov	r5, r2
 8005f30:	4601      	mov	r1, r0
 8005f32:	e77e      	b.n	8005e32 <arm_correlate_f32+0x452>
 8005f34:	4605      	mov	r5, r0
 8005f36:	e6cf      	b.n	8005cd8 <arm_correlate_f32+0x2f8>
 8005f38:	9902      	ldr	r1, [sp, #8]
 8005f3a:	2900      	cmp	r1, #0
 8005f3c:	d1b5      	bne.n	8005eaa <arm_correlate_f32+0x4ca>
 8005f3e:	e79e      	b.n	8005e7e <arm_correlate_f32+0x49e>
 8005f40:	eddf 7a01 	vldr	s15, [pc, #4]	; 8005f48 <arm_correlate_f32+0x568>
 8005f44:	4605      	mov	r5, r0
 8005f46:	e5c7      	b.n	8005ad8 <arm_correlate_f32+0xf8>
 8005f48:	00000000 	.word	0x00000000

08005f4c <arm_conv_f32>:
 8005f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f50:	b08b      	sub	sp, #44	; 0x2c
 8005f52:	4299      	cmp	r1, r3
 8005f54:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005f56:	d205      	bcs.n	8005f64 <arm_conv_f32+0x18>
 8005f58:	4606      	mov	r6, r0
 8005f5a:	460c      	mov	r4, r1
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4632      	mov	r2, r6
 8005f62:	4623      	mov	r3, r4
 8005f64:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 8005f68:	3101      	adds	r1, #1
 8005f6a:	1ac9      	subs	r1, r1, r3
 8005f6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005f70:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005f74:	9101      	str	r1, [sp, #4]
 8005f76:	1e59      	subs	r1, r3, #1
 8005f78:	eb02 070b 	add.w	r7, r2, fp
 8005f7c:	f000 8277 	beq.w	800646e <arm_conv_f32+0x522>
 8005f80:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8006240 <arm_conv_f32+0x2f4>
 8005f84:	f102 0904 	add.w	r9, r2, #4
 8005f88:	46aa      	mov	sl, r5
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	2401      	movs	r4, #1
 8005f8e:	f014 0603 	ands.w	r6, r4, #3
 8005f92:	d01b      	beq.n	8005fcc <arm_conv_f32+0x80>
 8005f94:	ed92 7a00 	vldr	s14, [r2]
 8005f98:	edd8 6a00 	vldr	s13, [r8]
 8005f9c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005fa0:	3e01      	subs	r6, #1
 8005fa2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fa6:	d011      	beq.n	8005fcc <arm_conv_f32+0x80>
 8005fa8:	ed12 7a01 	vldr	s14, [r2, #-4]
 8005fac:	edd8 6a01 	vldr	s13, [r8, #4]
 8005fb0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005fb4:	2e01      	cmp	r6, #1
 8005fb6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fba:	d007      	beq.n	8005fcc <arm_conv_f32+0x80>
 8005fbc:	ed98 7a02 	vldr	s14, [r8, #8]
 8005fc0:	ed52 6a02 	vldr	s13, [r2, #-8]
 8005fc4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005fc8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fcc:	3401      	adds	r4, #1
 8005fce:	42a3      	cmp	r3, r4
 8005fd0:	ecea 7a01 	vstmia	sl!, {s15}
 8005fd4:	464a      	mov	r2, r9
 8005fd6:	d03a      	beq.n	800604e <arm_conv_f32+0x102>
 8005fd8:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 8005fdc:	f000 824c 	beq.w	8006478 <arm_conv_f32+0x52c>
 8005fe0:	f100 0210 	add.w	r2, r0, #16
 8005fe4:	ea4f 180e 	mov.w	r8, lr, lsl #4
 8005fe8:	eddf 7a95 	vldr	s15, [pc, #596]	; 8006240 <arm_conv_f32+0x2f4>
 8005fec:	eb02 0c08 	add.w	ip, r2, r8
 8005ff0:	f1a9 0610 	sub.w	r6, r9, #16
 8005ff4:	ed12 7a04 	vldr	s14, [r2, #-16]
 8005ff8:	edd6 3a04 	vldr	s7, [r6, #16]
 8005ffc:	ed12 6a03 	vldr	s12, [r2, #-12]
 8006000:	ed96 4a03 	vldr	s8, [r6, #12]
 8006004:	ed52 6a02 	vldr	s13, [r2, #-8]
 8006008:	edd6 4a02 	vldr	s9, [r6, #8]
 800600c:	ed52 5a01 	vldr	s11, [r2, #-4]
 8006010:	ed96 5a01 	vldr	s10, [r6, #4]
 8006014:	ee27 7a23 	vmul.f32	s14, s14, s7
 8006018:	ee26 6a04 	vmul.f32	s12, s12, s8
 800601c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006020:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8006024:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006028:	ee65 6a85 	vmul.f32	s13, s11, s10
 800602c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006030:	3210      	adds	r2, #16
 8006032:	4594      	cmp	ip, r2
 8006034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006038:	f1a6 0610 	sub.w	r6, r6, #16
 800603c:	d1da      	bne.n	8005ff4 <arm_conv_f32+0xa8>
 800603e:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8006042:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 8006046:	4480      	add	r8, r0
 8006048:	f109 0904 	add.w	r9, r9, #4
 800604c:	e79f      	b.n	8005f8e <arm_conv_f32+0x42>
 800604e:	2b03      	cmp	r3, #3
 8006050:	445d      	add	r5, fp
 8006052:	f240 80e9 	bls.w	8006228 <arm_conv_f32+0x2dc>
 8006056:	9b01      	ldr	r3, [sp, #4]
 8006058:	089a      	lsrs	r2, r3, #2
 800605a:	9202      	str	r2, [sp, #8]
 800605c:	f000 8203 	beq.w	8006466 <arm_conv_f32+0x51a>
 8006060:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8006064:	ea4f 1308 	mov.w	r3, r8, lsl #4
 8006068:	0112      	lsls	r2, r2, #4
 800606a:	f004 0603 	and.w	r6, r4, #3
 800606e:	9203      	str	r2, [sp, #12]
 8006070:	f1a3 0a10 	sub.w	sl, r3, #16
 8006074:	f1a3 020c 	sub.w	r2, r3, #12
 8006078:	3b08      	subs	r3, #8
 800607a:	9204      	str	r2, [sp, #16]
 800607c:	9305      	str	r3, [sp, #20]
 800607e:	f106 39ff 	add.w	r9, r6, #4294967295
 8006082:	e9cd 7008 	strd	r7, r0, [sp, #32]
 8006086:	9a03      	ldr	r2, [sp, #12]
 8006088:	f100 0c1c 	add.w	ip, r0, #28
 800608c:	e9cd 4106 	strd	r4, r1, [sp, #24]
 8006090:	464c      	mov	r4, r9
 8006092:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 8006096:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 800609a:	f1a7 0310 	sub.w	r3, r7, #16
 800609e:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80060a2:	eb05 0b02 	add.w	fp, r5, r2
 80060a6:	461f      	mov	r7, r3
 80060a8:	3510      	adds	r5, #16
 80060aa:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8006240 <arm_conv_f32+0x2f4>
 80060ae:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 80060b2:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 80060b6:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80060ba:	eeb0 5a46 	vmov.f32	s10, s12
 80060be:	eef0 4a46 	vmov.f32	s9, s12
 80060c2:	eef0 5a46 	vmov.f32	s11, s12
 80060c6:	463a      	mov	r2, r7
 80060c8:	4663      	mov	r3, ip
 80060ca:	4641      	mov	r1, r8
 80060cc:	edd2 6a04 	vldr	s13, [r2, #16]
 80060d0:	ed13 0a04 	vldr	s0, [r3, #-16]
 80060d4:	ed92 7a03 	vldr	s14, [r2, #12]
 80060d8:	edd2 7a02 	vldr	s15, [r2, #8]
 80060dc:	edd2 0a01 	vldr	s1, [r2, #4]
 80060e0:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80060e4:	ee62 3a26 	vmul.f32	s7, s4, s13
 80060e8:	ee61 2a26 	vmul.f32	s5, s2, s13
 80060ec:	ed13 1a03 	vldr	s2, [r3, #-12]
 80060f0:	ee66 6a80 	vmul.f32	s13, s13, s0
 80060f4:	ee21 4a87 	vmul.f32	s8, s3, s14
 80060f8:	ee73 4a24 	vadd.f32	s9, s6, s9
 80060fc:	ee33 5a85 	vadd.f32	s10, s7, s10
 8006100:	ee22 3a07 	vmul.f32	s6, s4, s14
 8006104:	ed53 1a02 	vldr	s3, [r3, #-8]
 8006108:	ee72 2aa5 	vadd.f32	s5, s5, s11
 800610c:	ee36 6a86 	vadd.f32	s12, s13, s12
 8006110:	ee60 3a07 	vmul.f32	s7, s0, s14
 8006114:	ee27 7a01 	vmul.f32	s14, s14, s2
 8006118:	ee33 3a24 	vadd.f32	s6, s6, s9
 800611c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006120:	ee74 2a22 	vadd.f32	s5, s8, s5
 8006124:	ee60 4a27 	vmul.f32	s9, s0, s15
 8006128:	ee22 4a27 	vmul.f32	s8, s4, s15
 800612c:	ee73 3a85 	vadd.f32	s7, s7, s10
 8006130:	ed13 2a01 	vldr	s4, [r3, #-4]
 8006134:	ee21 5a27 	vmul.f32	s10, s2, s15
 8006138:	ee67 7aa1 	vmul.f32	s15, s15, s3
 800613c:	ee74 4a83 	vadd.f32	s9, s9, s6
 8006140:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006144:	ee34 4a22 	vadd.f32	s8, s8, s5
 8006148:	ee60 5a20 	vmul.f32	s11, s0, s1
 800614c:	ee21 3a20 	vmul.f32	s6, s2, s1
 8006150:	ee35 5a23 	vadd.f32	s10, s10, s7
 8006154:	ee21 7aa0 	vmul.f32	s14, s3, s1
 8006158:	ee20 6a82 	vmul.f32	s12, s1, s4
 800615c:	3901      	subs	r1, #1
 800615e:	f1a2 0210 	sub.w	r2, r2, #16
 8006162:	ee75 5a84 	vadd.f32	s11, s11, s8
 8006166:	ee73 4a24 	vadd.f32	s9, s6, s9
 800616a:	ee37 5a05 	vadd.f32	s10, s14, s10
 800616e:	ee36 6a27 	vadd.f32	s12, s12, s15
 8006172:	f103 0310 	add.w	r3, r3, #16
 8006176:	d1a9      	bne.n	80060cc <arm_conv_f32+0x180>
 8006178:	eb0a 030c 	add.w	r3, sl, ip
 800617c:	2e00      	cmp	r6, #0
 800617e:	d042      	beq.n	8006206 <arm_conv_f32+0x2ba>
 8006180:	edde 7a00 	vldr	s15, [lr]
 8006184:	ed93 4a00 	vldr	s8, [r3]
 8006188:	ee61 6a27 	vmul.f32	s13, s2, s15
 800618c:	ee61 3aa7 	vmul.f32	s7, s3, s15
 8006190:	ee22 7a27 	vmul.f32	s14, s4, s15
 8006194:	ee64 7a27 	vmul.f32	s15, s8, s15
 8006198:	ee75 5aa6 	vadd.f32	s11, s11, s13
 800619c:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80061a0:	ee35 5a07 	vadd.f32	s10, s10, s14
 80061a4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80061a8:	eb09 030c 	add.w	r3, r9, ip
 80061ac:	b35c      	cbz	r4, 8006206 <arm_conv_f32+0x2ba>
 80061ae:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80061b2:	edd3 6a00 	vldr	s13, [r3]
 80061b6:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80061ba:	ee22 3a27 	vmul.f32	s6, s4, s15
 80061be:	ee67 3a84 	vmul.f32	s7, s15, s8
 80061c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80061c6:	2c01      	cmp	r4, #1
 80061c8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80061cc:	ee74 4a83 	vadd.f32	s9, s9, s6
 80061d0:	ee35 5a23 	vadd.f32	s10, s10, s7
 80061d4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80061d8:	eb00 030c 	add.w	r3, r0, ip
 80061dc:	d013      	beq.n	8006206 <arm_conv_f32+0x2ba>
 80061de:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80061e2:	edd3 3a00 	vldr	s7, [r3]
 80061e6:	ee62 7a07 	vmul.f32	s15, s4, s14
 80061ea:	ee27 4a04 	vmul.f32	s8, s14, s8
 80061ee:	ee67 6a26 	vmul.f32	s13, s14, s13
 80061f2:	ee27 7a23 	vmul.f32	s14, s14, s7
 80061f6:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80061fa:	ee74 4a84 	vadd.f32	s9, s9, s8
 80061fe:	ee35 5a26 	vadd.f32	s10, s10, s13
 8006202:	ee36 6a07 	vadd.f32	s12, s12, s14
 8006206:	45ab      	cmp	fp, r5
 8006208:	ed45 5a04 	vstr	s11, [r5, #-16]
 800620c:	ed45 4a03 	vstr	s9, [r5, #-12]
 8006210:	ed05 5a02 	vstr	s10, [r5, #-8]
 8006214:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006218:	f10c 0c10 	add.w	ip, ip, #16
 800621c:	f105 0310 	add.w	r3, r5, #16
 8006220:	f000 809e 	beq.w	8006360 <arm_conv_f32+0x414>
 8006224:	461d      	mov	r5, r3
 8006226:	e740      	b.n	80060aa <arm_conv_f32+0x15e>
 8006228:	9a01      	ldr	r2, [sp, #4]
 800622a:	46ac      	mov	ip, r5
 800622c:	2a00      	cmp	r2, #0
 800622e:	d037      	beq.n	80062a0 <arm_conv_f32+0x354>
 8006230:	9a01      	ldr	r2, [sp, #4]
 8006232:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8006240 <arm_conv_f32+0x2f4>
 8006236:	0096      	lsls	r6, r2, #2
 8006238:	eb05 0c06 	add.w	ip, r5, r6
 800623c:	4604      	mov	r4, r0
 800623e:	e021      	b.n	8006284 <arm_conv_f32+0x338>
 8006240:	00000000 	.word	0x00000000
 8006244:	edd7 7a00 	vldr	s15, [r7]
 8006248:	ecb2 7a01 	vldmia	r2!, {s14}
 800624c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006250:	ee77 7a86 	vadd.f32	s15, s15, s12
 8006254:	b189      	cbz	r1, 800627a <arm_conv_f32+0x32e>
 8006256:	ed17 7a01 	vldr	s14, [r7, #-4]
 800625a:	edd4 6a01 	vldr	s13, [r4, #4]
 800625e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006262:	2b02      	cmp	r3, #2
 8006264:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006268:	d007      	beq.n	800627a <arm_conv_f32+0x32e>
 800626a:	ed94 7a02 	vldr	s14, [r4, #8]
 800626e:	ed57 6a02 	vldr	s13, [r7, #-8]
 8006272:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006276:	ee77 7a87 	vadd.f32	s15, s15, s14
 800627a:	ece5 7a01 	vstmia	r5!, {s15}
 800627e:	4565      	cmp	r5, ip
 8006280:	4614      	mov	r4, r2
 8006282:	d00a      	beq.n	800629a <arm_conv_f32+0x34e>
 8006284:	4622      	mov	r2, r4
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1dc      	bne.n	8006244 <arm_conv_f32+0x2f8>
 800628a:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8006240 <arm_conv_f32+0x2f4>
 800628e:	ece5 7a01 	vstmia	r5!, {s15}
 8006292:	1d22      	adds	r2, r4, #4
 8006294:	4565      	cmp	r5, ip
 8006296:	4614      	mov	r4, r2
 8006298:	d1f4      	bne.n	8006284 <arm_conv_f32+0x338>
 800629a:	4430      	add	r0, r6
 800629c:	2900      	cmp	r1, #0
 800629e:	d059      	beq.n	8006354 <arm_conv_f32+0x408>
 80062a0:	088d      	lsrs	r5, r1, #2
 80062a2:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8006240 <arm_conv_f32+0x2f4>
 80062a6:	d058      	beq.n	800635a <arm_conv_f32+0x40e>
 80062a8:	f100 0210 	add.w	r2, r0, #16
 80062ac:	f1a7 0310 	sub.w	r3, r7, #16
 80062b0:	462c      	mov	r4, r5
 80062b2:	ed52 6a04 	vldr	s13, [r2, #-16]
 80062b6:	edd3 3a04 	vldr	s7, [r3, #16]
 80062ba:	ed12 7a03 	vldr	s14, [r2, #-12]
 80062be:	ed93 4a03 	vldr	s8, [r3, #12]
 80062c2:	ed52 7a02 	vldr	s15, [r2, #-8]
 80062c6:	edd3 4a02 	vldr	s9, [r3, #8]
 80062ca:	ed12 6a01 	vldr	s12, [r2, #-4]
 80062ce:	ed93 5a01 	vldr	s10, [r3, #4]
 80062d2:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80062d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 80062da:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80062de:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80062e2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80062e6:	ee66 6a05 	vmul.f32	s13, s12, s10
 80062ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062ee:	3c01      	subs	r4, #1
 80062f0:	f102 0210 	add.w	r2, r2, #16
 80062f4:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80062f8:	f1a3 0310 	sub.w	r3, r3, #16
 80062fc:	d1d9      	bne.n	80062b2 <arm_conv_f32+0x366>
 80062fe:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8006302:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8006306:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800630a:	f011 0203 	ands.w	r2, r1, #3
 800630e:	d01b      	beq.n	8006348 <arm_conv_f32+0x3fc>
 8006310:	edd3 7a00 	vldr	s15, [r3]
 8006314:	ed95 7a00 	vldr	s14, [r5]
 8006318:	ee67 7a87 	vmul.f32	s15, s15, s14
 800631c:	3a01      	subs	r2, #1
 800631e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006322:	d011      	beq.n	8006348 <arm_conv_f32+0x3fc>
 8006324:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006328:	ed95 7a01 	vldr	s14, [r5, #4]
 800632c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006330:	2a01      	cmp	r2, #1
 8006332:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006336:	d007      	beq.n	8006348 <arm_conv_f32+0x3fc>
 8006338:	edd5 7a02 	vldr	s15, [r5, #8]
 800633c:	ed13 7a02 	vldr	s14, [r3, #-8]
 8006340:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006344:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006348:	3901      	subs	r1, #1
 800634a:	ecec 5a01 	vstmia	ip!, {s11}
 800634e:	f100 0004 	add.w	r0, r0, #4
 8006352:	d1a5      	bne.n	80062a0 <arm_conv_f32+0x354>
 8006354:	b00b      	add	sp, #44	; 0x2c
 8006356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800635a:	463b      	mov	r3, r7
 800635c:	4605      	mov	r5, r0
 800635e:	e7d4      	b.n	800630a <arm_conv_f32+0x3be>
 8006360:	9b02      	ldr	r3, [sp, #8]
 8006362:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 8006366:	009b      	lsls	r3, r3, #2
 8006368:	9302      	str	r3, [sp, #8]
 800636a:	9b03      	ldr	r3, [sp, #12]
 800636c:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8006370:	4403      	add	r3, r0
 8006372:	465d      	mov	r5, fp
 8006374:	469e      	mov	lr, r3
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	f013 0c03 	ands.w	ip, r3, #3
 800637c:	d075      	beq.n	800646a <arm_conv_f32+0x51e>
 800637e:	9b02      	ldr	r3, [sp, #8]
 8006380:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8006384:	f004 0403 	and.w	r4, r4, #3
 8006388:	f104 3bff 	add.w	fp, r4, #4294967295
 800638c:	f103 0801 	add.w	r8, r3, #1
 8006390:	ea4f 130a 	mov.w	r3, sl, lsl #4
 8006394:	e9cd 7002 	strd	r7, r0, [sp, #8]
 8006398:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 800639c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80063a0:	f1a7 0210 	sub.w	r2, r7, #16
 80063a4:	4618      	mov	r0, r3
 80063a6:	465b      	mov	r3, fp
 80063a8:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80063ac:	468b      	mov	fp, r1
 80063ae:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80063b2:	4621      	mov	r1, r4
 80063b4:	4617      	mov	r7, r2
 80063b6:	461c      	mov	r4, r3
 80063b8:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8006240 <arm_conv_f32+0x2f4>
 80063bc:	f10e 0210 	add.w	r2, lr, #16
 80063c0:	463b      	mov	r3, r7
 80063c2:	4656      	mov	r6, sl
 80063c4:	ed12 7a04 	vldr	s14, [r2, #-16]
 80063c8:	edd3 3a04 	vldr	s7, [r3, #16]
 80063cc:	ed12 6a03 	vldr	s12, [r2, #-12]
 80063d0:	ed93 4a03 	vldr	s8, [r3, #12]
 80063d4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80063d8:	edd3 4a02 	vldr	s9, [r3, #8]
 80063dc:	ed52 5a01 	vldr	s11, [r2, #-4]
 80063e0:	ed93 5a01 	vldr	s10, [r3, #4]
 80063e4:	ee27 7a23 	vmul.f32	s14, s14, s7
 80063e8:	ee26 6a04 	vmul.f32	s12, s12, s8
 80063ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063f0:	ee26 7aa4 	vmul.f32	s14, s13, s9
 80063f4:	ee76 7a27 	vadd.f32	s15, s12, s15
 80063f8:	ee65 6a85 	vmul.f32	s13, s11, s10
 80063fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006400:	3e01      	subs	r6, #1
 8006402:	f102 0210 	add.w	r2, r2, #16
 8006406:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800640a:	f1a3 0310 	sub.w	r3, r3, #16
 800640e:	d1d9      	bne.n	80063c4 <arm_conv_f32+0x478>
 8006410:	4486      	add	lr, r0
 8006412:	b1d1      	cbz	r1, 800644a <arm_conv_f32+0x4fe>
 8006414:	ed99 7a00 	vldr	s14, [r9]
 8006418:	edde 6a00 	vldr	s13, [lr]
 800641c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006420:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006424:	b18c      	cbz	r4, 800644a <arm_conv_f32+0x4fe>
 8006426:	ed19 7a01 	vldr	s14, [r9, #-4]
 800642a:	edde 6a01 	vldr	s13, [lr, #4]
 800642e:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006432:	2c01      	cmp	r4, #1
 8006434:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006438:	d007      	beq.n	800644a <arm_conv_f32+0x4fe>
 800643a:	ed9e 7a02 	vldr	s14, [lr, #8]
 800643e:	ed59 6a02 	vldr	s13, [r9, #-8]
 8006442:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006446:	ee77 7a87 	vadd.f32	s15, s15, s14
 800644a:	ece5 7a01 	vstmia	r5!, {s15}
 800644e:	4565      	cmp	r5, ip
 8006450:	46c6      	mov	lr, r8
 8006452:	f108 0804 	add.w	r8, r8, #4
 8006456:	d1af      	bne.n	80063b8 <arm_conv_f32+0x46c>
 8006458:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 800645c:	4659      	mov	r1, fp
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8006464:	e71c      	b.n	80062a0 <arm_conv_f32+0x354>
 8006466:	4686      	mov	lr, r0
 8006468:	e785      	b.n	8006376 <arm_conv_f32+0x42a>
 800646a:	46ac      	mov	ip, r5
 800646c:	e7f7      	b.n	800645e <arm_conv_f32+0x512>
 800646e:	9a01      	ldr	r2, [sp, #4]
 8006470:	2a00      	cmp	r2, #0
 8006472:	f47f aedd 	bne.w	8006230 <arm_conv_f32+0x2e4>
 8006476:	e76d      	b.n	8006354 <arm_conv_f32+0x408>
 8006478:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8006240 <arm_conv_f32+0x2f4>
 800647c:	4680      	mov	r8, r0
 800647e:	e5e3      	b.n	8006048 <arm_conv_f32+0xfc>

08006480 <arm_biquad_cascade_df1_init_f32>:
 8006480:	b510      	push	{r4, lr}
 8006482:	6082      	str	r2, [r0, #8]
 8006484:	6001      	str	r1, [r0, #0]
 8006486:	4604      	mov	r4, r0
 8006488:	010a      	lsls	r2, r1, #4
 800648a:	4618      	mov	r0, r3
 800648c:	2100      	movs	r1, #0
 800648e:	f000 fa86 	bl	800699e <memset>
 8006492:	6060      	str	r0, [r4, #4]
 8006494:	bd10      	pop	{r4, pc}
 8006496:	bf00      	nop

08006498 <arm_biquad_cascade_df1_f32>:
 8006498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800649c:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
 80064a0:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 80064a4:	f003 0e03 	and.w	lr, r3, #3
 80064a8:	ea4f 190c 	mov.w	r9, ip, lsl #4
 80064ac:	6807      	ldr	r7, [r0, #0]
 80064ae:	eb02 0a09 	add.w	sl, r2, r9
 80064b2:	f10e 38ff 	add.w	r8, lr, #4294967295
 80064b6:	3614      	adds	r6, #20
 80064b8:	3510      	adds	r5, #16
 80064ba:	ed16 4a05 	vldr	s8, [r6, #-20]	; 0xffffffec
 80064be:	ed16 2a04 	vldr	s4, [r6, #-16]
 80064c2:	ed56 2a03 	vldr	s5, [r6, #-12]
 80064c6:	ed16 3a02 	vldr	s6, [r6, #-8]
 80064ca:	ed56 3a01 	vldr	s7, [r6, #-4]
 80064ce:	ed55 5a04 	vldr	s11, [r5, #-16]
 80064d2:	ed15 5a03 	vldr	s10, [r5, #-12]
 80064d6:	ed15 7a02 	vldr	s14, [r5, #-8]
 80064da:	ed55 7a01 	vldr	s15, [r5, #-4]
 80064de:	f1bc 0f00 	cmp.w	ip, #0
 80064e2:	f000 80d4 	beq.w	800668e <arm_biquad_cascade_df1_f32+0x1f6>
 80064e6:	f101 0010 	add.w	r0, r1, #16
 80064ea:	f102 0310 	add.w	r3, r2, #16
 80064ee:	4664      	mov	r4, ip
 80064f0:	ed10 6a04 	vldr	s12, [r0, #-16]
 80064f4:	ee62 4a25 	vmul.f32	s9, s4, s11
 80064f8:	ee64 6a06 	vmul.f32	s13, s8, s12
 80064fc:	ee22 5a85 	vmul.f32	s10, s5, s10
 8006500:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006504:	ee63 4a07 	vmul.f32	s9, s6, s14
 8006508:	ee76 6a85 	vadd.f32	s13, s13, s10
 800650c:	ee23 5aa7 	vmul.f32	s10, s7, s15
 8006510:	ee76 7aa4 	vadd.f32	s15, s13, s9
 8006514:	ee22 1a06 	vmul.f32	s2, s4, s12
 8006518:	ee77 7a85 	vadd.f32	s15, s15, s10
 800651c:	ee62 1aa5 	vmul.f32	s3, s5, s11
 8006520:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006524:	ed50 4a03 	vldr	s9, [r0, #-12]
 8006528:	ee64 6a24 	vmul.f32	s13, s8, s9
 800652c:	ee23 5a27 	vmul.f32	s10, s6, s15
 8006530:	ee76 6a81 	vadd.f32	s13, s13, s2
 8006534:	ee63 5a87 	vmul.f32	s11, s7, s14
 8006538:	ee36 7aa1 	vadd.f32	s14, s13, s3
 800653c:	ee62 1a24 	vmul.f32	s3, s4, s9
 8006540:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006544:	ee22 6a86 	vmul.f32	s12, s5, s12
 8006548:	ee37 7a25 	vadd.f32	s14, s14, s11
 800654c:	ee63 7aa7 	vmul.f32	s15, s7, s15
 8006550:	ed03 7a03 	vstr	s14, [r3, #-12]
 8006554:	ed10 5a02 	vldr	s10, [r0, #-8]
 8006558:	ee64 5a05 	vmul.f32	s11, s8, s10
 800655c:	ee63 6a07 	vmul.f32	s13, s6, s14
 8006560:	ee75 5aa1 	vadd.f32	s11, s11, s3
 8006564:	ee62 1a05 	vmul.f32	s3, s4, s10
 8006568:	ee75 5a86 	vadd.f32	s11, s11, s12
 800656c:	ee62 4aa4 	vmul.f32	s9, s5, s9
 8006570:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8006574:	ee23 7a87 	vmul.f32	s14, s7, s14
 8006578:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800657c:	3c01      	subs	r4, #1
 800657e:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006582:	ed50 5a01 	vldr	s11, [r0, #-4]
 8006586:	ee24 6a25 	vmul.f32	s12, s8, s11
 800658a:	ee63 6a27 	vmul.f32	s13, s6, s15
 800658e:	ee36 6a21 	vadd.f32	s12, s12, s3
 8006592:	f100 0010 	add.w	r0, r0, #16
 8006596:	ee36 6a24 	vadd.f32	s12, s12, s9
 800659a:	f103 0310 	add.w	r3, r3, #16
 800659e:	ee36 6a26 	vadd.f32	s12, s12, s13
 80065a2:	ee36 7a07 	vadd.f32	s14, s12, s14
 80065a6:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 80065aa:	d1a1      	bne.n	80064f0 <arm_biquad_cascade_df1_f32+0x58>
 80065ac:	4449      	add	r1, r9
 80065ae:	4653      	mov	r3, sl
 80065b0:	f1be 0f00 	cmp.w	lr, #0
 80065b4:	d047      	beq.n	8006646 <arm_biquad_cascade_df1_f32+0x1ae>
 80065b6:	edd1 4a00 	vldr	s9, [r1]
 80065ba:	ee22 6a25 	vmul.f32	s12, s4, s11
 80065be:	ee64 1a24 	vmul.f32	s3, s8, s9
 80065c2:	ee62 6a85 	vmul.f32	s13, s5, s10
 80065c6:	ee36 5a21 	vadd.f32	s10, s12, s3
 80065ca:	ee23 6a07 	vmul.f32	s12, s6, s14
 80065ce:	ee35 5a26 	vadd.f32	s10, s10, s13
 80065d2:	ee63 7aa7 	vmul.f32	s15, s7, s15
 80065d6:	ee35 6a06 	vadd.f32	s12, s10, s12
 80065da:	ee36 6a27 	vadd.f32	s12, s12, s15
 80065de:	ed83 6a00 	vstr	s12, [r3]
 80065e2:	f1b8 0f00 	cmp.w	r8, #0
 80065e6:	d040      	beq.n	800666a <arm_biquad_cascade_df1_f32+0x1d2>
 80065e8:	ed91 5a01 	vldr	s10, [r1, #4]
 80065ec:	ee62 7a24 	vmul.f32	s15, s4, s9
 80065f0:	ee65 1a04 	vmul.f32	s3, s10, s8
 80065f4:	ee62 6aa5 	vmul.f32	s13, s5, s11
 80065f8:	ee77 5aa1 	vadd.f32	s11, s15, s3
 80065fc:	ee63 7a06 	vmul.f32	s15, s6, s12
 8006600:	ee75 5aa6 	vadd.f32	s11, s11, s13
 8006604:	ee23 7a87 	vmul.f32	s14, s7, s14
 8006608:	ee75 7aa7 	vadd.f32	s15, s11, s15
 800660c:	f1b8 0f01 	cmp.w	r8, #1
 8006610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006614:	edc3 7a01 	vstr	s15, [r3, #4]
 8006618:	d030      	beq.n	800667c <arm_biquad_cascade_df1_f32+0x1e4>
 800661a:	edd1 5a02 	vldr	s11, [r1, #8]
 800661e:	ee25 2a02 	vmul.f32	s4, s10, s4
 8006622:	ee64 6a25 	vmul.f32	s13, s8, s11
 8006626:	ee62 2aa4 	vmul.f32	s5, s5, s9
 800662a:	ee76 6a82 	vadd.f32	s13, s13, s4
 800662e:	ee27 3a83 	vmul.f32	s6, s15, s6
 8006632:	ee76 6aa2 	vadd.f32	s13, s13, s5
 8006636:	ee63 3a86 	vmul.f32	s7, s7, s12
 800663a:	ee76 6a83 	vadd.f32	s13, s13, s6
 800663e:	ee36 7aa3 	vadd.f32	s14, s13, s7
 8006642:	ed83 7a02 	vstr	s14, [r3, #8]
 8006646:	3f01      	subs	r7, #1
 8006648:	ed45 5a04 	vstr	s11, [r5, #-16]
 800664c:	ed05 5a03 	vstr	s10, [r5, #-12]
 8006650:	ed05 7a02 	vstr	s14, [r5, #-8]
 8006654:	ed45 7a01 	vstr	s15, [r5, #-4]
 8006658:	f106 0614 	add.w	r6, r6, #20
 800665c:	f105 0510 	add.w	r5, r5, #16
 8006660:	4611      	mov	r1, r2
 8006662:	f47f af2a 	bne.w	80064ba <arm_biquad_cascade_df1_f32+0x22>
 8006666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666a:	eef0 7a47 	vmov.f32	s15, s14
 800666e:	eeb0 5a65 	vmov.f32	s10, s11
 8006672:	eeb0 7a46 	vmov.f32	s14, s12
 8006676:	eef0 5a64 	vmov.f32	s11, s9
 800667a:	e7e4      	b.n	8006646 <arm_biquad_cascade_df1_f32+0x1ae>
 800667c:	eeb0 7a67 	vmov.f32	s14, s15
 8006680:	eef0 5a45 	vmov.f32	s11, s10
 8006684:	eef0 7a46 	vmov.f32	s15, s12
 8006688:	eeb0 5a64 	vmov.f32	s10, s9
 800668c:	e7db      	b.n	8006646 <arm_biquad_cascade_df1_f32+0x1ae>
 800668e:	4613      	mov	r3, r2
 8006690:	e78e      	b.n	80065b0 <arm_biquad_cascade_df1_f32+0x118>
 8006692:	bf00      	nop

08006694 <arm_sub_f32>:
 8006694:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8006698:	b4f0      	push	{r4, r5, r6, r7}
 800669a:	d033      	beq.n	8006704 <arm_sub_f32+0x70>
 800669c:	f100 0610 	add.w	r6, r0, #16
 80066a0:	f101 0510 	add.w	r5, r1, #16
 80066a4:	f102 0410 	add.w	r4, r2, #16
 80066a8:	4667      	mov	r7, ip
 80066aa:	ed15 7a04 	vldr	s14, [r5, #-16]
 80066ae:	ed56 7a04 	vldr	s15, [r6, #-16]
 80066b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066b6:	3f01      	subs	r7, #1
 80066b8:	ed44 7a04 	vstr	s15, [r4, #-16]
 80066bc:	ed15 7a03 	vldr	s14, [r5, #-12]
 80066c0:	ed56 7a03 	vldr	s15, [r6, #-12]
 80066c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066c8:	f106 0610 	add.w	r6, r6, #16
 80066cc:	ed44 7a03 	vstr	s15, [r4, #-12]
 80066d0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80066d4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80066d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066dc:	f105 0510 	add.w	r5, r5, #16
 80066e0:	ed44 7a02 	vstr	s15, [r4, #-8]
 80066e4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80066e8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80066ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80066f0:	f104 0410 	add.w	r4, r4, #16
 80066f4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80066f8:	d1d7      	bne.n	80066aa <arm_sub_f32+0x16>
 80066fa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80066fe:	4420      	add	r0, r4
 8006700:	4421      	add	r1, r4
 8006702:	4422      	add	r2, r4
 8006704:	f013 0303 	ands.w	r3, r3, #3
 8006708:	d01b      	beq.n	8006742 <arm_sub_f32+0xae>
 800670a:	edd0 7a00 	vldr	s15, [r0]
 800670e:	ed91 7a00 	vldr	s14, [r1]
 8006712:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006716:	3b01      	subs	r3, #1
 8006718:	edc2 7a00 	vstr	s15, [r2]
 800671c:	d011      	beq.n	8006742 <arm_sub_f32+0xae>
 800671e:	edd0 7a01 	vldr	s15, [r0, #4]
 8006722:	ed91 7a01 	vldr	s14, [r1, #4]
 8006726:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800672a:	2b01      	cmp	r3, #1
 800672c:	edc2 7a01 	vstr	s15, [r2, #4]
 8006730:	d007      	beq.n	8006742 <arm_sub_f32+0xae>
 8006732:	edd0 7a02 	vldr	s15, [r0, #8]
 8006736:	ed91 7a02 	vldr	s14, [r1, #8]
 800673a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800673e:	edc2 7a02 	vstr	s15, [r2, #8]
 8006742:	bcf0      	pop	{r4, r5, r6, r7}
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop

08006748 <arm_offset_f32>:
 8006748:	b470      	push	{r4, r5, r6}
 800674a:	0896      	lsrs	r6, r2, #2
 800674c:	d025      	beq.n	800679a <arm_offset_f32+0x52>
 800674e:	f100 0410 	add.w	r4, r0, #16
 8006752:	f101 0310 	add.w	r3, r1, #16
 8006756:	4635      	mov	r5, r6
 8006758:	ed54 7a04 	vldr	s15, [r4, #-16]
 800675c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006760:	3d01      	subs	r5, #1
 8006762:	ed43 7a04 	vstr	s15, [r3, #-16]
 8006766:	ed54 7a03 	vldr	s15, [r4, #-12]
 800676a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800676e:	f104 0410 	add.w	r4, r4, #16
 8006772:	ed43 7a03 	vstr	s15, [r3, #-12]
 8006776:	ed54 7a06 	vldr	s15, [r4, #-24]	; 0xffffffe8
 800677a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800677e:	f103 0310 	add.w	r3, r3, #16
 8006782:	ed43 7a06 	vstr	s15, [r3, #-24]	; 0xffffffe8
 8006786:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 800678a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800678e:	ed43 7a05 	vstr	s15, [r3, #-20]	; 0xffffffec
 8006792:	d1e1      	bne.n	8006758 <arm_offset_f32+0x10>
 8006794:	0136      	lsls	r6, r6, #4
 8006796:	4430      	add	r0, r6
 8006798:	4431      	add	r1, r6
 800679a:	f012 0203 	ands.w	r2, r2, #3
 800679e:	d015      	beq.n	80067cc <arm_offset_f32+0x84>
 80067a0:	edd0 7a00 	vldr	s15, [r0]
 80067a4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80067a8:	3a01      	subs	r2, #1
 80067aa:	edc1 7a00 	vstr	s15, [r1]
 80067ae:	d00d      	beq.n	80067cc <arm_offset_f32+0x84>
 80067b0:	edd0 7a01 	vldr	s15, [r0, #4]
 80067b4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80067b8:	2a01      	cmp	r2, #1
 80067ba:	edc1 7a01 	vstr	s15, [r1, #4]
 80067be:	d005      	beq.n	80067cc <arm_offset_f32+0x84>
 80067c0:	edd0 7a02 	vldr	s15, [r0, #8]
 80067c4:	ee37 0a80 	vadd.f32	s0, s15, s0
 80067c8:	ed81 0a02 	vstr	s0, [r1, #8]
 80067cc:	bc70      	pop	{r4, r5, r6}
 80067ce:	4770      	bx	lr

080067d0 <arm_mult_f32>:
 80067d0:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 80067d4:	b4f0      	push	{r4, r5, r6, r7}
 80067d6:	d033      	beq.n	8006840 <arm_mult_f32+0x70>
 80067d8:	f100 0610 	add.w	r6, r0, #16
 80067dc:	f101 0510 	add.w	r5, r1, #16
 80067e0:	f102 0410 	add.w	r4, r2, #16
 80067e4:	4667      	mov	r7, ip
 80067e6:	ed15 7a04 	vldr	s14, [r5, #-16]
 80067ea:	ed56 7a04 	vldr	s15, [r6, #-16]
 80067ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80067f2:	3f01      	subs	r7, #1
 80067f4:	ed44 7a04 	vstr	s15, [r4, #-16]
 80067f8:	ed15 7a03 	vldr	s14, [r5, #-12]
 80067fc:	ed56 7a03 	vldr	s15, [r6, #-12]
 8006800:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006804:	f106 0610 	add.w	r6, r6, #16
 8006808:	ed44 7a03 	vstr	s15, [r4, #-12]
 800680c:	ed15 7a02 	vldr	s14, [r5, #-8]
 8006810:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 8006814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006818:	f105 0510 	add.w	r5, r5, #16
 800681c:	ed44 7a02 	vstr	s15, [r4, #-8]
 8006820:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 8006824:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 8006828:	ee67 7a87 	vmul.f32	s15, s15, s14
 800682c:	f104 0410 	add.w	r4, r4, #16
 8006830:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 8006834:	d1d7      	bne.n	80067e6 <arm_mult_f32+0x16>
 8006836:	ea4f 140c 	mov.w	r4, ip, lsl #4
 800683a:	4420      	add	r0, r4
 800683c:	4421      	add	r1, r4
 800683e:	4422      	add	r2, r4
 8006840:	f013 0303 	ands.w	r3, r3, #3
 8006844:	d01b      	beq.n	800687e <arm_mult_f32+0xae>
 8006846:	edd1 7a00 	vldr	s15, [r1]
 800684a:	ed90 7a00 	vldr	s14, [r0]
 800684e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006852:	3b01      	subs	r3, #1
 8006854:	edc2 7a00 	vstr	s15, [r2]
 8006858:	d011      	beq.n	800687e <arm_mult_f32+0xae>
 800685a:	edd0 7a01 	vldr	s15, [r0, #4]
 800685e:	ed91 7a01 	vldr	s14, [r1, #4]
 8006862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006866:	2b01      	cmp	r3, #1
 8006868:	edc2 7a01 	vstr	s15, [r2, #4]
 800686c:	d007      	beq.n	800687e <arm_mult_f32+0xae>
 800686e:	edd0 7a02 	vldr	s15, [r0, #8]
 8006872:	ed91 7a02 	vldr	s14, [r1, #8]
 8006876:	ee67 7a87 	vmul.f32	s15, s15, s14
 800687a:	edc2 7a02 	vstr	s15, [r2, #8]
 800687e:	bcf0      	pop	{r4, r5, r6, r7}
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <arm_dot_prod_f32>:
 8006884:	b4f0      	push	{r4, r5, r6, r7}
 8006886:	0897      	lsrs	r7, r2, #2
 8006888:	eddf 5a29 	vldr	s11, [pc, #164]	; 8006930 <arm_dot_prod_f32+0xac>
 800688c:	d02d      	beq.n	80068ea <arm_dot_prod_f32+0x66>
 800688e:	f100 0510 	add.w	r5, r0, #16
 8006892:	f101 0410 	add.w	r4, r1, #16
 8006896:	463e      	mov	r6, r7
 8006898:	ed55 6a04 	vldr	s13, [r5, #-16]
 800689c:	ed54 3a04 	vldr	s7, [r4, #-16]
 80068a0:	ed15 7a03 	vldr	s14, [r5, #-12]
 80068a4:	ed14 4a03 	vldr	s8, [r4, #-12]
 80068a8:	ed55 7a02 	vldr	s15, [r5, #-8]
 80068ac:	ed54 4a02 	vldr	s9, [r4, #-8]
 80068b0:	ed15 6a01 	vldr	s12, [r5, #-4]
 80068b4:	ed14 5a01 	vldr	s10, [r4, #-4]
 80068b8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80068bc:	ee27 7a04 	vmul.f32	s14, s14, s8
 80068c0:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80068c4:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80068c8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80068cc:	ee66 6a05 	vmul.f32	s13, s12, s10
 80068d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80068d4:	3e01      	subs	r6, #1
 80068d6:	f105 0510 	add.w	r5, r5, #16
 80068da:	ee76 5aa7 	vadd.f32	s11, s13, s15
 80068de:	f104 0410 	add.w	r4, r4, #16
 80068e2:	d1d9      	bne.n	8006898 <arm_dot_prod_f32+0x14>
 80068e4:	013f      	lsls	r7, r7, #4
 80068e6:	4438      	add	r0, r7
 80068e8:	4439      	add	r1, r7
 80068ea:	f012 0203 	ands.w	r2, r2, #3
 80068ee:	d01b      	beq.n	8006928 <arm_dot_prod_f32+0xa4>
 80068f0:	edd1 7a00 	vldr	s15, [r1]
 80068f4:	ed90 7a00 	vldr	s14, [r0]
 80068f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80068fc:	3a01      	subs	r2, #1
 80068fe:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006902:	d011      	beq.n	8006928 <arm_dot_prod_f32+0xa4>
 8006904:	edd1 7a01 	vldr	s15, [r1, #4]
 8006908:	ed90 7a01 	vldr	s14, [r0, #4]
 800690c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006910:	2a01      	cmp	r2, #1
 8006912:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006916:	d007      	beq.n	8006928 <arm_dot_prod_f32+0xa4>
 8006918:	edd0 7a02 	vldr	s15, [r0, #8]
 800691c:	ed91 7a02 	vldr	s14, [r1, #8]
 8006920:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006924:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8006928:	edc3 5a00 	vstr	s11, [r3]
 800692c:	bcf0      	pop	{r4, r5, r6, r7}
 800692e:	4770      	bx	lr
 8006930:	00000000 	.word	0x00000000

08006934 <__errno>:
 8006934:	4b01      	ldr	r3, [pc, #4]	; (800693c <__errno+0x8>)
 8006936:	6818      	ldr	r0, [r3, #0]
 8006938:	4770      	bx	lr
 800693a:	bf00      	nop
 800693c:	2000000c 	.word	0x2000000c

08006940 <__libc_init_array>:
 8006940:	b570      	push	{r4, r5, r6, lr}
 8006942:	4e0d      	ldr	r6, [pc, #52]	; (8006978 <__libc_init_array+0x38>)
 8006944:	4c0d      	ldr	r4, [pc, #52]	; (800697c <__libc_init_array+0x3c>)
 8006946:	1ba4      	subs	r4, r4, r6
 8006948:	10a4      	asrs	r4, r4, #2
 800694a:	2500      	movs	r5, #0
 800694c:	42a5      	cmp	r5, r4
 800694e:	d109      	bne.n	8006964 <__libc_init_array+0x24>
 8006950:	4e0b      	ldr	r6, [pc, #44]	; (8006980 <__libc_init_array+0x40>)
 8006952:	4c0c      	ldr	r4, [pc, #48]	; (8006984 <__libc_init_array+0x44>)
 8006954:	f004 fbb2 	bl	800b0bc <_init>
 8006958:	1ba4      	subs	r4, r4, r6
 800695a:	10a4      	asrs	r4, r4, #2
 800695c:	2500      	movs	r5, #0
 800695e:	42a5      	cmp	r5, r4
 8006960:	d105      	bne.n	800696e <__libc_init_array+0x2e>
 8006962:	bd70      	pop	{r4, r5, r6, pc}
 8006964:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006968:	4798      	blx	r3
 800696a:	3501      	adds	r5, #1
 800696c:	e7ee      	b.n	800694c <__libc_init_array+0xc>
 800696e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006972:	4798      	blx	r3
 8006974:	3501      	adds	r5, #1
 8006976:	e7f2      	b.n	800695e <__libc_init_array+0x1e>
 8006978:	0800b5f0 	.word	0x0800b5f0
 800697c:	0800b5f0 	.word	0x0800b5f0
 8006980:	0800b5f0 	.word	0x0800b5f0
 8006984:	0800b5f4 	.word	0x0800b5f4

08006988 <memcpy>:
 8006988:	b510      	push	{r4, lr}
 800698a:	1e43      	subs	r3, r0, #1
 800698c:	440a      	add	r2, r1
 800698e:	4291      	cmp	r1, r2
 8006990:	d100      	bne.n	8006994 <memcpy+0xc>
 8006992:	bd10      	pop	{r4, pc}
 8006994:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006998:	f803 4f01 	strb.w	r4, [r3, #1]!
 800699c:	e7f7      	b.n	800698e <memcpy+0x6>

0800699e <memset>:
 800699e:	4402      	add	r2, r0
 80069a0:	4603      	mov	r3, r0
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d100      	bne.n	80069a8 <memset+0xa>
 80069a6:	4770      	bx	lr
 80069a8:	f803 1b01 	strb.w	r1, [r3], #1
 80069ac:	e7f9      	b.n	80069a2 <memset+0x4>

080069ae <__cvt>:
 80069ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80069b2:	ec55 4b10 	vmov	r4, r5, d0
 80069b6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80069b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80069bc:	2d00      	cmp	r5, #0
 80069be:	460e      	mov	r6, r1
 80069c0:	4691      	mov	r9, r2
 80069c2:	4619      	mov	r1, r3
 80069c4:	bfb8      	it	lt
 80069c6:	4622      	movlt	r2, r4
 80069c8:	462b      	mov	r3, r5
 80069ca:	f027 0720 	bic.w	r7, r7, #32
 80069ce:	bfbb      	ittet	lt
 80069d0:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80069d4:	461d      	movlt	r5, r3
 80069d6:	2300      	movge	r3, #0
 80069d8:	232d      	movlt	r3, #45	; 0x2d
 80069da:	bfb8      	it	lt
 80069dc:	4614      	movlt	r4, r2
 80069de:	2f46      	cmp	r7, #70	; 0x46
 80069e0:	700b      	strb	r3, [r1, #0]
 80069e2:	d004      	beq.n	80069ee <__cvt+0x40>
 80069e4:	2f45      	cmp	r7, #69	; 0x45
 80069e6:	d100      	bne.n	80069ea <__cvt+0x3c>
 80069e8:	3601      	adds	r6, #1
 80069ea:	2102      	movs	r1, #2
 80069ec:	e000      	b.n	80069f0 <__cvt+0x42>
 80069ee:	2103      	movs	r1, #3
 80069f0:	ab03      	add	r3, sp, #12
 80069f2:	9301      	str	r3, [sp, #4]
 80069f4:	ab02      	add	r3, sp, #8
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	4632      	mov	r2, r6
 80069fa:	4653      	mov	r3, sl
 80069fc:	ec45 4b10 	vmov	d0, r4, r5
 8006a00:	f001 fd76 	bl	80084f0 <_dtoa_r>
 8006a04:	2f47      	cmp	r7, #71	; 0x47
 8006a06:	4680      	mov	r8, r0
 8006a08:	d102      	bne.n	8006a10 <__cvt+0x62>
 8006a0a:	f019 0f01 	tst.w	r9, #1
 8006a0e:	d026      	beq.n	8006a5e <__cvt+0xb0>
 8006a10:	2f46      	cmp	r7, #70	; 0x46
 8006a12:	eb08 0906 	add.w	r9, r8, r6
 8006a16:	d111      	bne.n	8006a3c <__cvt+0x8e>
 8006a18:	f898 3000 	ldrb.w	r3, [r8]
 8006a1c:	2b30      	cmp	r3, #48	; 0x30
 8006a1e:	d10a      	bne.n	8006a36 <__cvt+0x88>
 8006a20:	2200      	movs	r2, #0
 8006a22:	2300      	movs	r3, #0
 8006a24:	4620      	mov	r0, r4
 8006a26:	4629      	mov	r1, r5
 8006a28:	f7fa f946 	bl	8000cb8 <__aeabi_dcmpeq>
 8006a2c:	b918      	cbnz	r0, 8006a36 <__cvt+0x88>
 8006a2e:	f1c6 0601 	rsb	r6, r6, #1
 8006a32:	f8ca 6000 	str.w	r6, [sl]
 8006a36:	f8da 3000 	ldr.w	r3, [sl]
 8006a3a:	4499      	add	r9, r3
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4620      	mov	r0, r4
 8006a42:	4629      	mov	r1, r5
 8006a44:	f7fa f938 	bl	8000cb8 <__aeabi_dcmpeq>
 8006a48:	b938      	cbnz	r0, 8006a5a <__cvt+0xac>
 8006a4a:	2230      	movs	r2, #48	; 0x30
 8006a4c:	9b03      	ldr	r3, [sp, #12]
 8006a4e:	454b      	cmp	r3, r9
 8006a50:	d205      	bcs.n	8006a5e <__cvt+0xb0>
 8006a52:	1c59      	adds	r1, r3, #1
 8006a54:	9103      	str	r1, [sp, #12]
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	e7f8      	b.n	8006a4c <__cvt+0x9e>
 8006a5a:	f8cd 900c 	str.w	r9, [sp, #12]
 8006a5e:	9b03      	ldr	r3, [sp, #12]
 8006a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a62:	eba3 0308 	sub.w	r3, r3, r8
 8006a66:	4640      	mov	r0, r8
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	b004      	add	sp, #16
 8006a6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08006a70 <__exponent>:
 8006a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a72:	2900      	cmp	r1, #0
 8006a74:	4604      	mov	r4, r0
 8006a76:	bfba      	itte	lt
 8006a78:	4249      	neglt	r1, r1
 8006a7a:	232d      	movlt	r3, #45	; 0x2d
 8006a7c:	232b      	movge	r3, #43	; 0x2b
 8006a7e:	2909      	cmp	r1, #9
 8006a80:	f804 2b02 	strb.w	r2, [r4], #2
 8006a84:	7043      	strb	r3, [r0, #1]
 8006a86:	dd20      	ble.n	8006aca <__exponent+0x5a>
 8006a88:	f10d 0307 	add.w	r3, sp, #7
 8006a8c:	461f      	mov	r7, r3
 8006a8e:	260a      	movs	r6, #10
 8006a90:	fb91 f5f6 	sdiv	r5, r1, r6
 8006a94:	fb06 1115 	mls	r1, r6, r5, r1
 8006a98:	3130      	adds	r1, #48	; 0x30
 8006a9a:	2d09      	cmp	r5, #9
 8006a9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006aa0:	f103 32ff 	add.w	r2, r3, #4294967295
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	dc09      	bgt.n	8006abc <__exponent+0x4c>
 8006aa8:	3130      	adds	r1, #48	; 0x30
 8006aaa:	3b02      	subs	r3, #2
 8006aac:	f802 1c01 	strb.w	r1, [r2, #-1]
 8006ab0:	42bb      	cmp	r3, r7
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	d304      	bcc.n	8006ac0 <__exponent+0x50>
 8006ab6:	1a10      	subs	r0, r2, r0
 8006ab8:	b003      	add	sp, #12
 8006aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006abc:	4613      	mov	r3, r2
 8006abe:	e7e7      	b.n	8006a90 <__exponent+0x20>
 8006ac0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ac4:	f804 2b01 	strb.w	r2, [r4], #1
 8006ac8:	e7f2      	b.n	8006ab0 <__exponent+0x40>
 8006aca:	2330      	movs	r3, #48	; 0x30
 8006acc:	4419      	add	r1, r3
 8006ace:	7083      	strb	r3, [r0, #2]
 8006ad0:	1d02      	adds	r2, r0, #4
 8006ad2:	70c1      	strb	r1, [r0, #3]
 8006ad4:	e7ef      	b.n	8006ab6 <__exponent+0x46>
	...

08006ad8 <_printf_float>:
 8006ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006adc:	b08d      	sub	sp, #52	; 0x34
 8006ade:	460c      	mov	r4, r1
 8006ae0:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006ae4:	4616      	mov	r6, r2
 8006ae6:	461f      	mov	r7, r3
 8006ae8:	4605      	mov	r5, r0
 8006aea:	f002 fde5 	bl	80096b8 <_localeconv_r>
 8006aee:	6803      	ldr	r3, [r0, #0]
 8006af0:	9304      	str	r3, [sp, #16]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7f9 fc5f 	bl	80003b6 <strlen>
 8006af8:	2300      	movs	r3, #0
 8006afa:	930a      	str	r3, [sp, #40]	; 0x28
 8006afc:	f8d8 3000 	ldr.w	r3, [r8]
 8006b00:	9005      	str	r0, [sp, #20]
 8006b02:	3307      	adds	r3, #7
 8006b04:	f023 0307 	bic.w	r3, r3, #7
 8006b08:	f103 0208 	add.w	r2, r3, #8
 8006b0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006b10:	f8d4 b000 	ldr.w	fp, [r4]
 8006b14:	f8c8 2000 	str.w	r2, [r8]
 8006b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b1c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006b20:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006b24:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006b28:	9307      	str	r3, [sp, #28]
 8006b2a:	f8cd 8018 	str.w	r8, [sp, #24]
 8006b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b32:	4ba7      	ldr	r3, [pc, #668]	; (8006dd0 <_printf_float+0x2f8>)
 8006b34:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b38:	f7fa f8f0 	bl	8000d1c <__aeabi_dcmpun>
 8006b3c:	bb70      	cbnz	r0, 8006b9c <_printf_float+0xc4>
 8006b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8006b42:	4ba3      	ldr	r3, [pc, #652]	; (8006dd0 <_printf_float+0x2f8>)
 8006b44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006b48:	f7fa f8ca 	bl	8000ce0 <__aeabi_dcmple>
 8006b4c:	bb30      	cbnz	r0, 8006b9c <_printf_float+0xc4>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2300      	movs	r3, #0
 8006b52:	4640      	mov	r0, r8
 8006b54:	4649      	mov	r1, r9
 8006b56:	f7fa f8b9 	bl	8000ccc <__aeabi_dcmplt>
 8006b5a:	b110      	cbz	r0, 8006b62 <_printf_float+0x8a>
 8006b5c:	232d      	movs	r3, #45	; 0x2d
 8006b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b62:	4a9c      	ldr	r2, [pc, #624]	; (8006dd4 <_printf_float+0x2fc>)
 8006b64:	4b9c      	ldr	r3, [pc, #624]	; (8006dd8 <_printf_float+0x300>)
 8006b66:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006b6a:	bf8c      	ite	hi
 8006b6c:	4690      	movhi	r8, r2
 8006b6e:	4698      	movls	r8, r3
 8006b70:	2303      	movs	r3, #3
 8006b72:	f02b 0204 	bic.w	r2, fp, #4
 8006b76:	6123      	str	r3, [r4, #16]
 8006b78:	6022      	str	r2, [r4, #0]
 8006b7a:	f04f 0900 	mov.w	r9, #0
 8006b7e:	9700      	str	r7, [sp, #0]
 8006b80:	4633      	mov	r3, r6
 8006b82:	aa0b      	add	r2, sp, #44	; 0x2c
 8006b84:	4621      	mov	r1, r4
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 f9e6 	bl	8006f58 <_printf_common>
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	f040 808d 	bne.w	8006cac <_printf_float+0x1d4>
 8006b92:	f04f 30ff 	mov.w	r0, #4294967295
 8006b96:	b00d      	add	sp, #52	; 0x34
 8006b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b9c:	4642      	mov	r2, r8
 8006b9e:	464b      	mov	r3, r9
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	f7fa f8ba 	bl	8000d1c <__aeabi_dcmpun>
 8006ba8:	b110      	cbz	r0, 8006bb0 <_printf_float+0xd8>
 8006baa:	4a8c      	ldr	r2, [pc, #560]	; (8006ddc <_printf_float+0x304>)
 8006bac:	4b8c      	ldr	r3, [pc, #560]	; (8006de0 <_printf_float+0x308>)
 8006bae:	e7da      	b.n	8006b66 <_printf_float+0x8e>
 8006bb0:	6861      	ldr	r1, [r4, #4]
 8006bb2:	1c4b      	adds	r3, r1, #1
 8006bb4:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006bb8:	a80a      	add	r0, sp, #40	; 0x28
 8006bba:	d13e      	bne.n	8006c3a <_printf_float+0x162>
 8006bbc:	2306      	movs	r3, #6
 8006bbe:	6063      	str	r3, [r4, #4]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006bc6:	ab09      	add	r3, sp, #36	; 0x24
 8006bc8:	9300      	str	r3, [sp, #0]
 8006bca:	ec49 8b10 	vmov	d0, r8, r9
 8006bce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006bd2:	6022      	str	r2, [r4, #0]
 8006bd4:	f8cd a004 	str.w	sl, [sp, #4]
 8006bd8:	6861      	ldr	r1, [r4, #4]
 8006bda:	4628      	mov	r0, r5
 8006bdc:	f7ff fee7 	bl	80069ae <__cvt>
 8006be0:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006be4:	2b47      	cmp	r3, #71	; 0x47
 8006be6:	4680      	mov	r8, r0
 8006be8:	d109      	bne.n	8006bfe <_printf_float+0x126>
 8006bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bec:	1cd8      	adds	r0, r3, #3
 8006bee:	db02      	blt.n	8006bf6 <_printf_float+0x11e>
 8006bf0:	6862      	ldr	r2, [r4, #4]
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	dd47      	ble.n	8006c86 <_printf_float+0x1ae>
 8006bf6:	f1aa 0a02 	sub.w	sl, sl, #2
 8006bfa:	fa5f fa8a 	uxtb.w	sl, sl
 8006bfe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006c02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c04:	d824      	bhi.n	8006c50 <_printf_float+0x178>
 8006c06:	3901      	subs	r1, #1
 8006c08:	4652      	mov	r2, sl
 8006c0a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006c0e:	9109      	str	r1, [sp, #36]	; 0x24
 8006c10:	f7ff ff2e 	bl	8006a70 <__exponent>
 8006c14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c16:	1813      	adds	r3, r2, r0
 8006c18:	2a01      	cmp	r2, #1
 8006c1a:	4681      	mov	r9, r0
 8006c1c:	6123      	str	r3, [r4, #16]
 8006c1e:	dc02      	bgt.n	8006c26 <_printf_float+0x14e>
 8006c20:	6822      	ldr	r2, [r4, #0]
 8006c22:	07d1      	lsls	r1, r2, #31
 8006c24:	d501      	bpl.n	8006c2a <_printf_float+0x152>
 8006c26:	3301      	adds	r3, #1
 8006c28:	6123      	str	r3, [r4, #16]
 8006c2a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d0a5      	beq.n	8006b7e <_printf_float+0xa6>
 8006c32:	232d      	movs	r3, #45	; 0x2d
 8006c34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c38:	e7a1      	b.n	8006b7e <_printf_float+0xa6>
 8006c3a:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006c3e:	f000 8177 	beq.w	8006f30 <_printf_float+0x458>
 8006c42:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006c46:	d1bb      	bne.n	8006bc0 <_printf_float+0xe8>
 8006c48:	2900      	cmp	r1, #0
 8006c4a:	d1b9      	bne.n	8006bc0 <_printf_float+0xe8>
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e7b6      	b.n	8006bbe <_printf_float+0xe6>
 8006c50:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006c54:	d119      	bne.n	8006c8a <_printf_float+0x1b2>
 8006c56:	2900      	cmp	r1, #0
 8006c58:	6863      	ldr	r3, [r4, #4]
 8006c5a:	dd0c      	ble.n	8006c76 <_printf_float+0x19e>
 8006c5c:	6121      	str	r1, [r4, #16]
 8006c5e:	b913      	cbnz	r3, 8006c66 <_printf_float+0x18e>
 8006c60:	6822      	ldr	r2, [r4, #0]
 8006c62:	07d2      	lsls	r2, r2, #31
 8006c64:	d502      	bpl.n	8006c6c <_printf_float+0x194>
 8006c66:	3301      	adds	r3, #1
 8006c68:	440b      	add	r3, r1
 8006c6a:	6123      	str	r3, [r4, #16]
 8006c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c6e:	65a3      	str	r3, [r4, #88]	; 0x58
 8006c70:	f04f 0900 	mov.w	r9, #0
 8006c74:	e7d9      	b.n	8006c2a <_printf_float+0x152>
 8006c76:	b913      	cbnz	r3, 8006c7e <_printf_float+0x1a6>
 8006c78:	6822      	ldr	r2, [r4, #0]
 8006c7a:	07d0      	lsls	r0, r2, #31
 8006c7c:	d501      	bpl.n	8006c82 <_printf_float+0x1aa>
 8006c7e:	3302      	adds	r3, #2
 8006c80:	e7f3      	b.n	8006c6a <_printf_float+0x192>
 8006c82:	2301      	movs	r3, #1
 8006c84:	e7f1      	b.n	8006c6a <_printf_float+0x192>
 8006c86:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006c8a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	db05      	blt.n	8006c9e <_printf_float+0x1c6>
 8006c92:	6822      	ldr	r2, [r4, #0]
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	07d1      	lsls	r1, r2, #31
 8006c98:	d5e8      	bpl.n	8006c6c <_printf_float+0x194>
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	e7e5      	b.n	8006c6a <_printf_float+0x192>
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	bfd4      	ite	le
 8006ca2:	f1c3 0302 	rsble	r3, r3, #2
 8006ca6:	2301      	movgt	r3, #1
 8006ca8:	4413      	add	r3, r2
 8006caa:	e7de      	b.n	8006c6a <_printf_float+0x192>
 8006cac:	6823      	ldr	r3, [r4, #0]
 8006cae:	055a      	lsls	r2, r3, #21
 8006cb0:	d407      	bmi.n	8006cc2 <_printf_float+0x1ea>
 8006cb2:	6923      	ldr	r3, [r4, #16]
 8006cb4:	4642      	mov	r2, r8
 8006cb6:	4631      	mov	r1, r6
 8006cb8:	4628      	mov	r0, r5
 8006cba:	47b8      	blx	r7
 8006cbc:	3001      	adds	r0, #1
 8006cbe:	d12b      	bne.n	8006d18 <_printf_float+0x240>
 8006cc0:	e767      	b.n	8006b92 <_printf_float+0xba>
 8006cc2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8006cc6:	f240 80dc 	bls.w	8006e82 <_printf_float+0x3aa>
 8006cca:	2200      	movs	r2, #0
 8006ccc:	2300      	movs	r3, #0
 8006cce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006cd2:	f7f9 fff1 	bl	8000cb8 <__aeabi_dcmpeq>
 8006cd6:	2800      	cmp	r0, #0
 8006cd8:	d033      	beq.n	8006d42 <_printf_float+0x26a>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4a41      	ldr	r2, [pc, #260]	; (8006de4 <_printf_float+0x30c>)
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	f43f af54 	beq.w	8006b92 <_printf_float+0xba>
 8006cea:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	db02      	blt.n	8006cf8 <_printf_float+0x220>
 8006cf2:	6823      	ldr	r3, [r4, #0]
 8006cf4:	07d8      	lsls	r0, r3, #31
 8006cf6:	d50f      	bpl.n	8006d18 <_printf_float+0x240>
 8006cf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006cfc:	4631      	mov	r1, r6
 8006cfe:	4628      	mov	r0, r5
 8006d00:	47b8      	blx	r7
 8006d02:	3001      	adds	r0, #1
 8006d04:	f43f af45 	beq.w	8006b92 <_printf_float+0xba>
 8006d08:	f04f 0800 	mov.w	r8, #0
 8006d0c:	f104 091a 	add.w	r9, r4, #26
 8006d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d12:	3b01      	subs	r3, #1
 8006d14:	4543      	cmp	r3, r8
 8006d16:	dc09      	bgt.n	8006d2c <_printf_float+0x254>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	079b      	lsls	r3, r3, #30
 8006d1c:	f100 8103 	bmi.w	8006f26 <_printf_float+0x44e>
 8006d20:	68e0      	ldr	r0, [r4, #12]
 8006d22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006d24:	4298      	cmp	r0, r3
 8006d26:	bfb8      	it	lt
 8006d28:	4618      	movlt	r0, r3
 8006d2a:	e734      	b.n	8006b96 <_printf_float+0xbe>
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	464a      	mov	r2, r9
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	f43f af2b 	beq.w	8006b92 <_printf_float+0xba>
 8006d3c:	f108 0801 	add.w	r8, r8, #1
 8006d40:	e7e6      	b.n	8006d10 <_printf_float+0x238>
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	dc2b      	bgt.n	8006da0 <_printf_float+0x2c8>
 8006d48:	2301      	movs	r3, #1
 8006d4a:	4a26      	ldr	r2, [pc, #152]	; (8006de4 <_printf_float+0x30c>)
 8006d4c:	4631      	mov	r1, r6
 8006d4e:	4628      	mov	r0, r5
 8006d50:	47b8      	blx	r7
 8006d52:	3001      	adds	r0, #1
 8006d54:	f43f af1d 	beq.w	8006b92 <_printf_float+0xba>
 8006d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d5a:	b923      	cbnz	r3, 8006d66 <_printf_float+0x28e>
 8006d5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d5e:	b913      	cbnz	r3, 8006d66 <_printf_float+0x28e>
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	07d9      	lsls	r1, r3, #31
 8006d64:	d5d8      	bpl.n	8006d18 <_printf_float+0x240>
 8006d66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d6a:	4631      	mov	r1, r6
 8006d6c:	4628      	mov	r0, r5
 8006d6e:	47b8      	blx	r7
 8006d70:	3001      	adds	r0, #1
 8006d72:	f43f af0e 	beq.w	8006b92 <_printf_float+0xba>
 8006d76:	f04f 0900 	mov.w	r9, #0
 8006d7a:	f104 0a1a 	add.w	sl, r4, #26
 8006d7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d80:	425b      	negs	r3, r3
 8006d82:	454b      	cmp	r3, r9
 8006d84:	dc01      	bgt.n	8006d8a <_printf_float+0x2b2>
 8006d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d88:	e794      	b.n	8006cb4 <_printf_float+0x1dc>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	4652      	mov	r2, sl
 8006d8e:	4631      	mov	r1, r6
 8006d90:	4628      	mov	r0, r5
 8006d92:	47b8      	blx	r7
 8006d94:	3001      	adds	r0, #1
 8006d96:	f43f aefc 	beq.w	8006b92 <_printf_float+0xba>
 8006d9a:	f109 0901 	add.w	r9, r9, #1
 8006d9e:	e7ee      	b.n	8006d7e <_printf_float+0x2a6>
 8006da0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006da2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006da4:	429a      	cmp	r2, r3
 8006da6:	bfa8      	it	ge
 8006da8:	461a      	movge	r2, r3
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	4691      	mov	r9, r2
 8006dae:	dd07      	ble.n	8006dc0 <_printf_float+0x2e8>
 8006db0:	4613      	mov	r3, r2
 8006db2:	4631      	mov	r1, r6
 8006db4:	4642      	mov	r2, r8
 8006db6:	4628      	mov	r0, r5
 8006db8:	47b8      	blx	r7
 8006dba:	3001      	adds	r0, #1
 8006dbc:	f43f aee9 	beq.w	8006b92 <_printf_float+0xba>
 8006dc0:	f104 031a 	add.w	r3, r4, #26
 8006dc4:	f04f 0b00 	mov.w	fp, #0
 8006dc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006dcc:	9306      	str	r3, [sp, #24]
 8006dce:	e015      	b.n	8006dfc <_printf_float+0x324>
 8006dd0:	7fefffff 	.word	0x7fefffff
 8006dd4:	0800b308 	.word	0x0800b308
 8006dd8:	0800b304 	.word	0x0800b304
 8006ddc:	0800b310 	.word	0x0800b310
 8006de0:	0800b30c 	.word	0x0800b30c
 8006de4:	0800b314 	.word	0x0800b314
 8006de8:	2301      	movs	r3, #1
 8006dea:	9a06      	ldr	r2, [sp, #24]
 8006dec:	4631      	mov	r1, r6
 8006dee:	4628      	mov	r0, r5
 8006df0:	47b8      	blx	r7
 8006df2:	3001      	adds	r0, #1
 8006df4:	f43f aecd 	beq.w	8006b92 <_printf_float+0xba>
 8006df8:	f10b 0b01 	add.w	fp, fp, #1
 8006dfc:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006e00:	ebaa 0309 	sub.w	r3, sl, r9
 8006e04:	455b      	cmp	r3, fp
 8006e06:	dcef      	bgt.n	8006de8 <_printf_float+0x310>
 8006e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	44d0      	add	r8, sl
 8006e10:	db15      	blt.n	8006e3e <_printf_float+0x366>
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	07da      	lsls	r2, r3, #31
 8006e16:	d412      	bmi.n	8006e3e <_printf_float+0x366>
 8006e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006e1c:	eba3 020a 	sub.w	r2, r3, sl
 8006e20:	eba3 0a01 	sub.w	sl, r3, r1
 8006e24:	4592      	cmp	sl, r2
 8006e26:	bfa8      	it	ge
 8006e28:	4692      	movge	sl, r2
 8006e2a:	f1ba 0f00 	cmp.w	sl, #0
 8006e2e:	dc0e      	bgt.n	8006e4e <_printf_float+0x376>
 8006e30:	f04f 0800 	mov.w	r8, #0
 8006e34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006e38:	f104 091a 	add.w	r9, r4, #26
 8006e3c:	e019      	b.n	8006e72 <_printf_float+0x39a>
 8006e3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e42:	4631      	mov	r1, r6
 8006e44:	4628      	mov	r0, r5
 8006e46:	47b8      	blx	r7
 8006e48:	3001      	adds	r0, #1
 8006e4a:	d1e5      	bne.n	8006e18 <_printf_float+0x340>
 8006e4c:	e6a1      	b.n	8006b92 <_printf_float+0xba>
 8006e4e:	4653      	mov	r3, sl
 8006e50:	4642      	mov	r2, r8
 8006e52:	4631      	mov	r1, r6
 8006e54:	4628      	mov	r0, r5
 8006e56:	47b8      	blx	r7
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d1e9      	bne.n	8006e30 <_printf_float+0x358>
 8006e5c:	e699      	b.n	8006b92 <_printf_float+0xba>
 8006e5e:	2301      	movs	r3, #1
 8006e60:	464a      	mov	r2, r9
 8006e62:	4631      	mov	r1, r6
 8006e64:	4628      	mov	r0, r5
 8006e66:	47b8      	blx	r7
 8006e68:	3001      	adds	r0, #1
 8006e6a:	f43f ae92 	beq.w	8006b92 <_printf_float+0xba>
 8006e6e:	f108 0801 	add.w	r8, r8, #1
 8006e72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	eba3 030a 	sub.w	r3, r3, sl
 8006e7c:	4543      	cmp	r3, r8
 8006e7e:	dcee      	bgt.n	8006e5e <_printf_float+0x386>
 8006e80:	e74a      	b.n	8006d18 <_printf_float+0x240>
 8006e82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006e84:	2a01      	cmp	r2, #1
 8006e86:	dc01      	bgt.n	8006e8c <_printf_float+0x3b4>
 8006e88:	07db      	lsls	r3, r3, #31
 8006e8a:	d53a      	bpl.n	8006f02 <_printf_float+0x42a>
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	4642      	mov	r2, r8
 8006e90:	4631      	mov	r1, r6
 8006e92:	4628      	mov	r0, r5
 8006e94:	47b8      	blx	r7
 8006e96:	3001      	adds	r0, #1
 8006e98:	f43f ae7b 	beq.w	8006b92 <_printf_float+0xba>
 8006e9c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ea0:	4631      	mov	r1, r6
 8006ea2:	4628      	mov	r0, r5
 8006ea4:	47b8      	blx	r7
 8006ea6:	3001      	adds	r0, #1
 8006ea8:	f108 0801 	add.w	r8, r8, #1
 8006eac:	f43f ae71 	beq.w	8006b92 <_printf_float+0xba>
 8006eb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f103 3aff 	add.w	sl, r3, #4294967295
 8006eb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	f7f9 fefb 	bl	8000cb8 <__aeabi_dcmpeq>
 8006ec2:	b9c8      	cbnz	r0, 8006ef8 <_printf_float+0x420>
 8006ec4:	4653      	mov	r3, sl
 8006ec6:	4642      	mov	r2, r8
 8006ec8:	4631      	mov	r1, r6
 8006eca:	4628      	mov	r0, r5
 8006ecc:	47b8      	blx	r7
 8006ece:	3001      	adds	r0, #1
 8006ed0:	d10e      	bne.n	8006ef0 <_printf_float+0x418>
 8006ed2:	e65e      	b.n	8006b92 <_printf_float+0xba>
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	4652      	mov	r2, sl
 8006ed8:	4631      	mov	r1, r6
 8006eda:	4628      	mov	r0, r5
 8006edc:	47b8      	blx	r7
 8006ede:	3001      	adds	r0, #1
 8006ee0:	f43f ae57 	beq.w	8006b92 <_printf_float+0xba>
 8006ee4:	f108 0801 	add.w	r8, r8, #1
 8006ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006eea:	3b01      	subs	r3, #1
 8006eec:	4543      	cmp	r3, r8
 8006eee:	dcf1      	bgt.n	8006ed4 <_printf_float+0x3fc>
 8006ef0:	464b      	mov	r3, r9
 8006ef2:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006ef6:	e6de      	b.n	8006cb6 <_printf_float+0x1de>
 8006ef8:	f04f 0800 	mov.w	r8, #0
 8006efc:	f104 0a1a 	add.w	sl, r4, #26
 8006f00:	e7f2      	b.n	8006ee8 <_printf_float+0x410>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e7df      	b.n	8006ec6 <_printf_float+0x3ee>
 8006f06:	2301      	movs	r3, #1
 8006f08:	464a      	mov	r2, r9
 8006f0a:	4631      	mov	r1, r6
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	47b8      	blx	r7
 8006f10:	3001      	adds	r0, #1
 8006f12:	f43f ae3e 	beq.w	8006b92 <_printf_float+0xba>
 8006f16:	f108 0801 	add.w	r8, r8, #1
 8006f1a:	68e3      	ldr	r3, [r4, #12]
 8006f1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f1e:	1a9b      	subs	r3, r3, r2
 8006f20:	4543      	cmp	r3, r8
 8006f22:	dcf0      	bgt.n	8006f06 <_printf_float+0x42e>
 8006f24:	e6fc      	b.n	8006d20 <_printf_float+0x248>
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	f104 0919 	add.w	r9, r4, #25
 8006f2e:	e7f4      	b.n	8006f1a <_printf_float+0x442>
 8006f30:	2900      	cmp	r1, #0
 8006f32:	f43f ae8b 	beq.w	8006c4c <_printf_float+0x174>
 8006f36:	2300      	movs	r3, #0
 8006f38:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006f3c:	ab09      	add	r3, sp, #36	; 0x24
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	ec49 8b10 	vmov	d0, r8, r9
 8006f44:	6022      	str	r2, [r4, #0]
 8006f46:	f8cd a004 	str.w	sl, [sp, #4]
 8006f4a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006f4e:	4628      	mov	r0, r5
 8006f50:	f7ff fd2d 	bl	80069ae <__cvt>
 8006f54:	4680      	mov	r8, r0
 8006f56:	e648      	b.n	8006bea <_printf_float+0x112>

08006f58 <_printf_common>:
 8006f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f5c:	4691      	mov	r9, r2
 8006f5e:	461f      	mov	r7, r3
 8006f60:	688a      	ldr	r2, [r1, #8]
 8006f62:	690b      	ldr	r3, [r1, #16]
 8006f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	bfb8      	it	lt
 8006f6c:	4613      	movlt	r3, r2
 8006f6e:	f8c9 3000 	str.w	r3, [r9]
 8006f72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006f76:	4606      	mov	r6, r0
 8006f78:	460c      	mov	r4, r1
 8006f7a:	b112      	cbz	r2, 8006f82 <_printf_common+0x2a>
 8006f7c:	3301      	adds	r3, #1
 8006f7e:	f8c9 3000 	str.w	r3, [r9]
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	0699      	lsls	r1, r3, #26
 8006f86:	bf42      	ittt	mi
 8006f88:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006f8c:	3302      	addmi	r3, #2
 8006f8e:	f8c9 3000 	strmi.w	r3, [r9]
 8006f92:	6825      	ldr	r5, [r4, #0]
 8006f94:	f015 0506 	ands.w	r5, r5, #6
 8006f98:	d107      	bne.n	8006faa <_printf_common+0x52>
 8006f9a:	f104 0a19 	add.w	sl, r4, #25
 8006f9e:	68e3      	ldr	r3, [r4, #12]
 8006fa0:	f8d9 2000 	ldr.w	r2, [r9]
 8006fa4:	1a9b      	subs	r3, r3, r2
 8006fa6:	42ab      	cmp	r3, r5
 8006fa8:	dc28      	bgt.n	8006ffc <_printf_common+0xa4>
 8006faa:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006fae:	6822      	ldr	r2, [r4, #0]
 8006fb0:	3300      	adds	r3, #0
 8006fb2:	bf18      	it	ne
 8006fb4:	2301      	movne	r3, #1
 8006fb6:	0692      	lsls	r2, r2, #26
 8006fb8:	d42d      	bmi.n	8007016 <_printf_common+0xbe>
 8006fba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006fbe:	4639      	mov	r1, r7
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	47c0      	blx	r8
 8006fc4:	3001      	adds	r0, #1
 8006fc6:	d020      	beq.n	800700a <_printf_common+0xb2>
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	68e5      	ldr	r5, [r4, #12]
 8006fcc:	f8d9 2000 	ldr.w	r2, [r9]
 8006fd0:	f003 0306 	and.w	r3, r3, #6
 8006fd4:	2b04      	cmp	r3, #4
 8006fd6:	bf08      	it	eq
 8006fd8:	1aad      	subeq	r5, r5, r2
 8006fda:	68a3      	ldr	r3, [r4, #8]
 8006fdc:	6922      	ldr	r2, [r4, #16]
 8006fde:	bf0c      	ite	eq
 8006fe0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006fe4:	2500      	movne	r5, #0
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	bfc4      	itt	gt
 8006fea:	1a9b      	subgt	r3, r3, r2
 8006fec:	18ed      	addgt	r5, r5, r3
 8006fee:	f04f 0900 	mov.w	r9, #0
 8006ff2:	341a      	adds	r4, #26
 8006ff4:	454d      	cmp	r5, r9
 8006ff6:	d11a      	bne.n	800702e <_printf_common+0xd6>
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e008      	b.n	800700e <_printf_common+0xb6>
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	4652      	mov	r2, sl
 8007000:	4639      	mov	r1, r7
 8007002:	4630      	mov	r0, r6
 8007004:	47c0      	blx	r8
 8007006:	3001      	adds	r0, #1
 8007008:	d103      	bne.n	8007012 <_printf_common+0xba>
 800700a:	f04f 30ff 	mov.w	r0, #4294967295
 800700e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007012:	3501      	adds	r5, #1
 8007014:	e7c3      	b.n	8006f9e <_printf_common+0x46>
 8007016:	18e1      	adds	r1, r4, r3
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	2030      	movs	r0, #48	; 0x30
 800701c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007020:	4422      	add	r2, r4
 8007022:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007026:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800702a:	3302      	adds	r3, #2
 800702c:	e7c5      	b.n	8006fba <_printf_common+0x62>
 800702e:	2301      	movs	r3, #1
 8007030:	4622      	mov	r2, r4
 8007032:	4639      	mov	r1, r7
 8007034:	4630      	mov	r0, r6
 8007036:	47c0      	blx	r8
 8007038:	3001      	adds	r0, #1
 800703a:	d0e6      	beq.n	800700a <_printf_common+0xb2>
 800703c:	f109 0901 	add.w	r9, r9, #1
 8007040:	e7d8      	b.n	8006ff4 <_printf_common+0x9c>
	...

08007044 <_printf_i>:
 8007044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007048:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800704c:	460c      	mov	r4, r1
 800704e:	7e09      	ldrb	r1, [r1, #24]
 8007050:	b085      	sub	sp, #20
 8007052:	296e      	cmp	r1, #110	; 0x6e
 8007054:	4617      	mov	r7, r2
 8007056:	4606      	mov	r6, r0
 8007058:	4698      	mov	r8, r3
 800705a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800705c:	f000 80b3 	beq.w	80071c6 <_printf_i+0x182>
 8007060:	d822      	bhi.n	80070a8 <_printf_i+0x64>
 8007062:	2963      	cmp	r1, #99	; 0x63
 8007064:	d036      	beq.n	80070d4 <_printf_i+0x90>
 8007066:	d80a      	bhi.n	800707e <_printf_i+0x3a>
 8007068:	2900      	cmp	r1, #0
 800706a:	f000 80b9 	beq.w	80071e0 <_printf_i+0x19c>
 800706e:	2958      	cmp	r1, #88	; 0x58
 8007070:	f000 8083 	beq.w	800717a <_printf_i+0x136>
 8007074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007078:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800707c:	e032      	b.n	80070e4 <_printf_i+0xa0>
 800707e:	2964      	cmp	r1, #100	; 0x64
 8007080:	d001      	beq.n	8007086 <_printf_i+0x42>
 8007082:	2969      	cmp	r1, #105	; 0x69
 8007084:	d1f6      	bne.n	8007074 <_printf_i+0x30>
 8007086:	6820      	ldr	r0, [r4, #0]
 8007088:	6813      	ldr	r3, [r2, #0]
 800708a:	0605      	lsls	r5, r0, #24
 800708c:	f103 0104 	add.w	r1, r3, #4
 8007090:	d52a      	bpl.n	80070e8 <_printf_i+0xa4>
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6011      	str	r1, [r2, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	da03      	bge.n	80070a2 <_printf_i+0x5e>
 800709a:	222d      	movs	r2, #45	; 0x2d
 800709c:	425b      	negs	r3, r3
 800709e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80070a2:	486f      	ldr	r0, [pc, #444]	; (8007260 <_printf_i+0x21c>)
 80070a4:	220a      	movs	r2, #10
 80070a6:	e039      	b.n	800711c <_printf_i+0xd8>
 80070a8:	2973      	cmp	r1, #115	; 0x73
 80070aa:	f000 809d 	beq.w	80071e8 <_printf_i+0x1a4>
 80070ae:	d808      	bhi.n	80070c2 <_printf_i+0x7e>
 80070b0:	296f      	cmp	r1, #111	; 0x6f
 80070b2:	d020      	beq.n	80070f6 <_printf_i+0xb2>
 80070b4:	2970      	cmp	r1, #112	; 0x70
 80070b6:	d1dd      	bne.n	8007074 <_printf_i+0x30>
 80070b8:	6823      	ldr	r3, [r4, #0]
 80070ba:	f043 0320 	orr.w	r3, r3, #32
 80070be:	6023      	str	r3, [r4, #0]
 80070c0:	e003      	b.n	80070ca <_printf_i+0x86>
 80070c2:	2975      	cmp	r1, #117	; 0x75
 80070c4:	d017      	beq.n	80070f6 <_printf_i+0xb2>
 80070c6:	2978      	cmp	r1, #120	; 0x78
 80070c8:	d1d4      	bne.n	8007074 <_printf_i+0x30>
 80070ca:	2378      	movs	r3, #120	; 0x78
 80070cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80070d0:	4864      	ldr	r0, [pc, #400]	; (8007264 <_printf_i+0x220>)
 80070d2:	e055      	b.n	8007180 <_printf_i+0x13c>
 80070d4:	6813      	ldr	r3, [r2, #0]
 80070d6:	1d19      	adds	r1, r3, #4
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	6011      	str	r1, [r2, #0]
 80070dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80070e4:	2301      	movs	r3, #1
 80070e6:	e08c      	b.n	8007202 <_printf_i+0x1be>
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	6011      	str	r1, [r2, #0]
 80070ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80070f0:	bf18      	it	ne
 80070f2:	b21b      	sxthne	r3, r3
 80070f4:	e7cf      	b.n	8007096 <_printf_i+0x52>
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	6825      	ldr	r5, [r4, #0]
 80070fa:	1d18      	adds	r0, r3, #4
 80070fc:	6010      	str	r0, [r2, #0]
 80070fe:	0628      	lsls	r0, r5, #24
 8007100:	d501      	bpl.n	8007106 <_printf_i+0xc2>
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	e002      	b.n	800710c <_printf_i+0xc8>
 8007106:	0668      	lsls	r0, r5, #25
 8007108:	d5fb      	bpl.n	8007102 <_printf_i+0xbe>
 800710a:	881b      	ldrh	r3, [r3, #0]
 800710c:	4854      	ldr	r0, [pc, #336]	; (8007260 <_printf_i+0x21c>)
 800710e:	296f      	cmp	r1, #111	; 0x6f
 8007110:	bf14      	ite	ne
 8007112:	220a      	movne	r2, #10
 8007114:	2208      	moveq	r2, #8
 8007116:	2100      	movs	r1, #0
 8007118:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800711c:	6865      	ldr	r5, [r4, #4]
 800711e:	60a5      	str	r5, [r4, #8]
 8007120:	2d00      	cmp	r5, #0
 8007122:	f2c0 8095 	blt.w	8007250 <_printf_i+0x20c>
 8007126:	6821      	ldr	r1, [r4, #0]
 8007128:	f021 0104 	bic.w	r1, r1, #4
 800712c:	6021      	str	r1, [r4, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d13d      	bne.n	80071ae <_printf_i+0x16a>
 8007132:	2d00      	cmp	r5, #0
 8007134:	f040 808e 	bne.w	8007254 <_printf_i+0x210>
 8007138:	4665      	mov	r5, ip
 800713a:	2a08      	cmp	r2, #8
 800713c:	d10b      	bne.n	8007156 <_printf_i+0x112>
 800713e:	6823      	ldr	r3, [r4, #0]
 8007140:	07db      	lsls	r3, r3, #31
 8007142:	d508      	bpl.n	8007156 <_printf_i+0x112>
 8007144:	6923      	ldr	r3, [r4, #16]
 8007146:	6862      	ldr	r2, [r4, #4]
 8007148:	429a      	cmp	r2, r3
 800714a:	bfde      	ittt	le
 800714c:	2330      	movle	r3, #48	; 0x30
 800714e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007152:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007156:	ebac 0305 	sub.w	r3, ip, r5
 800715a:	6123      	str	r3, [r4, #16]
 800715c:	f8cd 8000 	str.w	r8, [sp]
 8007160:	463b      	mov	r3, r7
 8007162:	aa03      	add	r2, sp, #12
 8007164:	4621      	mov	r1, r4
 8007166:	4630      	mov	r0, r6
 8007168:	f7ff fef6 	bl	8006f58 <_printf_common>
 800716c:	3001      	adds	r0, #1
 800716e:	d14d      	bne.n	800720c <_printf_i+0x1c8>
 8007170:	f04f 30ff 	mov.w	r0, #4294967295
 8007174:	b005      	add	sp, #20
 8007176:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800717a:	4839      	ldr	r0, [pc, #228]	; (8007260 <_printf_i+0x21c>)
 800717c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007180:	6813      	ldr	r3, [r2, #0]
 8007182:	6821      	ldr	r1, [r4, #0]
 8007184:	1d1d      	adds	r5, r3, #4
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6015      	str	r5, [r2, #0]
 800718a:	060a      	lsls	r2, r1, #24
 800718c:	d50b      	bpl.n	80071a6 <_printf_i+0x162>
 800718e:	07ca      	lsls	r2, r1, #31
 8007190:	bf44      	itt	mi
 8007192:	f041 0120 	orrmi.w	r1, r1, #32
 8007196:	6021      	strmi	r1, [r4, #0]
 8007198:	b91b      	cbnz	r3, 80071a2 <_printf_i+0x15e>
 800719a:	6822      	ldr	r2, [r4, #0]
 800719c:	f022 0220 	bic.w	r2, r2, #32
 80071a0:	6022      	str	r2, [r4, #0]
 80071a2:	2210      	movs	r2, #16
 80071a4:	e7b7      	b.n	8007116 <_printf_i+0xd2>
 80071a6:	064d      	lsls	r5, r1, #25
 80071a8:	bf48      	it	mi
 80071aa:	b29b      	uxthmi	r3, r3
 80071ac:	e7ef      	b.n	800718e <_printf_i+0x14a>
 80071ae:	4665      	mov	r5, ip
 80071b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80071b4:	fb02 3311 	mls	r3, r2, r1, r3
 80071b8:	5cc3      	ldrb	r3, [r0, r3]
 80071ba:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80071be:	460b      	mov	r3, r1
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d1f5      	bne.n	80071b0 <_printf_i+0x16c>
 80071c4:	e7b9      	b.n	800713a <_printf_i+0xf6>
 80071c6:	6813      	ldr	r3, [r2, #0]
 80071c8:	6825      	ldr	r5, [r4, #0]
 80071ca:	6961      	ldr	r1, [r4, #20]
 80071cc:	1d18      	adds	r0, r3, #4
 80071ce:	6010      	str	r0, [r2, #0]
 80071d0:	0628      	lsls	r0, r5, #24
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	d501      	bpl.n	80071da <_printf_i+0x196>
 80071d6:	6019      	str	r1, [r3, #0]
 80071d8:	e002      	b.n	80071e0 <_printf_i+0x19c>
 80071da:	066a      	lsls	r2, r5, #25
 80071dc:	d5fb      	bpl.n	80071d6 <_printf_i+0x192>
 80071de:	8019      	strh	r1, [r3, #0]
 80071e0:	2300      	movs	r3, #0
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	4665      	mov	r5, ip
 80071e6:	e7b9      	b.n	800715c <_printf_i+0x118>
 80071e8:	6813      	ldr	r3, [r2, #0]
 80071ea:	1d19      	adds	r1, r3, #4
 80071ec:	6011      	str	r1, [r2, #0]
 80071ee:	681d      	ldr	r5, [r3, #0]
 80071f0:	6862      	ldr	r2, [r4, #4]
 80071f2:	2100      	movs	r1, #0
 80071f4:	4628      	mov	r0, r5
 80071f6:	f7f9 f8eb 	bl	80003d0 <memchr>
 80071fa:	b108      	cbz	r0, 8007200 <_printf_i+0x1bc>
 80071fc:	1b40      	subs	r0, r0, r5
 80071fe:	6060      	str	r0, [r4, #4]
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	6123      	str	r3, [r4, #16]
 8007204:	2300      	movs	r3, #0
 8007206:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720a:	e7a7      	b.n	800715c <_printf_i+0x118>
 800720c:	6923      	ldr	r3, [r4, #16]
 800720e:	462a      	mov	r2, r5
 8007210:	4639      	mov	r1, r7
 8007212:	4630      	mov	r0, r6
 8007214:	47c0      	blx	r8
 8007216:	3001      	adds	r0, #1
 8007218:	d0aa      	beq.n	8007170 <_printf_i+0x12c>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	079b      	lsls	r3, r3, #30
 800721e:	d413      	bmi.n	8007248 <_printf_i+0x204>
 8007220:	68e0      	ldr	r0, [r4, #12]
 8007222:	9b03      	ldr	r3, [sp, #12]
 8007224:	4298      	cmp	r0, r3
 8007226:	bfb8      	it	lt
 8007228:	4618      	movlt	r0, r3
 800722a:	e7a3      	b.n	8007174 <_printf_i+0x130>
 800722c:	2301      	movs	r3, #1
 800722e:	464a      	mov	r2, r9
 8007230:	4639      	mov	r1, r7
 8007232:	4630      	mov	r0, r6
 8007234:	47c0      	blx	r8
 8007236:	3001      	adds	r0, #1
 8007238:	d09a      	beq.n	8007170 <_printf_i+0x12c>
 800723a:	3501      	adds	r5, #1
 800723c:	68e3      	ldr	r3, [r4, #12]
 800723e:	9a03      	ldr	r2, [sp, #12]
 8007240:	1a9b      	subs	r3, r3, r2
 8007242:	42ab      	cmp	r3, r5
 8007244:	dcf2      	bgt.n	800722c <_printf_i+0x1e8>
 8007246:	e7eb      	b.n	8007220 <_printf_i+0x1dc>
 8007248:	2500      	movs	r5, #0
 800724a:	f104 0919 	add.w	r9, r4, #25
 800724e:	e7f5      	b.n	800723c <_printf_i+0x1f8>
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1ac      	bne.n	80071ae <_printf_i+0x16a>
 8007254:	7803      	ldrb	r3, [r0, #0]
 8007256:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800725a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800725e:	e76c      	b.n	800713a <_printf_i+0xf6>
 8007260:	0800b316 	.word	0x0800b316
 8007264:	0800b327 	.word	0x0800b327

08007268 <_scanf_float>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	469a      	mov	sl, r3
 800726e:	688b      	ldr	r3, [r1, #8]
 8007270:	4616      	mov	r6, r2
 8007272:	1e5a      	subs	r2, r3, #1
 8007274:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007278:	b087      	sub	sp, #28
 800727a:	bf83      	ittte	hi
 800727c:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8007280:	189b      	addhi	r3, r3, r2
 8007282:	9301      	strhi	r3, [sp, #4]
 8007284:	2300      	movls	r3, #0
 8007286:	bf86      	itte	hi
 8007288:	f240 135d 	movwhi	r3, #349	; 0x15d
 800728c:	608b      	strhi	r3, [r1, #8]
 800728e:	9301      	strls	r3, [sp, #4]
 8007290:	680b      	ldr	r3, [r1, #0]
 8007292:	4688      	mov	r8, r1
 8007294:	f04f 0b00 	mov.w	fp, #0
 8007298:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800729c:	f848 3b1c 	str.w	r3, [r8], #28
 80072a0:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80072a4:	4607      	mov	r7, r0
 80072a6:	460c      	mov	r4, r1
 80072a8:	4645      	mov	r5, r8
 80072aa:	465a      	mov	r2, fp
 80072ac:	46d9      	mov	r9, fp
 80072ae:	f8cd b008 	str.w	fp, [sp, #8]
 80072b2:	68a1      	ldr	r1, [r4, #8]
 80072b4:	b181      	cbz	r1, 80072d8 <_scanf_float+0x70>
 80072b6:	6833      	ldr	r3, [r6, #0]
 80072b8:	781b      	ldrb	r3, [r3, #0]
 80072ba:	2b49      	cmp	r3, #73	; 0x49
 80072bc:	d071      	beq.n	80073a2 <_scanf_float+0x13a>
 80072be:	d84d      	bhi.n	800735c <_scanf_float+0xf4>
 80072c0:	2b39      	cmp	r3, #57	; 0x39
 80072c2:	d840      	bhi.n	8007346 <_scanf_float+0xde>
 80072c4:	2b31      	cmp	r3, #49	; 0x31
 80072c6:	f080 8088 	bcs.w	80073da <_scanf_float+0x172>
 80072ca:	2b2d      	cmp	r3, #45	; 0x2d
 80072cc:	f000 8090 	beq.w	80073f0 <_scanf_float+0x188>
 80072d0:	d815      	bhi.n	80072fe <_scanf_float+0x96>
 80072d2:	2b2b      	cmp	r3, #43	; 0x2b
 80072d4:	f000 808c 	beq.w	80073f0 <_scanf_float+0x188>
 80072d8:	f1b9 0f00 	cmp.w	r9, #0
 80072dc:	d003      	beq.n	80072e6 <_scanf_float+0x7e>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	3a01      	subs	r2, #1
 80072e8:	2a01      	cmp	r2, #1
 80072ea:	f200 80ea 	bhi.w	80074c2 <_scanf_float+0x25a>
 80072ee:	4545      	cmp	r5, r8
 80072f0:	f200 80dc 	bhi.w	80074ac <_scanf_float+0x244>
 80072f4:	2601      	movs	r6, #1
 80072f6:	4630      	mov	r0, r6
 80072f8:	b007      	add	sp, #28
 80072fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fe:	2b2e      	cmp	r3, #46	; 0x2e
 8007300:	f000 809f 	beq.w	8007442 <_scanf_float+0x1da>
 8007304:	2b30      	cmp	r3, #48	; 0x30
 8007306:	d1e7      	bne.n	80072d8 <_scanf_float+0x70>
 8007308:	6820      	ldr	r0, [r4, #0]
 800730a:	f410 7f80 	tst.w	r0, #256	; 0x100
 800730e:	d064      	beq.n	80073da <_scanf_float+0x172>
 8007310:	9b01      	ldr	r3, [sp, #4]
 8007312:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8007316:	6020      	str	r0, [r4, #0]
 8007318:	f109 0901 	add.w	r9, r9, #1
 800731c:	b11b      	cbz	r3, 8007326 <_scanf_float+0xbe>
 800731e:	3b01      	subs	r3, #1
 8007320:	3101      	adds	r1, #1
 8007322:	9301      	str	r3, [sp, #4]
 8007324:	60a1      	str	r1, [r4, #8]
 8007326:	68a3      	ldr	r3, [r4, #8]
 8007328:	3b01      	subs	r3, #1
 800732a:	60a3      	str	r3, [r4, #8]
 800732c:	6923      	ldr	r3, [r4, #16]
 800732e:	3301      	adds	r3, #1
 8007330:	6123      	str	r3, [r4, #16]
 8007332:	6873      	ldr	r3, [r6, #4]
 8007334:	3b01      	subs	r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	6073      	str	r3, [r6, #4]
 800733a:	f340 80ac 	ble.w	8007496 <_scanf_float+0x22e>
 800733e:	6833      	ldr	r3, [r6, #0]
 8007340:	3301      	adds	r3, #1
 8007342:	6033      	str	r3, [r6, #0]
 8007344:	e7b5      	b.n	80072b2 <_scanf_float+0x4a>
 8007346:	2b45      	cmp	r3, #69	; 0x45
 8007348:	f000 8085 	beq.w	8007456 <_scanf_float+0x1ee>
 800734c:	2b46      	cmp	r3, #70	; 0x46
 800734e:	d06a      	beq.n	8007426 <_scanf_float+0x1be>
 8007350:	2b41      	cmp	r3, #65	; 0x41
 8007352:	d1c1      	bne.n	80072d8 <_scanf_float+0x70>
 8007354:	2a01      	cmp	r2, #1
 8007356:	d1bf      	bne.n	80072d8 <_scanf_float+0x70>
 8007358:	2202      	movs	r2, #2
 800735a:	e046      	b.n	80073ea <_scanf_float+0x182>
 800735c:	2b65      	cmp	r3, #101	; 0x65
 800735e:	d07a      	beq.n	8007456 <_scanf_float+0x1ee>
 8007360:	d818      	bhi.n	8007394 <_scanf_float+0x12c>
 8007362:	2b54      	cmp	r3, #84	; 0x54
 8007364:	d066      	beq.n	8007434 <_scanf_float+0x1cc>
 8007366:	d811      	bhi.n	800738c <_scanf_float+0x124>
 8007368:	2b4e      	cmp	r3, #78	; 0x4e
 800736a:	d1b5      	bne.n	80072d8 <_scanf_float+0x70>
 800736c:	2a00      	cmp	r2, #0
 800736e:	d146      	bne.n	80073fe <_scanf_float+0x196>
 8007370:	f1b9 0f00 	cmp.w	r9, #0
 8007374:	d145      	bne.n	8007402 <_scanf_float+0x19a>
 8007376:	6821      	ldr	r1, [r4, #0]
 8007378:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 800737c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8007380:	d13f      	bne.n	8007402 <_scanf_float+0x19a>
 8007382:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8007386:	6021      	str	r1, [r4, #0]
 8007388:	2201      	movs	r2, #1
 800738a:	e02e      	b.n	80073ea <_scanf_float+0x182>
 800738c:	2b59      	cmp	r3, #89	; 0x59
 800738e:	d01e      	beq.n	80073ce <_scanf_float+0x166>
 8007390:	2b61      	cmp	r3, #97	; 0x61
 8007392:	e7de      	b.n	8007352 <_scanf_float+0xea>
 8007394:	2b6e      	cmp	r3, #110	; 0x6e
 8007396:	d0e9      	beq.n	800736c <_scanf_float+0x104>
 8007398:	d815      	bhi.n	80073c6 <_scanf_float+0x15e>
 800739a:	2b66      	cmp	r3, #102	; 0x66
 800739c:	d043      	beq.n	8007426 <_scanf_float+0x1be>
 800739e:	2b69      	cmp	r3, #105	; 0x69
 80073a0:	d19a      	bne.n	80072d8 <_scanf_float+0x70>
 80073a2:	f1bb 0f00 	cmp.w	fp, #0
 80073a6:	d138      	bne.n	800741a <_scanf_float+0x1b2>
 80073a8:	f1b9 0f00 	cmp.w	r9, #0
 80073ac:	d197      	bne.n	80072de <_scanf_float+0x76>
 80073ae:	6821      	ldr	r1, [r4, #0]
 80073b0:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80073b4:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80073b8:	d195      	bne.n	80072e6 <_scanf_float+0x7e>
 80073ba:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80073be:	6021      	str	r1, [r4, #0]
 80073c0:	f04f 0b01 	mov.w	fp, #1
 80073c4:	e011      	b.n	80073ea <_scanf_float+0x182>
 80073c6:	2b74      	cmp	r3, #116	; 0x74
 80073c8:	d034      	beq.n	8007434 <_scanf_float+0x1cc>
 80073ca:	2b79      	cmp	r3, #121	; 0x79
 80073cc:	d184      	bne.n	80072d8 <_scanf_float+0x70>
 80073ce:	f1bb 0f07 	cmp.w	fp, #7
 80073d2:	d181      	bne.n	80072d8 <_scanf_float+0x70>
 80073d4:	f04f 0b08 	mov.w	fp, #8
 80073d8:	e007      	b.n	80073ea <_scanf_float+0x182>
 80073da:	eb12 0f0b 	cmn.w	r2, fp
 80073de:	f47f af7b 	bne.w	80072d8 <_scanf_float+0x70>
 80073e2:	6821      	ldr	r1, [r4, #0]
 80073e4:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80073e8:	6021      	str	r1, [r4, #0]
 80073ea:	702b      	strb	r3, [r5, #0]
 80073ec:	3501      	adds	r5, #1
 80073ee:	e79a      	b.n	8007326 <_scanf_float+0xbe>
 80073f0:	6821      	ldr	r1, [r4, #0]
 80073f2:	0608      	lsls	r0, r1, #24
 80073f4:	f57f af70 	bpl.w	80072d8 <_scanf_float+0x70>
 80073f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80073fc:	e7f4      	b.n	80073e8 <_scanf_float+0x180>
 80073fe:	2a02      	cmp	r2, #2
 8007400:	d047      	beq.n	8007492 <_scanf_float+0x22a>
 8007402:	f1bb 0f01 	cmp.w	fp, #1
 8007406:	d003      	beq.n	8007410 <_scanf_float+0x1a8>
 8007408:	f1bb 0f04 	cmp.w	fp, #4
 800740c:	f47f af64 	bne.w	80072d8 <_scanf_float+0x70>
 8007410:	f10b 0b01 	add.w	fp, fp, #1
 8007414:	fa5f fb8b 	uxtb.w	fp, fp
 8007418:	e7e7      	b.n	80073ea <_scanf_float+0x182>
 800741a:	f1bb 0f03 	cmp.w	fp, #3
 800741e:	d0f7      	beq.n	8007410 <_scanf_float+0x1a8>
 8007420:	f1bb 0f05 	cmp.w	fp, #5
 8007424:	e7f2      	b.n	800740c <_scanf_float+0x1a4>
 8007426:	f1bb 0f02 	cmp.w	fp, #2
 800742a:	f47f af55 	bne.w	80072d8 <_scanf_float+0x70>
 800742e:	f04f 0b03 	mov.w	fp, #3
 8007432:	e7da      	b.n	80073ea <_scanf_float+0x182>
 8007434:	f1bb 0f06 	cmp.w	fp, #6
 8007438:	f47f af4e 	bne.w	80072d8 <_scanf_float+0x70>
 800743c:	f04f 0b07 	mov.w	fp, #7
 8007440:	e7d3      	b.n	80073ea <_scanf_float+0x182>
 8007442:	6821      	ldr	r1, [r4, #0]
 8007444:	0588      	lsls	r0, r1, #22
 8007446:	f57f af47 	bpl.w	80072d8 <_scanf_float+0x70>
 800744a:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800744e:	6021      	str	r1, [r4, #0]
 8007450:	f8cd 9008 	str.w	r9, [sp, #8]
 8007454:	e7c9      	b.n	80073ea <_scanf_float+0x182>
 8007456:	6821      	ldr	r1, [r4, #0]
 8007458:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 800745c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8007460:	d006      	beq.n	8007470 <_scanf_float+0x208>
 8007462:	0548      	lsls	r0, r1, #21
 8007464:	f57f af38 	bpl.w	80072d8 <_scanf_float+0x70>
 8007468:	f1b9 0f00 	cmp.w	r9, #0
 800746c:	f43f af3b 	beq.w	80072e6 <_scanf_float+0x7e>
 8007470:	0588      	lsls	r0, r1, #22
 8007472:	bf58      	it	pl
 8007474:	9802      	ldrpl	r0, [sp, #8]
 8007476:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800747a:	bf58      	it	pl
 800747c:	eba9 0000 	subpl.w	r0, r9, r0
 8007480:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8007484:	bf58      	it	pl
 8007486:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800748a:	6021      	str	r1, [r4, #0]
 800748c:	f04f 0900 	mov.w	r9, #0
 8007490:	e7ab      	b.n	80073ea <_scanf_float+0x182>
 8007492:	2203      	movs	r2, #3
 8007494:	e7a9      	b.n	80073ea <_scanf_float+0x182>
 8007496:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800749a:	9205      	str	r2, [sp, #20]
 800749c:	4631      	mov	r1, r6
 800749e:	4638      	mov	r0, r7
 80074a0:	4798      	blx	r3
 80074a2:	9a05      	ldr	r2, [sp, #20]
 80074a4:	2800      	cmp	r0, #0
 80074a6:	f43f af04 	beq.w	80072b2 <_scanf_float+0x4a>
 80074aa:	e715      	b.n	80072d8 <_scanf_float+0x70>
 80074ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80074b0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80074b4:	4632      	mov	r2, r6
 80074b6:	4638      	mov	r0, r7
 80074b8:	4798      	blx	r3
 80074ba:	6923      	ldr	r3, [r4, #16]
 80074bc:	3b01      	subs	r3, #1
 80074be:	6123      	str	r3, [r4, #16]
 80074c0:	e715      	b.n	80072ee <_scanf_float+0x86>
 80074c2:	f10b 33ff 	add.w	r3, fp, #4294967295
 80074c6:	2b06      	cmp	r3, #6
 80074c8:	d80a      	bhi.n	80074e0 <_scanf_float+0x278>
 80074ca:	f1bb 0f02 	cmp.w	fp, #2
 80074ce:	d968      	bls.n	80075a2 <_scanf_float+0x33a>
 80074d0:	f1ab 0b03 	sub.w	fp, fp, #3
 80074d4:	fa5f fb8b 	uxtb.w	fp, fp
 80074d8:	eba5 0b0b 	sub.w	fp, r5, fp
 80074dc:	455d      	cmp	r5, fp
 80074de:	d14b      	bne.n	8007578 <_scanf_float+0x310>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	05da      	lsls	r2, r3, #23
 80074e4:	d51f      	bpl.n	8007526 <_scanf_float+0x2be>
 80074e6:	055b      	lsls	r3, r3, #21
 80074e8:	d468      	bmi.n	80075bc <_scanf_float+0x354>
 80074ea:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80074ee:	6923      	ldr	r3, [r4, #16]
 80074f0:	2965      	cmp	r1, #101	; 0x65
 80074f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80074f6:	f105 3bff 	add.w	fp, r5, #4294967295
 80074fa:	6123      	str	r3, [r4, #16]
 80074fc:	d00d      	beq.n	800751a <_scanf_float+0x2b2>
 80074fe:	2945      	cmp	r1, #69	; 0x45
 8007500:	d00b      	beq.n	800751a <_scanf_float+0x2b2>
 8007502:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007506:	4632      	mov	r2, r6
 8007508:	4638      	mov	r0, r7
 800750a:	4798      	blx	r3
 800750c:	6923      	ldr	r3, [r4, #16]
 800750e:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8007512:	3b01      	subs	r3, #1
 8007514:	f1a5 0b02 	sub.w	fp, r5, #2
 8007518:	6123      	str	r3, [r4, #16]
 800751a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800751e:	4632      	mov	r2, r6
 8007520:	4638      	mov	r0, r7
 8007522:	4798      	blx	r3
 8007524:	465d      	mov	r5, fp
 8007526:	6826      	ldr	r6, [r4, #0]
 8007528:	f016 0610 	ands.w	r6, r6, #16
 800752c:	d17a      	bne.n	8007624 <_scanf_float+0x3bc>
 800752e:	702e      	strb	r6, [r5, #0]
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800753a:	d142      	bne.n	80075c2 <_scanf_float+0x35a>
 800753c:	9b02      	ldr	r3, [sp, #8]
 800753e:	eba9 0303 	sub.w	r3, r9, r3
 8007542:	425a      	negs	r2, r3
 8007544:	2b00      	cmp	r3, #0
 8007546:	d149      	bne.n	80075dc <_scanf_float+0x374>
 8007548:	2200      	movs	r2, #0
 800754a:	4641      	mov	r1, r8
 800754c:	4638      	mov	r0, r7
 800754e:	f000 fea3 	bl	8008298 <_strtod_r>
 8007552:	6825      	ldr	r5, [r4, #0]
 8007554:	f8da 3000 	ldr.w	r3, [sl]
 8007558:	f015 0f02 	tst.w	r5, #2
 800755c:	f103 0204 	add.w	r2, r3, #4
 8007560:	ec59 8b10 	vmov	r8, r9, d0
 8007564:	f8ca 2000 	str.w	r2, [sl]
 8007568:	d043      	beq.n	80075f2 <_scanf_float+0x38a>
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	e9c3 8900 	strd	r8, r9, [r3]
 8007570:	68e3      	ldr	r3, [r4, #12]
 8007572:	3301      	adds	r3, #1
 8007574:	60e3      	str	r3, [r4, #12]
 8007576:	e6be      	b.n	80072f6 <_scanf_float+0x8e>
 8007578:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800757c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007580:	4632      	mov	r2, r6
 8007582:	4638      	mov	r0, r7
 8007584:	4798      	blx	r3
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	3b01      	subs	r3, #1
 800758a:	6123      	str	r3, [r4, #16]
 800758c:	e7a6      	b.n	80074dc <_scanf_float+0x274>
 800758e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007592:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8007596:	4632      	mov	r2, r6
 8007598:	4638      	mov	r0, r7
 800759a:	4798      	blx	r3
 800759c:	6923      	ldr	r3, [r4, #16]
 800759e:	3b01      	subs	r3, #1
 80075a0:	6123      	str	r3, [r4, #16]
 80075a2:	4545      	cmp	r5, r8
 80075a4:	d8f3      	bhi.n	800758e <_scanf_float+0x326>
 80075a6:	e6a5      	b.n	80072f4 <_scanf_float+0x8c>
 80075a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80075ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80075b0:	4632      	mov	r2, r6
 80075b2:	4638      	mov	r0, r7
 80075b4:	4798      	blx	r3
 80075b6:	6923      	ldr	r3, [r4, #16]
 80075b8:	3b01      	subs	r3, #1
 80075ba:	6123      	str	r3, [r4, #16]
 80075bc:	4545      	cmp	r5, r8
 80075be:	d8f3      	bhi.n	80075a8 <_scanf_float+0x340>
 80075c0:	e698      	b.n	80072f4 <_scanf_float+0x8c>
 80075c2:	9b03      	ldr	r3, [sp, #12]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0bf      	beq.n	8007548 <_scanf_float+0x2e0>
 80075c8:	9904      	ldr	r1, [sp, #16]
 80075ca:	230a      	movs	r3, #10
 80075cc:	4632      	mov	r2, r6
 80075ce:	3101      	adds	r1, #1
 80075d0:	4638      	mov	r0, r7
 80075d2:	f000 feed 	bl	80083b0 <_strtol_r>
 80075d6:	9b03      	ldr	r3, [sp, #12]
 80075d8:	9d04      	ldr	r5, [sp, #16]
 80075da:	1ac2      	subs	r2, r0, r3
 80075dc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80075e0:	429d      	cmp	r5, r3
 80075e2:	bf28      	it	cs
 80075e4:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80075e8:	490f      	ldr	r1, [pc, #60]	; (8007628 <_scanf_float+0x3c0>)
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f824 	bl	8007638 <siprintf>
 80075f0:	e7aa      	b.n	8007548 <_scanf_float+0x2e0>
 80075f2:	f015 0504 	ands.w	r5, r5, #4
 80075f6:	d1b8      	bne.n	800756a <_scanf_float+0x302>
 80075f8:	681f      	ldr	r7, [r3, #0]
 80075fa:	ee10 2a10 	vmov	r2, s0
 80075fe:	464b      	mov	r3, r9
 8007600:	ee10 0a10 	vmov	r0, s0
 8007604:	4649      	mov	r1, r9
 8007606:	f7f9 fb89 	bl	8000d1c <__aeabi_dcmpun>
 800760a:	b128      	cbz	r0, 8007618 <_scanf_float+0x3b0>
 800760c:	4628      	mov	r0, r5
 800760e:	f000 f80d 	bl	800762c <nanf>
 8007612:	ed87 0a00 	vstr	s0, [r7]
 8007616:	e7ab      	b.n	8007570 <_scanf_float+0x308>
 8007618:	4640      	mov	r0, r8
 800761a:	4649      	mov	r1, r9
 800761c:	f7f9 fbdc 	bl	8000dd8 <__aeabi_d2f>
 8007620:	6038      	str	r0, [r7, #0]
 8007622:	e7a5      	b.n	8007570 <_scanf_float+0x308>
 8007624:	2600      	movs	r6, #0
 8007626:	e666      	b.n	80072f6 <_scanf_float+0x8e>
 8007628:	0800b338 	.word	0x0800b338

0800762c <nanf>:
 800762c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007634 <nanf+0x8>
 8007630:	4770      	bx	lr
 8007632:	bf00      	nop
 8007634:	7fc00000 	.word	0x7fc00000

08007638 <siprintf>:
 8007638:	b40e      	push	{r1, r2, r3}
 800763a:	b500      	push	{lr}
 800763c:	b09c      	sub	sp, #112	; 0x70
 800763e:	ab1d      	add	r3, sp, #116	; 0x74
 8007640:	9002      	str	r0, [sp, #8]
 8007642:	9006      	str	r0, [sp, #24]
 8007644:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007648:	4809      	ldr	r0, [pc, #36]	; (8007670 <siprintf+0x38>)
 800764a:	9107      	str	r1, [sp, #28]
 800764c:	9104      	str	r1, [sp, #16]
 800764e:	4909      	ldr	r1, [pc, #36]	; (8007674 <siprintf+0x3c>)
 8007650:	f853 2b04 	ldr.w	r2, [r3], #4
 8007654:	9105      	str	r1, [sp, #20]
 8007656:	6800      	ldr	r0, [r0, #0]
 8007658:	9301      	str	r3, [sp, #4]
 800765a:	a902      	add	r1, sp, #8
 800765c:	f002 fd64 	bl	800a128 <_svfiprintf_r>
 8007660:	9b02      	ldr	r3, [sp, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	701a      	strb	r2, [r3, #0]
 8007666:	b01c      	add	sp, #112	; 0x70
 8007668:	f85d eb04 	ldr.w	lr, [sp], #4
 800766c:	b003      	add	sp, #12
 800766e:	4770      	bx	lr
 8007670:	2000000c 	.word	0x2000000c
 8007674:	ffff0208 	.word	0xffff0208

08007678 <sulp>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	4604      	mov	r4, r0
 800767c:	460d      	mov	r5, r1
 800767e:	ec45 4b10 	vmov	d0, r4, r5
 8007682:	4616      	mov	r6, r2
 8007684:	f002 fb0c 	bl	8009ca0 <__ulp>
 8007688:	ec51 0b10 	vmov	r0, r1, d0
 800768c:	b17e      	cbz	r6, 80076ae <sulp+0x36>
 800768e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007692:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007696:	2b00      	cmp	r3, #0
 8007698:	dd09      	ble.n	80076ae <sulp+0x36>
 800769a:	051b      	lsls	r3, r3, #20
 800769c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80076a0:	2400      	movs	r4, #0
 80076a2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80076a6:	4622      	mov	r2, r4
 80076a8:	462b      	mov	r3, r5
 80076aa:	f7f9 f89d 	bl	80007e8 <__aeabi_dmul>
 80076ae:	bd70      	pop	{r4, r5, r6, pc}

080076b0 <_strtod_l>:
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b4:	461f      	mov	r7, r3
 80076b6:	b0a1      	sub	sp, #132	; 0x84
 80076b8:	2300      	movs	r3, #0
 80076ba:	4681      	mov	r9, r0
 80076bc:	4638      	mov	r0, r7
 80076be:	460e      	mov	r6, r1
 80076c0:	9217      	str	r2, [sp, #92]	; 0x5c
 80076c2:	931c      	str	r3, [sp, #112]	; 0x70
 80076c4:	f001 fff5 	bl	80096b2 <__localeconv_l>
 80076c8:	4680      	mov	r8, r0
 80076ca:	6800      	ldr	r0, [r0, #0]
 80076cc:	f7f8 fe73 	bl	80003b6 <strlen>
 80076d0:	f04f 0a00 	mov.w	sl, #0
 80076d4:	4604      	mov	r4, r0
 80076d6:	f04f 0b00 	mov.w	fp, #0
 80076da:	961b      	str	r6, [sp, #108]	; 0x6c
 80076dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80076de:	781a      	ldrb	r2, [r3, #0]
 80076e0:	2a0d      	cmp	r2, #13
 80076e2:	d832      	bhi.n	800774a <_strtod_l+0x9a>
 80076e4:	2a09      	cmp	r2, #9
 80076e6:	d236      	bcs.n	8007756 <_strtod_l+0xa6>
 80076e8:	2a00      	cmp	r2, #0
 80076ea:	d03e      	beq.n	800776a <_strtod_l+0xba>
 80076ec:	2300      	movs	r3, #0
 80076ee:	930d      	str	r3, [sp, #52]	; 0x34
 80076f0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80076f2:	782b      	ldrb	r3, [r5, #0]
 80076f4:	2b30      	cmp	r3, #48	; 0x30
 80076f6:	f040 80ac 	bne.w	8007852 <_strtod_l+0x1a2>
 80076fa:	786b      	ldrb	r3, [r5, #1]
 80076fc:	2b58      	cmp	r3, #88	; 0x58
 80076fe:	d001      	beq.n	8007704 <_strtod_l+0x54>
 8007700:	2b78      	cmp	r3, #120	; 0x78
 8007702:	d167      	bne.n	80077d4 <_strtod_l+0x124>
 8007704:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007706:	9301      	str	r3, [sp, #4]
 8007708:	ab1c      	add	r3, sp, #112	; 0x70
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	9702      	str	r7, [sp, #8]
 800770e:	ab1d      	add	r3, sp, #116	; 0x74
 8007710:	4a88      	ldr	r2, [pc, #544]	; (8007934 <_strtod_l+0x284>)
 8007712:	a91b      	add	r1, sp, #108	; 0x6c
 8007714:	4648      	mov	r0, r9
 8007716:	f001 fcf2 	bl	80090fe <__gethex>
 800771a:	f010 0407 	ands.w	r4, r0, #7
 800771e:	4606      	mov	r6, r0
 8007720:	d005      	beq.n	800772e <_strtod_l+0x7e>
 8007722:	2c06      	cmp	r4, #6
 8007724:	d12b      	bne.n	800777e <_strtod_l+0xce>
 8007726:	3501      	adds	r5, #1
 8007728:	2300      	movs	r3, #0
 800772a:	951b      	str	r5, [sp, #108]	; 0x6c
 800772c:	930d      	str	r3, [sp, #52]	; 0x34
 800772e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007730:	2b00      	cmp	r3, #0
 8007732:	f040 859a 	bne.w	800826a <_strtod_l+0xbba>
 8007736:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007738:	b1e3      	cbz	r3, 8007774 <_strtod_l+0xc4>
 800773a:	4652      	mov	r2, sl
 800773c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007740:	ec43 2b10 	vmov	d0, r2, r3
 8007744:	b021      	add	sp, #132	; 0x84
 8007746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800774a:	2a2b      	cmp	r2, #43	; 0x2b
 800774c:	d015      	beq.n	800777a <_strtod_l+0xca>
 800774e:	2a2d      	cmp	r2, #45	; 0x2d
 8007750:	d004      	beq.n	800775c <_strtod_l+0xac>
 8007752:	2a20      	cmp	r2, #32
 8007754:	d1ca      	bne.n	80076ec <_strtod_l+0x3c>
 8007756:	3301      	adds	r3, #1
 8007758:	931b      	str	r3, [sp, #108]	; 0x6c
 800775a:	e7bf      	b.n	80076dc <_strtod_l+0x2c>
 800775c:	2201      	movs	r2, #1
 800775e:	920d      	str	r2, [sp, #52]	; 0x34
 8007760:	1c5a      	adds	r2, r3, #1
 8007762:	921b      	str	r2, [sp, #108]	; 0x6c
 8007764:	785b      	ldrb	r3, [r3, #1]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d1c2      	bne.n	80076f0 <_strtod_l+0x40>
 800776a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800776c:	961b      	str	r6, [sp, #108]	; 0x6c
 800776e:	2b00      	cmp	r3, #0
 8007770:	f040 8579 	bne.w	8008266 <_strtod_l+0xbb6>
 8007774:	4652      	mov	r2, sl
 8007776:	465b      	mov	r3, fp
 8007778:	e7e2      	b.n	8007740 <_strtod_l+0x90>
 800777a:	2200      	movs	r2, #0
 800777c:	e7ef      	b.n	800775e <_strtod_l+0xae>
 800777e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007780:	b13a      	cbz	r2, 8007792 <_strtod_l+0xe2>
 8007782:	2135      	movs	r1, #53	; 0x35
 8007784:	a81e      	add	r0, sp, #120	; 0x78
 8007786:	f002 fb83 	bl	8009e90 <__copybits>
 800778a:	991c      	ldr	r1, [sp, #112]	; 0x70
 800778c:	4648      	mov	r0, r9
 800778e:	f001 ffef 	bl	8009770 <_Bfree>
 8007792:	3c01      	subs	r4, #1
 8007794:	2c04      	cmp	r4, #4
 8007796:	d806      	bhi.n	80077a6 <_strtod_l+0xf6>
 8007798:	e8df f004 	tbb	[pc, r4]
 800779c:	1714030a 	.word	0x1714030a
 80077a0:	0a          	.byte	0x0a
 80077a1:	00          	.byte	0x00
 80077a2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80077a6:	0730      	lsls	r0, r6, #28
 80077a8:	d5c1      	bpl.n	800772e <_strtod_l+0x7e>
 80077aa:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80077ae:	e7be      	b.n	800772e <_strtod_l+0x7e>
 80077b0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80077b4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80077b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80077ba:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80077be:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80077c2:	e7f0      	b.n	80077a6 <_strtod_l+0xf6>
 80077c4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007938 <_strtod_l+0x288>
 80077c8:	e7ed      	b.n	80077a6 <_strtod_l+0xf6>
 80077ca:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80077ce:	f04f 3aff 	mov.w	sl, #4294967295
 80077d2:	e7e8      	b.n	80077a6 <_strtod_l+0xf6>
 80077d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	921b      	str	r2, [sp, #108]	; 0x6c
 80077da:	785b      	ldrb	r3, [r3, #1]
 80077dc:	2b30      	cmp	r3, #48	; 0x30
 80077de:	d0f9      	beq.n	80077d4 <_strtod_l+0x124>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0a4      	beq.n	800772e <_strtod_l+0x7e>
 80077e4:	2301      	movs	r3, #1
 80077e6:	2500      	movs	r5, #0
 80077e8:	9306      	str	r3, [sp, #24]
 80077ea:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80077ec:	9308      	str	r3, [sp, #32]
 80077ee:	9507      	str	r5, [sp, #28]
 80077f0:	9505      	str	r5, [sp, #20]
 80077f2:	220a      	movs	r2, #10
 80077f4:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80077f6:	7807      	ldrb	r7, [r0, #0]
 80077f8:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 80077fc:	b2d9      	uxtb	r1, r3
 80077fe:	2909      	cmp	r1, #9
 8007800:	d929      	bls.n	8007856 <_strtod_l+0x1a6>
 8007802:	4622      	mov	r2, r4
 8007804:	f8d8 1000 	ldr.w	r1, [r8]
 8007808:	f002 fd96 	bl	800a338 <strncmp>
 800780c:	2800      	cmp	r0, #0
 800780e:	d031      	beq.n	8007874 <_strtod_l+0x1c4>
 8007810:	2000      	movs	r0, #0
 8007812:	9c05      	ldr	r4, [sp, #20]
 8007814:	9004      	str	r0, [sp, #16]
 8007816:	463b      	mov	r3, r7
 8007818:	4602      	mov	r2, r0
 800781a:	2b65      	cmp	r3, #101	; 0x65
 800781c:	d001      	beq.n	8007822 <_strtod_l+0x172>
 800781e:	2b45      	cmp	r3, #69	; 0x45
 8007820:	d114      	bne.n	800784c <_strtod_l+0x19c>
 8007822:	b924      	cbnz	r4, 800782e <_strtod_l+0x17e>
 8007824:	b910      	cbnz	r0, 800782c <_strtod_l+0x17c>
 8007826:	9b06      	ldr	r3, [sp, #24]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d09e      	beq.n	800776a <_strtod_l+0xba>
 800782c:	2400      	movs	r4, #0
 800782e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007830:	1c73      	adds	r3, r6, #1
 8007832:	931b      	str	r3, [sp, #108]	; 0x6c
 8007834:	7873      	ldrb	r3, [r6, #1]
 8007836:	2b2b      	cmp	r3, #43	; 0x2b
 8007838:	d078      	beq.n	800792c <_strtod_l+0x27c>
 800783a:	2b2d      	cmp	r3, #45	; 0x2d
 800783c:	d070      	beq.n	8007920 <_strtod_l+0x270>
 800783e:	f04f 0c00 	mov.w	ip, #0
 8007842:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007846:	2f09      	cmp	r7, #9
 8007848:	d97c      	bls.n	8007944 <_strtod_l+0x294>
 800784a:	961b      	str	r6, [sp, #108]	; 0x6c
 800784c:	f04f 0e00 	mov.w	lr, #0
 8007850:	e09a      	b.n	8007988 <_strtod_l+0x2d8>
 8007852:	2300      	movs	r3, #0
 8007854:	e7c7      	b.n	80077e6 <_strtod_l+0x136>
 8007856:	9905      	ldr	r1, [sp, #20]
 8007858:	2908      	cmp	r1, #8
 800785a:	bfdd      	ittte	le
 800785c:	9907      	ldrle	r1, [sp, #28]
 800785e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007862:	9307      	strle	r3, [sp, #28]
 8007864:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007868:	9b05      	ldr	r3, [sp, #20]
 800786a:	3001      	adds	r0, #1
 800786c:	3301      	adds	r3, #1
 800786e:	9305      	str	r3, [sp, #20]
 8007870:	901b      	str	r0, [sp, #108]	; 0x6c
 8007872:	e7bf      	b.n	80077f4 <_strtod_l+0x144>
 8007874:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007876:	191a      	adds	r2, r3, r4
 8007878:	921b      	str	r2, [sp, #108]	; 0x6c
 800787a:	9a05      	ldr	r2, [sp, #20]
 800787c:	5d1b      	ldrb	r3, [r3, r4]
 800787e:	2a00      	cmp	r2, #0
 8007880:	d037      	beq.n	80078f2 <_strtod_l+0x242>
 8007882:	9c05      	ldr	r4, [sp, #20]
 8007884:	4602      	mov	r2, r0
 8007886:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800788a:	2909      	cmp	r1, #9
 800788c:	d913      	bls.n	80078b6 <_strtod_l+0x206>
 800788e:	2101      	movs	r1, #1
 8007890:	9104      	str	r1, [sp, #16]
 8007892:	e7c2      	b.n	800781a <_strtod_l+0x16a>
 8007894:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007896:	1c5a      	adds	r2, r3, #1
 8007898:	921b      	str	r2, [sp, #108]	; 0x6c
 800789a:	785b      	ldrb	r3, [r3, #1]
 800789c:	3001      	adds	r0, #1
 800789e:	2b30      	cmp	r3, #48	; 0x30
 80078a0:	d0f8      	beq.n	8007894 <_strtod_l+0x1e4>
 80078a2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80078a6:	2a08      	cmp	r2, #8
 80078a8:	f200 84e4 	bhi.w	8008274 <_strtod_l+0xbc4>
 80078ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80078ae:	9208      	str	r2, [sp, #32]
 80078b0:	4602      	mov	r2, r0
 80078b2:	2000      	movs	r0, #0
 80078b4:	4604      	mov	r4, r0
 80078b6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80078ba:	f100 0101 	add.w	r1, r0, #1
 80078be:	d012      	beq.n	80078e6 <_strtod_l+0x236>
 80078c0:	440a      	add	r2, r1
 80078c2:	eb00 0c04 	add.w	ip, r0, r4
 80078c6:	4621      	mov	r1, r4
 80078c8:	270a      	movs	r7, #10
 80078ca:	458c      	cmp	ip, r1
 80078cc:	d113      	bne.n	80078f6 <_strtod_l+0x246>
 80078ce:	1821      	adds	r1, r4, r0
 80078d0:	2908      	cmp	r1, #8
 80078d2:	f104 0401 	add.w	r4, r4, #1
 80078d6:	4404      	add	r4, r0
 80078d8:	dc19      	bgt.n	800790e <_strtod_l+0x25e>
 80078da:	9b07      	ldr	r3, [sp, #28]
 80078dc:	210a      	movs	r1, #10
 80078de:	fb01 e303 	mla	r3, r1, r3, lr
 80078e2:	9307      	str	r3, [sp, #28]
 80078e4:	2100      	movs	r1, #0
 80078e6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80078e8:	1c58      	adds	r0, r3, #1
 80078ea:	901b      	str	r0, [sp, #108]	; 0x6c
 80078ec:	785b      	ldrb	r3, [r3, #1]
 80078ee:	4608      	mov	r0, r1
 80078f0:	e7c9      	b.n	8007886 <_strtod_l+0x1d6>
 80078f2:	9805      	ldr	r0, [sp, #20]
 80078f4:	e7d3      	b.n	800789e <_strtod_l+0x1ee>
 80078f6:	2908      	cmp	r1, #8
 80078f8:	f101 0101 	add.w	r1, r1, #1
 80078fc:	dc03      	bgt.n	8007906 <_strtod_l+0x256>
 80078fe:	9b07      	ldr	r3, [sp, #28]
 8007900:	437b      	muls	r3, r7
 8007902:	9307      	str	r3, [sp, #28]
 8007904:	e7e1      	b.n	80078ca <_strtod_l+0x21a>
 8007906:	2910      	cmp	r1, #16
 8007908:	bfd8      	it	le
 800790a:	437d      	mulle	r5, r7
 800790c:	e7dd      	b.n	80078ca <_strtod_l+0x21a>
 800790e:	2c10      	cmp	r4, #16
 8007910:	bfdc      	itt	le
 8007912:	210a      	movle	r1, #10
 8007914:	fb01 e505 	mlale	r5, r1, r5, lr
 8007918:	e7e4      	b.n	80078e4 <_strtod_l+0x234>
 800791a:	2301      	movs	r3, #1
 800791c:	9304      	str	r3, [sp, #16]
 800791e:	e781      	b.n	8007824 <_strtod_l+0x174>
 8007920:	f04f 0c01 	mov.w	ip, #1
 8007924:	1cb3      	adds	r3, r6, #2
 8007926:	931b      	str	r3, [sp, #108]	; 0x6c
 8007928:	78b3      	ldrb	r3, [r6, #2]
 800792a:	e78a      	b.n	8007842 <_strtod_l+0x192>
 800792c:	f04f 0c00 	mov.w	ip, #0
 8007930:	e7f8      	b.n	8007924 <_strtod_l+0x274>
 8007932:	bf00      	nop
 8007934:	0800b340 	.word	0x0800b340
 8007938:	7ff00000 	.word	0x7ff00000
 800793c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800793e:	1c5f      	adds	r7, r3, #1
 8007940:	971b      	str	r7, [sp, #108]	; 0x6c
 8007942:	785b      	ldrb	r3, [r3, #1]
 8007944:	2b30      	cmp	r3, #48	; 0x30
 8007946:	d0f9      	beq.n	800793c <_strtod_l+0x28c>
 8007948:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800794c:	2f08      	cmp	r7, #8
 800794e:	f63f af7d 	bhi.w	800784c <_strtod_l+0x19c>
 8007952:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007956:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007958:	930a      	str	r3, [sp, #40]	; 0x28
 800795a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800795c:	1c5f      	adds	r7, r3, #1
 800795e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007960:	785b      	ldrb	r3, [r3, #1]
 8007962:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007966:	f1b8 0f09 	cmp.w	r8, #9
 800796a:	d937      	bls.n	80079dc <_strtod_l+0x32c>
 800796c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800796e:	1a7f      	subs	r7, r7, r1
 8007970:	2f08      	cmp	r7, #8
 8007972:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007976:	dc37      	bgt.n	80079e8 <_strtod_l+0x338>
 8007978:	45be      	cmp	lr, r7
 800797a:	bfa8      	it	ge
 800797c:	46be      	movge	lr, r7
 800797e:	f1bc 0f00 	cmp.w	ip, #0
 8007982:	d001      	beq.n	8007988 <_strtod_l+0x2d8>
 8007984:	f1ce 0e00 	rsb	lr, lr, #0
 8007988:	2c00      	cmp	r4, #0
 800798a:	d151      	bne.n	8007a30 <_strtod_l+0x380>
 800798c:	2800      	cmp	r0, #0
 800798e:	f47f aece 	bne.w	800772e <_strtod_l+0x7e>
 8007992:	9a06      	ldr	r2, [sp, #24]
 8007994:	2a00      	cmp	r2, #0
 8007996:	f47f aeca 	bne.w	800772e <_strtod_l+0x7e>
 800799a:	9a04      	ldr	r2, [sp, #16]
 800799c:	2a00      	cmp	r2, #0
 800799e:	f47f aee4 	bne.w	800776a <_strtod_l+0xba>
 80079a2:	2b4e      	cmp	r3, #78	; 0x4e
 80079a4:	d027      	beq.n	80079f6 <_strtod_l+0x346>
 80079a6:	dc21      	bgt.n	80079ec <_strtod_l+0x33c>
 80079a8:	2b49      	cmp	r3, #73	; 0x49
 80079aa:	f47f aede 	bne.w	800776a <_strtod_l+0xba>
 80079ae:	49a0      	ldr	r1, [pc, #640]	; (8007c30 <_strtod_l+0x580>)
 80079b0:	a81b      	add	r0, sp, #108	; 0x6c
 80079b2:	f001 fdd7 	bl	8009564 <__match>
 80079b6:	2800      	cmp	r0, #0
 80079b8:	f43f aed7 	beq.w	800776a <_strtod_l+0xba>
 80079bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079be:	499d      	ldr	r1, [pc, #628]	; (8007c34 <_strtod_l+0x584>)
 80079c0:	3b01      	subs	r3, #1
 80079c2:	a81b      	add	r0, sp, #108	; 0x6c
 80079c4:	931b      	str	r3, [sp, #108]	; 0x6c
 80079c6:	f001 fdcd 	bl	8009564 <__match>
 80079ca:	b910      	cbnz	r0, 80079d2 <_strtod_l+0x322>
 80079cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80079ce:	3301      	adds	r3, #1
 80079d0:	931b      	str	r3, [sp, #108]	; 0x6c
 80079d2:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007c48 <_strtod_l+0x598>
 80079d6:	f04f 0a00 	mov.w	sl, #0
 80079da:	e6a8      	b.n	800772e <_strtod_l+0x7e>
 80079dc:	210a      	movs	r1, #10
 80079de:	fb01 3e0e 	mla	lr, r1, lr, r3
 80079e2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80079e6:	e7b8      	b.n	800795a <_strtod_l+0x2aa>
 80079e8:	46be      	mov	lr, r7
 80079ea:	e7c8      	b.n	800797e <_strtod_l+0x2ce>
 80079ec:	2b69      	cmp	r3, #105	; 0x69
 80079ee:	d0de      	beq.n	80079ae <_strtod_l+0x2fe>
 80079f0:	2b6e      	cmp	r3, #110	; 0x6e
 80079f2:	f47f aeba 	bne.w	800776a <_strtod_l+0xba>
 80079f6:	4990      	ldr	r1, [pc, #576]	; (8007c38 <_strtod_l+0x588>)
 80079f8:	a81b      	add	r0, sp, #108	; 0x6c
 80079fa:	f001 fdb3 	bl	8009564 <__match>
 80079fe:	2800      	cmp	r0, #0
 8007a00:	f43f aeb3 	beq.w	800776a <_strtod_l+0xba>
 8007a04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007a06:	781b      	ldrb	r3, [r3, #0]
 8007a08:	2b28      	cmp	r3, #40	; 0x28
 8007a0a:	d10e      	bne.n	8007a2a <_strtod_l+0x37a>
 8007a0c:	aa1e      	add	r2, sp, #120	; 0x78
 8007a0e:	498b      	ldr	r1, [pc, #556]	; (8007c3c <_strtod_l+0x58c>)
 8007a10:	a81b      	add	r0, sp, #108	; 0x6c
 8007a12:	f001 fdbb 	bl	800958c <__hexnan>
 8007a16:	2805      	cmp	r0, #5
 8007a18:	d107      	bne.n	8007a2a <_strtod_l+0x37a>
 8007a1a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8007a1c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007a20:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007a24:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007a28:	e681      	b.n	800772e <_strtod_l+0x7e>
 8007a2a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007c50 <_strtod_l+0x5a0>
 8007a2e:	e7d2      	b.n	80079d6 <_strtod_l+0x326>
 8007a30:	ebae 0302 	sub.w	r3, lr, r2
 8007a34:	9306      	str	r3, [sp, #24]
 8007a36:	9b05      	ldr	r3, [sp, #20]
 8007a38:	9807      	ldr	r0, [sp, #28]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	bf08      	it	eq
 8007a3e:	4623      	moveq	r3, r4
 8007a40:	2c10      	cmp	r4, #16
 8007a42:	9305      	str	r3, [sp, #20]
 8007a44:	46a0      	mov	r8, r4
 8007a46:	bfa8      	it	ge
 8007a48:	f04f 0810 	movge.w	r8, #16
 8007a4c:	f7f8 fe52 	bl	80006f4 <__aeabi_ui2d>
 8007a50:	2c09      	cmp	r4, #9
 8007a52:	4682      	mov	sl, r0
 8007a54:	468b      	mov	fp, r1
 8007a56:	dc13      	bgt.n	8007a80 <_strtod_l+0x3d0>
 8007a58:	9b06      	ldr	r3, [sp, #24]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	f43f ae67 	beq.w	800772e <_strtod_l+0x7e>
 8007a60:	9b06      	ldr	r3, [sp, #24]
 8007a62:	dd7a      	ble.n	8007b5a <_strtod_l+0x4aa>
 8007a64:	2b16      	cmp	r3, #22
 8007a66:	dc61      	bgt.n	8007b2c <_strtod_l+0x47c>
 8007a68:	4a75      	ldr	r2, [pc, #468]	; (8007c40 <_strtod_l+0x590>)
 8007a6a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8007a6e:	e9de 0100 	ldrd	r0, r1, [lr]
 8007a72:	4652      	mov	r2, sl
 8007a74:	465b      	mov	r3, fp
 8007a76:	f7f8 feb7 	bl	80007e8 <__aeabi_dmul>
 8007a7a:	4682      	mov	sl, r0
 8007a7c:	468b      	mov	fp, r1
 8007a7e:	e656      	b.n	800772e <_strtod_l+0x7e>
 8007a80:	4b6f      	ldr	r3, [pc, #444]	; (8007c40 <_strtod_l+0x590>)
 8007a82:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007a86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007a8a:	f7f8 fead 	bl	80007e8 <__aeabi_dmul>
 8007a8e:	4606      	mov	r6, r0
 8007a90:	4628      	mov	r0, r5
 8007a92:	460f      	mov	r7, r1
 8007a94:	f7f8 fe2e 	bl	80006f4 <__aeabi_ui2d>
 8007a98:	4602      	mov	r2, r0
 8007a9a:	460b      	mov	r3, r1
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	4639      	mov	r1, r7
 8007aa0:	f7f8 fcec 	bl	800047c <__adddf3>
 8007aa4:	2c0f      	cmp	r4, #15
 8007aa6:	4682      	mov	sl, r0
 8007aa8:	468b      	mov	fp, r1
 8007aaa:	ddd5      	ble.n	8007a58 <_strtod_l+0x3a8>
 8007aac:	9b06      	ldr	r3, [sp, #24]
 8007aae:	eba4 0808 	sub.w	r8, r4, r8
 8007ab2:	4498      	add	r8, r3
 8007ab4:	f1b8 0f00 	cmp.w	r8, #0
 8007ab8:	f340 8096 	ble.w	8007be8 <_strtod_l+0x538>
 8007abc:	f018 030f 	ands.w	r3, r8, #15
 8007ac0:	d00a      	beq.n	8007ad8 <_strtod_l+0x428>
 8007ac2:	495f      	ldr	r1, [pc, #380]	; (8007c40 <_strtod_l+0x590>)
 8007ac4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ac8:	4652      	mov	r2, sl
 8007aca:	465b      	mov	r3, fp
 8007acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ad0:	f7f8 fe8a 	bl	80007e8 <__aeabi_dmul>
 8007ad4:	4682      	mov	sl, r0
 8007ad6:	468b      	mov	fp, r1
 8007ad8:	f038 080f 	bics.w	r8, r8, #15
 8007adc:	d073      	beq.n	8007bc6 <_strtod_l+0x516>
 8007ade:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007ae2:	dd47      	ble.n	8007b74 <_strtod_l+0x4c4>
 8007ae4:	2400      	movs	r4, #0
 8007ae6:	46a0      	mov	r8, r4
 8007ae8:	9407      	str	r4, [sp, #28]
 8007aea:	9405      	str	r4, [sp, #20]
 8007aec:	2322      	movs	r3, #34	; 0x22
 8007aee:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007c48 <_strtod_l+0x598>
 8007af2:	f8c9 3000 	str.w	r3, [r9]
 8007af6:	f04f 0a00 	mov.w	sl, #0
 8007afa:	9b07      	ldr	r3, [sp, #28]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	f43f ae16 	beq.w	800772e <_strtod_l+0x7e>
 8007b02:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007b04:	4648      	mov	r0, r9
 8007b06:	f001 fe33 	bl	8009770 <_Bfree>
 8007b0a:	9905      	ldr	r1, [sp, #20]
 8007b0c:	4648      	mov	r0, r9
 8007b0e:	f001 fe2f 	bl	8009770 <_Bfree>
 8007b12:	4641      	mov	r1, r8
 8007b14:	4648      	mov	r0, r9
 8007b16:	f001 fe2b 	bl	8009770 <_Bfree>
 8007b1a:	9907      	ldr	r1, [sp, #28]
 8007b1c:	4648      	mov	r0, r9
 8007b1e:	f001 fe27 	bl	8009770 <_Bfree>
 8007b22:	4621      	mov	r1, r4
 8007b24:	4648      	mov	r0, r9
 8007b26:	f001 fe23 	bl	8009770 <_Bfree>
 8007b2a:	e600      	b.n	800772e <_strtod_l+0x7e>
 8007b2c:	9a06      	ldr	r2, [sp, #24]
 8007b2e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007b32:	4293      	cmp	r3, r2
 8007b34:	dbba      	blt.n	8007aac <_strtod_l+0x3fc>
 8007b36:	4d42      	ldr	r5, [pc, #264]	; (8007c40 <_strtod_l+0x590>)
 8007b38:	f1c4 040f 	rsb	r4, r4, #15
 8007b3c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007b40:	4652      	mov	r2, sl
 8007b42:	465b      	mov	r3, fp
 8007b44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007b48:	f7f8 fe4e 	bl	80007e8 <__aeabi_dmul>
 8007b4c:	9b06      	ldr	r3, [sp, #24]
 8007b4e:	1b1c      	subs	r4, r3, r4
 8007b50:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007b54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007b58:	e78d      	b.n	8007a76 <_strtod_l+0x3c6>
 8007b5a:	f113 0f16 	cmn.w	r3, #22
 8007b5e:	dba5      	blt.n	8007aac <_strtod_l+0x3fc>
 8007b60:	4a37      	ldr	r2, [pc, #220]	; (8007c40 <_strtod_l+0x590>)
 8007b62:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007b66:	e9d2 2300 	ldrd	r2, r3, [r2]
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	4659      	mov	r1, fp
 8007b6e:	f7f8 ff65 	bl	8000a3c <__aeabi_ddiv>
 8007b72:	e782      	b.n	8007a7a <_strtod_l+0x3ca>
 8007b74:	2300      	movs	r3, #0
 8007b76:	4e33      	ldr	r6, [pc, #204]	; (8007c44 <_strtod_l+0x594>)
 8007b78:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007b7c:	4650      	mov	r0, sl
 8007b7e:	4659      	mov	r1, fp
 8007b80:	461d      	mov	r5, r3
 8007b82:	f1b8 0f01 	cmp.w	r8, #1
 8007b86:	dc21      	bgt.n	8007bcc <_strtod_l+0x51c>
 8007b88:	b10b      	cbz	r3, 8007b8e <_strtod_l+0x4de>
 8007b8a:	4682      	mov	sl, r0
 8007b8c:	468b      	mov	fp, r1
 8007b8e:	4b2d      	ldr	r3, [pc, #180]	; (8007c44 <_strtod_l+0x594>)
 8007b90:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007b94:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8007b98:	4652      	mov	r2, sl
 8007b9a:	465b      	mov	r3, fp
 8007b9c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8007ba0:	f7f8 fe22 	bl	80007e8 <__aeabi_dmul>
 8007ba4:	4b28      	ldr	r3, [pc, #160]	; (8007c48 <_strtod_l+0x598>)
 8007ba6:	460a      	mov	r2, r1
 8007ba8:	400b      	ands	r3, r1
 8007baa:	4928      	ldr	r1, [pc, #160]	; (8007c4c <_strtod_l+0x59c>)
 8007bac:	428b      	cmp	r3, r1
 8007bae:	4682      	mov	sl, r0
 8007bb0:	d898      	bhi.n	8007ae4 <_strtod_l+0x434>
 8007bb2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007bb6:	428b      	cmp	r3, r1
 8007bb8:	bf86      	itte	hi
 8007bba:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007c54 <_strtod_l+0x5a4>
 8007bbe:	f04f 3aff 	movhi.w	sl, #4294967295
 8007bc2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	9304      	str	r3, [sp, #16]
 8007bca:	e077      	b.n	8007cbc <_strtod_l+0x60c>
 8007bcc:	f018 0f01 	tst.w	r8, #1
 8007bd0:	d006      	beq.n	8007be0 <_strtod_l+0x530>
 8007bd2:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bda:	f7f8 fe05 	bl	80007e8 <__aeabi_dmul>
 8007bde:	2301      	movs	r3, #1
 8007be0:	3501      	adds	r5, #1
 8007be2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007be6:	e7cc      	b.n	8007b82 <_strtod_l+0x4d2>
 8007be8:	d0ed      	beq.n	8007bc6 <_strtod_l+0x516>
 8007bea:	f1c8 0800 	rsb	r8, r8, #0
 8007bee:	f018 020f 	ands.w	r2, r8, #15
 8007bf2:	d00a      	beq.n	8007c0a <_strtod_l+0x55a>
 8007bf4:	4b12      	ldr	r3, [pc, #72]	; (8007c40 <_strtod_l+0x590>)
 8007bf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bfa:	4650      	mov	r0, sl
 8007bfc:	4659      	mov	r1, fp
 8007bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c02:	f7f8 ff1b 	bl	8000a3c <__aeabi_ddiv>
 8007c06:	4682      	mov	sl, r0
 8007c08:	468b      	mov	fp, r1
 8007c0a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007c0e:	d0da      	beq.n	8007bc6 <_strtod_l+0x516>
 8007c10:	f1b8 0f1f 	cmp.w	r8, #31
 8007c14:	dd20      	ble.n	8007c58 <_strtod_l+0x5a8>
 8007c16:	2400      	movs	r4, #0
 8007c18:	46a0      	mov	r8, r4
 8007c1a:	9407      	str	r4, [sp, #28]
 8007c1c:	9405      	str	r4, [sp, #20]
 8007c1e:	2322      	movs	r3, #34	; 0x22
 8007c20:	f04f 0a00 	mov.w	sl, #0
 8007c24:	f04f 0b00 	mov.w	fp, #0
 8007c28:	f8c9 3000 	str.w	r3, [r9]
 8007c2c:	e765      	b.n	8007afa <_strtod_l+0x44a>
 8007c2e:	bf00      	nop
 8007c30:	0800b309 	.word	0x0800b309
 8007c34:	0800b393 	.word	0x0800b393
 8007c38:	0800b311 	.word	0x0800b311
 8007c3c:	0800b354 	.word	0x0800b354
 8007c40:	0800b3d0 	.word	0x0800b3d0
 8007c44:	0800b3a8 	.word	0x0800b3a8
 8007c48:	7ff00000 	.word	0x7ff00000
 8007c4c:	7ca00000 	.word	0x7ca00000
 8007c50:	fff80000 	.word	0xfff80000
 8007c54:	7fefffff 	.word	0x7fefffff
 8007c58:	f018 0310 	ands.w	r3, r8, #16
 8007c5c:	bf18      	it	ne
 8007c5e:	236a      	movne	r3, #106	; 0x6a
 8007c60:	4da0      	ldr	r5, [pc, #640]	; (8007ee4 <_strtod_l+0x834>)
 8007c62:	9304      	str	r3, [sp, #16]
 8007c64:	4650      	mov	r0, sl
 8007c66:	4659      	mov	r1, fp
 8007c68:	2300      	movs	r3, #0
 8007c6a:	f1b8 0f00 	cmp.w	r8, #0
 8007c6e:	f300 810a 	bgt.w	8007e86 <_strtod_l+0x7d6>
 8007c72:	b10b      	cbz	r3, 8007c78 <_strtod_l+0x5c8>
 8007c74:	4682      	mov	sl, r0
 8007c76:	468b      	mov	fp, r1
 8007c78:	9b04      	ldr	r3, [sp, #16]
 8007c7a:	b1bb      	cbz	r3, 8007cac <_strtod_l+0x5fc>
 8007c7c:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8007c80:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	4659      	mov	r1, fp
 8007c88:	dd10      	ble.n	8007cac <_strtod_l+0x5fc>
 8007c8a:	2b1f      	cmp	r3, #31
 8007c8c:	f340 8107 	ble.w	8007e9e <_strtod_l+0x7ee>
 8007c90:	2b34      	cmp	r3, #52	; 0x34
 8007c92:	bfde      	ittt	le
 8007c94:	3b20      	suble	r3, #32
 8007c96:	f04f 32ff 	movle.w	r2, #4294967295
 8007c9a:	fa02 f303 	lslle.w	r3, r2, r3
 8007c9e:	f04f 0a00 	mov.w	sl, #0
 8007ca2:	bfcc      	ite	gt
 8007ca4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007ca8:	ea03 0b01 	andle.w	fp, r3, r1
 8007cac:	2200      	movs	r2, #0
 8007cae:	2300      	movs	r3, #0
 8007cb0:	4650      	mov	r0, sl
 8007cb2:	4659      	mov	r1, fp
 8007cb4:	f7f9 f800 	bl	8000cb8 <__aeabi_dcmpeq>
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d1ac      	bne.n	8007c16 <_strtod_l+0x566>
 8007cbc:	9b07      	ldr	r3, [sp, #28]
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	9a05      	ldr	r2, [sp, #20]
 8007cc2:	9908      	ldr	r1, [sp, #32]
 8007cc4:	4623      	mov	r3, r4
 8007cc6:	4648      	mov	r0, r9
 8007cc8:	f001 fda4 	bl	8009814 <__s2b>
 8007ccc:	9007      	str	r0, [sp, #28]
 8007cce:	2800      	cmp	r0, #0
 8007cd0:	f43f af08 	beq.w	8007ae4 <_strtod_l+0x434>
 8007cd4:	9a06      	ldr	r2, [sp, #24]
 8007cd6:	9b06      	ldr	r3, [sp, #24]
 8007cd8:	2a00      	cmp	r2, #0
 8007cda:	f1c3 0300 	rsb	r3, r3, #0
 8007cde:	bfa8      	it	ge
 8007ce0:	2300      	movge	r3, #0
 8007ce2:	930e      	str	r3, [sp, #56]	; 0x38
 8007ce4:	2400      	movs	r4, #0
 8007ce6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007cea:	9316      	str	r3, [sp, #88]	; 0x58
 8007cec:	46a0      	mov	r8, r4
 8007cee:	9b07      	ldr	r3, [sp, #28]
 8007cf0:	4648      	mov	r0, r9
 8007cf2:	6859      	ldr	r1, [r3, #4]
 8007cf4:	f001 fd08 	bl	8009708 <_Balloc>
 8007cf8:	9005      	str	r0, [sp, #20]
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	f43f aef6 	beq.w	8007aec <_strtod_l+0x43c>
 8007d00:	9b07      	ldr	r3, [sp, #28]
 8007d02:	691a      	ldr	r2, [r3, #16]
 8007d04:	3202      	adds	r2, #2
 8007d06:	f103 010c 	add.w	r1, r3, #12
 8007d0a:	0092      	lsls	r2, r2, #2
 8007d0c:	300c      	adds	r0, #12
 8007d0e:	f7fe fe3b 	bl	8006988 <memcpy>
 8007d12:	aa1e      	add	r2, sp, #120	; 0x78
 8007d14:	a91d      	add	r1, sp, #116	; 0x74
 8007d16:	ec4b ab10 	vmov	d0, sl, fp
 8007d1a:	4648      	mov	r0, r9
 8007d1c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007d20:	f002 f834 	bl	8009d8c <__d2b>
 8007d24:	901c      	str	r0, [sp, #112]	; 0x70
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f43f aee0 	beq.w	8007aec <_strtod_l+0x43c>
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	4648      	mov	r0, r9
 8007d30:	f001 fdfc 	bl	800992c <__i2b>
 8007d34:	4680      	mov	r8, r0
 8007d36:	2800      	cmp	r0, #0
 8007d38:	f43f aed8 	beq.w	8007aec <_strtod_l+0x43c>
 8007d3c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8007d3e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007d40:	2e00      	cmp	r6, #0
 8007d42:	bfab      	itete	ge
 8007d44:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007d46:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007d48:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8007d4a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8007d4c:	bfac      	ite	ge
 8007d4e:	18f7      	addge	r7, r6, r3
 8007d50:	1b9d      	sublt	r5, r3, r6
 8007d52:	9b04      	ldr	r3, [sp, #16]
 8007d54:	1af6      	subs	r6, r6, r3
 8007d56:	4416      	add	r6, r2
 8007d58:	4b63      	ldr	r3, [pc, #396]	; (8007ee8 <_strtod_l+0x838>)
 8007d5a:	3e01      	subs	r6, #1
 8007d5c:	429e      	cmp	r6, r3
 8007d5e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007d62:	f280 80af 	bge.w	8007ec4 <_strtod_l+0x814>
 8007d66:	1b9b      	subs	r3, r3, r6
 8007d68:	2b1f      	cmp	r3, #31
 8007d6a:	eba2 0203 	sub.w	r2, r2, r3
 8007d6e:	f04f 0101 	mov.w	r1, #1
 8007d72:	f300 809b 	bgt.w	8007eac <_strtod_l+0x7fc>
 8007d76:	fa01 f303 	lsl.w	r3, r1, r3
 8007d7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	930a      	str	r3, [sp, #40]	; 0x28
 8007d80:	18be      	adds	r6, r7, r2
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	42b7      	cmp	r7, r6
 8007d86:	4415      	add	r5, r2
 8007d88:	441d      	add	r5, r3
 8007d8a:	463b      	mov	r3, r7
 8007d8c:	bfa8      	it	ge
 8007d8e:	4633      	movge	r3, r6
 8007d90:	42ab      	cmp	r3, r5
 8007d92:	bfa8      	it	ge
 8007d94:	462b      	movge	r3, r5
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	bfc2      	ittt	gt
 8007d9a:	1af6      	subgt	r6, r6, r3
 8007d9c:	1aed      	subgt	r5, r5, r3
 8007d9e:	1aff      	subgt	r7, r7, r3
 8007da0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007da2:	b1bb      	cbz	r3, 8007dd4 <_strtod_l+0x724>
 8007da4:	4641      	mov	r1, r8
 8007da6:	461a      	mov	r2, r3
 8007da8:	4648      	mov	r0, r9
 8007daa:	f001 fe5f 	bl	8009a6c <__pow5mult>
 8007dae:	4680      	mov	r8, r0
 8007db0:	2800      	cmp	r0, #0
 8007db2:	f43f ae9b 	beq.w	8007aec <_strtod_l+0x43c>
 8007db6:	4601      	mov	r1, r0
 8007db8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8007dba:	4648      	mov	r0, r9
 8007dbc:	f001 fdbf 	bl	800993e <__multiply>
 8007dc0:	900c      	str	r0, [sp, #48]	; 0x30
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	f43f ae92 	beq.w	8007aec <_strtod_l+0x43c>
 8007dc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007dca:	4648      	mov	r0, r9
 8007dcc:	f001 fcd0 	bl	8009770 <_Bfree>
 8007dd0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007dd2:	931c      	str	r3, [sp, #112]	; 0x70
 8007dd4:	2e00      	cmp	r6, #0
 8007dd6:	dc7a      	bgt.n	8007ece <_strtod_l+0x81e>
 8007dd8:	9b06      	ldr	r3, [sp, #24]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	dd08      	ble.n	8007df0 <_strtod_l+0x740>
 8007dde:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007de0:	9905      	ldr	r1, [sp, #20]
 8007de2:	4648      	mov	r0, r9
 8007de4:	f001 fe42 	bl	8009a6c <__pow5mult>
 8007de8:	9005      	str	r0, [sp, #20]
 8007dea:	2800      	cmp	r0, #0
 8007dec:	f43f ae7e 	beq.w	8007aec <_strtod_l+0x43c>
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	dd08      	ble.n	8007e06 <_strtod_l+0x756>
 8007df4:	462a      	mov	r2, r5
 8007df6:	9905      	ldr	r1, [sp, #20]
 8007df8:	4648      	mov	r0, r9
 8007dfa:	f001 fe85 	bl	8009b08 <__lshift>
 8007dfe:	9005      	str	r0, [sp, #20]
 8007e00:	2800      	cmp	r0, #0
 8007e02:	f43f ae73 	beq.w	8007aec <_strtod_l+0x43c>
 8007e06:	2f00      	cmp	r7, #0
 8007e08:	dd08      	ble.n	8007e1c <_strtod_l+0x76c>
 8007e0a:	4641      	mov	r1, r8
 8007e0c:	463a      	mov	r2, r7
 8007e0e:	4648      	mov	r0, r9
 8007e10:	f001 fe7a 	bl	8009b08 <__lshift>
 8007e14:	4680      	mov	r8, r0
 8007e16:	2800      	cmp	r0, #0
 8007e18:	f43f ae68 	beq.w	8007aec <_strtod_l+0x43c>
 8007e1c:	9a05      	ldr	r2, [sp, #20]
 8007e1e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007e20:	4648      	mov	r0, r9
 8007e22:	f001 fedf 	bl	8009be4 <__mdiff>
 8007e26:	4604      	mov	r4, r0
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	f43f ae5f 	beq.w	8007aec <_strtod_l+0x43c>
 8007e2e:	68c3      	ldr	r3, [r0, #12]
 8007e30:	930c      	str	r3, [sp, #48]	; 0x30
 8007e32:	2300      	movs	r3, #0
 8007e34:	60c3      	str	r3, [r0, #12]
 8007e36:	4641      	mov	r1, r8
 8007e38:	f001 feba 	bl	8009bb0 <__mcmp>
 8007e3c:	2800      	cmp	r0, #0
 8007e3e:	da55      	bge.n	8007eec <_strtod_l+0x83c>
 8007e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007e42:	b9e3      	cbnz	r3, 8007e7e <_strtod_l+0x7ce>
 8007e44:	f1ba 0f00 	cmp.w	sl, #0
 8007e48:	d119      	bne.n	8007e7e <_strtod_l+0x7ce>
 8007e4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007e4e:	b9b3      	cbnz	r3, 8007e7e <_strtod_l+0x7ce>
 8007e50:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007e54:	0d1b      	lsrs	r3, r3, #20
 8007e56:	051b      	lsls	r3, r3, #20
 8007e58:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007e5c:	d90f      	bls.n	8007e7e <_strtod_l+0x7ce>
 8007e5e:	6963      	ldr	r3, [r4, #20]
 8007e60:	b913      	cbnz	r3, 8007e68 <_strtod_l+0x7b8>
 8007e62:	6923      	ldr	r3, [r4, #16]
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	dd0a      	ble.n	8007e7e <_strtod_l+0x7ce>
 8007e68:	4621      	mov	r1, r4
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	4648      	mov	r0, r9
 8007e6e:	f001 fe4b 	bl	8009b08 <__lshift>
 8007e72:	4641      	mov	r1, r8
 8007e74:	4604      	mov	r4, r0
 8007e76:	f001 fe9b 	bl	8009bb0 <__mcmp>
 8007e7a:	2800      	cmp	r0, #0
 8007e7c:	dc67      	bgt.n	8007f4e <_strtod_l+0x89e>
 8007e7e:	9b04      	ldr	r3, [sp, #16]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d171      	bne.n	8007f68 <_strtod_l+0x8b8>
 8007e84:	e63d      	b.n	8007b02 <_strtod_l+0x452>
 8007e86:	f018 0f01 	tst.w	r8, #1
 8007e8a:	d004      	beq.n	8007e96 <_strtod_l+0x7e6>
 8007e8c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e90:	f7f8 fcaa 	bl	80007e8 <__aeabi_dmul>
 8007e94:	2301      	movs	r3, #1
 8007e96:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e9a:	3508      	adds	r5, #8
 8007e9c:	e6e5      	b.n	8007c6a <_strtod_l+0x5ba>
 8007e9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ea6:	ea03 0a0a 	and.w	sl, r3, sl
 8007eaa:	e6ff      	b.n	8007cac <_strtod_l+0x5fc>
 8007eac:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007eb0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007eb4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007eb8:	36e2      	adds	r6, #226	; 0xe2
 8007eba:	fa01 f306 	lsl.w	r3, r1, r6
 8007ebe:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec0:	910f      	str	r1, [sp, #60]	; 0x3c
 8007ec2:	e75d      	b.n	8007d80 <_strtod_l+0x6d0>
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	930a      	str	r3, [sp, #40]	; 0x28
 8007ec8:	2301      	movs	r3, #1
 8007eca:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ecc:	e758      	b.n	8007d80 <_strtod_l+0x6d0>
 8007ece:	4632      	mov	r2, r6
 8007ed0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007ed2:	4648      	mov	r0, r9
 8007ed4:	f001 fe18 	bl	8009b08 <__lshift>
 8007ed8:	901c      	str	r0, [sp, #112]	; 0x70
 8007eda:	2800      	cmp	r0, #0
 8007edc:	f47f af7c 	bne.w	8007dd8 <_strtod_l+0x728>
 8007ee0:	e604      	b.n	8007aec <_strtod_l+0x43c>
 8007ee2:	bf00      	nop
 8007ee4:	0800b368 	.word	0x0800b368
 8007ee8:	fffffc02 	.word	0xfffffc02
 8007eec:	465d      	mov	r5, fp
 8007eee:	f040 8086 	bne.w	8007ffe <_strtod_l+0x94e>
 8007ef2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ef4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007ef8:	b32a      	cbz	r2, 8007f46 <_strtod_l+0x896>
 8007efa:	4aaf      	ldr	r2, [pc, #700]	; (80081b8 <_strtod_l+0xb08>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d153      	bne.n	8007fa8 <_strtod_l+0x8f8>
 8007f00:	9b04      	ldr	r3, [sp, #16]
 8007f02:	4650      	mov	r0, sl
 8007f04:	b1d3      	cbz	r3, 8007f3c <_strtod_l+0x88c>
 8007f06:	4aad      	ldr	r2, [pc, #692]	; (80081bc <_strtod_l+0xb0c>)
 8007f08:	402a      	ands	r2, r5
 8007f0a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007f0e:	f04f 31ff 	mov.w	r1, #4294967295
 8007f12:	d816      	bhi.n	8007f42 <_strtod_l+0x892>
 8007f14:	0d12      	lsrs	r2, r2, #20
 8007f16:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f1e:	4298      	cmp	r0, r3
 8007f20:	d142      	bne.n	8007fa8 <_strtod_l+0x8f8>
 8007f22:	4ba7      	ldr	r3, [pc, #668]	; (80081c0 <_strtod_l+0xb10>)
 8007f24:	429d      	cmp	r5, r3
 8007f26:	d102      	bne.n	8007f2e <_strtod_l+0x87e>
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f43f addf 	beq.w	8007aec <_strtod_l+0x43c>
 8007f2e:	4ba3      	ldr	r3, [pc, #652]	; (80081bc <_strtod_l+0xb0c>)
 8007f30:	402b      	ands	r3, r5
 8007f32:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007f36:	f04f 0a00 	mov.w	sl, #0
 8007f3a:	e7a0      	b.n	8007e7e <_strtod_l+0x7ce>
 8007f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8007f40:	e7ed      	b.n	8007f1e <_strtod_l+0x86e>
 8007f42:	460b      	mov	r3, r1
 8007f44:	e7eb      	b.n	8007f1e <_strtod_l+0x86e>
 8007f46:	bb7b      	cbnz	r3, 8007fa8 <_strtod_l+0x8f8>
 8007f48:	f1ba 0f00 	cmp.w	sl, #0
 8007f4c:	d12c      	bne.n	8007fa8 <_strtod_l+0x8f8>
 8007f4e:	9904      	ldr	r1, [sp, #16]
 8007f50:	4a9a      	ldr	r2, [pc, #616]	; (80081bc <_strtod_l+0xb0c>)
 8007f52:	465b      	mov	r3, fp
 8007f54:	b1f1      	cbz	r1, 8007f94 <_strtod_l+0x8e4>
 8007f56:	ea02 010b 	and.w	r1, r2, fp
 8007f5a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007f5e:	dc19      	bgt.n	8007f94 <_strtod_l+0x8e4>
 8007f60:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007f64:	f77f ae5b 	ble.w	8007c1e <_strtod_l+0x56e>
 8007f68:	4a96      	ldr	r2, [pc, #600]	; (80081c4 <_strtod_l+0xb14>)
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007f70:	4650      	mov	r0, sl
 8007f72:	4659      	mov	r1, fp
 8007f74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007f78:	f7f8 fc36 	bl	80007e8 <__aeabi_dmul>
 8007f7c:	4682      	mov	sl, r0
 8007f7e:	468b      	mov	fp, r1
 8007f80:	2900      	cmp	r1, #0
 8007f82:	f47f adbe 	bne.w	8007b02 <_strtod_l+0x452>
 8007f86:	2800      	cmp	r0, #0
 8007f88:	f47f adbb 	bne.w	8007b02 <_strtod_l+0x452>
 8007f8c:	2322      	movs	r3, #34	; 0x22
 8007f8e:	f8c9 3000 	str.w	r3, [r9]
 8007f92:	e5b6      	b.n	8007b02 <_strtod_l+0x452>
 8007f94:	4013      	ands	r3, r2
 8007f96:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007f9a:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007f9e:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007fa2:	f04f 3aff 	mov.w	sl, #4294967295
 8007fa6:	e76a      	b.n	8007e7e <_strtod_l+0x7ce>
 8007fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007faa:	b193      	cbz	r3, 8007fd2 <_strtod_l+0x922>
 8007fac:	422b      	tst	r3, r5
 8007fae:	f43f af66 	beq.w	8007e7e <_strtod_l+0x7ce>
 8007fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007fb4:	9a04      	ldr	r2, [sp, #16]
 8007fb6:	4650      	mov	r0, sl
 8007fb8:	4659      	mov	r1, fp
 8007fba:	b173      	cbz	r3, 8007fda <_strtod_l+0x92a>
 8007fbc:	f7ff fb5c 	bl	8007678 <sulp>
 8007fc0:	4602      	mov	r2, r0
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fc8:	f7f8 fa58 	bl	800047c <__adddf3>
 8007fcc:	4682      	mov	sl, r0
 8007fce:	468b      	mov	fp, r1
 8007fd0:	e755      	b.n	8007e7e <_strtod_l+0x7ce>
 8007fd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007fd4:	ea13 0f0a 	tst.w	r3, sl
 8007fd8:	e7e9      	b.n	8007fae <_strtod_l+0x8fe>
 8007fda:	f7ff fb4d 	bl	8007678 <sulp>
 8007fde:	4602      	mov	r2, r0
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007fe6:	f7f8 fa47 	bl	8000478 <__aeabi_dsub>
 8007fea:	2200      	movs	r2, #0
 8007fec:	2300      	movs	r3, #0
 8007fee:	4682      	mov	sl, r0
 8007ff0:	468b      	mov	fp, r1
 8007ff2:	f7f8 fe61 	bl	8000cb8 <__aeabi_dcmpeq>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	f47f ae11 	bne.w	8007c1e <_strtod_l+0x56e>
 8007ffc:	e73f      	b.n	8007e7e <_strtod_l+0x7ce>
 8007ffe:	4641      	mov	r1, r8
 8008000:	4620      	mov	r0, r4
 8008002:	f001 ff12 	bl	8009e2a <__ratio>
 8008006:	ec57 6b10 	vmov	r6, r7, d0
 800800a:	2200      	movs	r2, #0
 800800c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008010:	ee10 0a10 	vmov	r0, s0
 8008014:	4639      	mov	r1, r7
 8008016:	f7f8 fe63 	bl	8000ce0 <__aeabi_dcmple>
 800801a:	2800      	cmp	r0, #0
 800801c:	d077      	beq.n	800810e <_strtod_l+0xa5e>
 800801e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008020:	2b00      	cmp	r3, #0
 8008022:	d04a      	beq.n	80080ba <_strtod_l+0xa0a>
 8008024:	4b68      	ldr	r3, [pc, #416]	; (80081c8 <_strtod_l+0xb18>)
 8008026:	2200      	movs	r2, #0
 8008028:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800802c:	4f66      	ldr	r7, [pc, #408]	; (80081c8 <_strtod_l+0xb18>)
 800802e:	2600      	movs	r6, #0
 8008030:	4b62      	ldr	r3, [pc, #392]	; (80081bc <_strtod_l+0xb0c>)
 8008032:	402b      	ands	r3, r5
 8008034:	930f      	str	r3, [sp, #60]	; 0x3c
 8008036:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008038:	4b64      	ldr	r3, [pc, #400]	; (80081cc <_strtod_l+0xb1c>)
 800803a:	429a      	cmp	r2, r3
 800803c:	f040 80ce 	bne.w	80081dc <_strtod_l+0xb2c>
 8008040:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008044:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008048:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800804c:	ec4b ab10 	vmov	d0, sl, fp
 8008050:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8008054:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008058:	f001 fe22 	bl	8009ca0 <__ulp>
 800805c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008060:	ec53 2b10 	vmov	r2, r3, d0
 8008064:	f7f8 fbc0 	bl	80007e8 <__aeabi_dmul>
 8008068:	4652      	mov	r2, sl
 800806a:	465b      	mov	r3, fp
 800806c:	f7f8 fa06 	bl	800047c <__adddf3>
 8008070:	460b      	mov	r3, r1
 8008072:	4952      	ldr	r1, [pc, #328]	; (80081bc <_strtod_l+0xb0c>)
 8008074:	4a56      	ldr	r2, [pc, #344]	; (80081d0 <_strtod_l+0xb20>)
 8008076:	4019      	ands	r1, r3
 8008078:	4291      	cmp	r1, r2
 800807a:	4682      	mov	sl, r0
 800807c:	d95b      	bls.n	8008136 <_strtod_l+0xa86>
 800807e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008080:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008084:	4293      	cmp	r3, r2
 8008086:	d103      	bne.n	8008090 <_strtod_l+0x9e0>
 8008088:	9b08      	ldr	r3, [sp, #32]
 800808a:	3301      	adds	r3, #1
 800808c:	f43f ad2e 	beq.w	8007aec <_strtod_l+0x43c>
 8008090:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80081c0 <_strtod_l+0xb10>
 8008094:	f04f 3aff 	mov.w	sl, #4294967295
 8008098:	991c      	ldr	r1, [sp, #112]	; 0x70
 800809a:	4648      	mov	r0, r9
 800809c:	f001 fb68 	bl	8009770 <_Bfree>
 80080a0:	9905      	ldr	r1, [sp, #20]
 80080a2:	4648      	mov	r0, r9
 80080a4:	f001 fb64 	bl	8009770 <_Bfree>
 80080a8:	4641      	mov	r1, r8
 80080aa:	4648      	mov	r0, r9
 80080ac:	f001 fb60 	bl	8009770 <_Bfree>
 80080b0:	4621      	mov	r1, r4
 80080b2:	4648      	mov	r0, r9
 80080b4:	f001 fb5c 	bl	8009770 <_Bfree>
 80080b8:	e619      	b.n	8007cee <_strtod_l+0x63e>
 80080ba:	f1ba 0f00 	cmp.w	sl, #0
 80080be:	d11a      	bne.n	80080f6 <_strtod_l+0xa46>
 80080c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80080c4:	b9eb      	cbnz	r3, 8008102 <_strtod_l+0xa52>
 80080c6:	2200      	movs	r2, #0
 80080c8:	4b3f      	ldr	r3, [pc, #252]	; (80081c8 <_strtod_l+0xb18>)
 80080ca:	4630      	mov	r0, r6
 80080cc:	4639      	mov	r1, r7
 80080ce:	f7f8 fdfd 	bl	8000ccc <__aeabi_dcmplt>
 80080d2:	b9c8      	cbnz	r0, 8008108 <_strtod_l+0xa58>
 80080d4:	4630      	mov	r0, r6
 80080d6:	4639      	mov	r1, r7
 80080d8:	2200      	movs	r2, #0
 80080da:	4b3e      	ldr	r3, [pc, #248]	; (80081d4 <_strtod_l+0xb24>)
 80080dc:	f7f8 fb84 	bl	80007e8 <__aeabi_dmul>
 80080e0:	4606      	mov	r6, r0
 80080e2:	460f      	mov	r7, r1
 80080e4:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80080e8:	9618      	str	r6, [sp, #96]	; 0x60
 80080ea:	9319      	str	r3, [sp, #100]	; 0x64
 80080ec:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 80080f0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80080f4:	e79c      	b.n	8008030 <_strtod_l+0x980>
 80080f6:	f1ba 0f01 	cmp.w	sl, #1
 80080fa:	d102      	bne.n	8008102 <_strtod_l+0xa52>
 80080fc:	2d00      	cmp	r5, #0
 80080fe:	f43f ad8e 	beq.w	8007c1e <_strtod_l+0x56e>
 8008102:	2200      	movs	r2, #0
 8008104:	4b34      	ldr	r3, [pc, #208]	; (80081d8 <_strtod_l+0xb28>)
 8008106:	e78f      	b.n	8008028 <_strtod_l+0x978>
 8008108:	2600      	movs	r6, #0
 800810a:	4f32      	ldr	r7, [pc, #200]	; (80081d4 <_strtod_l+0xb24>)
 800810c:	e7ea      	b.n	80080e4 <_strtod_l+0xa34>
 800810e:	4b31      	ldr	r3, [pc, #196]	; (80081d4 <_strtod_l+0xb24>)
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	2200      	movs	r2, #0
 8008116:	f7f8 fb67 	bl	80007e8 <__aeabi_dmul>
 800811a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800811c:	4606      	mov	r6, r0
 800811e:	460f      	mov	r7, r1
 8008120:	b933      	cbnz	r3, 8008130 <_strtod_l+0xa80>
 8008122:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008126:	9010      	str	r0, [sp, #64]	; 0x40
 8008128:	9311      	str	r3, [sp, #68]	; 0x44
 800812a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800812e:	e7df      	b.n	80080f0 <_strtod_l+0xa40>
 8008130:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8008134:	e7f9      	b.n	800812a <_strtod_l+0xa7a>
 8008136:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800813a:	9b04      	ldr	r3, [sp, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d1ab      	bne.n	8008098 <_strtod_l+0x9e8>
 8008140:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008144:	0d1b      	lsrs	r3, r3, #20
 8008146:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008148:	051b      	lsls	r3, r3, #20
 800814a:	429a      	cmp	r2, r3
 800814c:	465d      	mov	r5, fp
 800814e:	d1a3      	bne.n	8008098 <_strtod_l+0x9e8>
 8008150:	4639      	mov	r1, r7
 8008152:	4630      	mov	r0, r6
 8008154:	f7f8 fdf8 	bl	8000d48 <__aeabi_d2iz>
 8008158:	f7f8 fadc 	bl	8000714 <__aeabi_i2d>
 800815c:	460b      	mov	r3, r1
 800815e:	4602      	mov	r2, r0
 8008160:	4639      	mov	r1, r7
 8008162:	4630      	mov	r0, r6
 8008164:	f7f8 f988 	bl	8000478 <__aeabi_dsub>
 8008168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800816a:	4606      	mov	r6, r0
 800816c:	460f      	mov	r7, r1
 800816e:	b933      	cbnz	r3, 800817e <_strtod_l+0xace>
 8008170:	f1ba 0f00 	cmp.w	sl, #0
 8008174:	d103      	bne.n	800817e <_strtod_l+0xace>
 8008176:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800817a:	2d00      	cmp	r5, #0
 800817c:	d06d      	beq.n	800825a <_strtod_l+0xbaa>
 800817e:	a30a      	add	r3, pc, #40	; (adr r3, 80081a8 <_strtod_l+0xaf8>)
 8008180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008184:	4630      	mov	r0, r6
 8008186:	4639      	mov	r1, r7
 8008188:	f7f8 fda0 	bl	8000ccc <__aeabi_dcmplt>
 800818c:	2800      	cmp	r0, #0
 800818e:	f47f acb8 	bne.w	8007b02 <_strtod_l+0x452>
 8008192:	a307      	add	r3, pc, #28	; (adr r3, 80081b0 <_strtod_l+0xb00>)
 8008194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008198:	4630      	mov	r0, r6
 800819a:	4639      	mov	r1, r7
 800819c:	f7f8 fdb4 	bl	8000d08 <__aeabi_dcmpgt>
 80081a0:	2800      	cmp	r0, #0
 80081a2:	f43f af79 	beq.w	8008098 <_strtod_l+0x9e8>
 80081a6:	e4ac      	b.n	8007b02 <_strtod_l+0x452>
 80081a8:	94a03595 	.word	0x94a03595
 80081ac:	3fdfffff 	.word	0x3fdfffff
 80081b0:	35afe535 	.word	0x35afe535
 80081b4:	3fe00000 	.word	0x3fe00000
 80081b8:	000fffff 	.word	0x000fffff
 80081bc:	7ff00000 	.word	0x7ff00000
 80081c0:	7fefffff 	.word	0x7fefffff
 80081c4:	39500000 	.word	0x39500000
 80081c8:	3ff00000 	.word	0x3ff00000
 80081cc:	7fe00000 	.word	0x7fe00000
 80081d0:	7c9fffff 	.word	0x7c9fffff
 80081d4:	3fe00000 	.word	0x3fe00000
 80081d8:	bff00000 	.word	0xbff00000
 80081dc:	9b04      	ldr	r3, [sp, #16]
 80081de:	b333      	cbz	r3, 800822e <_strtod_l+0xb7e>
 80081e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081e2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80081e6:	d822      	bhi.n	800822e <_strtod_l+0xb7e>
 80081e8:	a327      	add	r3, pc, #156	; (adr r3, 8008288 <_strtod_l+0xbd8>)
 80081ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ee:	4630      	mov	r0, r6
 80081f0:	4639      	mov	r1, r7
 80081f2:	f7f8 fd75 	bl	8000ce0 <__aeabi_dcmple>
 80081f6:	b1a0      	cbz	r0, 8008222 <_strtod_l+0xb72>
 80081f8:	4639      	mov	r1, r7
 80081fa:	4630      	mov	r0, r6
 80081fc:	f7f8 fdcc 	bl	8000d98 <__aeabi_d2uiz>
 8008200:	2800      	cmp	r0, #0
 8008202:	bf08      	it	eq
 8008204:	2001      	moveq	r0, #1
 8008206:	f7f8 fa75 	bl	80006f4 <__aeabi_ui2d>
 800820a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800820c:	4606      	mov	r6, r0
 800820e:	460f      	mov	r7, r1
 8008210:	bb03      	cbnz	r3, 8008254 <_strtod_l+0xba4>
 8008212:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008216:	9012      	str	r0, [sp, #72]	; 0x48
 8008218:	9313      	str	r3, [sp, #76]	; 0x4c
 800821a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800821e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8008222:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008224:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008226:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800822a:	1a9b      	subs	r3, r3, r2
 800822c:	930b      	str	r3, [sp, #44]	; 0x2c
 800822e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8008232:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8008236:	f001 fd33 	bl	8009ca0 <__ulp>
 800823a:	4650      	mov	r0, sl
 800823c:	ec53 2b10 	vmov	r2, r3, d0
 8008240:	4659      	mov	r1, fp
 8008242:	f7f8 fad1 	bl	80007e8 <__aeabi_dmul>
 8008246:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800824a:	f7f8 f917 	bl	800047c <__adddf3>
 800824e:	4682      	mov	sl, r0
 8008250:	468b      	mov	fp, r1
 8008252:	e772      	b.n	800813a <_strtod_l+0xa8a>
 8008254:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8008258:	e7df      	b.n	800821a <_strtod_l+0xb6a>
 800825a:	a30d      	add	r3, pc, #52	; (adr r3, 8008290 <_strtod_l+0xbe0>)
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f7f8 fd34 	bl	8000ccc <__aeabi_dcmplt>
 8008264:	e79c      	b.n	80081a0 <_strtod_l+0xaf0>
 8008266:	2300      	movs	r3, #0
 8008268:	930d      	str	r3, [sp, #52]	; 0x34
 800826a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800826c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800826e:	6013      	str	r3, [r2, #0]
 8008270:	f7ff ba61 	b.w	8007736 <_strtod_l+0x86>
 8008274:	2b65      	cmp	r3, #101	; 0x65
 8008276:	f04f 0200 	mov.w	r2, #0
 800827a:	f43f ab4e 	beq.w	800791a <_strtod_l+0x26a>
 800827e:	2101      	movs	r1, #1
 8008280:	4614      	mov	r4, r2
 8008282:	9104      	str	r1, [sp, #16]
 8008284:	f7ff bacb 	b.w	800781e <_strtod_l+0x16e>
 8008288:	ffc00000 	.word	0xffc00000
 800828c:	41dfffff 	.word	0x41dfffff
 8008290:	94a03595 	.word	0x94a03595
 8008294:	3fcfffff 	.word	0x3fcfffff

08008298 <_strtod_r>:
 8008298:	4b05      	ldr	r3, [pc, #20]	; (80082b0 <_strtod_r+0x18>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	b410      	push	{r4}
 800829e:	6a1b      	ldr	r3, [r3, #32]
 80082a0:	4c04      	ldr	r4, [pc, #16]	; (80082b4 <_strtod_r+0x1c>)
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bf08      	it	eq
 80082a6:	4623      	moveq	r3, r4
 80082a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082ac:	f7ff ba00 	b.w	80076b0 <_strtod_l>
 80082b0:	2000000c 	.word	0x2000000c
 80082b4:	20000070 	.word	0x20000070

080082b8 <_strtol_l.isra.0>:
 80082b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082bc:	4680      	mov	r8, r0
 80082be:	4689      	mov	r9, r1
 80082c0:	4692      	mov	sl, r2
 80082c2:	461e      	mov	r6, r3
 80082c4:	460f      	mov	r7, r1
 80082c6:	463d      	mov	r5, r7
 80082c8:	9808      	ldr	r0, [sp, #32]
 80082ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80082ce:	f001 f9ed 	bl	80096ac <__locale_ctype_ptr_l>
 80082d2:	4420      	add	r0, r4
 80082d4:	7843      	ldrb	r3, [r0, #1]
 80082d6:	f013 0308 	ands.w	r3, r3, #8
 80082da:	d132      	bne.n	8008342 <_strtol_l.isra.0+0x8a>
 80082dc:	2c2d      	cmp	r4, #45	; 0x2d
 80082de:	d132      	bne.n	8008346 <_strtol_l.isra.0+0x8e>
 80082e0:	787c      	ldrb	r4, [r7, #1]
 80082e2:	1cbd      	adds	r5, r7, #2
 80082e4:	2201      	movs	r2, #1
 80082e6:	2e00      	cmp	r6, #0
 80082e8:	d05d      	beq.n	80083a6 <_strtol_l.isra.0+0xee>
 80082ea:	2e10      	cmp	r6, #16
 80082ec:	d109      	bne.n	8008302 <_strtol_l.isra.0+0x4a>
 80082ee:	2c30      	cmp	r4, #48	; 0x30
 80082f0:	d107      	bne.n	8008302 <_strtol_l.isra.0+0x4a>
 80082f2:	782b      	ldrb	r3, [r5, #0]
 80082f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80082f8:	2b58      	cmp	r3, #88	; 0x58
 80082fa:	d14f      	bne.n	800839c <_strtol_l.isra.0+0xe4>
 80082fc:	786c      	ldrb	r4, [r5, #1]
 80082fe:	2610      	movs	r6, #16
 8008300:	3502      	adds	r5, #2
 8008302:	2a00      	cmp	r2, #0
 8008304:	bf14      	ite	ne
 8008306:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800830a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800830e:	2700      	movs	r7, #0
 8008310:	fbb1 fcf6 	udiv	ip, r1, r6
 8008314:	4638      	mov	r0, r7
 8008316:	fb06 1e1c 	mls	lr, r6, ip, r1
 800831a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800831e:	2b09      	cmp	r3, #9
 8008320:	d817      	bhi.n	8008352 <_strtol_l.isra.0+0x9a>
 8008322:	461c      	mov	r4, r3
 8008324:	42a6      	cmp	r6, r4
 8008326:	dd23      	ble.n	8008370 <_strtol_l.isra.0+0xb8>
 8008328:	1c7b      	adds	r3, r7, #1
 800832a:	d007      	beq.n	800833c <_strtol_l.isra.0+0x84>
 800832c:	4584      	cmp	ip, r0
 800832e:	d31c      	bcc.n	800836a <_strtol_l.isra.0+0xb2>
 8008330:	d101      	bne.n	8008336 <_strtol_l.isra.0+0x7e>
 8008332:	45a6      	cmp	lr, r4
 8008334:	db19      	blt.n	800836a <_strtol_l.isra.0+0xb2>
 8008336:	fb00 4006 	mla	r0, r0, r6, r4
 800833a:	2701      	movs	r7, #1
 800833c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008340:	e7eb      	b.n	800831a <_strtol_l.isra.0+0x62>
 8008342:	462f      	mov	r7, r5
 8008344:	e7bf      	b.n	80082c6 <_strtol_l.isra.0+0xe>
 8008346:	2c2b      	cmp	r4, #43	; 0x2b
 8008348:	bf04      	itt	eq
 800834a:	1cbd      	addeq	r5, r7, #2
 800834c:	787c      	ldrbeq	r4, [r7, #1]
 800834e:	461a      	mov	r2, r3
 8008350:	e7c9      	b.n	80082e6 <_strtol_l.isra.0+0x2e>
 8008352:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008356:	2b19      	cmp	r3, #25
 8008358:	d801      	bhi.n	800835e <_strtol_l.isra.0+0xa6>
 800835a:	3c37      	subs	r4, #55	; 0x37
 800835c:	e7e2      	b.n	8008324 <_strtol_l.isra.0+0x6c>
 800835e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8008362:	2b19      	cmp	r3, #25
 8008364:	d804      	bhi.n	8008370 <_strtol_l.isra.0+0xb8>
 8008366:	3c57      	subs	r4, #87	; 0x57
 8008368:	e7dc      	b.n	8008324 <_strtol_l.isra.0+0x6c>
 800836a:	f04f 37ff 	mov.w	r7, #4294967295
 800836e:	e7e5      	b.n	800833c <_strtol_l.isra.0+0x84>
 8008370:	1c7b      	adds	r3, r7, #1
 8008372:	d108      	bne.n	8008386 <_strtol_l.isra.0+0xce>
 8008374:	2322      	movs	r3, #34	; 0x22
 8008376:	f8c8 3000 	str.w	r3, [r8]
 800837a:	4608      	mov	r0, r1
 800837c:	f1ba 0f00 	cmp.w	sl, #0
 8008380:	d107      	bne.n	8008392 <_strtol_l.isra.0+0xda>
 8008382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008386:	b102      	cbz	r2, 800838a <_strtol_l.isra.0+0xd2>
 8008388:	4240      	negs	r0, r0
 800838a:	f1ba 0f00 	cmp.w	sl, #0
 800838e:	d0f8      	beq.n	8008382 <_strtol_l.isra.0+0xca>
 8008390:	b10f      	cbz	r7, 8008396 <_strtol_l.isra.0+0xde>
 8008392:	f105 39ff 	add.w	r9, r5, #4294967295
 8008396:	f8ca 9000 	str.w	r9, [sl]
 800839a:	e7f2      	b.n	8008382 <_strtol_l.isra.0+0xca>
 800839c:	2430      	movs	r4, #48	; 0x30
 800839e:	2e00      	cmp	r6, #0
 80083a0:	d1af      	bne.n	8008302 <_strtol_l.isra.0+0x4a>
 80083a2:	2608      	movs	r6, #8
 80083a4:	e7ad      	b.n	8008302 <_strtol_l.isra.0+0x4a>
 80083a6:	2c30      	cmp	r4, #48	; 0x30
 80083a8:	d0a3      	beq.n	80082f2 <_strtol_l.isra.0+0x3a>
 80083aa:	260a      	movs	r6, #10
 80083ac:	e7a9      	b.n	8008302 <_strtol_l.isra.0+0x4a>
	...

080083b0 <_strtol_r>:
 80083b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083b2:	4c06      	ldr	r4, [pc, #24]	; (80083cc <_strtol_r+0x1c>)
 80083b4:	4d06      	ldr	r5, [pc, #24]	; (80083d0 <_strtol_r+0x20>)
 80083b6:	6824      	ldr	r4, [r4, #0]
 80083b8:	6a24      	ldr	r4, [r4, #32]
 80083ba:	2c00      	cmp	r4, #0
 80083bc:	bf08      	it	eq
 80083be:	462c      	moveq	r4, r5
 80083c0:	9400      	str	r4, [sp, #0]
 80083c2:	f7ff ff79 	bl	80082b8 <_strtol_l.isra.0>
 80083c6:	b003      	add	sp, #12
 80083c8:	bd30      	pop	{r4, r5, pc}
 80083ca:	bf00      	nop
 80083cc:	2000000c 	.word	0x2000000c
 80083d0:	20000070 	.word	0x20000070

080083d4 <quorem>:
 80083d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d8:	6903      	ldr	r3, [r0, #16]
 80083da:	690c      	ldr	r4, [r1, #16]
 80083dc:	42a3      	cmp	r3, r4
 80083de:	4680      	mov	r8, r0
 80083e0:	f2c0 8082 	blt.w	80084e8 <quorem+0x114>
 80083e4:	3c01      	subs	r4, #1
 80083e6:	f101 0714 	add.w	r7, r1, #20
 80083ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80083ee:	f100 0614 	add.w	r6, r0, #20
 80083f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80083f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80083fa:	eb06 030c 	add.w	r3, r6, ip
 80083fe:	3501      	adds	r5, #1
 8008400:	eb07 090c 	add.w	r9, r7, ip
 8008404:	9301      	str	r3, [sp, #4]
 8008406:	fbb0 f5f5 	udiv	r5, r0, r5
 800840a:	b395      	cbz	r5, 8008472 <quorem+0x9e>
 800840c:	f04f 0a00 	mov.w	sl, #0
 8008410:	4638      	mov	r0, r7
 8008412:	46b6      	mov	lr, r6
 8008414:	46d3      	mov	fp, sl
 8008416:	f850 2b04 	ldr.w	r2, [r0], #4
 800841a:	b293      	uxth	r3, r2
 800841c:	fb05 a303 	mla	r3, r5, r3, sl
 8008420:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008424:	b29b      	uxth	r3, r3
 8008426:	ebab 0303 	sub.w	r3, fp, r3
 800842a:	0c12      	lsrs	r2, r2, #16
 800842c:	f8de b000 	ldr.w	fp, [lr]
 8008430:	fb05 a202 	mla	r2, r5, r2, sl
 8008434:	fa13 f38b 	uxtah	r3, r3, fp
 8008438:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800843c:	fa1f fb82 	uxth.w	fp, r2
 8008440:	f8de 2000 	ldr.w	r2, [lr]
 8008444:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008448:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800844c:	b29b      	uxth	r3, r3
 800844e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008452:	4581      	cmp	r9, r0
 8008454:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008458:	f84e 3b04 	str.w	r3, [lr], #4
 800845c:	d2db      	bcs.n	8008416 <quorem+0x42>
 800845e:	f856 300c 	ldr.w	r3, [r6, ip]
 8008462:	b933      	cbnz	r3, 8008472 <quorem+0x9e>
 8008464:	9b01      	ldr	r3, [sp, #4]
 8008466:	3b04      	subs	r3, #4
 8008468:	429e      	cmp	r6, r3
 800846a:	461a      	mov	r2, r3
 800846c:	d330      	bcc.n	80084d0 <quorem+0xfc>
 800846e:	f8c8 4010 	str.w	r4, [r8, #16]
 8008472:	4640      	mov	r0, r8
 8008474:	f001 fb9c 	bl	8009bb0 <__mcmp>
 8008478:	2800      	cmp	r0, #0
 800847a:	db25      	blt.n	80084c8 <quorem+0xf4>
 800847c:	3501      	adds	r5, #1
 800847e:	4630      	mov	r0, r6
 8008480:	f04f 0c00 	mov.w	ip, #0
 8008484:	f857 2b04 	ldr.w	r2, [r7], #4
 8008488:	f8d0 e000 	ldr.w	lr, [r0]
 800848c:	b293      	uxth	r3, r2
 800848e:	ebac 0303 	sub.w	r3, ip, r3
 8008492:	0c12      	lsrs	r2, r2, #16
 8008494:	fa13 f38e 	uxtah	r3, r3, lr
 8008498:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800849c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084a6:	45b9      	cmp	r9, r7
 80084a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80084ac:	f840 3b04 	str.w	r3, [r0], #4
 80084b0:	d2e8      	bcs.n	8008484 <quorem+0xb0>
 80084b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80084b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80084ba:	b92a      	cbnz	r2, 80084c8 <quorem+0xf4>
 80084bc:	3b04      	subs	r3, #4
 80084be:	429e      	cmp	r6, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	d30b      	bcc.n	80084dc <quorem+0x108>
 80084c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80084c8:	4628      	mov	r0, r5
 80084ca:	b003      	add	sp, #12
 80084cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d0:	6812      	ldr	r2, [r2, #0]
 80084d2:	3b04      	subs	r3, #4
 80084d4:	2a00      	cmp	r2, #0
 80084d6:	d1ca      	bne.n	800846e <quorem+0x9a>
 80084d8:	3c01      	subs	r4, #1
 80084da:	e7c5      	b.n	8008468 <quorem+0x94>
 80084dc:	6812      	ldr	r2, [r2, #0]
 80084de:	3b04      	subs	r3, #4
 80084e0:	2a00      	cmp	r2, #0
 80084e2:	d1ef      	bne.n	80084c4 <quorem+0xf0>
 80084e4:	3c01      	subs	r4, #1
 80084e6:	e7ea      	b.n	80084be <quorem+0xea>
 80084e8:	2000      	movs	r0, #0
 80084ea:	e7ee      	b.n	80084ca <quorem+0xf6>
 80084ec:	0000      	movs	r0, r0
	...

080084f0 <_dtoa_r>:
 80084f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084f4:	ec57 6b10 	vmov	r6, r7, d0
 80084f8:	b097      	sub	sp, #92	; 0x5c
 80084fa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084fc:	9106      	str	r1, [sp, #24]
 80084fe:	4604      	mov	r4, r0
 8008500:	920b      	str	r2, [sp, #44]	; 0x2c
 8008502:	9312      	str	r3, [sp, #72]	; 0x48
 8008504:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008508:	e9cd 6700 	strd	r6, r7, [sp]
 800850c:	b93d      	cbnz	r5, 800851e <_dtoa_r+0x2e>
 800850e:	2010      	movs	r0, #16
 8008510:	f001 f8e0 	bl	80096d4 <malloc>
 8008514:	6260      	str	r0, [r4, #36]	; 0x24
 8008516:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800851a:	6005      	str	r5, [r0, #0]
 800851c:	60c5      	str	r5, [r0, #12]
 800851e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008520:	6819      	ldr	r1, [r3, #0]
 8008522:	b151      	cbz	r1, 800853a <_dtoa_r+0x4a>
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	604a      	str	r2, [r1, #4]
 8008528:	2301      	movs	r3, #1
 800852a:	4093      	lsls	r3, r2
 800852c:	608b      	str	r3, [r1, #8]
 800852e:	4620      	mov	r0, r4
 8008530:	f001 f91e 	bl	8009770 <_Bfree>
 8008534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008536:	2200      	movs	r2, #0
 8008538:	601a      	str	r2, [r3, #0]
 800853a:	1e3b      	subs	r3, r7, #0
 800853c:	bfbb      	ittet	lt
 800853e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008542:	9301      	strlt	r3, [sp, #4]
 8008544:	2300      	movge	r3, #0
 8008546:	2201      	movlt	r2, #1
 8008548:	bfac      	ite	ge
 800854a:	f8c8 3000 	strge.w	r3, [r8]
 800854e:	f8c8 2000 	strlt.w	r2, [r8]
 8008552:	4baf      	ldr	r3, [pc, #700]	; (8008810 <_dtoa_r+0x320>)
 8008554:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008558:	ea33 0308 	bics.w	r3, r3, r8
 800855c:	d114      	bne.n	8008588 <_dtoa_r+0x98>
 800855e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008560:	f242 730f 	movw	r3, #9999	; 0x270f
 8008564:	6013      	str	r3, [r2, #0]
 8008566:	9b00      	ldr	r3, [sp, #0]
 8008568:	b923      	cbnz	r3, 8008574 <_dtoa_r+0x84>
 800856a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800856e:	2800      	cmp	r0, #0
 8008570:	f000 8542 	beq.w	8008ff8 <_dtoa_r+0xb08>
 8008574:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008576:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008824 <_dtoa_r+0x334>
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 8544 	beq.w	8009008 <_dtoa_r+0xb18>
 8008580:	f10b 0303 	add.w	r3, fp, #3
 8008584:	f000 bd3e 	b.w	8009004 <_dtoa_r+0xb14>
 8008588:	e9dd 6700 	ldrd	r6, r7, [sp]
 800858c:	2200      	movs	r2, #0
 800858e:	2300      	movs	r3, #0
 8008590:	4630      	mov	r0, r6
 8008592:	4639      	mov	r1, r7
 8008594:	f7f8 fb90 	bl	8000cb8 <__aeabi_dcmpeq>
 8008598:	4681      	mov	r9, r0
 800859a:	b168      	cbz	r0, 80085b8 <_dtoa_r+0xc8>
 800859c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800859e:	2301      	movs	r3, #1
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	f000 8524 	beq.w	8008ff2 <_dtoa_r+0xb02>
 80085aa:	4b9a      	ldr	r3, [pc, #616]	; (8008814 <_dtoa_r+0x324>)
 80085ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80085ae:	f103 3bff 	add.w	fp, r3, #4294967295
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	f000 bd28 	b.w	8009008 <_dtoa_r+0xb18>
 80085b8:	aa14      	add	r2, sp, #80	; 0x50
 80085ba:	a915      	add	r1, sp, #84	; 0x54
 80085bc:	ec47 6b10 	vmov	d0, r6, r7
 80085c0:	4620      	mov	r0, r4
 80085c2:	f001 fbe3 	bl	8009d8c <__d2b>
 80085c6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80085ca:	9004      	str	r0, [sp, #16]
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	d07c      	beq.n	80086ca <_dtoa_r+0x1da>
 80085d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80085d4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80085d8:	46b2      	mov	sl, r6
 80085da:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80085de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085e2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80085e6:	2200      	movs	r2, #0
 80085e8:	4b8b      	ldr	r3, [pc, #556]	; (8008818 <_dtoa_r+0x328>)
 80085ea:	4650      	mov	r0, sl
 80085ec:	4659      	mov	r1, fp
 80085ee:	f7f7 ff43 	bl	8000478 <__aeabi_dsub>
 80085f2:	a381      	add	r3, pc, #516	; (adr r3, 80087f8 <_dtoa_r+0x308>)
 80085f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f8:	f7f8 f8f6 	bl	80007e8 <__aeabi_dmul>
 80085fc:	a380      	add	r3, pc, #512	; (adr r3, 8008800 <_dtoa_r+0x310>)
 80085fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008602:	f7f7 ff3b 	bl	800047c <__adddf3>
 8008606:	4606      	mov	r6, r0
 8008608:	4628      	mov	r0, r5
 800860a:	460f      	mov	r7, r1
 800860c:	f7f8 f882 	bl	8000714 <__aeabi_i2d>
 8008610:	a37d      	add	r3, pc, #500	; (adr r3, 8008808 <_dtoa_r+0x318>)
 8008612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008616:	f7f8 f8e7 	bl	80007e8 <__aeabi_dmul>
 800861a:	4602      	mov	r2, r0
 800861c:	460b      	mov	r3, r1
 800861e:	4630      	mov	r0, r6
 8008620:	4639      	mov	r1, r7
 8008622:	f7f7 ff2b 	bl	800047c <__adddf3>
 8008626:	4606      	mov	r6, r0
 8008628:	460f      	mov	r7, r1
 800862a:	f7f8 fb8d 	bl	8000d48 <__aeabi_d2iz>
 800862e:	2200      	movs	r2, #0
 8008630:	4682      	mov	sl, r0
 8008632:	2300      	movs	r3, #0
 8008634:	4630      	mov	r0, r6
 8008636:	4639      	mov	r1, r7
 8008638:	f7f8 fb48 	bl	8000ccc <__aeabi_dcmplt>
 800863c:	b148      	cbz	r0, 8008652 <_dtoa_r+0x162>
 800863e:	4650      	mov	r0, sl
 8008640:	f7f8 f868 	bl	8000714 <__aeabi_i2d>
 8008644:	4632      	mov	r2, r6
 8008646:	463b      	mov	r3, r7
 8008648:	f7f8 fb36 	bl	8000cb8 <__aeabi_dcmpeq>
 800864c:	b908      	cbnz	r0, 8008652 <_dtoa_r+0x162>
 800864e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008652:	f1ba 0f16 	cmp.w	sl, #22
 8008656:	d859      	bhi.n	800870c <_dtoa_r+0x21c>
 8008658:	4970      	ldr	r1, [pc, #448]	; (800881c <_dtoa_r+0x32c>)
 800865a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800865e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008662:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008666:	f7f8 fb4f 	bl	8000d08 <__aeabi_dcmpgt>
 800866a:	2800      	cmp	r0, #0
 800866c:	d050      	beq.n	8008710 <_dtoa_r+0x220>
 800866e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008672:	2300      	movs	r3, #0
 8008674:	930f      	str	r3, [sp, #60]	; 0x3c
 8008676:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008678:	1b5d      	subs	r5, r3, r5
 800867a:	f1b5 0801 	subs.w	r8, r5, #1
 800867e:	bf49      	itett	mi
 8008680:	f1c5 0301 	rsbmi	r3, r5, #1
 8008684:	2300      	movpl	r3, #0
 8008686:	9305      	strmi	r3, [sp, #20]
 8008688:	f04f 0800 	movmi.w	r8, #0
 800868c:	bf58      	it	pl
 800868e:	9305      	strpl	r3, [sp, #20]
 8008690:	f1ba 0f00 	cmp.w	sl, #0
 8008694:	db3e      	blt.n	8008714 <_dtoa_r+0x224>
 8008696:	2300      	movs	r3, #0
 8008698:	44d0      	add	r8, sl
 800869a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800869e:	9307      	str	r3, [sp, #28]
 80086a0:	9b06      	ldr	r3, [sp, #24]
 80086a2:	2b09      	cmp	r3, #9
 80086a4:	f200 8090 	bhi.w	80087c8 <_dtoa_r+0x2d8>
 80086a8:	2b05      	cmp	r3, #5
 80086aa:	bfc4      	itt	gt
 80086ac:	3b04      	subgt	r3, #4
 80086ae:	9306      	strgt	r3, [sp, #24]
 80086b0:	9b06      	ldr	r3, [sp, #24]
 80086b2:	f1a3 0302 	sub.w	r3, r3, #2
 80086b6:	bfcc      	ite	gt
 80086b8:	2500      	movgt	r5, #0
 80086ba:	2501      	movle	r5, #1
 80086bc:	2b03      	cmp	r3, #3
 80086be:	f200 808f 	bhi.w	80087e0 <_dtoa_r+0x2f0>
 80086c2:	e8df f003 	tbb	[pc, r3]
 80086c6:	7f7d      	.short	0x7f7d
 80086c8:	7131      	.short	0x7131
 80086ca:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80086ce:	441d      	add	r5, r3
 80086d0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80086d4:	2820      	cmp	r0, #32
 80086d6:	dd13      	ble.n	8008700 <_dtoa_r+0x210>
 80086d8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80086dc:	9b00      	ldr	r3, [sp, #0]
 80086de:	fa08 f800 	lsl.w	r8, r8, r0
 80086e2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80086e6:	fa23 f000 	lsr.w	r0, r3, r0
 80086ea:	ea48 0000 	orr.w	r0, r8, r0
 80086ee:	f7f8 f801 	bl	80006f4 <__aeabi_ui2d>
 80086f2:	2301      	movs	r3, #1
 80086f4:	4682      	mov	sl, r0
 80086f6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80086fa:	3d01      	subs	r5, #1
 80086fc:	9313      	str	r3, [sp, #76]	; 0x4c
 80086fe:	e772      	b.n	80085e6 <_dtoa_r+0xf6>
 8008700:	9b00      	ldr	r3, [sp, #0]
 8008702:	f1c0 0020 	rsb	r0, r0, #32
 8008706:	fa03 f000 	lsl.w	r0, r3, r0
 800870a:	e7f0      	b.n	80086ee <_dtoa_r+0x1fe>
 800870c:	2301      	movs	r3, #1
 800870e:	e7b1      	b.n	8008674 <_dtoa_r+0x184>
 8008710:	900f      	str	r0, [sp, #60]	; 0x3c
 8008712:	e7b0      	b.n	8008676 <_dtoa_r+0x186>
 8008714:	9b05      	ldr	r3, [sp, #20]
 8008716:	eba3 030a 	sub.w	r3, r3, sl
 800871a:	9305      	str	r3, [sp, #20]
 800871c:	f1ca 0300 	rsb	r3, sl, #0
 8008720:	9307      	str	r3, [sp, #28]
 8008722:	2300      	movs	r3, #0
 8008724:	930e      	str	r3, [sp, #56]	; 0x38
 8008726:	e7bb      	b.n	80086a0 <_dtoa_r+0x1b0>
 8008728:	2301      	movs	r3, #1
 800872a:	930a      	str	r3, [sp, #40]	; 0x28
 800872c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800872e:	2b00      	cmp	r3, #0
 8008730:	dd59      	ble.n	80087e6 <_dtoa_r+0x2f6>
 8008732:	9302      	str	r3, [sp, #8]
 8008734:	4699      	mov	r9, r3
 8008736:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008738:	2200      	movs	r2, #0
 800873a:	6072      	str	r2, [r6, #4]
 800873c:	2204      	movs	r2, #4
 800873e:	f102 0014 	add.w	r0, r2, #20
 8008742:	4298      	cmp	r0, r3
 8008744:	6871      	ldr	r1, [r6, #4]
 8008746:	d953      	bls.n	80087f0 <_dtoa_r+0x300>
 8008748:	4620      	mov	r0, r4
 800874a:	f000 ffdd 	bl	8009708 <_Balloc>
 800874e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008750:	6030      	str	r0, [r6, #0]
 8008752:	f1b9 0f0e 	cmp.w	r9, #14
 8008756:	f8d3 b000 	ldr.w	fp, [r3]
 800875a:	f200 80e6 	bhi.w	800892a <_dtoa_r+0x43a>
 800875e:	2d00      	cmp	r5, #0
 8008760:	f000 80e3 	beq.w	800892a <_dtoa_r+0x43a>
 8008764:	ed9d 7b00 	vldr	d7, [sp]
 8008768:	f1ba 0f00 	cmp.w	sl, #0
 800876c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008770:	dd74      	ble.n	800885c <_dtoa_r+0x36c>
 8008772:	4a2a      	ldr	r2, [pc, #168]	; (800881c <_dtoa_r+0x32c>)
 8008774:	f00a 030f 	and.w	r3, sl, #15
 8008778:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800877c:	ed93 7b00 	vldr	d7, [r3]
 8008780:	ea4f 162a 	mov.w	r6, sl, asr #4
 8008784:	06f0      	lsls	r0, r6, #27
 8008786:	ed8d 7b08 	vstr	d7, [sp, #32]
 800878a:	d565      	bpl.n	8008858 <_dtoa_r+0x368>
 800878c:	4b24      	ldr	r3, [pc, #144]	; (8008820 <_dtoa_r+0x330>)
 800878e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008792:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008796:	f7f8 f951 	bl	8000a3c <__aeabi_ddiv>
 800879a:	e9cd 0100 	strd	r0, r1, [sp]
 800879e:	f006 060f 	and.w	r6, r6, #15
 80087a2:	2503      	movs	r5, #3
 80087a4:	4f1e      	ldr	r7, [pc, #120]	; (8008820 <_dtoa_r+0x330>)
 80087a6:	e04c      	b.n	8008842 <_dtoa_r+0x352>
 80087a8:	2301      	movs	r3, #1
 80087aa:	930a      	str	r3, [sp, #40]	; 0x28
 80087ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80087ae:	4453      	add	r3, sl
 80087b0:	f103 0901 	add.w	r9, r3, #1
 80087b4:	9302      	str	r3, [sp, #8]
 80087b6:	464b      	mov	r3, r9
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	bfb8      	it	lt
 80087bc:	2301      	movlt	r3, #1
 80087be:	e7ba      	b.n	8008736 <_dtoa_r+0x246>
 80087c0:	2300      	movs	r3, #0
 80087c2:	e7b2      	b.n	800872a <_dtoa_r+0x23a>
 80087c4:	2300      	movs	r3, #0
 80087c6:	e7f0      	b.n	80087aa <_dtoa_r+0x2ba>
 80087c8:	2501      	movs	r5, #1
 80087ca:	2300      	movs	r3, #0
 80087cc:	9306      	str	r3, [sp, #24]
 80087ce:	950a      	str	r5, [sp, #40]	; 0x28
 80087d0:	f04f 33ff 	mov.w	r3, #4294967295
 80087d4:	9302      	str	r3, [sp, #8]
 80087d6:	4699      	mov	r9, r3
 80087d8:	2200      	movs	r2, #0
 80087da:	2312      	movs	r3, #18
 80087dc:	920b      	str	r2, [sp, #44]	; 0x2c
 80087de:	e7aa      	b.n	8008736 <_dtoa_r+0x246>
 80087e0:	2301      	movs	r3, #1
 80087e2:	930a      	str	r3, [sp, #40]	; 0x28
 80087e4:	e7f4      	b.n	80087d0 <_dtoa_r+0x2e0>
 80087e6:	2301      	movs	r3, #1
 80087e8:	9302      	str	r3, [sp, #8]
 80087ea:	4699      	mov	r9, r3
 80087ec:	461a      	mov	r2, r3
 80087ee:	e7f5      	b.n	80087dc <_dtoa_r+0x2ec>
 80087f0:	3101      	adds	r1, #1
 80087f2:	6071      	str	r1, [r6, #4]
 80087f4:	0052      	lsls	r2, r2, #1
 80087f6:	e7a2      	b.n	800873e <_dtoa_r+0x24e>
 80087f8:	636f4361 	.word	0x636f4361
 80087fc:	3fd287a7 	.word	0x3fd287a7
 8008800:	8b60c8b3 	.word	0x8b60c8b3
 8008804:	3fc68a28 	.word	0x3fc68a28
 8008808:	509f79fb 	.word	0x509f79fb
 800880c:	3fd34413 	.word	0x3fd34413
 8008810:	7ff00000 	.word	0x7ff00000
 8008814:	0800b315 	.word	0x0800b315
 8008818:	3ff80000 	.word	0x3ff80000
 800881c:	0800b3d0 	.word	0x0800b3d0
 8008820:	0800b3a8 	.word	0x0800b3a8
 8008824:	0800b399 	.word	0x0800b399
 8008828:	07f1      	lsls	r1, r6, #31
 800882a:	d508      	bpl.n	800883e <_dtoa_r+0x34e>
 800882c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008830:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008834:	f7f7 ffd8 	bl	80007e8 <__aeabi_dmul>
 8008838:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800883c:	3501      	adds	r5, #1
 800883e:	1076      	asrs	r6, r6, #1
 8008840:	3708      	adds	r7, #8
 8008842:	2e00      	cmp	r6, #0
 8008844:	d1f0      	bne.n	8008828 <_dtoa_r+0x338>
 8008846:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800884a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800884e:	f7f8 f8f5 	bl	8000a3c <__aeabi_ddiv>
 8008852:	e9cd 0100 	strd	r0, r1, [sp]
 8008856:	e01a      	b.n	800888e <_dtoa_r+0x39e>
 8008858:	2502      	movs	r5, #2
 800885a:	e7a3      	b.n	80087a4 <_dtoa_r+0x2b4>
 800885c:	f000 80a0 	beq.w	80089a0 <_dtoa_r+0x4b0>
 8008860:	f1ca 0600 	rsb	r6, sl, #0
 8008864:	4b9f      	ldr	r3, [pc, #636]	; (8008ae4 <_dtoa_r+0x5f4>)
 8008866:	4fa0      	ldr	r7, [pc, #640]	; (8008ae8 <_dtoa_r+0x5f8>)
 8008868:	f006 020f 	and.w	r2, r6, #15
 800886c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008874:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008878:	f7f7 ffb6 	bl	80007e8 <__aeabi_dmul>
 800887c:	e9cd 0100 	strd	r0, r1, [sp]
 8008880:	1136      	asrs	r6, r6, #4
 8008882:	2300      	movs	r3, #0
 8008884:	2502      	movs	r5, #2
 8008886:	2e00      	cmp	r6, #0
 8008888:	d17f      	bne.n	800898a <_dtoa_r+0x49a>
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1e1      	bne.n	8008852 <_dtoa_r+0x362>
 800888e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008890:	2b00      	cmp	r3, #0
 8008892:	f000 8087 	beq.w	80089a4 <_dtoa_r+0x4b4>
 8008896:	e9dd 6700 	ldrd	r6, r7, [sp]
 800889a:	2200      	movs	r2, #0
 800889c:	4b93      	ldr	r3, [pc, #588]	; (8008aec <_dtoa_r+0x5fc>)
 800889e:	4630      	mov	r0, r6
 80088a0:	4639      	mov	r1, r7
 80088a2:	f7f8 fa13 	bl	8000ccc <__aeabi_dcmplt>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	d07c      	beq.n	80089a4 <_dtoa_r+0x4b4>
 80088aa:	f1b9 0f00 	cmp.w	r9, #0
 80088ae:	d079      	beq.n	80089a4 <_dtoa_r+0x4b4>
 80088b0:	9b02      	ldr	r3, [sp, #8]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	dd35      	ble.n	8008922 <_dtoa_r+0x432>
 80088b6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80088ba:	9308      	str	r3, [sp, #32]
 80088bc:	4639      	mov	r1, r7
 80088be:	2200      	movs	r2, #0
 80088c0:	4b8b      	ldr	r3, [pc, #556]	; (8008af0 <_dtoa_r+0x600>)
 80088c2:	4630      	mov	r0, r6
 80088c4:	f7f7 ff90 	bl	80007e8 <__aeabi_dmul>
 80088c8:	e9cd 0100 	strd	r0, r1, [sp]
 80088cc:	9f02      	ldr	r7, [sp, #8]
 80088ce:	3501      	adds	r5, #1
 80088d0:	4628      	mov	r0, r5
 80088d2:	f7f7 ff1f 	bl	8000714 <__aeabi_i2d>
 80088d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088da:	f7f7 ff85 	bl	80007e8 <__aeabi_dmul>
 80088de:	2200      	movs	r2, #0
 80088e0:	4b84      	ldr	r3, [pc, #528]	; (8008af4 <_dtoa_r+0x604>)
 80088e2:	f7f7 fdcb 	bl	800047c <__adddf3>
 80088e6:	4605      	mov	r5, r0
 80088e8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80088ec:	2f00      	cmp	r7, #0
 80088ee:	d15d      	bne.n	80089ac <_dtoa_r+0x4bc>
 80088f0:	2200      	movs	r2, #0
 80088f2:	4b81      	ldr	r3, [pc, #516]	; (8008af8 <_dtoa_r+0x608>)
 80088f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80088f8:	f7f7 fdbe 	bl	8000478 <__aeabi_dsub>
 80088fc:	462a      	mov	r2, r5
 80088fe:	4633      	mov	r3, r6
 8008900:	e9cd 0100 	strd	r0, r1, [sp]
 8008904:	f7f8 fa00 	bl	8000d08 <__aeabi_dcmpgt>
 8008908:	2800      	cmp	r0, #0
 800890a:	f040 8288 	bne.w	8008e1e <_dtoa_r+0x92e>
 800890e:	462a      	mov	r2, r5
 8008910:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008914:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008918:	f7f8 f9d8 	bl	8000ccc <__aeabi_dcmplt>
 800891c:	2800      	cmp	r0, #0
 800891e:	f040 827c 	bne.w	8008e1a <_dtoa_r+0x92a>
 8008922:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008926:	e9cd 2300 	strd	r2, r3, [sp]
 800892a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800892c:	2b00      	cmp	r3, #0
 800892e:	f2c0 8150 	blt.w	8008bd2 <_dtoa_r+0x6e2>
 8008932:	f1ba 0f0e 	cmp.w	sl, #14
 8008936:	f300 814c 	bgt.w	8008bd2 <_dtoa_r+0x6e2>
 800893a:	4b6a      	ldr	r3, [pc, #424]	; (8008ae4 <_dtoa_r+0x5f4>)
 800893c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008940:	ed93 7b00 	vldr	d7, [r3]
 8008944:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008946:	2b00      	cmp	r3, #0
 8008948:	ed8d 7b02 	vstr	d7, [sp, #8]
 800894c:	f280 80d8 	bge.w	8008b00 <_dtoa_r+0x610>
 8008950:	f1b9 0f00 	cmp.w	r9, #0
 8008954:	f300 80d4 	bgt.w	8008b00 <_dtoa_r+0x610>
 8008958:	f040 825e 	bne.w	8008e18 <_dtoa_r+0x928>
 800895c:	2200      	movs	r2, #0
 800895e:	4b66      	ldr	r3, [pc, #408]	; (8008af8 <_dtoa_r+0x608>)
 8008960:	ec51 0b17 	vmov	r0, r1, d7
 8008964:	f7f7 ff40 	bl	80007e8 <__aeabi_dmul>
 8008968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800896c:	f7f8 f9c2 	bl	8000cf4 <__aeabi_dcmpge>
 8008970:	464f      	mov	r7, r9
 8008972:	464e      	mov	r6, r9
 8008974:	2800      	cmp	r0, #0
 8008976:	f040 8234 	bne.w	8008de2 <_dtoa_r+0x8f2>
 800897a:	2331      	movs	r3, #49	; 0x31
 800897c:	f10b 0501 	add.w	r5, fp, #1
 8008980:	f88b 3000 	strb.w	r3, [fp]
 8008984:	f10a 0a01 	add.w	sl, sl, #1
 8008988:	e22f      	b.n	8008dea <_dtoa_r+0x8fa>
 800898a:	07f2      	lsls	r2, r6, #31
 800898c:	d505      	bpl.n	800899a <_dtoa_r+0x4aa>
 800898e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008992:	f7f7 ff29 	bl	80007e8 <__aeabi_dmul>
 8008996:	3501      	adds	r5, #1
 8008998:	2301      	movs	r3, #1
 800899a:	1076      	asrs	r6, r6, #1
 800899c:	3708      	adds	r7, #8
 800899e:	e772      	b.n	8008886 <_dtoa_r+0x396>
 80089a0:	2502      	movs	r5, #2
 80089a2:	e774      	b.n	800888e <_dtoa_r+0x39e>
 80089a4:	f8cd a020 	str.w	sl, [sp, #32]
 80089a8:	464f      	mov	r7, r9
 80089aa:	e791      	b.n	80088d0 <_dtoa_r+0x3e0>
 80089ac:	4b4d      	ldr	r3, [pc, #308]	; (8008ae4 <_dtoa_r+0x5f4>)
 80089ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089b2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80089b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d047      	beq.n	8008a4c <_dtoa_r+0x55c>
 80089bc:	4602      	mov	r2, r0
 80089be:	460b      	mov	r3, r1
 80089c0:	2000      	movs	r0, #0
 80089c2:	494e      	ldr	r1, [pc, #312]	; (8008afc <_dtoa_r+0x60c>)
 80089c4:	f7f8 f83a 	bl	8000a3c <__aeabi_ddiv>
 80089c8:	462a      	mov	r2, r5
 80089ca:	4633      	mov	r3, r6
 80089cc:	f7f7 fd54 	bl	8000478 <__aeabi_dsub>
 80089d0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80089d4:	465d      	mov	r5, fp
 80089d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089da:	f7f8 f9b5 	bl	8000d48 <__aeabi_d2iz>
 80089de:	4606      	mov	r6, r0
 80089e0:	f7f7 fe98 	bl	8000714 <__aeabi_i2d>
 80089e4:	4602      	mov	r2, r0
 80089e6:	460b      	mov	r3, r1
 80089e8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80089ec:	f7f7 fd44 	bl	8000478 <__aeabi_dsub>
 80089f0:	3630      	adds	r6, #48	; 0x30
 80089f2:	f805 6b01 	strb.w	r6, [r5], #1
 80089f6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80089fa:	e9cd 0100 	strd	r0, r1, [sp]
 80089fe:	f7f8 f965 	bl	8000ccc <__aeabi_dcmplt>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d163      	bne.n	8008ace <_dtoa_r+0x5de>
 8008a06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a0a:	2000      	movs	r0, #0
 8008a0c:	4937      	ldr	r1, [pc, #220]	; (8008aec <_dtoa_r+0x5fc>)
 8008a0e:	f7f7 fd33 	bl	8000478 <__aeabi_dsub>
 8008a12:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008a16:	f7f8 f959 	bl	8000ccc <__aeabi_dcmplt>
 8008a1a:	2800      	cmp	r0, #0
 8008a1c:	f040 80b7 	bne.w	8008b8e <_dtoa_r+0x69e>
 8008a20:	eba5 030b 	sub.w	r3, r5, fp
 8008a24:	429f      	cmp	r7, r3
 8008a26:	f77f af7c 	ble.w	8008922 <_dtoa_r+0x432>
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	4b30      	ldr	r3, [pc, #192]	; (8008af0 <_dtoa_r+0x600>)
 8008a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a32:	f7f7 fed9 	bl	80007e8 <__aeabi_dmul>
 8008a36:	2200      	movs	r2, #0
 8008a38:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008a3c:	4b2c      	ldr	r3, [pc, #176]	; (8008af0 <_dtoa_r+0x600>)
 8008a3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a42:	f7f7 fed1 	bl	80007e8 <__aeabi_dmul>
 8008a46:	e9cd 0100 	strd	r0, r1, [sp]
 8008a4a:	e7c4      	b.n	80089d6 <_dtoa_r+0x4e6>
 8008a4c:	462a      	mov	r2, r5
 8008a4e:	4633      	mov	r3, r6
 8008a50:	f7f7 feca 	bl	80007e8 <__aeabi_dmul>
 8008a54:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008a58:	eb0b 0507 	add.w	r5, fp, r7
 8008a5c:	465e      	mov	r6, fp
 8008a5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a62:	f7f8 f971 	bl	8000d48 <__aeabi_d2iz>
 8008a66:	4607      	mov	r7, r0
 8008a68:	f7f7 fe54 	bl	8000714 <__aeabi_i2d>
 8008a6c:	3730      	adds	r7, #48	; 0x30
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a76:	f7f7 fcff 	bl	8000478 <__aeabi_dsub>
 8008a7a:	f806 7b01 	strb.w	r7, [r6], #1
 8008a7e:	42ae      	cmp	r6, r5
 8008a80:	e9cd 0100 	strd	r0, r1, [sp]
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	d126      	bne.n	8008ad8 <_dtoa_r+0x5e8>
 8008a8a:	4b1c      	ldr	r3, [pc, #112]	; (8008afc <_dtoa_r+0x60c>)
 8008a8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008a90:	f7f7 fcf4 	bl	800047c <__adddf3>
 8008a94:	4602      	mov	r2, r0
 8008a96:	460b      	mov	r3, r1
 8008a98:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a9c:	f7f8 f934 	bl	8000d08 <__aeabi_dcmpgt>
 8008aa0:	2800      	cmp	r0, #0
 8008aa2:	d174      	bne.n	8008b8e <_dtoa_r+0x69e>
 8008aa4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008aa8:	2000      	movs	r0, #0
 8008aaa:	4914      	ldr	r1, [pc, #80]	; (8008afc <_dtoa_r+0x60c>)
 8008aac:	f7f7 fce4 	bl	8000478 <__aeabi_dsub>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab8:	f7f8 f908 	bl	8000ccc <__aeabi_dcmplt>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	f43f af30 	beq.w	8008922 <_dtoa_r+0x432>
 8008ac2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008ac6:	2b30      	cmp	r3, #48	; 0x30
 8008ac8:	f105 32ff 	add.w	r2, r5, #4294967295
 8008acc:	d002      	beq.n	8008ad4 <_dtoa_r+0x5e4>
 8008ace:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008ad2:	e04a      	b.n	8008b6a <_dtoa_r+0x67a>
 8008ad4:	4615      	mov	r5, r2
 8008ad6:	e7f4      	b.n	8008ac2 <_dtoa_r+0x5d2>
 8008ad8:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <_dtoa_r+0x600>)
 8008ada:	f7f7 fe85 	bl	80007e8 <__aeabi_dmul>
 8008ade:	e9cd 0100 	strd	r0, r1, [sp]
 8008ae2:	e7bc      	b.n	8008a5e <_dtoa_r+0x56e>
 8008ae4:	0800b3d0 	.word	0x0800b3d0
 8008ae8:	0800b3a8 	.word	0x0800b3a8
 8008aec:	3ff00000 	.word	0x3ff00000
 8008af0:	40240000 	.word	0x40240000
 8008af4:	401c0000 	.word	0x401c0000
 8008af8:	40140000 	.word	0x40140000
 8008afc:	3fe00000 	.word	0x3fe00000
 8008b00:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008b04:	465d      	mov	r5, fp
 8008b06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	4639      	mov	r1, r7
 8008b0e:	f7f7 ff95 	bl	8000a3c <__aeabi_ddiv>
 8008b12:	f7f8 f919 	bl	8000d48 <__aeabi_d2iz>
 8008b16:	4680      	mov	r8, r0
 8008b18:	f7f7 fdfc 	bl	8000714 <__aeabi_i2d>
 8008b1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b20:	f7f7 fe62 	bl	80007e8 <__aeabi_dmul>
 8008b24:	4602      	mov	r2, r0
 8008b26:	460b      	mov	r3, r1
 8008b28:	4630      	mov	r0, r6
 8008b2a:	4639      	mov	r1, r7
 8008b2c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008b30:	f7f7 fca2 	bl	8000478 <__aeabi_dsub>
 8008b34:	f805 6b01 	strb.w	r6, [r5], #1
 8008b38:	eba5 060b 	sub.w	r6, r5, fp
 8008b3c:	45b1      	cmp	r9, r6
 8008b3e:	4602      	mov	r2, r0
 8008b40:	460b      	mov	r3, r1
 8008b42:	d139      	bne.n	8008bb8 <_dtoa_r+0x6c8>
 8008b44:	f7f7 fc9a 	bl	800047c <__adddf3>
 8008b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b4c:	4606      	mov	r6, r0
 8008b4e:	460f      	mov	r7, r1
 8008b50:	f7f8 f8da 	bl	8000d08 <__aeabi_dcmpgt>
 8008b54:	b9c8      	cbnz	r0, 8008b8a <_dtoa_r+0x69a>
 8008b56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b5a:	4630      	mov	r0, r6
 8008b5c:	4639      	mov	r1, r7
 8008b5e:	f7f8 f8ab 	bl	8000cb8 <__aeabi_dcmpeq>
 8008b62:	b110      	cbz	r0, 8008b6a <_dtoa_r+0x67a>
 8008b64:	f018 0f01 	tst.w	r8, #1
 8008b68:	d10f      	bne.n	8008b8a <_dtoa_r+0x69a>
 8008b6a:	9904      	ldr	r1, [sp, #16]
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	f000 fdff 	bl	8009770 <_Bfree>
 8008b72:	2300      	movs	r3, #0
 8008b74:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b76:	702b      	strb	r3, [r5, #0]
 8008b78:	f10a 0301 	add.w	r3, sl, #1
 8008b7c:	6013      	str	r3, [r2, #0]
 8008b7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	f000 8241 	beq.w	8009008 <_dtoa_r+0xb18>
 8008b86:	601d      	str	r5, [r3, #0]
 8008b88:	e23e      	b.n	8009008 <_dtoa_r+0xb18>
 8008b8a:	f8cd a020 	str.w	sl, [sp, #32]
 8008b8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008b92:	2a39      	cmp	r2, #57	; 0x39
 8008b94:	f105 33ff 	add.w	r3, r5, #4294967295
 8008b98:	d108      	bne.n	8008bac <_dtoa_r+0x6bc>
 8008b9a:	459b      	cmp	fp, r3
 8008b9c:	d10a      	bne.n	8008bb4 <_dtoa_r+0x6c4>
 8008b9e:	9b08      	ldr	r3, [sp, #32]
 8008ba0:	3301      	adds	r3, #1
 8008ba2:	9308      	str	r3, [sp, #32]
 8008ba4:	2330      	movs	r3, #48	; 0x30
 8008ba6:	f88b 3000 	strb.w	r3, [fp]
 8008baa:	465b      	mov	r3, fp
 8008bac:	781a      	ldrb	r2, [r3, #0]
 8008bae:	3201      	adds	r2, #1
 8008bb0:	701a      	strb	r2, [r3, #0]
 8008bb2:	e78c      	b.n	8008ace <_dtoa_r+0x5de>
 8008bb4:	461d      	mov	r5, r3
 8008bb6:	e7ea      	b.n	8008b8e <_dtoa_r+0x69e>
 8008bb8:	2200      	movs	r2, #0
 8008bba:	4b9b      	ldr	r3, [pc, #620]	; (8008e28 <_dtoa_r+0x938>)
 8008bbc:	f7f7 fe14 	bl	80007e8 <__aeabi_dmul>
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	4606      	mov	r6, r0
 8008bc6:	460f      	mov	r7, r1
 8008bc8:	f7f8 f876 	bl	8000cb8 <__aeabi_dcmpeq>
 8008bcc:	2800      	cmp	r0, #0
 8008bce:	d09a      	beq.n	8008b06 <_dtoa_r+0x616>
 8008bd0:	e7cb      	b.n	8008b6a <_dtoa_r+0x67a>
 8008bd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bd4:	2a00      	cmp	r2, #0
 8008bd6:	f000 808b 	beq.w	8008cf0 <_dtoa_r+0x800>
 8008bda:	9a06      	ldr	r2, [sp, #24]
 8008bdc:	2a01      	cmp	r2, #1
 8008bde:	dc6e      	bgt.n	8008cbe <_dtoa_r+0x7ce>
 8008be0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008be2:	2a00      	cmp	r2, #0
 8008be4:	d067      	beq.n	8008cb6 <_dtoa_r+0x7c6>
 8008be6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bea:	9f07      	ldr	r7, [sp, #28]
 8008bec:	9d05      	ldr	r5, [sp, #20]
 8008bee:	9a05      	ldr	r2, [sp, #20]
 8008bf0:	2101      	movs	r1, #1
 8008bf2:	441a      	add	r2, r3
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	9205      	str	r2, [sp, #20]
 8008bf8:	4498      	add	r8, r3
 8008bfa:	f000 fe97 	bl	800992c <__i2b>
 8008bfe:	4606      	mov	r6, r0
 8008c00:	2d00      	cmp	r5, #0
 8008c02:	dd0c      	ble.n	8008c1e <_dtoa_r+0x72e>
 8008c04:	f1b8 0f00 	cmp.w	r8, #0
 8008c08:	dd09      	ble.n	8008c1e <_dtoa_r+0x72e>
 8008c0a:	4545      	cmp	r5, r8
 8008c0c:	9a05      	ldr	r2, [sp, #20]
 8008c0e:	462b      	mov	r3, r5
 8008c10:	bfa8      	it	ge
 8008c12:	4643      	movge	r3, r8
 8008c14:	1ad2      	subs	r2, r2, r3
 8008c16:	9205      	str	r2, [sp, #20]
 8008c18:	1aed      	subs	r5, r5, r3
 8008c1a:	eba8 0803 	sub.w	r8, r8, r3
 8008c1e:	9b07      	ldr	r3, [sp, #28]
 8008c20:	b1eb      	cbz	r3, 8008c5e <_dtoa_r+0x76e>
 8008c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d067      	beq.n	8008cf8 <_dtoa_r+0x808>
 8008c28:	b18f      	cbz	r7, 8008c4e <_dtoa_r+0x75e>
 8008c2a:	4631      	mov	r1, r6
 8008c2c:	463a      	mov	r2, r7
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 ff1c 	bl	8009a6c <__pow5mult>
 8008c34:	9a04      	ldr	r2, [sp, #16]
 8008c36:	4601      	mov	r1, r0
 8008c38:	4606      	mov	r6, r0
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fe7f 	bl	800993e <__multiply>
 8008c40:	9904      	ldr	r1, [sp, #16]
 8008c42:	9008      	str	r0, [sp, #32]
 8008c44:	4620      	mov	r0, r4
 8008c46:	f000 fd93 	bl	8009770 <_Bfree>
 8008c4a:	9b08      	ldr	r3, [sp, #32]
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	9b07      	ldr	r3, [sp, #28]
 8008c50:	1bda      	subs	r2, r3, r7
 8008c52:	d004      	beq.n	8008c5e <_dtoa_r+0x76e>
 8008c54:	9904      	ldr	r1, [sp, #16]
 8008c56:	4620      	mov	r0, r4
 8008c58:	f000 ff08 	bl	8009a6c <__pow5mult>
 8008c5c:	9004      	str	r0, [sp, #16]
 8008c5e:	2101      	movs	r1, #1
 8008c60:	4620      	mov	r0, r4
 8008c62:	f000 fe63 	bl	800992c <__i2b>
 8008c66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008c68:	4607      	mov	r7, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 81d0 	beq.w	8009010 <_dtoa_r+0xb20>
 8008c70:	461a      	mov	r2, r3
 8008c72:	4601      	mov	r1, r0
 8008c74:	4620      	mov	r0, r4
 8008c76:	f000 fef9 	bl	8009a6c <__pow5mult>
 8008c7a:	9b06      	ldr	r3, [sp, #24]
 8008c7c:	2b01      	cmp	r3, #1
 8008c7e:	4607      	mov	r7, r0
 8008c80:	dc40      	bgt.n	8008d04 <_dtoa_r+0x814>
 8008c82:	9b00      	ldr	r3, [sp, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d139      	bne.n	8008cfc <_dtoa_r+0x80c>
 8008c88:	9b01      	ldr	r3, [sp, #4]
 8008c8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d136      	bne.n	8008d00 <_dtoa_r+0x810>
 8008c92:	9b01      	ldr	r3, [sp, #4]
 8008c94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c98:	0d1b      	lsrs	r3, r3, #20
 8008c9a:	051b      	lsls	r3, r3, #20
 8008c9c:	b12b      	cbz	r3, 8008caa <_dtoa_r+0x7ba>
 8008c9e:	9b05      	ldr	r3, [sp, #20]
 8008ca0:	3301      	adds	r3, #1
 8008ca2:	9305      	str	r3, [sp, #20]
 8008ca4:	f108 0801 	add.w	r8, r8, #1
 8008ca8:	2301      	movs	r3, #1
 8008caa:	9307      	str	r3, [sp, #28]
 8008cac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d12a      	bne.n	8008d08 <_dtoa_r+0x818>
 8008cb2:	2001      	movs	r0, #1
 8008cb4:	e030      	b.n	8008d18 <_dtoa_r+0x828>
 8008cb6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008cb8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008cbc:	e795      	b.n	8008bea <_dtoa_r+0x6fa>
 8008cbe:	9b07      	ldr	r3, [sp, #28]
 8008cc0:	f109 37ff 	add.w	r7, r9, #4294967295
 8008cc4:	42bb      	cmp	r3, r7
 8008cc6:	bfbf      	itttt	lt
 8008cc8:	9b07      	ldrlt	r3, [sp, #28]
 8008cca:	9707      	strlt	r7, [sp, #28]
 8008ccc:	1afa      	sublt	r2, r7, r3
 8008cce:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008cd0:	bfbb      	ittet	lt
 8008cd2:	189b      	addlt	r3, r3, r2
 8008cd4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008cd6:	1bdf      	subge	r7, r3, r7
 8008cd8:	2700      	movlt	r7, #0
 8008cda:	f1b9 0f00 	cmp.w	r9, #0
 8008cde:	bfb5      	itete	lt
 8008ce0:	9b05      	ldrlt	r3, [sp, #20]
 8008ce2:	9d05      	ldrge	r5, [sp, #20]
 8008ce4:	eba3 0509 	sublt.w	r5, r3, r9
 8008ce8:	464b      	movge	r3, r9
 8008cea:	bfb8      	it	lt
 8008cec:	2300      	movlt	r3, #0
 8008cee:	e77e      	b.n	8008bee <_dtoa_r+0x6fe>
 8008cf0:	9f07      	ldr	r7, [sp, #28]
 8008cf2:	9d05      	ldr	r5, [sp, #20]
 8008cf4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008cf6:	e783      	b.n	8008c00 <_dtoa_r+0x710>
 8008cf8:	9a07      	ldr	r2, [sp, #28]
 8008cfa:	e7ab      	b.n	8008c54 <_dtoa_r+0x764>
 8008cfc:	2300      	movs	r3, #0
 8008cfe:	e7d4      	b.n	8008caa <_dtoa_r+0x7ba>
 8008d00:	9b00      	ldr	r3, [sp, #0]
 8008d02:	e7d2      	b.n	8008caa <_dtoa_r+0x7ba>
 8008d04:	2300      	movs	r3, #0
 8008d06:	9307      	str	r3, [sp, #28]
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8008d0e:	6918      	ldr	r0, [r3, #16]
 8008d10:	f000 fdbe 	bl	8009890 <__hi0bits>
 8008d14:	f1c0 0020 	rsb	r0, r0, #32
 8008d18:	4440      	add	r0, r8
 8008d1a:	f010 001f 	ands.w	r0, r0, #31
 8008d1e:	d047      	beq.n	8008db0 <_dtoa_r+0x8c0>
 8008d20:	f1c0 0320 	rsb	r3, r0, #32
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	dd3b      	ble.n	8008da0 <_dtoa_r+0x8b0>
 8008d28:	9b05      	ldr	r3, [sp, #20]
 8008d2a:	f1c0 001c 	rsb	r0, r0, #28
 8008d2e:	4403      	add	r3, r0
 8008d30:	9305      	str	r3, [sp, #20]
 8008d32:	4405      	add	r5, r0
 8008d34:	4480      	add	r8, r0
 8008d36:	9b05      	ldr	r3, [sp, #20]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	dd05      	ble.n	8008d48 <_dtoa_r+0x858>
 8008d3c:	461a      	mov	r2, r3
 8008d3e:	9904      	ldr	r1, [sp, #16]
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fee1 	bl	8009b08 <__lshift>
 8008d46:	9004      	str	r0, [sp, #16]
 8008d48:	f1b8 0f00 	cmp.w	r8, #0
 8008d4c:	dd05      	ble.n	8008d5a <_dtoa_r+0x86a>
 8008d4e:	4639      	mov	r1, r7
 8008d50:	4642      	mov	r2, r8
 8008d52:	4620      	mov	r0, r4
 8008d54:	f000 fed8 	bl	8009b08 <__lshift>
 8008d58:	4607      	mov	r7, r0
 8008d5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008d5c:	b353      	cbz	r3, 8008db4 <_dtoa_r+0x8c4>
 8008d5e:	4639      	mov	r1, r7
 8008d60:	9804      	ldr	r0, [sp, #16]
 8008d62:	f000 ff25 	bl	8009bb0 <__mcmp>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	da24      	bge.n	8008db4 <_dtoa_r+0x8c4>
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	220a      	movs	r2, #10
 8008d6e:	9904      	ldr	r1, [sp, #16]
 8008d70:	4620      	mov	r0, r4
 8008d72:	f000 fd14 	bl	800979e <__multadd>
 8008d76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008d78:	9004      	str	r0, [sp, #16]
 8008d7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 814d 	beq.w	800901e <_dtoa_r+0xb2e>
 8008d84:	2300      	movs	r3, #0
 8008d86:	4631      	mov	r1, r6
 8008d88:	220a      	movs	r2, #10
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 fd07 	bl	800979e <__multadd>
 8008d90:	9b02      	ldr	r3, [sp, #8]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	4606      	mov	r6, r0
 8008d96:	dc4f      	bgt.n	8008e38 <_dtoa_r+0x948>
 8008d98:	9b06      	ldr	r3, [sp, #24]
 8008d9a:	2b02      	cmp	r3, #2
 8008d9c:	dd4c      	ble.n	8008e38 <_dtoa_r+0x948>
 8008d9e:	e011      	b.n	8008dc4 <_dtoa_r+0x8d4>
 8008da0:	d0c9      	beq.n	8008d36 <_dtoa_r+0x846>
 8008da2:	9a05      	ldr	r2, [sp, #20]
 8008da4:	331c      	adds	r3, #28
 8008da6:	441a      	add	r2, r3
 8008da8:	9205      	str	r2, [sp, #20]
 8008daa:	441d      	add	r5, r3
 8008dac:	4498      	add	r8, r3
 8008dae:	e7c2      	b.n	8008d36 <_dtoa_r+0x846>
 8008db0:	4603      	mov	r3, r0
 8008db2:	e7f6      	b.n	8008da2 <_dtoa_r+0x8b2>
 8008db4:	f1b9 0f00 	cmp.w	r9, #0
 8008db8:	dc38      	bgt.n	8008e2c <_dtoa_r+0x93c>
 8008dba:	9b06      	ldr	r3, [sp, #24]
 8008dbc:	2b02      	cmp	r3, #2
 8008dbe:	dd35      	ble.n	8008e2c <_dtoa_r+0x93c>
 8008dc0:	f8cd 9008 	str.w	r9, [sp, #8]
 8008dc4:	9b02      	ldr	r3, [sp, #8]
 8008dc6:	b963      	cbnz	r3, 8008de2 <_dtoa_r+0x8f2>
 8008dc8:	4639      	mov	r1, r7
 8008dca:	2205      	movs	r2, #5
 8008dcc:	4620      	mov	r0, r4
 8008dce:	f000 fce6 	bl	800979e <__multadd>
 8008dd2:	4601      	mov	r1, r0
 8008dd4:	4607      	mov	r7, r0
 8008dd6:	9804      	ldr	r0, [sp, #16]
 8008dd8:	f000 feea 	bl	8009bb0 <__mcmp>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	f73f adcc 	bgt.w	800897a <_dtoa_r+0x48a>
 8008de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008de4:	465d      	mov	r5, fp
 8008de6:	ea6f 0a03 	mvn.w	sl, r3
 8008dea:	f04f 0900 	mov.w	r9, #0
 8008dee:	4639      	mov	r1, r7
 8008df0:	4620      	mov	r0, r4
 8008df2:	f000 fcbd 	bl	8009770 <_Bfree>
 8008df6:	2e00      	cmp	r6, #0
 8008df8:	f43f aeb7 	beq.w	8008b6a <_dtoa_r+0x67a>
 8008dfc:	f1b9 0f00 	cmp.w	r9, #0
 8008e00:	d005      	beq.n	8008e0e <_dtoa_r+0x91e>
 8008e02:	45b1      	cmp	r9, r6
 8008e04:	d003      	beq.n	8008e0e <_dtoa_r+0x91e>
 8008e06:	4649      	mov	r1, r9
 8008e08:	4620      	mov	r0, r4
 8008e0a:	f000 fcb1 	bl	8009770 <_Bfree>
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4620      	mov	r0, r4
 8008e12:	f000 fcad 	bl	8009770 <_Bfree>
 8008e16:	e6a8      	b.n	8008b6a <_dtoa_r+0x67a>
 8008e18:	2700      	movs	r7, #0
 8008e1a:	463e      	mov	r6, r7
 8008e1c:	e7e1      	b.n	8008de2 <_dtoa_r+0x8f2>
 8008e1e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008e22:	463e      	mov	r6, r7
 8008e24:	e5a9      	b.n	800897a <_dtoa_r+0x48a>
 8008e26:	bf00      	nop
 8008e28:	40240000 	.word	0x40240000
 8008e2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e2e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	f000 80fa 	beq.w	800902c <_dtoa_r+0xb3c>
 8008e38:	2d00      	cmp	r5, #0
 8008e3a:	dd05      	ble.n	8008e48 <_dtoa_r+0x958>
 8008e3c:	4631      	mov	r1, r6
 8008e3e:	462a      	mov	r2, r5
 8008e40:	4620      	mov	r0, r4
 8008e42:	f000 fe61 	bl	8009b08 <__lshift>
 8008e46:	4606      	mov	r6, r0
 8008e48:	9b07      	ldr	r3, [sp, #28]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d04c      	beq.n	8008ee8 <_dtoa_r+0x9f8>
 8008e4e:	6871      	ldr	r1, [r6, #4]
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 fc59 	bl	8009708 <_Balloc>
 8008e56:	6932      	ldr	r2, [r6, #16]
 8008e58:	3202      	adds	r2, #2
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	0092      	lsls	r2, r2, #2
 8008e5e:	f106 010c 	add.w	r1, r6, #12
 8008e62:	300c      	adds	r0, #12
 8008e64:	f7fd fd90 	bl	8006988 <memcpy>
 8008e68:	2201      	movs	r2, #1
 8008e6a:	4629      	mov	r1, r5
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f000 fe4b 	bl	8009b08 <__lshift>
 8008e72:	9b00      	ldr	r3, [sp, #0]
 8008e74:	f8cd b014 	str.w	fp, [sp, #20]
 8008e78:	f003 0301 	and.w	r3, r3, #1
 8008e7c:	46b1      	mov	r9, r6
 8008e7e:	9307      	str	r3, [sp, #28]
 8008e80:	4606      	mov	r6, r0
 8008e82:	4639      	mov	r1, r7
 8008e84:	9804      	ldr	r0, [sp, #16]
 8008e86:	f7ff faa5 	bl	80083d4 <quorem>
 8008e8a:	4649      	mov	r1, r9
 8008e8c:	4605      	mov	r5, r0
 8008e8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008e92:	9804      	ldr	r0, [sp, #16]
 8008e94:	f000 fe8c 	bl	8009bb0 <__mcmp>
 8008e98:	4632      	mov	r2, r6
 8008e9a:	9000      	str	r0, [sp, #0]
 8008e9c:	4639      	mov	r1, r7
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	f000 fea0 	bl	8009be4 <__mdiff>
 8008ea4:	68c3      	ldr	r3, [r0, #12]
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	bb03      	cbnz	r3, 8008eec <_dtoa_r+0x9fc>
 8008eaa:	4601      	mov	r1, r0
 8008eac:	9008      	str	r0, [sp, #32]
 8008eae:	9804      	ldr	r0, [sp, #16]
 8008eb0:	f000 fe7e 	bl	8009bb0 <__mcmp>
 8008eb4:	9a08      	ldr	r2, [sp, #32]
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	4611      	mov	r1, r2
 8008eba:	4620      	mov	r0, r4
 8008ebc:	9308      	str	r3, [sp, #32]
 8008ebe:	f000 fc57 	bl	8009770 <_Bfree>
 8008ec2:	9b08      	ldr	r3, [sp, #32]
 8008ec4:	b9a3      	cbnz	r3, 8008ef0 <_dtoa_r+0xa00>
 8008ec6:	9a06      	ldr	r2, [sp, #24]
 8008ec8:	b992      	cbnz	r2, 8008ef0 <_dtoa_r+0xa00>
 8008eca:	9a07      	ldr	r2, [sp, #28]
 8008ecc:	b982      	cbnz	r2, 8008ef0 <_dtoa_r+0xa00>
 8008ece:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008ed2:	d029      	beq.n	8008f28 <_dtoa_r+0xa38>
 8008ed4:	9b00      	ldr	r3, [sp, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	dd01      	ble.n	8008ede <_dtoa_r+0x9ee>
 8008eda:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008ede:	9b05      	ldr	r3, [sp, #20]
 8008ee0:	1c5d      	adds	r5, r3, #1
 8008ee2:	f883 8000 	strb.w	r8, [r3]
 8008ee6:	e782      	b.n	8008dee <_dtoa_r+0x8fe>
 8008ee8:	4630      	mov	r0, r6
 8008eea:	e7c2      	b.n	8008e72 <_dtoa_r+0x982>
 8008eec:	2301      	movs	r3, #1
 8008eee:	e7e3      	b.n	8008eb8 <_dtoa_r+0x9c8>
 8008ef0:	9a00      	ldr	r2, [sp, #0]
 8008ef2:	2a00      	cmp	r2, #0
 8008ef4:	db04      	blt.n	8008f00 <_dtoa_r+0xa10>
 8008ef6:	d125      	bne.n	8008f44 <_dtoa_r+0xa54>
 8008ef8:	9a06      	ldr	r2, [sp, #24]
 8008efa:	bb1a      	cbnz	r2, 8008f44 <_dtoa_r+0xa54>
 8008efc:	9a07      	ldr	r2, [sp, #28]
 8008efe:	bb0a      	cbnz	r2, 8008f44 <_dtoa_r+0xa54>
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	ddec      	ble.n	8008ede <_dtoa_r+0x9ee>
 8008f04:	2201      	movs	r2, #1
 8008f06:	9904      	ldr	r1, [sp, #16]
 8008f08:	4620      	mov	r0, r4
 8008f0a:	f000 fdfd 	bl	8009b08 <__lshift>
 8008f0e:	4639      	mov	r1, r7
 8008f10:	9004      	str	r0, [sp, #16]
 8008f12:	f000 fe4d 	bl	8009bb0 <__mcmp>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	dc03      	bgt.n	8008f22 <_dtoa_r+0xa32>
 8008f1a:	d1e0      	bne.n	8008ede <_dtoa_r+0x9ee>
 8008f1c:	f018 0f01 	tst.w	r8, #1
 8008f20:	d0dd      	beq.n	8008ede <_dtoa_r+0x9ee>
 8008f22:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f26:	d1d8      	bne.n	8008eda <_dtoa_r+0x9ea>
 8008f28:	9b05      	ldr	r3, [sp, #20]
 8008f2a:	9a05      	ldr	r2, [sp, #20]
 8008f2c:	1c5d      	adds	r5, r3, #1
 8008f2e:	2339      	movs	r3, #57	; 0x39
 8008f30:	7013      	strb	r3, [r2, #0]
 8008f32:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008f36:	2b39      	cmp	r3, #57	; 0x39
 8008f38:	f105 32ff 	add.w	r2, r5, #4294967295
 8008f3c:	d04f      	beq.n	8008fde <_dtoa_r+0xaee>
 8008f3e:	3301      	adds	r3, #1
 8008f40:	7013      	strb	r3, [r2, #0]
 8008f42:	e754      	b.n	8008dee <_dtoa_r+0x8fe>
 8008f44:	9a05      	ldr	r2, [sp, #20]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	f102 0501 	add.w	r5, r2, #1
 8008f4c:	dd06      	ble.n	8008f5c <_dtoa_r+0xa6c>
 8008f4e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008f52:	d0e9      	beq.n	8008f28 <_dtoa_r+0xa38>
 8008f54:	f108 0801 	add.w	r8, r8, #1
 8008f58:	9b05      	ldr	r3, [sp, #20]
 8008f5a:	e7c2      	b.n	8008ee2 <_dtoa_r+0x9f2>
 8008f5c:	9a02      	ldr	r2, [sp, #8]
 8008f5e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008f62:	eba5 030b 	sub.w	r3, r5, fp
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d021      	beq.n	8008fae <_dtoa_r+0xabe>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	220a      	movs	r2, #10
 8008f6e:	9904      	ldr	r1, [sp, #16]
 8008f70:	4620      	mov	r0, r4
 8008f72:	f000 fc14 	bl	800979e <__multadd>
 8008f76:	45b1      	cmp	r9, r6
 8008f78:	9004      	str	r0, [sp, #16]
 8008f7a:	f04f 0300 	mov.w	r3, #0
 8008f7e:	f04f 020a 	mov.w	r2, #10
 8008f82:	4649      	mov	r1, r9
 8008f84:	4620      	mov	r0, r4
 8008f86:	d105      	bne.n	8008f94 <_dtoa_r+0xaa4>
 8008f88:	f000 fc09 	bl	800979e <__multadd>
 8008f8c:	4681      	mov	r9, r0
 8008f8e:	4606      	mov	r6, r0
 8008f90:	9505      	str	r5, [sp, #20]
 8008f92:	e776      	b.n	8008e82 <_dtoa_r+0x992>
 8008f94:	f000 fc03 	bl	800979e <__multadd>
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4681      	mov	r9, r0
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	220a      	movs	r2, #10
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 fbfc 	bl	800979e <__multadd>
 8008fa6:	4606      	mov	r6, r0
 8008fa8:	e7f2      	b.n	8008f90 <_dtoa_r+0xaa0>
 8008faa:	f04f 0900 	mov.w	r9, #0
 8008fae:	2201      	movs	r2, #1
 8008fb0:	9904      	ldr	r1, [sp, #16]
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 fda8 	bl	8009b08 <__lshift>
 8008fb8:	4639      	mov	r1, r7
 8008fba:	9004      	str	r0, [sp, #16]
 8008fbc:	f000 fdf8 	bl	8009bb0 <__mcmp>
 8008fc0:	2800      	cmp	r0, #0
 8008fc2:	dcb6      	bgt.n	8008f32 <_dtoa_r+0xa42>
 8008fc4:	d102      	bne.n	8008fcc <_dtoa_r+0xadc>
 8008fc6:	f018 0f01 	tst.w	r8, #1
 8008fca:	d1b2      	bne.n	8008f32 <_dtoa_r+0xa42>
 8008fcc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fd0:	2b30      	cmp	r3, #48	; 0x30
 8008fd2:	f105 32ff 	add.w	r2, r5, #4294967295
 8008fd6:	f47f af0a 	bne.w	8008dee <_dtoa_r+0x8fe>
 8008fda:	4615      	mov	r5, r2
 8008fdc:	e7f6      	b.n	8008fcc <_dtoa_r+0xadc>
 8008fde:	4593      	cmp	fp, r2
 8008fe0:	d105      	bne.n	8008fee <_dtoa_r+0xafe>
 8008fe2:	2331      	movs	r3, #49	; 0x31
 8008fe4:	f10a 0a01 	add.w	sl, sl, #1
 8008fe8:	f88b 3000 	strb.w	r3, [fp]
 8008fec:	e6ff      	b.n	8008dee <_dtoa_r+0x8fe>
 8008fee:	4615      	mov	r5, r2
 8008ff0:	e79f      	b.n	8008f32 <_dtoa_r+0xa42>
 8008ff2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009058 <_dtoa_r+0xb68>
 8008ff6:	e007      	b.n	8009008 <_dtoa_r+0xb18>
 8008ff8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ffa:	f8df b060 	ldr.w	fp, [pc, #96]	; 800905c <_dtoa_r+0xb6c>
 8008ffe:	b11b      	cbz	r3, 8009008 <_dtoa_r+0xb18>
 8009000:	f10b 0308 	add.w	r3, fp, #8
 8009004:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009006:	6013      	str	r3, [r2, #0]
 8009008:	4658      	mov	r0, fp
 800900a:	b017      	add	sp, #92	; 0x5c
 800900c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009010:	9b06      	ldr	r3, [sp, #24]
 8009012:	2b01      	cmp	r3, #1
 8009014:	f77f ae35 	ble.w	8008c82 <_dtoa_r+0x792>
 8009018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800901a:	9307      	str	r3, [sp, #28]
 800901c:	e649      	b.n	8008cb2 <_dtoa_r+0x7c2>
 800901e:	9b02      	ldr	r3, [sp, #8]
 8009020:	2b00      	cmp	r3, #0
 8009022:	dc03      	bgt.n	800902c <_dtoa_r+0xb3c>
 8009024:	9b06      	ldr	r3, [sp, #24]
 8009026:	2b02      	cmp	r3, #2
 8009028:	f73f aecc 	bgt.w	8008dc4 <_dtoa_r+0x8d4>
 800902c:	465d      	mov	r5, fp
 800902e:	4639      	mov	r1, r7
 8009030:	9804      	ldr	r0, [sp, #16]
 8009032:	f7ff f9cf 	bl	80083d4 <quorem>
 8009036:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800903a:	f805 8b01 	strb.w	r8, [r5], #1
 800903e:	9a02      	ldr	r2, [sp, #8]
 8009040:	eba5 030b 	sub.w	r3, r5, fp
 8009044:	429a      	cmp	r2, r3
 8009046:	ddb0      	ble.n	8008faa <_dtoa_r+0xaba>
 8009048:	2300      	movs	r3, #0
 800904a:	220a      	movs	r2, #10
 800904c:	9904      	ldr	r1, [sp, #16]
 800904e:	4620      	mov	r0, r4
 8009050:	f000 fba5 	bl	800979e <__multadd>
 8009054:	9004      	str	r0, [sp, #16]
 8009056:	e7ea      	b.n	800902e <_dtoa_r+0xb3e>
 8009058:	0800b314 	.word	0x0800b314
 800905c:	0800b390 	.word	0x0800b390

08009060 <rshift>:
 8009060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009062:	6906      	ldr	r6, [r0, #16]
 8009064:	114b      	asrs	r3, r1, #5
 8009066:	429e      	cmp	r6, r3
 8009068:	f100 0414 	add.w	r4, r0, #20
 800906c:	dd30      	ble.n	80090d0 <rshift+0x70>
 800906e:	f011 011f 	ands.w	r1, r1, #31
 8009072:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8009076:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800907a:	d108      	bne.n	800908e <rshift+0x2e>
 800907c:	4621      	mov	r1, r4
 800907e:	42b2      	cmp	r2, r6
 8009080:	460b      	mov	r3, r1
 8009082:	d211      	bcs.n	80090a8 <rshift+0x48>
 8009084:	f852 3b04 	ldr.w	r3, [r2], #4
 8009088:	f841 3b04 	str.w	r3, [r1], #4
 800908c:	e7f7      	b.n	800907e <rshift+0x1e>
 800908e:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 8009092:	f1c1 0c20 	rsb	ip, r1, #32
 8009096:	40cd      	lsrs	r5, r1
 8009098:	3204      	adds	r2, #4
 800909a:	4623      	mov	r3, r4
 800909c:	42b2      	cmp	r2, r6
 800909e:	4617      	mov	r7, r2
 80090a0:	d30c      	bcc.n	80090bc <rshift+0x5c>
 80090a2:	601d      	str	r5, [r3, #0]
 80090a4:	b105      	cbz	r5, 80090a8 <rshift+0x48>
 80090a6:	3304      	adds	r3, #4
 80090a8:	1b1a      	subs	r2, r3, r4
 80090aa:	42a3      	cmp	r3, r4
 80090ac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80090b0:	bf08      	it	eq
 80090b2:	2300      	moveq	r3, #0
 80090b4:	6102      	str	r2, [r0, #16]
 80090b6:	bf08      	it	eq
 80090b8:	6143      	streq	r3, [r0, #20]
 80090ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090bc:	683f      	ldr	r7, [r7, #0]
 80090be:	fa07 f70c 	lsl.w	r7, r7, ip
 80090c2:	433d      	orrs	r5, r7
 80090c4:	f843 5b04 	str.w	r5, [r3], #4
 80090c8:	f852 5b04 	ldr.w	r5, [r2], #4
 80090cc:	40cd      	lsrs	r5, r1
 80090ce:	e7e5      	b.n	800909c <rshift+0x3c>
 80090d0:	4623      	mov	r3, r4
 80090d2:	e7e9      	b.n	80090a8 <rshift+0x48>

080090d4 <__hexdig_fun>:
 80090d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80090d8:	2b09      	cmp	r3, #9
 80090da:	d802      	bhi.n	80090e2 <__hexdig_fun+0xe>
 80090dc:	3820      	subs	r0, #32
 80090de:	b2c0      	uxtb	r0, r0
 80090e0:	4770      	bx	lr
 80090e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80090e6:	2b05      	cmp	r3, #5
 80090e8:	d801      	bhi.n	80090ee <__hexdig_fun+0x1a>
 80090ea:	3847      	subs	r0, #71	; 0x47
 80090ec:	e7f7      	b.n	80090de <__hexdig_fun+0xa>
 80090ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80090f2:	2b05      	cmp	r3, #5
 80090f4:	d801      	bhi.n	80090fa <__hexdig_fun+0x26>
 80090f6:	3827      	subs	r0, #39	; 0x27
 80090f8:	e7f1      	b.n	80090de <__hexdig_fun+0xa>
 80090fa:	2000      	movs	r0, #0
 80090fc:	4770      	bx	lr

080090fe <__gethex>:
 80090fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009102:	b08b      	sub	sp, #44	; 0x2c
 8009104:	468a      	mov	sl, r1
 8009106:	9002      	str	r0, [sp, #8]
 8009108:	9816      	ldr	r0, [sp, #88]	; 0x58
 800910a:	9306      	str	r3, [sp, #24]
 800910c:	4690      	mov	r8, r2
 800910e:	f000 fad0 	bl	80096b2 <__localeconv_l>
 8009112:	6803      	ldr	r3, [r0, #0]
 8009114:	9303      	str	r3, [sp, #12]
 8009116:	4618      	mov	r0, r3
 8009118:	f7f7 f94d 	bl	80003b6 <strlen>
 800911c:	9b03      	ldr	r3, [sp, #12]
 800911e:	9001      	str	r0, [sp, #4]
 8009120:	4403      	add	r3, r0
 8009122:	f04f 0b00 	mov.w	fp, #0
 8009126:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800912a:	9307      	str	r3, [sp, #28]
 800912c:	f8da 3000 	ldr.w	r3, [sl]
 8009130:	3302      	adds	r3, #2
 8009132:	461f      	mov	r7, r3
 8009134:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009138:	2830      	cmp	r0, #48	; 0x30
 800913a:	d06c      	beq.n	8009216 <__gethex+0x118>
 800913c:	f7ff ffca 	bl	80090d4 <__hexdig_fun>
 8009140:	4604      	mov	r4, r0
 8009142:	2800      	cmp	r0, #0
 8009144:	d16a      	bne.n	800921c <__gethex+0x11e>
 8009146:	9a01      	ldr	r2, [sp, #4]
 8009148:	9903      	ldr	r1, [sp, #12]
 800914a:	4638      	mov	r0, r7
 800914c:	f001 f8f4 	bl	800a338 <strncmp>
 8009150:	2800      	cmp	r0, #0
 8009152:	d166      	bne.n	8009222 <__gethex+0x124>
 8009154:	9b01      	ldr	r3, [sp, #4]
 8009156:	5cf8      	ldrb	r0, [r7, r3]
 8009158:	18fe      	adds	r6, r7, r3
 800915a:	f7ff ffbb 	bl	80090d4 <__hexdig_fun>
 800915e:	2800      	cmp	r0, #0
 8009160:	d062      	beq.n	8009228 <__gethex+0x12a>
 8009162:	4633      	mov	r3, r6
 8009164:	7818      	ldrb	r0, [r3, #0]
 8009166:	2830      	cmp	r0, #48	; 0x30
 8009168:	461f      	mov	r7, r3
 800916a:	f103 0301 	add.w	r3, r3, #1
 800916e:	d0f9      	beq.n	8009164 <__gethex+0x66>
 8009170:	f7ff ffb0 	bl	80090d4 <__hexdig_fun>
 8009174:	fab0 f580 	clz	r5, r0
 8009178:	096d      	lsrs	r5, r5, #5
 800917a:	4634      	mov	r4, r6
 800917c:	f04f 0b01 	mov.w	fp, #1
 8009180:	463a      	mov	r2, r7
 8009182:	4616      	mov	r6, r2
 8009184:	3201      	adds	r2, #1
 8009186:	7830      	ldrb	r0, [r6, #0]
 8009188:	f7ff ffa4 	bl	80090d4 <__hexdig_fun>
 800918c:	2800      	cmp	r0, #0
 800918e:	d1f8      	bne.n	8009182 <__gethex+0x84>
 8009190:	9a01      	ldr	r2, [sp, #4]
 8009192:	9903      	ldr	r1, [sp, #12]
 8009194:	4630      	mov	r0, r6
 8009196:	f001 f8cf 	bl	800a338 <strncmp>
 800919a:	b950      	cbnz	r0, 80091b2 <__gethex+0xb4>
 800919c:	b954      	cbnz	r4, 80091b4 <__gethex+0xb6>
 800919e:	9b01      	ldr	r3, [sp, #4]
 80091a0:	18f4      	adds	r4, r6, r3
 80091a2:	4622      	mov	r2, r4
 80091a4:	4616      	mov	r6, r2
 80091a6:	3201      	adds	r2, #1
 80091a8:	7830      	ldrb	r0, [r6, #0]
 80091aa:	f7ff ff93 	bl	80090d4 <__hexdig_fun>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d1f8      	bne.n	80091a4 <__gethex+0xa6>
 80091b2:	b10c      	cbz	r4, 80091b8 <__gethex+0xba>
 80091b4:	1ba4      	subs	r4, r4, r6
 80091b6:	00a4      	lsls	r4, r4, #2
 80091b8:	7833      	ldrb	r3, [r6, #0]
 80091ba:	2b50      	cmp	r3, #80	; 0x50
 80091bc:	d001      	beq.n	80091c2 <__gethex+0xc4>
 80091be:	2b70      	cmp	r3, #112	; 0x70
 80091c0:	d140      	bne.n	8009244 <__gethex+0x146>
 80091c2:	7873      	ldrb	r3, [r6, #1]
 80091c4:	2b2b      	cmp	r3, #43	; 0x2b
 80091c6:	d031      	beq.n	800922c <__gethex+0x12e>
 80091c8:	2b2d      	cmp	r3, #45	; 0x2d
 80091ca:	d033      	beq.n	8009234 <__gethex+0x136>
 80091cc:	1c71      	adds	r1, r6, #1
 80091ce:	f04f 0900 	mov.w	r9, #0
 80091d2:	7808      	ldrb	r0, [r1, #0]
 80091d4:	f7ff ff7e 	bl	80090d4 <__hexdig_fun>
 80091d8:	1e43      	subs	r3, r0, #1
 80091da:	b2db      	uxtb	r3, r3
 80091dc:	2b18      	cmp	r3, #24
 80091de:	d831      	bhi.n	8009244 <__gethex+0x146>
 80091e0:	f1a0 0210 	sub.w	r2, r0, #16
 80091e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80091e8:	f7ff ff74 	bl	80090d4 <__hexdig_fun>
 80091ec:	1e43      	subs	r3, r0, #1
 80091ee:	b2db      	uxtb	r3, r3
 80091f0:	2b18      	cmp	r3, #24
 80091f2:	d922      	bls.n	800923a <__gethex+0x13c>
 80091f4:	f1b9 0f00 	cmp.w	r9, #0
 80091f8:	d000      	beq.n	80091fc <__gethex+0xfe>
 80091fa:	4252      	negs	r2, r2
 80091fc:	4414      	add	r4, r2
 80091fe:	f8ca 1000 	str.w	r1, [sl]
 8009202:	b30d      	cbz	r5, 8009248 <__gethex+0x14a>
 8009204:	f1bb 0f00 	cmp.w	fp, #0
 8009208:	bf0c      	ite	eq
 800920a:	2706      	moveq	r7, #6
 800920c:	2700      	movne	r7, #0
 800920e:	4638      	mov	r0, r7
 8009210:	b00b      	add	sp, #44	; 0x2c
 8009212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009216:	f10b 0b01 	add.w	fp, fp, #1
 800921a:	e78a      	b.n	8009132 <__gethex+0x34>
 800921c:	2500      	movs	r5, #0
 800921e:	462c      	mov	r4, r5
 8009220:	e7ae      	b.n	8009180 <__gethex+0x82>
 8009222:	463e      	mov	r6, r7
 8009224:	2501      	movs	r5, #1
 8009226:	e7c7      	b.n	80091b8 <__gethex+0xba>
 8009228:	4604      	mov	r4, r0
 800922a:	e7fb      	b.n	8009224 <__gethex+0x126>
 800922c:	f04f 0900 	mov.w	r9, #0
 8009230:	1cb1      	adds	r1, r6, #2
 8009232:	e7ce      	b.n	80091d2 <__gethex+0xd4>
 8009234:	f04f 0901 	mov.w	r9, #1
 8009238:	e7fa      	b.n	8009230 <__gethex+0x132>
 800923a:	230a      	movs	r3, #10
 800923c:	fb03 0202 	mla	r2, r3, r2, r0
 8009240:	3a10      	subs	r2, #16
 8009242:	e7cf      	b.n	80091e4 <__gethex+0xe6>
 8009244:	4631      	mov	r1, r6
 8009246:	e7da      	b.n	80091fe <__gethex+0x100>
 8009248:	1bf3      	subs	r3, r6, r7
 800924a:	3b01      	subs	r3, #1
 800924c:	4629      	mov	r1, r5
 800924e:	2b07      	cmp	r3, #7
 8009250:	dc49      	bgt.n	80092e6 <__gethex+0x1e8>
 8009252:	9802      	ldr	r0, [sp, #8]
 8009254:	f000 fa58 	bl	8009708 <_Balloc>
 8009258:	9b01      	ldr	r3, [sp, #4]
 800925a:	f100 0914 	add.w	r9, r0, #20
 800925e:	f04f 0b00 	mov.w	fp, #0
 8009262:	f1c3 0301 	rsb	r3, r3, #1
 8009266:	4605      	mov	r5, r0
 8009268:	f8cd 9010 	str.w	r9, [sp, #16]
 800926c:	46da      	mov	sl, fp
 800926e:	9308      	str	r3, [sp, #32]
 8009270:	42b7      	cmp	r7, r6
 8009272:	d33b      	bcc.n	80092ec <__gethex+0x1ee>
 8009274:	9804      	ldr	r0, [sp, #16]
 8009276:	f840 ab04 	str.w	sl, [r0], #4
 800927a:	eba0 0009 	sub.w	r0, r0, r9
 800927e:	1080      	asrs	r0, r0, #2
 8009280:	6128      	str	r0, [r5, #16]
 8009282:	0147      	lsls	r7, r0, #5
 8009284:	4650      	mov	r0, sl
 8009286:	f000 fb03 	bl	8009890 <__hi0bits>
 800928a:	f8d8 6000 	ldr.w	r6, [r8]
 800928e:	1a3f      	subs	r7, r7, r0
 8009290:	42b7      	cmp	r7, r6
 8009292:	dd64      	ble.n	800935e <__gethex+0x260>
 8009294:	1bbf      	subs	r7, r7, r6
 8009296:	4639      	mov	r1, r7
 8009298:	4628      	mov	r0, r5
 800929a:	f000 fe13 	bl	8009ec4 <__any_on>
 800929e:	4682      	mov	sl, r0
 80092a0:	b178      	cbz	r0, 80092c2 <__gethex+0x1c4>
 80092a2:	1e7b      	subs	r3, r7, #1
 80092a4:	1159      	asrs	r1, r3, #5
 80092a6:	f003 021f 	and.w	r2, r3, #31
 80092aa:	f04f 0a01 	mov.w	sl, #1
 80092ae:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80092b2:	fa0a f202 	lsl.w	r2, sl, r2
 80092b6:	420a      	tst	r2, r1
 80092b8:	d003      	beq.n	80092c2 <__gethex+0x1c4>
 80092ba:	4553      	cmp	r3, sl
 80092bc:	dc46      	bgt.n	800934c <__gethex+0x24e>
 80092be:	f04f 0a02 	mov.w	sl, #2
 80092c2:	4639      	mov	r1, r7
 80092c4:	4628      	mov	r0, r5
 80092c6:	f7ff fecb 	bl	8009060 <rshift>
 80092ca:	443c      	add	r4, r7
 80092cc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092d0:	42a3      	cmp	r3, r4
 80092d2:	da52      	bge.n	800937a <__gethex+0x27c>
 80092d4:	4629      	mov	r1, r5
 80092d6:	9802      	ldr	r0, [sp, #8]
 80092d8:	f000 fa4a 	bl	8009770 <_Bfree>
 80092dc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80092de:	2300      	movs	r3, #0
 80092e0:	6013      	str	r3, [r2, #0]
 80092e2:	27a3      	movs	r7, #163	; 0xa3
 80092e4:	e793      	b.n	800920e <__gethex+0x110>
 80092e6:	3101      	adds	r1, #1
 80092e8:	105b      	asrs	r3, r3, #1
 80092ea:	e7b0      	b.n	800924e <__gethex+0x150>
 80092ec:	1e73      	subs	r3, r6, #1
 80092ee:	9305      	str	r3, [sp, #20]
 80092f0:	9a07      	ldr	r2, [sp, #28]
 80092f2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80092f6:	4293      	cmp	r3, r2
 80092f8:	d018      	beq.n	800932c <__gethex+0x22e>
 80092fa:	f1bb 0f20 	cmp.w	fp, #32
 80092fe:	d107      	bne.n	8009310 <__gethex+0x212>
 8009300:	9b04      	ldr	r3, [sp, #16]
 8009302:	f8c3 a000 	str.w	sl, [r3]
 8009306:	3304      	adds	r3, #4
 8009308:	f04f 0a00 	mov.w	sl, #0
 800930c:	9304      	str	r3, [sp, #16]
 800930e:	46d3      	mov	fp, sl
 8009310:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009314:	f7ff fede 	bl	80090d4 <__hexdig_fun>
 8009318:	f000 000f 	and.w	r0, r0, #15
 800931c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009320:	ea4a 0a00 	orr.w	sl, sl, r0
 8009324:	f10b 0b04 	add.w	fp, fp, #4
 8009328:	9b05      	ldr	r3, [sp, #20]
 800932a:	e00d      	b.n	8009348 <__gethex+0x24a>
 800932c:	9b05      	ldr	r3, [sp, #20]
 800932e:	9a08      	ldr	r2, [sp, #32]
 8009330:	4413      	add	r3, r2
 8009332:	42bb      	cmp	r3, r7
 8009334:	d3e1      	bcc.n	80092fa <__gethex+0x1fc>
 8009336:	4618      	mov	r0, r3
 8009338:	9a01      	ldr	r2, [sp, #4]
 800933a:	9903      	ldr	r1, [sp, #12]
 800933c:	9309      	str	r3, [sp, #36]	; 0x24
 800933e:	f000 fffb 	bl	800a338 <strncmp>
 8009342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009344:	2800      	cmp	r0, #0
 8009346:	d1d8      	bne.n	80092fa <__gethex+0x1fc>
 8009348:	461e      	mov	r6, r3
 800934a:	e791      	b.n	8009270 <__gethex+0x172>
 800934c:	1eb9      	subs	r1, r7, #2
 800934e:	4628      	mov	r0, r5
 8009350:	f000 fdb8 	bl	8009ec4 <__any_on>
 8009354:	2800      	cmp	r0, #0
 8009356:	d0b2      	beq.n	80092be <__gethex+0x1c0>
 8009358:	f04f 0a03 	mov.w	sl, #3
 800935c:	e7b1      	b.n	80092c2 <__gethex+0x1c4>
 800935e:	da09      	bge.n	8009374 <__gethex+0x276>
 8009360:	1bf7      	subs	r7, r6, r7
 8009362:	4629      	mov	r1, r5
 8009364:	463a      	mov	r2, r7
 8009366:	9802      	ldr	r0, [sp, #8]
 8009368:	f000 fbce 	bl	8009b08 <__lshift>
 800936c:	1be4      	subs	r4, r4, r7
 800936e:	4605      	mov	r5, r0
 8009370:	f100 0914 	add.w	r9, r0, #20
 8009374:	f04f 0a00 	mov.w	sl, #0
 8009378:	e7a8      	b.n	80092cc <__gethex+0x1ce>
 800937a:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800937e:	42a0      	cmp	r0, r4
 8009380:	dd6a      	ble.n	8009458 <__gethex+0x35a>
 8009382:	1b04      	subs	r4, r0, r4
 8009384:	42a6      	cmp	r6, r4
 8009386:	dc2e      	bgt.n	80093e6 <__gethex+0x2e8>
 8009388:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800938c:	2b02      	cmp	r3, #2
 800938e:	d022      	beq.n	80093d6 <__gethex+0x2d8>
 8009390:	2b03      	cmp	r3, #3
 8009392:	d024      	beq.n	80093de <__gethex+0x2e0>
 8009394:	2b01      	cmp	r3, #1
 8009396:	d115      	bne.n	80093c4 <__gethex+0x2c6>
 8009398:	42a6      	cmp	r6, r4
 800939a:	d113      	bne.n	80093c4 <__gethex+0x2c6>
 800939c:	2e01      	cmp	r6, #1
 800939e:	dc0b      	bgt.n	80093b8 <__gethex+0x2ba>
 80093a0:	9a06      	ldr	r2, [sp, #24]
 80093a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	2301      	movs	r3, #1
 80093aa:	612b      	str	r3, [r5, #16]
 80093ac:	f8c9 3000 	str.w	r3, [r9]
 80093b0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093b2:	2762      	movs	r7, #98	; 0x62
 80093b4:	601d      	str	r5, [r3, #0]
 80093b6:	e72a      	b.n	800920e <__gethex+0x110>
 80093b8:	1e71      	subs	r1, r6, #1
 80093ba:	4628      	mov	r0, r5
 80093bc:	f000 fd82 	bl	8009ec4 <__any_on>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	d1ed      	bne.n	80093a0 <__gethex+0x2a2>
 80093c4:	4629      	mov	r1, r5
 80093c6:	9802      	ldr	r0, [sp, #8]
 80093c8:	f000 f9d2 	bl	8009770 <_Bfree>
 80093cc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80093ce:	2300      	movs	r3, #0
 80093d0:	6013      	str	r3, [r2, #0]
 80093d2:	2750      	movs	r7, #80	; 0x50
 80093d4:	e71b      	b.n	800920e <__gethex+0x110>
 80093d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d0e1      	beq.n	80093a0 <__gethex+0x2a2>
 80093dc:	e7f2      	b.n	80093c4 <__gethex+0x2c6>
 80093de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d1dd      	bne.n	80093a0 <__gethex+0x2a2>
 80093e4:	e7ee      	b.n	80093c4 <__gethex+0x2c6>
 80093e6:	1e67      	subs	r7, r4, #1
 80093e8:	f1ba 0f00 	cmp.w	sl, #0
 80093ec:	d131      	bne.n	8009452 <__gethex+0x354>
 80093ee:	b127      	cbz	r7, 80093fa <__gethex+0x2fc>
 80093f0:	4639      	mov	r1, r7
 80093f2:	4628      	mov	r0, r5
 80093f4:	f000 fd66 	bl	8009ec4 <__any_on>
 80093f8:	4682      	mov	sl, r0
 80093fa:	117a      	asrs	r2, r7, #5
 80093fc:	2301      	movs	r3, #1
 80093fe:	f007 071f 	and.w	r7, r7, #31
 8009402:	fa03 f707 	lsl.w	r7, r3, r7
 8009406:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800940a:	4621      	mov	r1, r4
 800940c:	421f      	tst	r7, r3
 800940e:	4628      	mov	r0, r5
 8009410:	bf18      	it	ne
 8009412:	f04a 0a02 	orrne.w	sl, sl, #2
 8009416:	1b36      	subs	r6, r6, r4
 8009418:	f7ff fe22 	bl	8009060 <rshift>
 800941c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8009420:	2702      	movs	r7, #2
 8009422:	f1ba 0f00 	cmp.w	sl, #0
 8009426:	d048      	beq.n	80094ba <__gethex+0x3bc>
 8009428:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800942c:	2b02      	cmp	r3, #2
 800942e:	d015      	beq.n	800945c <__gethex+0x35e>
 8009430:	2b03      	cmp	r3, #3
 8009432:	d017      	beq.n	8009464 <__gethex+0x366>
 8009434:	2b01      	cmp	r3, #1
 8009436:	d109      	bne.n	800944c <__gethex+0x34e>
 8009438:	f01a 0f02 	tst.w	sl, #2
 800943c:	d006      	beq.n	800944c <__gethex+0x34e>
 800943e:	f8d9 3000 	ldr.w	r3, [r9]
 8009442:	ea4a 0a03 	orr.w	sl, sl, r3
 8009446:	f01a 0f01 	tst.w	sl, #1
 800944a:	d10e      	bne.n	800946a <__gethex+0x36c>
 800944c:	f047 0710 	orr.w	r7, r7, #16
 8009450:	e033      	b.n	80094ba <__gethex+0x3bc>
 8009452:	f04f 0a01 	mov.w	sl, #1
 8009456:	e7d0      	b.n	80093fa <__gethex+0x2fc>
 8009458:	2701      	movs	r7, #1
 800945a:	e7e2      	b.n	8009422 <__gethex+0x324>
 800945c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800945e:	f1c3 0301 	rsb	r3, r3, #1
 8009462:	9315      	str	r3, [sp, #84]	; 0x54
 8009464:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009466:	2b00      	cmp	r3, #0
 8009468:	d0f0      	beq.n	800944c <__gethex+0x34e>
 800946a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800946e:	f105 0314 	add.w	r3, r5, #20
 8009472:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8009476:	eb03 010a 	add.w	r1, r3, sl
 800947a:	f04f 0c00 	mov.w	ip, #0
 800947e:	4618      	mov	r0, r3
 8009480:	f853 2b04 	ldr.w	r2, [r3], #4
 8009484:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009488:	d01c      	beq.n	80094c4 <__gethex+0x3c6>
 800948a:	3201      	adds	r2, #1
 800948c:	6002      	str	r2, [r0, #0]
 800948e:	2f02      	cmp	r7, #2
 8009490:	f105 0314 	add.w	r3, r5, #20
 8009494:	d138      	bne.n	8009508 <__gethex+0x40a>
 8009496:	f8d8 2000 	ldr.w	r2, [r8]
 800949a:	3a01      	subs	r2, #1
 800949c:	42b2      	cmp	r2, r6
 800949e:	d10a      	bne.n	80094b6 <__gethex+0x3b8>
 80094a0:	1171      	asrs	r1, r6, #5
 80094a2:	2201      	movs	r2, #1
 80094a4:	f006 061f 	and.w	r6, r6, #31
 80094a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80094ac:	fa02 f606 	lsl.w	r6, r2, r6
 80094b0:	421e      	tst	r6, r3
 80094b2:	bf18      	it	ne
 80094b4:	4617      	movne	r7, r2
 80094b6:	f047 0720 	orr.w	r7, r7, #32
 80094ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80094bc:	601d      	str	r5, [r3, #0]
 80094be:	9b06      	ldr	r3, [sp, #24]
 80094c0:	601c      	str	r4, [r3, #0]
 80094c2:	e6a4      	b.n	800920e <__gethex+0x110>
 80094c4:	4299      	cmp	r1, r3
 80094c6:	f843 cc04 	str.w	ip, [r3, #-4]
 80094ca:	d8d8      	bhi.n	800947e <__gethex+0x380>
 80094cc:	68ab      	ldr	r3, [r5, #8]
 80094ce:	4599      	cmp	r9, r3
 80094d0:	db12      	blt.n	80094f8 <__gethex+0x3fa>
 80094d2:	6869      	ldr	r1, [r5, #4]
 80094d4:	9802      	ldr	r0, [sp, #8]
 80094d6:	3101      	adds	r1, #1
 80094d8:	f000 f916 	bl	8009708 <_Balloc>
 80094dc:	692a      	ldr	r2, [r5, #16]
 80094de:	3202      	adds	r2, #2
 80094e0:	f105 010c 	add.w	r1, r5, #12
 80094e4:	4683      	mov	fp, r0
 80094e6:	0092      	lsls	r2, r2, #2
 80094e8:	300c      	adds	r0, #12
 80094ea:	f7fd fa4d 	bl	8006988 <memcpy>
 80094ee:	4629      	mov	r1, r5
 80094f0:	9802      	ldr	r0, [sp, #8]
 80094f2:	f000 f93d 	bl	8009770 <_Bfree>
 80094f6:	465d      	mov	r5, fp
 80094f8:	692b      	ldr	r3, [r5, #16]
 80094fa:	1c5a      	adds	r2, r3, #1
 80094fc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8009500:	612a      	str	r2, [r5, #16]
 8009502:	2201      	movs	r2, #1
 8009504:	615a      	str	r2, [r3, #20]
 8009506:	e7c2      	b.n	800948e <__gethex+0x390>
 8009508:	692a      	ldr	r2, [r5, #16]
 800950a:	454a      	cmp	r2, r9
 800950c:	dd0b      	ble.n	8009526 <__gethex+0x428>
 800950e:	2101      	movs	r1, #1
 8009510:	4628      	mov	r0, r5
 8009512:	f7ff fda5 	bl	8009060 <rshift>
 8009516:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800951a:	3401      	adds	r4, #1
 800951c:	42a3      	cmp	r3, r4
 800951e:	f6ff aed9 	blt.w	80092d4 <__gethex+0x1d6>
 8009522:	2701      	movs	r7, #1
 8009524:	e7c7      	b.n	80094b6 <__gethex+0x3b8>
 8009526:	f016 061f 	ands.w	r6, r6, #31
 800952a:	d0fa      	beq.n	8009522 <__gethex+0x424>
 800952c:	449a      	add	sl, r3
 800952e:	f1c6 0620 	rsb	r6, r6, #32
 8009532:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009536:	f000 f9ab 	bl	8009890 <__hi0bits>
 800953a:	42b0      	cmp	r0, r6
 800953c:	dbe7      	blt.n	800950e <__gethex+0x410>
 800953e:	e7f0      	b.n	8009522 <__gethex+0x424>

08009540 <L_shift>:
 8009540:	f1c2 0208 	rsb	r2, r2, #8
 8009544:	0092      	lsls	r2, r2, #2
 8009546:	b570      	push	{r4, r5, r6, lr}
 8009548:	f1c2 0620 	rsb	r6, r2, #32
 800954c:	6843      	ldr	r3, [r0, #4]
 800954e:	6804      	ldr	r4, [r0, #0]
 8009550:	fa03 f506 	lsl.w	r5, r3, r6
 8009554:	432c      	orrs	r4, r5
 8009556:	40d3      	lsrs	r3, r2
 8009558:	6004      	str	r4, [r0, #0]
 800955a:	f840 3f04 	str.w	r3, [r0, #4]!
 800955e:	4288      	cmp	r0, r1
 8009560:	d3f4      	bcc.n	800954c <L_shift+0xc>
 8009562:	bd70      	pop	{r4, r5, r6, pc}

08009564 <__match>:
 8009564:	b530      	push	{r4, r5, lr}
 8009566:	6803      	ldr	r3, [r0, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800956e:	b914      	cbnz	r4, 8009576 <__match+0x12>
 8009570:	6003      	str	r3, [r0, #0]
 8009572:	2001      	movs	r0, #1
 8009574:	bd30      	pop	{r4, r5, pc}
 8009576:	f813 2b01 	ldrb.w	r2, [r3], #1
 800957a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800957e:	2d19      	cmp	r5, #25
 8009580:	bf98      	it	ls
 8009582:	3220      	addls	r2, #32
 8009584:	42a2      	cmp	r2, r4
 8009586:	d0f0      	beq.n	800956a <__match+0x6>
 8009588:	2000      	movs	r0, #0
 800958a:	e7f3      	b.n	8009574 <__match+0x10>

0800958c <__hexnan>:
 800958c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009590:	680b      	ldr	r3, [r1, #0]
 8009592:	6801      	ldr	r1, [r0, #0]
 8009594:	115f      	asrs	r7, r3, #5
 8009596:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800959a:	f013 031f 	ands.w	r3, r3, #31
 800959e:	b087      	sub	sp, #28
 80095a0:	bf18      	it	ne
 80095a2:	3704      	addne	r7, #4
 80095a4:	2500      	movs	r5, #0
 80095a6:	1f3e      	subs	r6, r7, #4
 80095a8:	4682      	mov	sl, r0
 80095aa:	4690      	mov	r8, r2
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	f847 5c04 	str.w	r5, [r7, #-4]
 80095b2:	46b1      	mov	r9, r6
 80095b4:	4634      	mov	r4, r6
 80095b6:	9502      	str	r5, [sp, #8]
 80095b8:	46ab      	mov	fp, r5
 80095ba:	784a      	ldrb	r2, [r1, #1]
 80095bc:	1c4b      	adds	r3, r1, #1
 80095be:	9303      	str	r3, [sp, #12]
 80095c0:	b342      	cbz	r2, 8009614 <__hexnan+0x88>
 80095c2:	4610      	mov	r0, r2
 80095c4:	9105      	str	r1, [sp, #20]
 80095c6:	9204      	str	r2, [sp, #16]
 80095c8:	f7ff fd84 	bl	80090d4 <__hexdig_fun>
 80095cc:	2800      	cmp	r0, #0
 80095ce:	d143      	bne.n	8009658 <__hexnan+0xcc>
 80095d0:	9a04      	ldr	r2, [sp, #16]
 80095d2:	9905      	ldr	r1, [sp, #20]
 80095d4:	2a20      	cmp	r2, #32
 80095d6:	d818      	bhi.n	800960a <__hexnan+0x7e>
 80095d8:	9b02      	ldr	r3, [sp, #8]
 80095da:	459b      	cmp	fp, r3
 80095dc:	dd13      	ble.n	8009606 <__hexnan+0x7a>
 80095de:	454c      	cmp	r4, r9
 80095e0:	d206      	bcs.n	80095f0 <__hexnan+0x64>
 80095e2:	2d07      	cmp	r5, #7
 80095e4:	dc04      	bgt.n	80095f0 <__hexnan+0x64>
 80095e6:	462a      	mov	r2, r5
 80095e8:	4649      	mov	r1, r9
 80095ea:	4620      	mov	r0, r4
 80095ec:	f7ff ffa8 	bl	8009540 <L_shift>
 80095f0:	4544      	cmp	r4, r8
 80095f2:	d944      	bls.n	800967e <__hexnan+0xf2>
 80095f4:	2300      	movs	r3, #0
 80095f6:	f1a4 0904 	sub.w	r9, r4, #4
 80095fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80095fe:	f8cd b008 	str.w	fp, [sp, #8]
 8009602:	464c      	mov	r4, r9
 8009604:	461d      	mov	r5, r3
 8009606:	9903      	ldr	r1, [sp, #12]
 8009608:	e7d7      	b.n	80095ba <__hexnan+0x2e>
 800960a:	2a29      	cmp	r2, #41	; 0x29
 800960c:	d14a      	bne.n	80096a4 <__hexnan+0x118>
 800960e:	3102      	adds	r1, #2
 8009610:	f8ca 1000 	str.w	r1, [sl]
 8009614:	f1bb 0f00 	cmp.w	fp, #0
 8009618:	d044      	beq.n	80096a4 <__hexnan+0x118>
 800961a:	454c      	cmp	r4, r9
 800961c:	d206      	bcs.n	800962c <__hexnan+0xa0>
 800961e:	2d07      	cmp	r5, #7
 8009620:	dc04      	bgt.n	800962c <__hexnan+0xa0>
 8009622:	462a      	mov	r2, r5
 8009624:	4649      	mov	r1, r9
 8009626:	4620      	mov	r0, r4
 8009628:	f7ff ff8a 	bl	8009540 <L_shift>
 800962c:	4544      	cmp	r4, r8
 800962e:	d928      	bls.n	8009682 <__hexnan+0xf6>
 8009630:	4643      	mov	r3, r8
 8009632:	f854 2b04 	ldr.w	r2, [r4], #4
 8009636:	f843 2b04 	str.w	r2, [r3], #4
 800963a:	42a6      	cmp	r6, r4
 800963c:	d2f9      	bcs.n	8009632 <__hexnan+0xa6>
 800963e:	2200      	movs	r2, #0
 8009640:	f843 2b04 	str.w	r2, [r3], #4
 8009644:	429e      	cmp	r6, r3
 8009646:	d2fb      	bcs.n	8009640 <__hexnan+0xb4>
 8009648:	6833      	ldr	r3, [r6, #0]
 800964a:	b91b      	cbnz	r3, 8009654 <__hexnan+0xc8>
 800964c:	4546      	cmp	r6, r8
 800964e:	d127      	bne.n	80096a0 <__hexnan+0x114>
 8009650:	2301      	movs	r3, #1
 8009652:	6033      	str	r3, [r6, #0]
 8009654:	2005      	movs	r0, #5
 8009656:	e026      	b.n	80096a6 <__hexnan+0x11a>
 8009658:	3501      	adds	r5, #1
 800965a:	2d08      	cmp	r5, #8
 800965c:	f10b 0b01 	add.w	fp, fp, #1
 8009660:	dd06      	ble.n	8009670 <__hexnan+0xe4>
 8009662:	4544      	cmp	r4, r8
 8009664:	d9cf      	bls.n	8009606 <__hexnan+0x7a>
 8009666:	2300      	movs	r3, #0
 8009668:	f844 3c04 	str.w	r3, [r4, #-4]
 800966c:	2501      	movs	r5, #1
 800966e:	3c04      	subs	r4, #4
 8009670:	6822      	ldr	r2, [r4, #0]
 8009672:	f000 000f 	and.w	r0, r0, #15
 8009676:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800967a:	6020      	str	r0, [r4, #0]
 800967c:	e7c3      	b.n	8009606 <__hexnan+0x7a>
 800967e:	2508      	movs	r5, #8
 8009680:	e7c1      	b.n	8009606 <__hexnan+0x7a>
 8009682:	9b01      	ldr	r3, [sp, #4]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d0df      	beq.n	8009648 <__hexnan+0xbc>
 8009688:	f04f 32ff 	mov.w	r2, #4294967295
 800968c:	f1c3 0320 	rsb	r3, r3, #32
 8009690:	fa22 f303 	lsr.w	r3, r2, r3
 8009694:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8009698:	401a      	ands	r2, r3
 800969a:	f847 2c04 	str.w	r2, [r7, #-4]
 800969e:	e7d3      	b.n	8009648 <__hexnan+0xbc>
 80096a0:	3e04      	subs	r6, #4
 80096a2:	e7d1      	b.n	8009648 <__hexnan+0xbc>
 80096a4:	2004      	movs	r0, #4
 80096a6:	b007      	add	sp, #28
 80096a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080096ac <__locale_ctype_ptr_l>:
 80096ac:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80096b0:	4770      	bx	lr

080096b2 <__localeconv_l>:
 80096b2:	30f0      	adds	r0, #240	; 0xf0
 80096b4:	4770      	bx	lr
	...

080096b8 <_localeconv_r>:
 80096b8:	4b04      	ldr	r3, [pc, #16]	; (80096cc <_localeconv_r+0x14>)
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6a18      	ldr	r0, [r3, #32]
 80096be:	4b04      	ldr	r3, [pc, #16]	; (80096d0 <_localeconv_r+0x18>)
 80096c0:	2800      	cmp	r0, #0
 80096c2:	bf08      	it	eq
 80096c4:	4618      	moveq	r0, r3
 80096c6:	30f0      	adds	r0, #240	; 0xf0
 80096c8:	4770      	bx	lr
 80096ca:	bf00      	nop
 80096cc:	2000000c 	.word	0x2000000c
 80096d0:	20000070 	.word	0x20000070

080096d4 <malloc>:
 80096d4:	4b02      	ldr	r3, [pc, #8]	; (80096e0 <malloc+0xc>)
 80096d6:	4601      	mov	r1, r0
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	f000 bc71 	b.w	8009fc0 <_malloc_r>
 80096de:	bf00      	nop
 80096e0:	2000000c 	.word	0x2000000c

080096e4 <__ascii_mbtowc>:
 80096e4:	b082      	sub	sp, #8
 80096e6:	b901      	cbnz	r1, 80096ea <__ascii_mbtowc+0x6>
 80096e8:	a901      	add	r1, sp, #4
 80096ea:	b142      	cbz	r2, 80096fe <__ascii_mbtowc+0x1a>
 80096ec:	b14b      	cbz	r3, 8009702 <__ascii_mbtowc+0x1e>
 80096ee:	7813      	ldrb	r3, [r2, #0]
 80096f0:	600b      	str	r3, [r1, #0]
 80096f2:	7812      	ldrb	r2, [r2, #0]
 80096f4:	1c10      	adds	r0, r2, #0
 80096f6:	bf18      	it	ne
 80096f8:	2001      	movne	r0, #1
 80096fa:	b002      	add	sp, #8
 80096fc:	4770      	bx	lr
 80096fe:	4610      	mov	r0, r2
 8009700:	e7fb      	b.n	80096fa <__ascii_mbtowc+0x16>
 8009702:	f06f 0001 	mvn.w	r0, #1
 8009706:	e7f8      	b.n	80096fa <__ascii_mbtowc+0x16>

08009708 <_Balloc>:
 8009708:	b570      	push	{r4, r5, r6, lr}
 800970a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800970c:	4604      	mov	r4, r0
 800970e:	460e      	mov	r6, r1
 8009710:	b93d      	cbnz	r5, 8009722 <_Balloc+0x1a>
 8009712:	2010      	movs	r0, #16
 8009714:	f7ff ffde 	bl	80096d4 <malloc>
 8009718:	6260      	str	r0, [r4, #36]	; 0x24
 800971a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800971e:	6005      	str	r5, [r0, #0]
 8009720:	60c5      	str	r5, [r0, #12]
 8009722:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009724:	68eb      	ldr	r3, [r5, #12]
 8009726:	b183      	cbz	r3, 800974a <_Balloc+0x42>
 8009728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009730:	b9b8      	cbnz	r0, 8009762 <_Balloc+0x5a>
 8009732:	2101      	movs	r1, #1
 8009734:	fa01 f506 	lsl.w	r5, r1, r6
 8009738:	1d6a      	adds	r2, r5, #5
 800973a:	0092      	lsls	r2, r2, #2
 800973c:	4620      	mov	r0, r4
 800973e:	f000 fbe2 	bl	8009f06 <_calloc_r>
 8009742:	b160      	cbz	r0, 800975e <_Balloc+0x56>
 8009744:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009748:	e00e      	b.n	8009768 <_Balloc+0x60>
 800974a:	2221      	movs	r2, #33	; 0x21
 800974c:	2104      	movs	r1, #4
 800974e:	4620      	mov	r0, r4
 8009750:	f000 fbd9 	bl	8009f06 <_calloc_r>
 8009754:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009756:	60e8      	str	r0, [r5, #12]
 8009758:	68db      	ldr	r3, [r3, #12]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d1e4      	bne.n	8009728 <_Balloc+0x20>
 800975e:	2000      	movs	r0, #0
 8009760:	bd70      	pop	{r4, r5, r6, pc}
 8009762:	6802      	ldr	r2, [r0, #0]
 8009764:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009768:	2300      	movs	r3, #0
 800976a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800976e:	e7f7      	b.n	8009760 <_Balloc+0x58>

08009770 <_Bfree>:
 8009770:	b570      	push	{r4, r5, r6, lr}
 8009772:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009774:	4606      	mov	r6, r0
 8009776:	460d      	mov	r5, r1
 8009778:	b93c      	cbnz	r4, 800978a <_Bfree+0x1a>
 800977a:	2010      	movs	r0, #16
 800977c:	f7ff ffaa 	bl	80096d4 <malloc>
 8009780:	6270      	str	r0, [r6, #36]	; 0x24
 8009782:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009786:	6004      	str	r4, [r0, #0]
 8009788:	60c4      	str	r4, [r0, #12]
 800978a:	b13d      	cbz	r5, 800979c <_Bfree+0x2c>
 800978c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800978e:	686a      	ldr	r2, [r5, #4]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009796:	6029      	str	r1, [r5, #0]
 8009798:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800979c:	bd70      	pop	{r4, r5, r6, pc}

0800979e <__multadd>:
 800979e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097a2:	690d      	ldr	r5, [r1, #16]
 80097a4:	461f      	mov	r7, r3
 80097a6:	4606      	mov	r6, r0
 80097a8:	460c      	mov	r4, r1
 80097aa:	f101 0c14 	add.w	ip, r1, #20
 80097ae:	2300      	movs	r3, #0
 80097b0:	f8dc 0000 	ldr.w	r0, [ip]
 80097b4:	b281      	uxth	r1, r0
 80097b6:	fb02 7101 	mla	r1, r2, r1, r7
 80097ba:	0c0f      	lsrs	r7, r1, #16
 80097bc:	0c00      	lsrs	r0, r0, #16
 80097be:	fb02 7000 	mla	r0, r2, r0, r7
 80097c2:	b289      	uxth	r1, r1
 80097c4:	3301      	adds	r3, #1
 80097c6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80097ca:	429d      	cmp	r5, r3
 80097cc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80097d0:	f84c 1b04 	str.w	r1, [ip], #4
 80097d4:	dcec      	bgt.n	80097b0 <__multadd+0x12>
 80097d6:	b1d7      	cbz	r7, 800980e <__multadd+0x70>
 80097d8:	68a3      	ldr	r3, [r4, #8]
 80097da:	42ab      	cmp	r3, r5
 80097dc:	dc12      	bgt.n	8009804 <__multadd+0x66>
 80097de:	6861      	ldr	r1, [r4, #4]
 80097e0:	4630      	mov	r0, r6
 80097e2:	3101      	adds	r1, #1
 80097e4:	f7ff ff90 	bl	8009708 <_Balloc>
 80097e8:	6922      	ldr	r2, [r4, #16]
 80097ea:	3202      	adds	r2, #2
 80097ec:	f104 010c 	add.w	r1, r4, #12
 80097f0:	4680      	mov	r8, r0
 80097f2:	0092      	lsls	r2, r2, #2
 80097f4:	300c      	adds	r0, #12
 80097f6:	f7fd f8c7 	bl	8006988 <memcpy>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4630      	mov	r0, r6
 80097fe:	f7ff ffb7 	bl	8009770 <_Bfree>
 8009802:	4644      	mov	r4, r8
 8009804:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009808:	3501      	adds	r5, #1
 800980a:	615f      	str	r7, [r3, #20]
 800980c:	6125      	str	r5, [r4, #16]
 800980e:	4620      	mov	r0, r4
 8009810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009814 <__s2b>:
 8009814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009818:	460c      	mov	r4, r1
 800981a:	4615      	mov	r5, r2
 800981c:	461f      	mov	r7, r3
 800981e:	2209      	movs	r2, #9
 8009820:	3308      	adds	r3, #8
 8009822:	4606      	mov	r6, r0
 8009824:	fb93 f3f2 	sdiv	r3, r3, r2
 8009828:	2100      	movs	r1, #0
 800982a:	2201      	movs	r2, #1
 800982c:	429a      	cmp	r2, r3
 800982e:	db20      	blt.n	8009872 <__s2b+0x5e>
 8009830:	4630      	mov	r0, r6
 8009832:	f7ff ff69 	bl	8009708 <_Balloc>
 8009836:	9b08      	ldr	r3, [sp, #32]
 8009838:	6143      	str	r3, [r0, #20]
 800983a:	2d09      	cmp	r5, #9
 800983c:	f04f 0301 	mov.w	r3, #1
 8009840:	6103      	str	r3, [r0, #16]
 8009842:	dd19      	ble.n	8009878 <__s2b+0x64>
 8009844:	f104 0809 	add.w	r8, r4, #9
 8009848:	46c1      	mov	r9, r8
 800984a:	442c      	add	r4, r5
 800984c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8009850:	4601      	mov	r1, r0
 8009852:	3b30      	subs	r3, #48	; 0x30
 8009854:	220a      	movs	r2, #10
 8009856:	4630      	mov	r0, r6
 8009858:	f7ff ffa1 	bl	800979e <__multadd>
 800985c:	45a1      	cmp	r9, r4
 800985e:	d1f5      	bne.n	800984c <__s2b+0x38>
 8009860:	eb08 0405 	add.w	r4, r8, r5
 8009864:	3c08      	subs	r4, #8
 8009866:	1b2d      	subs	r5, r5, r4
 8009868:	1963      	adds	r3, r4, r5
 800986a:	42bb      	cmp	r3, r7
 800986c:	db07      	blt.n	800987e <__s2b+0x6a>
 800986e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009872:	0052      	lsls	r2, r2, #1
 8009874:	3101      	adds	r1, #1
 8009876:	e7d9      	b.n	800982c <__s2b+0x18>
 8009878:	340a      	adds	r4, #10
 800987a:	2509      	movs	r5, #9
 800987c:	e7f3      	b.n	8009866 <__s2b+0x52>
 800987e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009882:	4601      	mov	r1, r0
 8009884:	3b30      	subs	r3, #48	; 0x30
 8009886:	220a      	movs	r2, #10
 8009888:	4630      	mov	r0, r6
 800988a:	f7ff ff88 	bl	800979e <__multadd>
 800988e:	e7eb      	b.n	8009868 <__s2b+0x54>

08009890 <__hi0bits>:
 8009890:	0c02      	lsrs	r2, r0, #16
 8009892:	0412      	lsls	r2, r2, #16
 8009894:	4603      	mov	r3, r0
 8009896:	b9b2      	cbnz	r2, 80098c6 <__hi0bits+0x36>
 8009898:	0403      	lsls	r3, r0, #16
 800989a:	2010      	movs	r0, #16
 800989c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80098a0:	bf04      	itt	eq
 80098a2:	021b      	lsleq	r3, r3, #8
 80098a4:	3008      	addeq	r0, #8
 80098a6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80098aa:	bf04      	itt	eq
 80098ac:	011b      	lsleq	r3, r3, #4
 80098ae:	3004      	addeq	r0, #4
 80098b0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80098b4:	bf04      	itt	eq
 80098b6:	009b      	lsleq	r3, r3, #2
 80098b8:	3002      	addeq	r0, #2
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	db06      	blt.n	80098cc <__hi0bits+0x3c>
 80098be:	005b      	lsls	r3, r3, #1
 80098c0:	d503      	bpl.n	80098ca <__hi0bits+0x3a>
 80098c2:	3001      	adds	r0, #1
 80098c4:	4770      	bx	lr
 80098c6:	2000      	movs	r0, #0
 80098c8:	e7e8      	b.n	800989c <__hi0bits+0xc>
 80098ca:	2020      	movs	r0, #32
 80098cc:	4770      	bx	lr

080098ce <__lo0bits>:
 80098ce:	6803      	ldr	r3, [r0, #0]
 80098d0:	f013 0207 	ands.w	r2, r3, #7
 80098d4:	4601      	mov	r1, r0
 80098d6:	d00b      	beq.n	80098f0 <__lo0bits+0x22>
 80098d8:	07da      	lsls	r2, r3, #31
 80098da:	d423      	bmi.n	8009924 <__lo0bits+0x56>
 80098dc:	0798      	lsls	r0, r3, #30
 80098de:	bf49      	itett	mi
 80098e0:	085b      	lsrmi	r3, r3, #1
 80098e2:	089b      	lsrpl	r3, r3, #2
 80098e4:	2001      	movmi	r0, #1
 80098e6:	600b      	strmi	r3, [r1, #0]
 80098e8:	bf5c      	itt	pl
 80098ea:	600b      	strpl	r3, [r1, #0]
 80098ec:	2002      	movpl	r0, #2
 80098ee:	4770      	bx	lr
 80098f0:	b298      	uxth	r0, r3
 80098f2:	b9a8      	cbnz	r0, 8009920 <__lo0bits+0x52>
 80098f4:	0c1b      	lsrs	r3, r3, #16
 80098f6:	2010      	movs	r0, #16
 80098f8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80098fc:	bf04      	itt	eq
 80098fe:	0a1b      	lsreq	r3, r3, #8
 8009900:	3008      	addeq	r0, #8
 8009902:	071a      	lsls	r2, r3, #28
 8009904:	bf04      	itt	eq
 8009906:	091b      	lsreq	r3, r3, #4
 8009908:	3004      	addeq	r0, #4
 800990a:	079a      	lsls	r2, r3, #30
 800990c:	bf04      	itt	eq
 800990e:	089b      	lsreq	r3, r3, #2
 8009910:	3002      	addeq	r0, #2
 8009912:	07da      	lsls	r2, r3, #31
 8009914:	d402      	bmi.n	800991c <__lo0bits+0x4e>
 8009916:	085b      	lsrs	r3, r3, #1
 8009918:	d006      	beq.n	8009928 <__lo0bits+0x5a>
 800991a:	3001      	adds	r0, #1
 800991c:	600b      	str	r3, [r1, #0]
 800991e:	4770      	bx	lr
 8009920:	4610      	mov	r0, r2
 8009922:	e7e9      	b.n	80098f8 <__lo0bits+0x2a>
 8009924:	2000      	movs	r0, #0
 8009926:	4770      	bx	lr
 8009928:	2020      	movs	r0, #32
 800992a:	4770      	bx	lr

0800992c <__i2b>:
 800992c:	b510      	push	{r4, lr}
 800992e:	460c      	mov	r4, r1
 8009930:	2101      	movs	r1, #1
 8009932:	f7ff fee9 	bl	8009708 <_Balloc>
 8009936:	2201      	movs	r2, #1
 8009938:	6144      	str	r4, [r0, #20]
 800993a:	6102      	str	r2, [r0, #16]
 800993c:	bd10      	pop	{r4, pc}

0800993e <__multiply>:
 800993e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009942:	4614      	mov	r4, r2
 8009944:	690a      	ldr	r2, [r1, #16]
 8009946:	6923      	ldr	r3, [r4, #16]
 8009948:	429a      	cmp	r2, r3
 800994a:	bfb8      	it	lt
 800994c:	460b      	movlt	r3, r1
 800994e:	4688      	mov	r8, r1
 8009950:	bfbc      	itt	lt
 8009952:	46a0      	movlt	r8, r4
 8009954:	461c      	movlt	r4, r3
 8009956:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800995a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800995e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009962:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009966:	eb07 0609 	add.w	r6, r7, r9
 800996a:	42b3      	cmp	r3, r6
 800996c:	bfb8      	it	lt
 800996e:	3101      	addlt	r1, #1
 8009970:	f7ff feca 	bl	8009708 <_Balloc>
 8009974:	f100 0514 	add.w	r5, r0, #20
 8009978:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800997c:	462b      	mov	r3, r5
 800997e:	2200      	movs	r2, #0
 8009980:	4573      	cmp	r3, lr
 8009982:	d316      	bcc.n	80099b2 <__multiply+0x74>
 8009984:	f104 0214 	add.w	r2, r4, #20
 8009988:	f108 0114 	add.w	r1, r8, #20
 800998c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009990:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009994:	9300      	str	r3, [sp, #0]
 8009996:	9b00      	ldr	r3, [sp, #0]
 8009998:	9201      	str	r2, [sp, #4]
 800999a:	4293      	cmp	r3, r2
 800999c:	d80c      	bhi.n	80099b8 <__multiply+0x7a>
 800999e:	2e00      	cmp	r6, #0
 80099a0:	dd03      	ble.n	80099aa <__multiply+0x6c>
 80099a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d05d      	beq.n	8009a66 <__multiply+0x128>
 80099aa:	6106      	str	r6, [r0, #16]
 80099ac:	b003      	add	sp, #12
 80099ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b2:	f843 2b04 	str.w	r2, [r3], #4
 80099b6:	e7e3      	b.n	8009980 <__multiply+0x42>
 80099b8:	f8b2 b000 	ldrh.w	fp, [r2]
 80099bc:	f1bb 0f00 	cmp.w	fp, #0
 80099c0:	d023      	beq.n	8009a0a <__multiply+0xcc>
 80099c2:	4689      	mov	r9, r1
 80099c4:	46ac      	mov	ip, r5
 80099c6:	f04f 0800 	mov.w	r8, #0
 80099ca:	f859 4b04 	ldr.w	r4, [r9], #4
 80099ce:	f8dc a000 	ldr.w	sl, [ip]
 80099d2:	b2a3      	uxth	r3, r4
 80099d4:	fa1f fa8a 	uxth.w	sl, sl
 80099d8:	fb0b a303 	mla	r3, fp, r3, sl
 80099dc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80099e0:	f8dc 4000 	ldr.w	r4, [ip]
 80099e4:	4443      	add	r3, r8
 80099e6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80099ea:	fb0b 840a 	mla	r4, fp, sl, r8
 80099ee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80099f2:	46e2      	mov	sl, ip
 80099f4:	b29b      	uxth	r3, r3
 80099f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80099fa:	454f      	cmp	r7, r9
 80099fc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009a00:	f84a 3b04 	str.w	r3, [sl], #4
 8009a04:	d82b      	bhi.n	8009a5e <__multiply+0x120>
 8009a06:	f8cc 8004 	str.w	r8, [ip, #4]
 8009a0a:	9b01      	ldr	r3, [sp, #4]
 8009a0c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009a10:	3204      	adds	r2, #4
 8009a12:	f1ba 0f00 	cmp.w	sl, #0
 8009a16:	d020      	beq.n	8009a5a <__multiply+0x11c>
 8009a18:	682b      	ldr	r3, [r5, #0]
 8009a1a:	4689      	mov	r9, r1
 8009a1c:	46a8      	mov	r8, r5
 8009a1e:	f04f 0b00 	mov.w	fp, #0
 8009a22:	f8b9 c000 	ldrh.w	ip, [r9]
 8009a26:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009a2a:	fb0a 440c 	mla	r4, sl, ip, r4
 8009a2e:	445c      	add	r4, fp
 8009a30:	46c4      	mov	ip, r8
 8009a32:	b29b      	uxth	r3, r3
 8009a34:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009a38:	f84c 3b04 	str.w	r3, [ip], #4
 8009a3c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009a40:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009a44:	0c1b      	lsrs	r3, r3, #16
 8009a46:	fb0a b303 	mla	r3, sl, r3, fp
 8009a4a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009a4e:	454f      	cmp	r7, r9
 8009a50:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009a54:	d805      	bhi.n	8009a62 <__multiply+0x124>
 8009a56:	f8c8 3004 	str.w	r3, [r8, #4]
 8009a5a:	3504      	adds	r5, #4
 8009a5c:	e79b      	b.n	8009996 <__multiply+0x58>
 8009a5e:	46d4      	mov	ip, sl
 8009a60:	e7b3      	b.n	80099ca <__multiply+0x8c>
 8009a62:	46e0      	mov	r8, ip
 8009a64:	e7dd      	b.n	8009a22 <__multiply+0xe4>
 8009a66:	3e01      	subs	r6, #1
 8009a68:	e799      	b.n	800999e <__multiply+0x60>
	...

08009a6c <__pow5mult>:
 8009a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a70:	4615      	mov	r5, r2
 8009a72:	f012 0203 	ands.w	r2, r2, #3
 8009a76:	4606      	mov	r6, r0
 8009a78:	460f      	mov	r7, r1
 8009a7a:	d007      	beq.n	8009a8c <__pow5mult+0x20>
 8009a7c:	3a01      	subs	r2, #1
 8009a7e:	4c21      	ldr	r4, [pc, #132]	; (8009b04 <__pow5mult+0x98>)
 8009a80:	2300      	movs	r3, #0
 8009a82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a86:	f7ff fe8a 	bl	800979e <__multadd>
 8009a8a:	4607      	mov	r7, r0
 8009a8c:	10ad      	asrs	r5, r5, #2
 8009a8e:	d035      	beq.n	8009afc <__pow5mult+0x90>
 8009a90:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009a92:	b93c      	cbnz	r4, 8009aa4 <__pow5mult+0x38>
 8009a94:	2010      	movs	r0, #16
 8009a96:	f7ff fe1d 	bl	80096d4 <malloc>
 8009a9a:	6270      	str	r0, [r6, #36]	; 0x24
 8009a9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009aa0:	6004      	str	r4, [r0, #0]
 8009aa2:	60c4      	str	r4, [r0, #12]
 8009aa4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009aa8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009aac:	b94c      	cbnz	r4, 8009ac2 <__pow5mult+0x56>
 8009aae:	f240 2171 	movw	r1, #625	; 0x271
 8009ab2:	4630      	mov	r0, r6
 8009ab4:	f7ff ff3a 	bl	800992c <__i2b>
 8009ab8:	2300      	movs	r3, #0
 8009aba:	f8c8 0008 	str.w	r0, [r8, #8]
 8009abe:	4604      	mov	r4, r0
 8009ac0:	6003      	str	r3, [r0, #0]
 8009ac2:	f04f 0800 	mov.w	r8, #0
 8009ac6:	07eb      	lsls	r3, r5, #31
 8009ac8:	d50a      	bpl.n	8009ae0 <__pow5mult+0x74>
 8009aca:	4639      	mov	r1, r7
 8009acc:	4622      	mov	r2, r4
 8009ace:	4630      	mov	r0, r6
 8009ad0:	f7ff ff35 	bl	800993e <__multiply>
 8009ad4:	4639      	mov	r1, r7
 8009ad6:	4681      	mov	r9, r0
 8009ad8:	4630      	mov	r0, r6
 8009ada:	f7ff fe49 	bl	8009770 <_Bfree>
 8009ade:	464f      	mov	r7, r9
 8009ae0:	106d      	asrs	r5, r5, #1
 8009ae2:	d00b      	beq.n	8009afc <__pow5mult+0x90>
 8009ae4:	6820      	ldr	r0, [r4, #0]
 8009ae6:	b938      	cbnz	r0, 8009af8 <__pow5mult+0x8c>
 8009ae8:	4622      	mov	r2, r4
 8009aea:	4621      	mov	r1, r4
 8009aec:	4630      	mov	r0, r6
 8009aee:	f7ff ff26 	bl	800993e <__multiply>
 8009af2:	6020      	str	r0, [r4, #0]
 8009af4:	f8c0 8000 	str.w	r8, [r0]
 8009af8:	4604      	mov	r4, r0
 8009afa:	e7e4      	b.n	8009ac6 <__pow5mult+0x5a>
 8009afc:	4638      	mov	r0, r7
 8009afe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b02:	bf00      	nop
 8009b04:	0800b498 	.word	0x0800b498

08009b08 <__lshift>:
 8009b08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b0c:	460c      	mov	r4, r1
 8009b0e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009b12:	6923      	ldr	r3, [r4, #16]
 8009b14:	6849      	ldr	r1, [r1, #4]
 8009b16:	eb0a 0903 	add.w	r9, sl, r3
 8009b1a:	68a3      	ldr	r3, [r4, #8]
 8009b1c:	4607      	mov	r7, r0
 8009b1e:	4616      	mov	r6, r2
 8009b20:	f109 0501 	add.w	r5, r9, #1
 8009b24:	42ab      	cmp	r3, r5
 8009b26:	db32      	blt.n	8009b8e <__lshift+0x86>
 8009b28:	4638      	mov	r0, r7
 8009b2a:	f7ff fded 	bl	8009708 <_Balloc>
 8009b2e:	2300      	movs	r3, #0
 8009b30:	4680      	mov	r8, r0
 8009b32:	f100 0114 	add.w	r1, r0, #20
 8009b36:	461a      	mov	r2, r3
 8009b38:	4553      	cmp	r3, sl
 8009b3a:	db2b      	blt.n	8009b94 <__lshift+0x8c>
 8009b3c:	6920      	ldr	r0, [r4, #16]
 8009b3e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b42:	f104 0314 	add.w	r3, r4, #20
 8009b46:	f016 021f 	ands.w	r2, r6, #31
 8009b4a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b4e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b52:	d025      	beq.n	8009ba0 <__lshift+0x98>
 8009b54:	f1c2 0e20 	rsb	lr, r2, #32
 8009b58:	2000      	movs	r0, #0
 8009b5a:	681e      	ldr	r6, [r3, #0]
 8009b5c:	468a      	mov	sl, r1
 8009b5e:	4096      	lsls	r6, r2
 8009b60:	4330      	orrs	r0, r6
 8009b62:	f84a 0b04 	str.w	r0, [sl], #4
 8009b66:	f853 0b04 	ldr.w	r0, [r3], #4
 8009b6a:	459c      	cmp	ip, r3
 8009b6c:	fa20 f00e 	lsr.w	r0, r0, lr
 8009b70:	d814      	bhi.n	8009b9c <__lshift+0x94>
 8009b72:	6048      	str	r0, [r1, #4]
 8009b74:	b108      	cbz	r0, 8009b7a <__lshift+0x72>
 8009b76:	f109 0502 	add.w	r5, r9, #2
 8009b7a:	3d01      	subs	r5, #1
 8009b7c:	4638      	mov	r0, r7
 8009b7e:	f8c8 5010 	str.w	r5, [r8, #16]
 8009b82:	4621      	mov	r1, r4
 8009b84:	f7ff fdf4 	bl	8009770 <_Bfree>
 8009b88:	4640      	mov	r0, r8
 8009b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b8e:	3101      	adds	r1, #1
 8009b90:	005b      	lsls	r3, r3, #1
 8009b92:	e7c7      	b.n	8009b24 <__lshift+0x1c>
 8009b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009b98:	3301      	adds	r3, #1
 8009b9a:	e7cd      	b.n	8009b38 <__lshift+0x30>
 8009b9c:	4651      	mov	r1, sl
 8009b9e:	e7dc      	b.n	8009b5a <__lshift+0x52>
 8009ba0:	3904      	subs	r1, #4
 8009ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ba6:	f841 2f04 	str.w	r2, [r1, #4]!
 8009baa:	459c      	cmp	ip, r3
 8009bac:	d8f9      	bhi.n	8009ba2 <__lshift+0x9a>
 8009bae:	e7e4      	b.n	8009b7a <__lshift+0x72>

08009bb0 <__mcmp>:
 8009bb0:	6903      	ldr	r3, [r0, #16]
 8009bb2:	690a      	ldr	r2, [r1, #16]
 8009bb4:	1a9b      	subs	r3, r3, r2
 8009bb6:	b530      	push	{r4, r5, lr}
 8009bb8:	d10c      	bne.n	8009bd4 <__mcmp+0x24>
 8009bba:	0092      	lsls	r2, r2, #2
 8009bbc:	3014      	adds	r0, #20
 8009bbe:	3114      	adds	r1, #20
 8009bc0:	1884      	adds	r4, r0, r2
 8009bc2:	4411      	add	r1, r2
 8009bc4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009bc8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009bcc:	4295      	cmp	r5, r2
 8009bce:	d003      	beq.n	8009bd8 <__mcmp+0x28>
 8009bd0:	d305      	bcc.n	8009bde <__mcmp+0x2e>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	bd30      	pop	{r4, r5, pc}
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d3f3      	bcc.n	8009bc4 <__mcmp+0x14>
 8009bdc:	e7fa      	b.n	8009bd4 <__mcmp+0x24>
 8009bde:	f04f 33ff 	mov.w	r3, #4294967295
 8009be2:	e7f7      	b.n	8009bd4 <__mcmp+0x24>

08009be4 <__mdiff>:
 8009be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009be8:	460d      	mov	r5, r1
 8009bea:	4607      	mov	r7, r0
 8009bec:	4611      	mov	r1, r2
 8009bee:	4628      	mov	r0, r5
 8009bf0:	4614      	mov	r4, r2
 8009bf2:	f7ff ffdd 	bl	8009bb0 <__mcmp>
 8009bf6:	1e06      	subs	r6, r0, #0
 8009bf8:	d108      	bne.n	8009c0c <__mdiff+0x28>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	4638      	mov	r0, r7
 8009bfe:	f7ff fd83 	bl	8009708 <_Balloc>
 8009c02:	2301      	movs	r3, #1
 8009c04:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c0c:	bfa4      	itt	ge
 8009c0e:	4623      	movge	r3, r4
 8009c10:	462c      	movge	r4, r5
 8009c12:	4638      	mov	r0, r7
 8009c14:	6861      	ldr	r1, [r4, #4]
 8009c16:	bfa6      	itte	ge
 8009c18:	461d      	movge	r5, r3
 8009c1a:	2600      	movge	r6, #0
 8009c1c:	2601      	movlt	r6, #1
 8009c1e:	f7ff fd73 	bl	8009708 <_Balloc>
 8009c22:	692b      	ldr	r3, [r5, #16]
 8009c24:	60c6      	str	r6, [r0, #12]
 8009c26:	6926      	ldr	r6, [r4, #16]
 8009c28:	f105 0914 	add.w	r9, r5, #20
 8009c2c:	f104 0214 	add.w	r2, r4, #20
 8009c30:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009c34:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009c38:	f100 0514 	add.w	r5, r0, #20
 8009c3c:	f04f 0e00 	mov.w	lr, #0
 8009c40:	f852 ab04 	ldr.w	sl, [r2], #4
 8009c44:	f859 4b04 	ldr.w	r4, [r9], #4
 8009c48:	fa1e f18a 	uxtah	r1, lr, sl
 8009c4c:	b2a3      	uxth	r3, r4
 8009c4e:	1ac9      	subs	r1, r1, r3
 8009c50:	0c23      	lsrs	r3, r4, #16
 8009c52:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8009c56:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009c5a:	b289      	uxth	r1, r1
 8009c5c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8009c60:	45c8      	cmp	r8, r9
 8009c62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009c66:	4694      	mov	ip, r2
 8009c68:	f845 3b04 	str.w	r3, [r5], #4
 8009c6c:	d8e8      	bhi.n	8009c40 <__mdiff+0x5c>
 8009c6e:	45bc      	cmp	ip, r7
 8009c70:	d304      	bcc.n	8009c7c <__mdiff+0x98>
 8009c72:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8009c76:	b183      	cbz	r3, 8009c9a <__mdiff+0xb6>
 8009c78:	6106      	str	r6, [r0, #16]
 8009c7a:	e7c5      	b.n	8009c08 <__mdiff+0x24>
 8009c7c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c80:	fa1e f381 	uxtah	r3, lr, r1
 8009c84:	141a      	asrs	r2, r3, #16
 8009c86:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c8a:	b29b      	uxth	r3, r3
 8009c8c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009c90:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009c94:	f845 3b04 	str.w	r3, [r5], #4
 8009c98:	e7e9      	b.n	8009c6e <__mdiff+0x8a>
 8009c9a:	3e01      	subs	r6, #1
 8009c9c:	e7e9      	b.n	8009c72 <__mdiff+0x8e>
	...

08009ca0 <__ulp>:
 8009ca0:	4b12      	ldr	r3, [pc, #72]	; (8009cec <__ulp+0x4c>)
 8009ca2:	ee10 2a90 	vmov	r2, s1
 8009ca6:	401a      	ands	r2, r3
 8009ca8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	dd04      	ble.n	8009cba <__ulp+0x1a>
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	4619      	mov	r1, r3
 8009cb4:	ec41 0b10 	vmov	d0, r0, r1
 8009cb8:	4770      	bx	lr
 8009cba:	425b      	negs	r3, r3
 8009cbc:	151b      	asrs	r3, r3, #20
 8009cbe:	2b13      	cmp	r3, #19
 8009cc0:	f04f 0000 	mov.w	r0, #0
 8009cc4:	f04f 0100 	mov.w	r1, #0
 8009cc8:	dc04      	bgt.n	8009cd4 <__ulp+0x34>
 8009cca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009cce:	fa42 f103 	asr.w	r1, r2, r3
 8009cd2:	e7ef      	b.n	8009cb4 <__ulp+0x14>
 8009cd4:	3b14      	subs	r3, #20
 8009cd6:	2b1e      	cmp	r3, #30
 8009cd8:	f04f 0201 	mov.w	r2, #1
 8009cdc:	bfda      	itte	le
 8009cde:	f1c3 031f 	rsble	r3, r3, #31
 8009ce2:	fa02 f303 	lslle.w	r3, r2, r3
 8009ce6:	4613      	movgt	r3, r2
 8009ce8:	4618      	mov	r0, r3
 8009cea:	e7e3      	b.n	8009cb4 <__ulp+0x14>
 8009cec:	7ff00000 	.word	0x7ff00000

08009cf0 <__b2d>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	6905      	ldr	r5, [r0, #16]
 8009cf4:	f100 0714 	add.w	r7, r0, #20
 8009cf8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8009cfc:	1f2e      	subs	r6, r5, #4
 8009cfe:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009d02:	4620      	mov	r0, r4
 8009d04:	f7ff fdc4 	bl	8009890 <__hi0bits>
 8009d08:	f1c0 0320 	rsb	r3, r0, #32
 8009d0c:	280a      	cmp	r0, #10
 8009d0e:	600b      	str	r3, [r1, #0]
 8009d10:	f8df c074 	ldr.w	ip, [pc, #116]	; 8009d88 <__b2d+0x98>
 8009d14:	dc14      	bgt.n	8009d40 <__b2d+0x50>
 8009d16:	f1c0 0e0b 	rsb	lr, r0, #11
 8009d1a:	fa24 f10e 	lsr.w	r1, r4, lr
 8009d1e:	42b7      	cmp	r7, r6
 8009d20:	ea41 030c 	orr.w	r3, r1, ip
 8009d24:	bf34      	ite	cc
 8009d26:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d2a:	2100      	movcs	r1, #0
 8009d2c:	3015      	adds	r0, #21
 8009d2e:	fa04 f000 	lsl.w	r0, r4, r0
 8009d32:	fa21 f10e 	lsr.w	r1, r1, lr
 8009d36:	ea40 0201 	orr.w	r2, r0, r1
 8009d3a:	ec43 2b10 	vmov	d0, r2, r3
 8009d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d40:	42b7      	cmp	r7, r6
 8009d42:	bf3a      	itte	cc
 8009d44:	f1a5 0608 	subcc.w	r6, r5, #8
 8009d48:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009d4c:	2100      	movcs	r1, #0
 8009d4e:	380b      	subs	r0, #11
 8009d50:	d015      	beq.n	8009d7e <__b2d+0x8e>
 8009d52:	4084      	lsls	r4, r0
 8009d54:	f1c0 0520 	rsb	r5, r0, #32
 8009d58:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8009d5c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8009d60:	42be      	cmp	r6, r7
 8009d62:	fa21 fc05 	lsr.w	ip, r1, r5
 8009d66:	ea44 030c 	orr.w	r3, r4, ip
 8009d6a:	bf8c      	ite	hi
 8009d6c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8009d70:	2400      	movls	r4, #0
 8009d72:	fa01 f000 	lsl.w	r0, r1, r0
 8009d76:	40ec      	lsrs	r4, r5
 8009d78:	ea40 0204 	orr.w	r2, r0, r4
 8009d7c:	e7dd      	b.n	8009d3a <__b2d+0x4a>
 8009d7e:	ea44 030c 	orr.w	r3, r4, ip
 8009d82:	460a      	mov	r2, r1
 8009d84:	e7d9      	b.n	8009d3a <__b2d+0x4a>
 8009d86:	bf00      	nop
 8009d88:	3ff00000 	.word	0x3ff00000

08009d8c <__d2b>:
 8009d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d90:	460e      	mov	r6, r1
 8009d92:	2101      	movs	r1, #1
 8009d94:	ec59 8b10 	vmov	r8, r9, d0
 8009d98:	4615      	mov	r5, r2
 8009d9a:	f7ff fcb5 	bl	8009708 <_Balloc>
 8009d9e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009da2:	4607      	mov	r7, r0
 8009da4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009da8:	bb34      	cbnz	r4, 8009df8 <__d2b+0x6c>
 8009daa:	9301      	str	r3, [sp, #4]
 8009dac:	f1b8 0300 	subs.w	r3, r8, #0
 8009db0:	d027      	beq.n	8009e02 <__d2b+0x76>
 8009db2:	a802      	add	r0, sp, #8
 8009db4:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009db8:	f7ff fd89 	bl	80098ce <__lo0bits>
 8009dbc:	9900      	ldr	r1, [sp, #0]
 8009dbe:	b1f0      	cbz	r0, 8009dfe <__d2b+0x72>
 8009dc0:	9a01      	ldr	r2, [sp, #4]
 8009dc2:	f1c0 0320 	rsb	r3, r0, #32
 8009dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8009dca:	430b      	orrs	r3, r1
 8009dcc:	40c2      	lsrs	r2, r0
 8009dce:	617b      	str	r3, [r7, #20]
 8009dd0:	9201      	str	r2, [sp, #4]
 8009dd2:	9b01      	ldr	r3, [sp, #4]
 8009dd4:	61bb      	str	r3, [r7, #24]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	bf14      	ite	ne
 8009dda:	2102      	movne	r1, #2
 8009ddc:	2101      	moveq	r1, #1
 8009dde:	6139      	str	r1, [r7, #16]
 8009de0:	b1c4      	cbz	r4, 8009e14 <__d2b+0x88>
 8009de2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009de6:	4404      	add	r4, r0
 8009de8:	6034      	str	r4, [r6, #0]
 8009dea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009dee:	6028      	str	r0, [r5, #0]
 8009df0:	4638      	mov	r0, r7
 8009df2:	b003      	add	sp, #12
 8009df4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dfc:	e7d5      	b.n	8009daa <__d2b+0x1e>
 8009dfe:	6179      	str	r1, [r7, #20]
 8009e00:	e7e7      	b.n	8009dd2 <__d2b+0x46>
 8009e02:	a801      	add	r0, sp, #4
 8009e04:	f7ff fd63 	bl	80098ce <__lo0bits>
 8009e08:	9b01      	ldr	r3, [sp, #4]
 8009e0a:	617b      	str	r3, [r7, #20]
 8009e0c:	2101      	movs	r1, #1
 8009e0e:	6139      	str	r1, [r7, #16]
 8009e10:	3020      	adds	r0, #32
 8009e12:	e7e5      	b.n	8009de0 <__d2b+0x54>
 8009e14:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009e18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e1c:	6030      	str	r0, [r6, #0]
 8009e1e:	6918      	ldr	r0, [r3, #16]
 8009e20:	f7ff fd36 	bl	8009890 <__hi0bits>
 8009e24:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009e28:	e7e1      	b.n	8009dee <__d2b+0x62>

08009e2a <__ratio>:
 8009e2a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e2e:	4688      	mov	r8, r1
 8009e30:	4669      	mov	r1, sp
 8009e32:	4681      	mov	r9, r0
 8009e34:	f7ff ff5c 	bl	8009cf0 <__b2d>
 8009e38:	a901      	add	r1, sp, #4
 8009e3a:	4640      	mov	r0, r8
 8009e3c:	ec57 6b10 	vmov	r6, r7, d0
 8009e40:	f7ff ff56 	bl	8009cf0 <__b2d>
 8009e44:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009e48:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009e4c:	eba3 0c02 	sub.w	ip, r3, r2
 8009e50:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009e54:	1a9b      	subs	r3, r3, r2
 8009e56:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009e5a:	ec5b ab10 	vmov	sl, fp, d0
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	bfce      	itee	gt
 8009e62:	463a      	movgt	r2, r7
 8009e64:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009e68:	465a      	movle	r2, fp
 8009e6a:	4659      	mov	r1, fp
 8009e6c:	463d      	mov	r5, r7
 8009e6e:	bfd4      	ite	le
 8009e70:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8009e74:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8009e78:	4630      	mov	r0, r6
 8009e7a:	ee10 2a10 	vmov	r2, s0
 8009e7e:	460b      	mov	r3, r1
 8009e80:	4629      	mov	r1, r5
 8009e82:	f7f6 fddb 	bl	8000a3c <__aeabi_ddiv>
 8009e86:	ec41 0b10 	vmov	d0, r0, r1
 8009e8a:	b003      	add	sp, #12
 8009e8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009e90 <__copybits>:
 8009e90:	3901      	subs	r1, #1
 8009e92:	b510      	push	{r4, lr}
 8009e94:	1149      	asrs	r1, r1, #5
 8009e96:	6914      	ldr	r4, [r2, #16]
 8009e98:	3101      	adds	r1, #1
 8009e9a:	f102 0314 	add.w	r3, r2, #20
 8009e9e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009ea2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009ea6:	42a3      	cmp	r3, r4
 8009ea8:	4602      	mov	r2, r0
 8009eaa:	d303      	bcc.n	8009eb4 <__copybits+0x24>
 8009eac:	2300      	movs	r3, #0
 8009eae:	428a      	cmp	r2, r1
 8009eb0:	d305      	bcc.n	8009ebe <__copybits+0x2e>
 8009eb2:	bd10      	pop	{r4, pc}
 8009eb4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eb8:	f840 2b04 	str.w	r2, [r0], #4
 8009ebc:	e7f3      	b.n	8009ea6 <__copybits+0x16>
 8009ebe:	f842 3b04 	str.w	r3, [r2], #4
 8009ec2:	e7f4      	b.n	8009eae <__copybits+0x1e>

08009ec4 <__any_on>:
 8009ec4:	f100 0214 	add.w	r2, r0, #20
 8009ec8:	6900      	ldr	r0, [r0, #16]
 8009eca:	114b      	asrs	r3, r1, #5
 8009ecc:	4298      	cmp	r0, r3
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	db11      	blt.n	8009ef6 <__any_on+0x32>
 8009ed2:	dd0a      	ble.n	8009eea <__any_on+0x26>
 8009ed4:	f011 011f 	ands.w	r1, r1, #31
 8009ed8:	d007      	beq.n	8009eea <__any_on+0x26>
 8009eda:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009ede:	fa24 f001 	lsr.w	r0, r4, r1
 8009ee2:	fa00 f101 	lsl.w	r1, r0, r1
 8009ee6:	428c      	cmp	r4, r1
 8009ee8:	d10b      	bne.n	8009f02 <__any_on+0x3e>
 8009eea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009eee:	4293      	cmp	r3, r2
 8009ef0:	d803      	bhi.n	8009efa <__any_on+0x36>
 8009ef2:	2000      	movs	r0, #0
 8009ef4:	bd10      	pop	{r4, pc}
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	e7f7      	b.n	8009eea <__any_on+0x26>
 8009efa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009efe:	2900      	cmp	r1, #0
 8009f00:	d0f5      	beq.n	8009eee <__any_on+0x2a>
 8009f02:	2001      	movs	r0, #1
 8009f04:	e7f6      	b.n	8009ef4 <__any_on+0x30>

08009f06 <_calloc_r>:
 8009f06:	b538      	push	{r3, r4, r5, lr}
 8009f08:	fb02 f401 	mul.w	r4, r2, r1
 8009f0c:	4621      	mov	r1, r4
 8009f0e:	f000 f857 	bl	8009fc0 <_malloc_r>
 8009f12:	4605      	mov	r5, r0
 8009f14:	b118      	cbz	r0, 8009f1e <_calloc_r+0x18>
 8009f16:	4622      	mov	r2, r4
 8009f18:	2100      	movs	r1, #0
 8009f1a:	f7fc fd40 	bl	800699e <memset>
 8009f1e:	4628      	mov	r0, r5
 8009f20:	bd38      	pop	{r3, r4, r5, pc}
	...

08009f24 <_free_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4605      	mov	r5, r0
 8009f28:	2900      	cmp	r1, #0
 8009f2a:	d045      	beq.n	8009fb8 <_free_r+0x94>
 8009f2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f30:	1f0c      	subs	r4, r1, #4
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	bfb8      	it	lt
 8009f36:	18e4      	addlt	r4, r4, r3
 8009f38:	f000 fa36 	bl	800a3a8 <__malloc_lock>
 8009f3c:	4a1f      	ldr	r2, [pc, #124]	; (8009fbc <_free_r+0x98>)
 8009f3e:	6813      	ldr	r3, [r2, #0]
 8009f40:	4610      	mov	r0, r2
 8009f42:	b933      	cbnz	r3, 8009f52 <_free_r+0x2e>
 8009f44:	6063      	str	r3, [r4, #4]
 8009f46:	6014      	str	r4, [r2, #0]
 8009f48:	4628      	mov	r0, r5
 8009f4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009f4e:	f000 ba2c 	b.w	800a3aa <__malloc_unlock>
 8009f52:	42a3      	cmp	r3, r4
 8009f54:	d90c      	bls.n	8009f70 <_free_r+0x4c>
 8009f56:	6821      	ldr	r1, [r4, #0]
 8009f58:	1862      	adds	r2, r4, r1
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	bf04      	itt	eq
 8009f5e:	681a      	ldreq	r2, [r3, #0]
 8009f60:	685b      	ldreq	r3, [r3, #4]
 8009f62:	6063      	str	r3, [r4, #4]
 8009f64:	bf04      	itt	eq
 8009f66:	1852      	addeq	r2, r2, r1
 8009f68:	6022      	streq	r2, [r4, #0]
 8009f6a:	6004      	str	r4, [r0, #0]
 8009f6c:	e7ec      	b.n	8009f48 <_free_r+0x24>
 8009f6e:	4613      	mov	r3, r2
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	b10a      	cbz	r2, 8009f78 <_free_r+0x54>
 8009f74:	42a2      	cmp	r2, r4
 8009f76:	d9fa      	bls.n	8009f6e <_free_r+0x4a>
 8009f78:	6819      	ldr	r1, [r3, #0]
 8009f7a:	1858      	adds	r0, r3, r1
 8009f7c:	42a0      	cmp	r0, r4
 8009f7e:	d10b      	bne.n	8009f98 <_free_r+0x74>
 8009f80:	6820      	ldr	r0, [r4, #0]
 8009f82:	4401      	add	r1, r0
 8009f84:	1858      	adds	r0, r3, r1
 8009f86:	4282      	cmp	r2, r0
 8009f88:	6019      	str	r1, [r3, #0]
 8009f8a:	d1dd      	bne.n	8009f48 <_free_r+0x24>
 8009f8c:	6810      	ldr	r0, [r2, #0]
 8009f8e:	6852      	ldr	r2, [r2, #4]
 8009f90:	605a      	str	r2, [r3, #4]
 8009f92:	4401      	add	r1, r0
 8009f94:	6019      	str	r1, [r3, #0]
 8009f96:	e7d7      	b.n	8009f48 <_free_r+0x24>
 8009f98:	d902      	bls.n	8009fa0 <_free_r+0x7c>
 8009f9a:	230c      	movs	r3, #12
 8009f9c:	602b      	str	r3, [r5, #0]
 8009f9e:	e7d3      	b.n	8009f48 <_free_r+0x24>
 8009fa0:	6820      	ldr	r0, [r4, #0]
 8009fa2:	1821      	adds	r1, r4, r0
 8009fa4:	428a      	cmp	r2, r1
 8009fa6:	bf04      	itt	eq
 8009fa8:	6811      	ldreq	r1, [r2, #0]
 8009faa:	6852      	ldreq	r2, [r2, #4]
 8009fac:	6062      	str	r2, [r4, #4]
 8009fae:	bf04      	itt	eq
 8009fb0:	1809      	addeq	r1, r1, r0
 8009fb2:	6021      	streq	r1, [r4, #0]
 8009fb4:	605c      	str	r4, [r3, #4]
 8009fb6:	e7c7      	b.n	8009f48 <_free_r+0x24>
 8009fb8:	bd38      	pop	{r3, r4, r5, pc}
 8009fba:	bf00      	nop
 8009fbc:	20000200 	.word	0x20000200

08009fc0 <_malloc_r>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	1ccd      	adds	r5, r1, #3
 8009fc4:	f025 0503 	bic.w	r5, r5, #3
 8009fc8:	3508      	adds	r5, #8
 8009fca:	2d0c      	cmp	r5, #12
 8009fcc:	bf38      	it	cc
 8009fce:	250c      	movcc	r5, #12
 8009fd0:	2d00      	cmp	r5, #0
 8009fd2:	4606      	mov	r6, r0
 8009fd4:	db01      	blt.n	8009fda <_malloc_r+0x1a>
 8009fd6:	42a9      	cmp	r1, r5
 8009fd8:	d903      	bls.n	8009fe2 <_malloc_r+0x22>
 8009fda:	230c      	movs	r3, #12
 8009fdc:	6033      	str	r3, [r6, #0]
 8009fde:	2000      	movs	r0, #0
 8009fe0:	bd70      	pop	{r4, r5, r6, pc}
 8009fe2:	f000 f9e1 	bl	800a3a8 <__malloc_lock>
 8009fe6:	4a21      	ldr	r2, [pc, #132]	; (800a06c <_malloc_r+0xac>)
 8009fe8:	6814      	ldr	r4, [r2, #0]
 8009fea:	4621      	mov	r1, r4
 8009fec:	b991      	cbnz	r1, 800a014 <_malloc_r+0x54>
 8009fee:	4c20      	ldr	r4, [pc, #128]	; (800a070 <_malloc_r+0xb0>)
 8009ff0:	6823      	ldr	r3, [r4, #0]
 8009ff2:	b91b      	cbnz	r3, 8009ffc <_malloc_r+0x3c>
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	f000 f98f 	bl	800a318 <_sbrk_r>
 8009ffa:	6020      	str	r0, [r4, #0]
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4630      	mov	r0, r6
 800a000:	f000 f98a 	bl	800a318 <_sbrk_r>
 800a004:	1c43      	adds	r3, r0, #1
 800a006:	d124      	bne.n	800a052 <_malloc_r+0x92>
 800a008:	230c      	movs	r3, #12
 800a00a:	6033      	str	r3, [r6, #0]
 800a00c:	4630      	mov	r0, r6
 800a00e:	f000 f9cc 	bl	800a3aa <__malloc_unlock>
 800a012:	e7e4      	b.n	8009fde <_malloc_r+0x1e>
 800a014:	680b      	ldr	r3, [r1, #0]
 800a016:	1b5b      	subs	r3, r3, r5
 800a018:	d418      	bmi.n	800a04c <_malloc_r+0x8c>
 800a01a:	2b0b      	cmp	r3, #11
 800a01c:	d90f      	bls.n	800a03e <_malloc_r+0x7e>
 800a01e:	600b      	str	r3, [r1, #0]
 800a020:	50cd      	str	r5, [r1, r3]
 800a022:	18cc      	adds	r4, r1, r3
 800a024:	4630      	mov	r0, r6
 800a026:	f000 f9c0 	bl	800a3aa <__malloc_unlock>
 800a02a:	f104 000b 	add.w	r0, r4, #11
 800a02e:	1d23      	adds	r3, r4, #4
 800a030:	f020 0007 	bic.w	r0, r0, #7
 800a034:	1ac3      	subs	r3, r0, r3
 800a036:	d0d3      	beq.n	8009fe0 <_malloc_r+0x20>
 800a038:	425a      	negs	r2, r3
 800a03a:	50e2      	str	r2, [r4, r3]
 800a03c:	e7d0      	b.n	8009fe0 <_malloc_r+0x20>
 800a03e:	428c      	cmp	r4, r1
 800a040:	684b      	ldr	r3, [r1, #4]
 800a042:	bf16      	itet	ne
 800a044:	6063      	strne	r3, [r4, #4]
 800a046:	6013      	streq	r3, [r2, #0]
 800a048:	460c      	movne	r4, r1
 800a04a:	e7eb      	b.n	800a024 <_malloc_r+0x64>
 800a04c:	460c      	mov	r4, r1
 800a04e:	6849      	ldr	r1, [r1, #4]
 800a050:	e7cc      	b.n	8009fec <_malloc_r+0x2c>
 800a052:	1cc4      	adds	r4, r0, #3
 800a054:	f024 0403 	bic.w	r4, r4, #3
 800a058:	42a0      	cmp	r0, r4
 800a05a:	d005      	beq.n	800a068 <_malloc_r+0xa8>
 800a05c:	1a21      	subs	r1, r4, r0
 800a05e:	4630      	mov	r0, r6
 800a060:	f000 f95a 	bl	800a318 <_sbrk_r>
 800a064:	3001      	adds	r0, #1
 800a066:	d0cf      	beq.n	800a008 <_malloc_r+0x48>
 800a068:	6025      	str	r5, [r4, #0]
 800a06a:	e7db      	b.n	800a024 <_malloc_r+0x64>
 800a06c:	20000200 	.word	0x20000200
 800a070:	20000204 	.word	0x20000204

0800a074 <__ssputs_r>:
 800a074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a078:	688e      	ldr	r6, [r1, #8]
 800a07a:	429e      	cmp	r6, r3
 800a07c:	4682      	mov	sl, r0
 800a07e:	460c      	mov	r4, r1
 800a080:	4690      	mov	r8, r2
 800a082:	4699      	mov	r9, r3
 800a084:	d837      	bhi.n	800a0f6 <__ssputs_r+0x82>
 800a086:	898a      	ldrh	r2, [r1, #12]
 800a088:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a08c:	d031      	beq.n	800a0f2 <__ssputs_r+0x7e>
 800a08e:	6825      	ldr	r5, [r4, #0]
 800a090:	6909      	ldr	r1, [r1, #16]
 800a092:	1a6f      	subs	r7, r5, r1
 800a094:	6965      	ldr	r5, [r4, #20]
 800a096:	2302      	movs	r3, #2
 800a098:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a09c:	fb95 f5f3 	sdiv	r5, r5, r3
 800a0a0:	f109 0301 	add.w	r3, r9, #1
 800a0a4:	443b      	add	r3, r7
 800a0a6:	429d      	cmp	r5, r3
 800a0a8:	bf38      	it	cc
 800a0aa:	461d      	movcc	r5, r3
 800a0ac:	0553      	lsls	r3, r2, #21
 800a0ae:	d530      	bpl.n	800a112 <__ssputs_r+0x9e>
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	f7ff ff85 	bl	8009fc0 <_malloc_r>
 800a0b6:	4606      	mov	r6, r0
 800a0b8:	b950      	cbnz	r0, 800a0d0 <__ssputs_r+0x5c>
 800a0ba:	230c      	movs	r3, #12
 800a0bc:	f8ca 3000 	str.w	r3, [sl]
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0c6:	81a3      	strh	r3, [r4, #12]
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0d0:	463a      	mov	r2, r7
 800a0d2:	6921      	ldr	r1, [r4, #16]
 800a0d4:	f7fc fc58 	bl	8006988 <memcpy>
 800a0d8:	89a3      	ldrh	r3, [r4, #12]
 800a0da:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0e2:	81a3      	strh	r3, [r4, #12]
 800a0e4:	6126      	str	r6, [r4, #16]
 800a0e6:	6165      	str	r5, [r4, #20]
 800a0e8:	443e      	add	r6, r7
 800a0ea:	1bed      	subs	r5, r5, r7
 800a0ec:	6026      	str	r6, [r4, #0]
 800a0ee:	60a5      	str	r5, [r4, #8]
 800a0f0:	464e      	mov	r6, r9
 800a0f2:	454e      	cmp	r6, r9
 800a0f4:	d900      	bls.n	800a0f8 <__ssputs_r+0x84>
 800a0f6:	464e      	mov	r6, r9
 800a0f8:	4632      	mov	r2, r6
 800a0fa:	4641      	mov	r1, r8
 800a0fc:	6820      	ldr	r0, [r4, #0]
 800a0fe:	f000 f93a 	bl	800a376 <memmove>
 800a102:	68a3      	ldr	r3, [r4, #8]
 800a104:	1b9b      	subs	r3, r3, r6
 800a106:	60a3      	str	r3, [r4, #8]
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	441e      	add	r6, r3
 800a10c:	6026      	str	r6, [r4, #0]
 800a10e:	2000      	movs	r0, #0
 800a110:	e7dc      	b.n	800a0cc <__ssputs_r+0x58>
 800a112:	462a      	mov	r2, r5
 800a114:	f000 f94a 	bl	800a3ac <_realloc_r>
 800a118:	4606      	mov	r6, r0
 800a11a:	2800      	cmp	r0, #0
 800a11c:	d1e2      	bne.n	800a0e4 <__ssputs_r+0x70>
 800a11e:	6921      	ldr	r1, [r4, #16]
 800a120:	4650      	mov	r0, sl
 800a122:	f7ff feff 	bl	8009f24 <_free_r>
 800a126:	e7c8      	b.n	800a0ba <__ssputs_r+0x46>

0800a128 <_svfiprintf_r>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	461d      	mov	r5, r3
 800a12e:	898b      	ldrh	r3, [r1, #12]
 800a130:	061f      	lsls	r7, r3, #24
 800a132:	b09d      	sub	sp, #116	; 0x74
 800a134:	4680      	mov	r8, r0
 800a136:	460c      	mov	r4, r1
 800a138:	4616      	mov	r6, r2
 800a13a:	d50f      	bpl.n	800a15c <_svfiprintf_r+0x34>
 800a13c:	690b      	ldr	r3, [r1, #16]
 800a13e:	b96b      	cbnz	r3, 800a15c <_svfiprintf_r+0x34>
 800a140:	2140      	movs	r1, #64	; 0x40
 800a142:	f7ff ff3d 	bl	8009fc0 <_malloc_r>
 800a146:	6020      	str	r0, [r4, #0]
 800a148:	6120      	str	r0, [r4, #16]
 800a14a:	b928      	cbnz	r0, 800a158 <_svfiprintf_r+0x30>
 800a14c:	230c      	movs	r3, #12
 800a14e:	f8c8 3000 	str.w	r3, [r8]
 800a152:	f04f 30ff 	mov.w	r0, #4294967295
 800a156:	e0c8      	b.n	800a2ea <_svfiprintf_r+0x1c2>
 800a158:	2340      	movs	r3, #64	; 0x40
 800a15a:	6163      	str	r3, [r4, #20]
 800a15c:	2300      	movs	r3, #0
 800a15e:	9309      	str	r3, [sp, #36]	; 0x24
 800a160:	2320      	movs	r3, #32
 800a162:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a166:	2330      	movs	r3, #48	; 0x30
 800a168:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a16c:	9503      	str	r5, [sp, #12]
 800a16e:	f04f 0b01 	mov.w	fp, #1
 800a172:	4637      	mov	r7, r6
 800a174:	463d      	mov	r5, r7
 800a176:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a17a:	b10b      	cbz	r3, 800a180 <_svfiprintf_r+0x58>
 800a17c:	2b25      	cmp	r3, #37	; 0x25
 800a17e:	d13e      	bne.n	800a1fe <_svfiprintf_r+0xd6>
 800a180:	ebb7 0a06 	subs.w	sl, r7, r6
 800a184:	d00b      	beq.n	800a19e <_svfiprintf_r+0x76>
 800a186:	4653      	mov	r3, sl
 800a188:	4632      	mov	r2, r6
 800a18a:	4621      	mov	r1, r4
 800a18c:	4640      	mov	r0, r8
 800a18e:	f7ff ff71 	bl	800a074 <__ssputs_r>
 800a192:	3001      	adds	r0, #1
 800a194:	f000 80a4 	beq.w	800a2e0 <_svfiprintf_r+0x1b8>
 800a198:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19a:	4453      	add	r3, sl
 800a19c:	9309      	str	r3, [sp, #36]	; 0x24
 800a19e:	783b      	ldrb	r3, [r7, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	f000 809d 	beq.w	800a2e0 <_svfiprintf_r+0x1b8>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800a1ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	9307      	str	r3, [sp, #28]
 800a1b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1b8:	931a      	str	r3, [sp, #104]	; 0x68
 800a1ba:	462f      	mov	r7, r5
 800a1bc:	2205      	movs	r2, #5
 800a1be:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a1c2:	4850      	ldr	r0, [pc, #320]	; (800a304 <_svfiprintf_r+0x1dc>)
 800a1c4:	f7f6 f904 	bl	80003d0 <memchr>
 800a1c8:	9b04      	ldr	r3, [sp, #16]
 800a1ca:	b9d0      	cbnz	r0, 800a202 <_svfiprintf_r+0xda>
 800a1cc:	06d9      	lsls	r1, r3, #27
 800a1ce:	bf44      	itt	mi
 800a1d0:	2220      	movmi	r2, #32
 800a1d2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1d6:	071a      	lsls	r2, r3, #28
 800a1d8:	bf44      	itt	mi
 800a1da:	222b      	movmi	r2, #43	; 0x2b
 800a1dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a1e0:	782a      	ldrb	r2, [r5, #0]
 800a1e2:	2a2a      	cmp	r2, #42	; 0x2a
 800a1e4:	d015      	beq.n	800a212 <_svfiprintf_r+0xea>
 800a1e6:	9a07      	ldr	r2, [sp, #28]
 800a1e8:	462f      	mov	r7, r5
 800a1ea:	2000      	movs	r0, #0
 800a1ec:	250a      	movs	r5, #10
 800a1ee:	4639      	mov	r1, r7
 800a1f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1f4:	3b30      	subs	r3, #48	; 0x30
 800a1f6:	2b09      	cmp	r3, #9
 800a1f8:	d94d      	bls.n	800a296 <_svfiprintf_r+0x16e>
 800a1fa:	b1b8      	cbz	r0, 800a22c <_svfiprintf_r+0x104>
 800a1fc:	e00f      	b.n	800a21e <_svfiprintf_r+0xf6>
 800a1fe:	462f      	mov	r7, r5
 800a200:	e7b8      	b.n	800a174 <_svfiprintf_r+0x4c>
 800a202:	4a40      	ldr	r2, [pc, #256]	; (800a304 <_svfiprintf_r+0x1dc>)
 800a204:	1a80      	subs	r0, r0, r2
 800a206:	fa0b f000 	lsl.w	r0, fp, r0
 800a20a:	4318      	orrs	r0, r3
 800a20c:	9004      	str	r0, [sp, #16]
 800a20e:	463d      	mov	r5, r7
 800a210:	e7d3      	b.n	800a1ba <_svfiprintf_r+0x92>
 800a212:	9a03      	ldr	r2, [sp, #12]
 800a214:	1d11      	adds	r1, r2, #4
 800a216:	6812      	ldr	r2, [r2, #0]
 800a218:	9103      	str	r1, [sp, #12]
 800a21a:	2a00      	cmp	r2, #0
 800a21c:	db01      	blt.n	800a222 <_svfiprintf_r+0xfa>
 800a21e:	9207      	str	r2, [sp, #28]
 800a220:	e004      	b.n	800a22c <_svfiprintf_r+0x104>
 800a222:	4252      	negs	r2, r2
 800a224:	f043 0302 	orr.w	r3, r3, #2
 800a228:	9207      	str	r2, [sp, #28]
 800a22a:	9304      	str	r3, [sp, #16]
 800a22c:	783b      	ldrb	r3, [r7, #0]
 800a22e:	2b2e      	cmp	r3, #46	; 0x2e
 800a230:	d10c      	bne.n	800a24c <_svfiprintf_r+0x124>
 800a232:	787b      	ldrb	r3, [r7, #1]
 800a234:	2b2a      	cmp	r3, #42	; 0x2a
 800a236:	d133      	bne.n	800a2a0 <_svfiprintf_r+0x178>
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	1d1a      	adds	r2, r3, #4
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	9203      	str	r2, [sp, #12]
 800a240:	2b00      	cmp	r3, #0
 800a242:	bfb8      	it	lt
 800a244:	f04f 33ff 	movlt.w	r3, #4294967295
 800a248:	3702      	adds	r7, #2
 800a24a:	9305      	str	r3, [sp, #20]
 800a24c:	4d2e      	ldr	r5, [pc, #184]	; (800a308 <_svfiprintf_r+0x1e0>)
 800a24e:	7839      	ldrb	r1, [r7, #0]
 800a250:	2203      	movs	r2, #3
 800a252:	4628      	mov	r0, r5
 800a254:	f7f6 f8bc 	bl	80003d0 <memchr>
 800a258:	b138      	cbz	r0, 800a26a <_svfiprintf_r+0x142>
 800a25a:	2340      	movs	r3, #64	; 0x40
 800a25c:	1b40      	subs	r0, r0, r5
 800a25e:	fa03 f000 	lsl.w	r0, r3, r0
 800a262:	9b04      	ldr	r3, [sp, #16]
 800a264:	4303      	orrs	r3, r0
 800a266:	3701      	adds	r7, #1
 800a268:	9304      	str	r3, [sp, #16]
 800a26a:	7839      	ldrb	r1, [r7, #0]
 800a26c:	4827      	ldr	r0, [pc, #156]	; (800a30c <_svfiprintf_r+0x1e4>)
 800a26e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a272:	2206      	movs	r2, #6
 800a274:	1c7e      	adds	r6, r7, #1
 800a276:	f7f6 f8ab 	bl	80003d0 <memchr>
 800a27a:	2800      	cmp	r0, #0
 800a27c:	d038      	beq.n	800a2f0 <_svfiprintf_r+0x1c8>
 800a27e:	4b24      	ldr	r3, [pc, #144]	; (800a310 <_svfiprintf_r+0x1e8>)
 800a280:	bb13      	cbnz	r3, 800a2c8 <_svfiprintf_r+0x1a0>
 800a282:	9b03      	ldr	r3, [sp, #12]
 800a284:	3307      	adds	r3, #7
 800a286:	f023 0307 	bic.w	r3, r3, #7
 800a28a:	3308      	adds	r3, #8
 800a28c:	9303      	str	r3, [sp, #12]
 800a28e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a290:	444b      	add	r3, r9
 800a292:	9309      	str	r3, [sp, #36]	; 0x24
 800a294:	e76d      	b.n	800a172 <_svfiprintf_r+0x4a>
 800a296:	fb05 3202 	mla	r2, r5, r2, r3
 800a29a:	2001      	movs	r0, #1
 800a29c:	460f      	mov	r7, r1
 800a29e:	e7a6      	b.n	800a1ee <_svfiprintf_r+0xc6>
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	3701      	adds	r7, #1
 800a2a4:	9305      	str	r3, [sp, #20]
 800a2a6:	4619      	mov	r1, r3
 800a2a8:	250a      	movs	r5, #10
 800a2aa:	4638      	mov	r0, r7
 800a2ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b0:	3a30      	subs	r2, #48	; 0x30
 800a2b2:	2a09      	cmp	r2, #9
 800a2b4:	d903      	bls.n	800a2be <_svfiprintf_r+0x196>
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d0c8      	beq.n	800a24c <_svfiprintf_r+0x124>
 800a2ba:	9105      	str	r1, [sp, #20]
 800a2bc:	e7c6      	b.n	800a24c <_svfiprintf_r+0x124>
 800a2be:	fb05 2101 	mla	r1, r5, r1, r2
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4607      	mov	r7, r0
 800a2c6:	e7f0      	b.n	800a2aa <_svfiprintf_r+0x182>
 800a2c8:	ab03      	add	r3, sp, #12
 800a2ca:	9300      	str	r3, [sp, #0]
 800a2cc:	4622      	mov	r2, r4
 800a2ce:	4b11      	ldr	r3, [pc, #68]	; (800a314 <_svfiprintf_r+0x1ec>)
 800a2d0:	a904      	add	r1, sp, #16
 800a2d2:	4640      	mov	r0, r8
 800a2d4:	f7fc fc00 	bl	8006ad8 <_printf_float>
 800a2d8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a2dc:	4681      	mov	r9, r0
 800a2de:	d1d6      	bne.n	800a28e <_svfiprintf_r+0x166>
 800a2e0:	89a3      	ldrh	r3, [r4, #12]
 800a2e2:	065b      	lsls	r3, r3, #25
 800a2e4:	f53f af35 	bmi.w	800a152 <_svfiprintf_r+0x2a>
 800a2e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2ea:	b01d      	add	sp, #116	; 0x74
 800a2ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2f0:	ab03      	add	r3, sp, #12
 800a2f2:	9300      	str	r3, [sp, #0]
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	4b07      	ldr	r3, [pc, #28]	; (800a314 <_svfiprintf_r+0x1ec>)
 800a2f8:	a904      	add	r1, sp, #16
 800a2fa:	4640      	mov	r0, r8
 800a2fc:	f7fc fea2 	bl	8007044 <_printf_i>
 800a300:	e7ea      	b.n	800a2d8 <_svfiprintf_r+0x1b0>
 800a302:	bf00      	nop
 800a304:	0800b4a4 	.word	0x0800b4a4
 800a308:	0800b4aa 	.word	0x0800b4aa
 800a30c:	0800b4ae 	.word	0x0800b4ae
 800a310:	08006ad9 	.word	0x08006ad9
 800a314:	0800a075 	.word	0x0800a075

0800a318 <_sbrk_r>:
 800a318:	b538      	push	{r3, r4, r5, lr}
 800a31a:	4c06      	ldr	r4, [pc, #24]	; (800a334 <_sbrk_r+0x1c>)
 800a31c:	2300      	movs	r3, #0
 800a31e:	4605      	mov	r5, r0
 800a320:	4608      	mov	r0, r1
 800a322:	6023      	str	r3, [r4, #0]
 800a324:	f7f8 f996 	bl	8002654 <_sbrk>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d102      	bne.n	800a332 <_sbrk_r+0x1a>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	b103      	cbz	r3, 800a332 <_sbrk_r+0x1a>
 800a330:	602b      	str	r3, [r5, #0]
 800a332:	bd38      	pop	{r3, r4, r5, pc}
 800a334:	200002e4 	.word	0x200002e4

0800a338 <strncmp>:
 800a338:	b510      	push	{r4, lr}
 800a33a:	b16a      	cbz	r2, 800a358 <strncmp+0x20>
 800a33c:	3901      	subs	r1, #1
 800a33e:	1884      	adds	r4, r0, r2
 800a340:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a344:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a348:	4293      	cmp	r3, r2
 800a34a:	d103      	bne.n	800a354 <strncmp+0x1c>
 800a34c:	42a0      	cmp	r0, r4
 800a34e:	d001      	beq.n	800a354 <strncmp+0x1c>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1f5      	bne.n	800a340 <strncmp+0x8>
 800a354:	1a98      	subs	r0, r3, r2
 800a356:	bd10      	pop	{r4, pc}
 800a358:	4610      	mov	r0, r2
 800a35a:	e7fc      	b.n	800a356 <strncmp+0x1e>

0800a35c <__ascii_wctomb>:
 800a35c:	b149      	cbz	r1, 800a372 <__ascii_wctomb+0x16>
 800a35e:	2aff      	cmp	r2, #255	; 0xff
 800a360:	bf85      	ittet	hi
 800a362:	238a      	movhi	r3, #138	; 0x8a
 800a364:	6003      	strhi	r3, [r0, #0]
 800a366:	700a      	strbls	r2, [r1, #0]
 800a368:	f04f 30ff 	movhi.w	r0, #4294967295
 800a36c:	bf98      	it	ls
 800a36e:	2001      	movls	r0, #1
 800a370:	4770      	bx	lr
 800a372:	4608      	mov	r0, r1
 800a374:	4770      	bx	lr

0800a376 <memmove>:
 800a376:	4288      	cmp	r0, r1
 800a378:	b510      	push	{r4, lr}
 800a37a:	eb01 0302 	add.w	r3, r1, r2
 800a37e:	d807      	bhi.n	800a390 <memmove+0x1a>
 800a380:	1e42      	subs	r2, r0, #1
 800a382:	4299      	cmp	r1, r3
 800a384:	d00a      	beq.n	800a39c <memmove+0x26>
 800a386:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a38a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a38e:	e7f8      	b.n	800a382 <memmove+0xc>
 800a390:	4283      	cmp	r3, r0
 800a392:	d9f5      	bls.n	800a380 <memmove+0xa>
 800a394:	1881      	adds	r1, r0, r2
 800a396:	1ad2      	subs	r2, r2, r3
 800a398:	42d3      	cmn	r3, r2
 800a39a:	d100      	bne.n	800a39e <memmove+0x28>
 800a39c:	bd10      	pop	{r4, pc}
 800a39e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a3a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a3a6:	e7f7      	b.n	800a398 <memmove+0x22>

0800a3a8 <__malloc_lock>:
 800a3a8:	4770      	bx	lr

0800a3aa <__malloc_unlock>:
 800a3aa:	4770      	bx	lr

0800a3ac <_realloc_r>:
 800a3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	4614      	mov	r4, r2
 800a3b2:	460e      	mov	r6, r1
 800a3b4:	b921      	cbnz	r1, 800a3c0 <_realloc_r+0x14>
 800a3b6:	4611      	mov	r1, r2
 800a3b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a3bc:	f7ff be00 	b.w	8009fc0 <_malloc_r>
 800a3c0:	b922      	cbnz	r2, 800a3cc <_realloc_r+0x20>
 800a3c2:	f7ff fdaf 	bl	8009f24 <_free_r>
 800a3c6:	4625      	mov	r5, r4
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3cc:	f000 f814 	bl	800a3f8 <_malloc_usable_size_r>
 800a3d0:	42a0      	cmp	r0, r4
 800a3d2:	d20f      	bcs.n	800a3f4 <_realloc_r+0x48>
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4638      	mov	r0, r7
 800a3d8:	f7ff fdf2 	bl	8009fc0 <_malloc_r>
 800a3dc:	4605      	mov	r5, r0
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d0f2      	beq.n	800a3c8 <_realloc_r+0x1c>
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4622      	mov	r2, r4
 800a3e6:	f7fc facf 	bl	8006988 <memcpy>
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	4638      	mov	r0, r7
 800a3ee:	f7ff fd99 	bl	8009f24 <_free_r>
 800a3f2:	e7e9      	b.n	800a3c8 <_realloc_r+0x1c>
 800a3f4:	4635      	mov	r5, r6
 800a3f6:	e7e7      	b.n	800a3c8 <_realloc_r+0x1c>

0800a3f8 <_malloc_usable_size_r>:
 800a3f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3fc:	1f18      	subs	r0, r3, #4
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	bfbc      	itt	lt
 800a402:	580b      	ldrlt	r3, [r1, r0]
 800a404:	18c0      	addlt	r0, r0, r3
 800a406:	4770      	bx	lr

0800a408 <sqrt>:
 800a408:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a40c:	ed2d 8b02 	vpush	{d8}
 800a410:	b08b      	sub	sp, #44	; 0x2c
 800a412:	ec55 4b10 	vmov	r4, r5, d0
 800a416:	f000 fa05 	bl	800a824 <__ieee754_sqrt>
 800a41a:	4b26      	ldr	r3, [pc, #152]	; (800a4b4 <sqrt+0xac>)
 800a41c:	eeb0 8a40 	vmov.f32	s16, s0
 800a420:	eef0 8a60 	vmov.f32	s17, s1
 800a424:	f993 6000 	ldrsb.w	r6, [r3]
 800a428:	1c73      	adds	r3, r6, #1
 800a42a:	d02a      	beq.n	800a482 <sqrt+0x7a>
 800a42c:	4622      	mov	r2, r4
 800a42e:	462b      	mov	r3, r5
 800a430:	4620      	mov	r0, r4
 800a432:	4629      	mov	r1, r5
 800a434:	f7f6 fc72 	bl	8000d1c <__aeabi_dcmpun>
 800a438:	4607      	mov	r7, r0
 800a43a:	bb10      	cbnz	r0, 800a482 <sqrt+0x7a>
 800a43c:	f04f 0800 	mov.w	r8, #0
 800a440:	f04f 0900 	mov.w	r9, #0
 800a444:	4642      	mov	r2, r8
 800a446:	464b      	mov	r3, r9
 800a448:	4620      	mov	r0, r4
 800a44a:	4629      	mov	r1, r5
 800a44c:	f7f6 fc3e 	bl	8000ccc <__aeabi_dcmplt>
 800a450:	b1b8      	cbz	r0, 800a482 <sqrt+0x7a>
 800a452:	2301      	movs	r3, #1
 800a454:	9300      	str	r3, [sp, #0]
 800a456:	4b18      	ldr	r3, [pc, #96]	; (800a4b8 <sqrt+0xb0>)
 800a458:	9301      	str	r3, [sp, #4]
 800a45a:	9708      	str	r7, [sp, #32]
 800a45c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800a460:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a464:	b9b6      	cbnz	r6, 800a494 <sqrt+0x8c>
 800a466:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800a46a:	4668      	mov	r0, sp
 800a46c:	f000 fd4d 	bl	800af0a <matherr>
 800a470:	b1d0      	cbz	r0, 800a4a8 <sqrt+0xa0>
 800a472:	9b08      	ldr	r3, [sp, #32]
 800a474:	b11b      	cbz	r3, 800a47e <sqrt+0x76>
 800a476:	f7fc fa5d 	bl	8006934 <__errno>
 800a47a:	9b08      	ldr	r3, [sp, #32]
 800a47c:	6003      	str	r3, [r0, #0]
 800a47e:	ed9d 8b06 	vldr	d8, [sp, #24]
 800a482:	eeb0 0a48 	vmov.f32	s0, s16
 800a486:	eef0 0a68 	vmov.f32	s1, s17
 800a48a:	b00b      	add	sp, #44	; 0x2c
 800a48c:	ecbd 8b02 	vpop	{d8}
 800a490:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a494:	4642      	mov	r2, r8
 800a496:	464b      	mov	r3, r9
 800a498:	4640      	mov	r0, r8
 800a49a:	4649      	mov	r1, r9
 800a49c:	f7f6 face 	bl	8000a3c <__aeabi_ddiv>
 800a4a0:	2e02      	cmp	r6, #2
 800a4a2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a4a6:	d1e0      	bne.n	800a46a <sqrt+0x62>
 800a4a8:	f7fc fa44 	bl	8006934 <__errno>
 800a4ac:	2321      	movs	r3, #33	; 0x21
 800a4ae:	6003      	str	r3, [r0, #0]
 800a4b0:	e7df      	b.n	800a472 <sqrt+0x6a>
 800a4b2:	bf00      	nop
 800a4b4:	200001dc 	.word	0x200001dc
 800a4b8:	0800b5b6 	.word	0x0800b5b6

0800a4bc <powf>:
 800a4bc:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800a4c0:	ed2d 8b04 	vpush	{d8-d9}
 800a4c4:	4ca7      	ldr	r4, [pc, #668]	; (800a764 <powf+0x2a8>)
 800a4c6:	b08a      	sub	sp, #40	; 0x28
 800a4c8:	eef0 8a40 	vmov.f32	s17, s0
 800a4cc:	eeb0 8a60 	vmov.f32	s16, s1
 800a4d0:	f000 fa58 	bl	800a984 <__ieee754_powf>
 800a4d4:	f994 5000 	ldrsb.w	r5, [r4]
 800a4d8:	1c6b      	adds	r3, r5, #1
 800a4da:	eeb0 9a40 	vmov.f32	s18, s0
 800a4de:	4626      	mov	r6, r4
 800a4e0:	d05f      	beq.n	800a5a2 <powf+0xe6>
 800a4e2:	eeb4 8a48 	vcmp.f32	s16, s16
 800a4e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4ea:	d65a      	bvs.n	800a5a2 <powf+0xe6>
 800a4ec:	eef4 8a68 	vcmp.f32	s17, s17
 800a4f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4f4:	d721      	bvc.n	800a53a <powf+0x7e>
 800a4f6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800a4fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4fe:	d150      	bne.n	800a5a2 <powf+0xe6>
 800a500:	2301      	movs	r3, #1
 800a502:	9300      	str	r3, [sp, #0]
 800a504:	4b98      	ldr	r3, [pc, #608]	; (800a768 <powf+0x2ac>)
 800a506:	9301      	str	r3, [sp, #4]
 800a508:	ee18 0a90 	vmov	r0, s17
 800a50c:	2300      	movs	r3, #0
 800a50e:	9308      	str	r3, [sp, #32]
 800a510:	f7f6 f912 	bl	8000738 <__aeabi_f2d>
 800a514:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a518:	ee18 0a10 	vmov	r0, s16
 800a51c:	f7f6 f90c 	bl	8000738 <__aeabi_f2d>
 800a520:	4b92      	ldr	r3, [pc, #584]	; (800a76c <powf+0x2b0>)
 800a522:	2200      	movs	r2, #0
 800a524:	2d02      	cmp	r5, #2
 800a526:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a52a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a52e:	d032      	beq.n	800a596 <powf+0xda>
 800a530:	4668      	mov	r0, sp
 800a532:	f000 fcea 	bl	800af0a <matherr>
 800a536:	bb40      	cbnz	r0, 800a58a <powf+0xce>
 800a538:	e065      	b.n	800a606 <powf+0x14a>
 800a53a:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800a770 <powf+0x2b4>
 800a53e:	eef4 8a69 	vcmp.f32	s17, s19
 800a542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a546:	d163      	bne.n	800a610 <powf+0x154>
 800a548:	eeb4 8a69 	vcmp.f32	s16, s19
 800a54c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a550:	d12e      	bne.n	800a5b0 <powf+0xf4>
 800a552:	2301      	movs	r3, #1
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	4b84      	ldr	r3, [pc, #528]	; (800a768 <powf+0x2ac>)
 800a558:	9301      	str	r3, [sp, #4]
 800a55a:	ee18 0a90 	vmov	r0, s17
 800a55e:	2300      	movs	r3, #0
 800a560:	9308      	str	r3, [sp, #32]
 800a562:	f7f6 f8e9 	bl	8000738 <__aeabi_f2d>
 800a566:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a56a:	ee18 0a10 	vmov	r0, s16
 800a56e:	f7f6 f8e3 	bl	8000738 <__aeabi_f2d>
 800a572:	2200      	movs	r2, #0
 800a574:	2300      	movs	r3, #0
 800a576:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a57a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a57e:	2d00      	cmp	r5, #0
 800a580:	d0d6      	beq.n	800a530 <powf+0x74>
 800a582:	4b7a      	ldr	r3, [pc, #488]	; (800a76c <powf+0x2b0>)
 800a584:	2200      	movs	r2, #0
 800a586:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a58a:	9b08      	ldr	r3, [sp, #32]
 800a58c:	b11b      	cbz	r3, 800a596 <powf+0xda>
 800a58e:	f7fc f9d1 	bl	8006934 <__errno>
 800a592:	9b08      	ldr	r3, [sp, #32]
 800a594:	6003      	str	r3, [r0, #0]
 800a596:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a59a:	f7f6 fc1d 	bl	8000dd8 <__aeabi_d2f>
 800a59e:	ee09 0a10 	vmov	s18, r0
 800a5a2:	eeb0 0a49 	vmov.f32	s0, s18
 800a5a6:	b00a      	add	sp, #40	; 0x28
 800a5a8:	ecbd 8b04 	vpop	{d8-d9}
 800a5ac:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a5b0:	eeb0 0a48 	vmov.f32	s0, s16
 800a5b4:	f000 fcb2 	bl	800af1c <finitef>
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d0f2      	beq.n	800a5a2 <powf+0xe6>
 800a5bc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a5c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5c4:	d5ed      	bpl.n	800a5a2 <powf+0xe6>
 800a5c6:	2301      	movs	r3, #1
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	4b67      	ldr	r3, [pc, #412]	; (800a768 <powf+0x2ac>)
 800a5cc:	9301      	str	r3, [sp, #4]
 800a5ce:	ee18 0a90 	vmov	r0, s17
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	9308      	str	r3, [sp, #32]
 800a5d6:	f7f6 f8af 	bl	8000738 <__aeabi_f2d>
 800a5da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a5de:	ee18 0a10 	vmov	r0, s16
 800a5e2:	f7f6 f8a9 	bl	8000738 <__aeabi_f2d>
 800a5e6:	f994 3000 	ldrsb.w	r3, [r4]
 800a5ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5ee:	b923      	cbnz	r3, 800a5fa <powf+0x13e>
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a5f8:	e79a      	b.n	800a530 <powf+0x74>
 800a5fa:	495e      	ldr	r1, [pc, #376]	; (800a774 <powf+0x2b8>)
 800a5fc:	2000      	movs	r0, #0
 800a5fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a602:	2b02      	cmp	r3, #2
 800a604:	d194      	bne.n	800a530 <powf+0x74>
 800a606:	f7fc f995 	bl	8006934 <__errno>
 800a60a:	2321      	movs	r3, #33	; 0x21
 800a60c:	6003      	str	r3, [r0, #0]
 800a60e:	e7bc      	b.n	800a58a <powf+0xce>
 800a610:	f000 fc84 	bl	800af1c <finitef>
 800a614:	4605      	mov	r5, r0
 800a616:	2800      	cmp	r0, #0
 800a618:	d173      	bne.n	800a702 <powf+0x246>
 800a61a:	eeb0 0a68 	vmov.f32	s0, s17
 800a61e:	f000 fc7d 	bl	800af1c <finitef>
 800a622:	2800      	cmp	r0, #0
 800a624:	d06d      	beq.n	800a702 <powf+0x246>
 800a626:	eeb0 0a48 	vmov.f32	s0, s16
 800a62a:	f000 fc77 	bl	800af1c <finitef>
 800a62e:	2800      	cmp	r0, #0
 800a630:	d067      	beq.n	800a702 <powf+0x246>
 800a632:	ee18 0a90 	vmov	r0, s17
 800a636:	f7f6 f87f 	bl	8000738 <__aeabi_f2d>
 800a63a:	4680      	mov	r8, r0
 800a63c:	ee18 0a10 	vmov	r0, s16
 800a640:	4689      	mov	r9, r1
 800a642:	f7f6 f879 	bl	8000738 <__aeabi_f2d>
 800a646:	eeb4 9a49 	vcmp.f32	s18, s18
 800a64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a64e:	f994 4000 	ldrsb.w	r4, [r4]
 800a652:	4b45      	ldr	r3, [pc, #276]	; (800a768 <powf+0x2ac>)
 800a654:	d713      	bvc.n	800a67e <powf+0x1c2>
 800a656:	2201      	movs	r2, #1
 800a658:	e9cd 2300 	strd	r2, r3, [sp]
 800a65c:	9508      	str	r5, [sp, #32]
 800a65e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a666:	2c00      	cmp	r4, #0
 800a668:	d0c2      	beq.n	800a5f0 <powf+0x134>
 800a66a:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800a66e:	ee17 0a90 	vmov	r0, s15
 800a672:	f7f6 f861 	bl	8000738 <__aeabi_f2d>
 800a676:	2c02      	cmp	r4, #2
 800a678:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a67c:	e7c2      	b.n	800a604 <powf+0x148>
 800a67e:	2203      	movs	r2, #3
 800a680:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a684:	e9cd 2300 	strd	r2, r3, [sp]
 800a688:	9508      	str	r5, [sp, #32]
 800a68a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a68e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a692:	ee28 8a27 	vmul.f32	s16, s16, s15
 800a696:	b9fc      	cbnz	r4, 800a6d8 <powf+0x21c>
 800a698:	4b37      	ldr	r3, [pc, #220]	; (800a778 <powf+0x2bc>)
 800a69a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800a69e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a6a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a6aa:	d553      	bpl.n	800a754 <powf+0x298>
 800a6ac:	eeb0 0a48 	vmov.f32	s0, s16
 800a6b0:	f000 fc3e 	bl	800af30 <rintf>
 800a6b4:	eeb4 0a48 	vcmp.f32	s0, s16
 800a6b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6bc:	d004      	beq.n	800a6c8 <powf+0x20c>
 800a6be:	4b2f      	ldr	r3, [pc, #188]	; (800a77c <powf+0x2c0>)
 800a6c0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800a6c4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a6c8:	f996 3000 	ldrsb.w	r3, [r6]
 800a6cc:	2b02      	cmp	r3, #2
 800a6ce:	d141      	bne.n	800a754 <powf+0x298>
 800a6d0:	f7fc f930 	bl	8006934 <__errno>
 800a6d4:	2322      	movs	r3, #34	; 0x22
 800a6d6:	e799      	b.n	800a60c <powf+0x150>
 800a6d8:	4b29      	ldr	r3, [pc, #164]	; (800a780 <powf+0x2c4>)
 800a6da:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800a6de:	2200      	movs	r2, #0
 800a6e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a6e8:	d5ee      	bpl.n	800a6c8 <powf+0x20c>
 800a6ea:	eeb0 0a48 	vmov.f32	s0, s16
 800a6ee:	f000 fc1f 	bl	800af30 <rintf>
 800a6f2:	eeb4 0a48 	vcmp.f32	s0, s16
 800a6f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a6fa:	d0e5      	beq.n	800a6c8 <powf+0x20c>
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	4b1d      	ldr	r3, [pc, #116]	; (800a774 <powf+0x2b8>)
 800a700:	e7e0      	b.n	800a6c4 <powf+0x208>
 800a702:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800a706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a70a:	f47f af4a 	bne.w	800a5a2 <powf+0xe6>
 800a70e:	eeb0 0a68 	vmov.f32	s0, s17
 800a712:	f000 fc03 	bl	800af1c <finitef>
 800a716:	2800      	cmp	r0, #0
 800a718:	f43f af43 	beq.w	800a5a2 <powf+0xe6>
 800a71c:	eeb0 0a48 	vmov.f32	s0, s16
 800a720:	f000 fbfc 	bl	800af1c <finitef>
 800a724:	2800      	cmp	r0, #0
 800a726:	f43f af3c 	beq.w	800a5a2 <powf+0xe6>
 800a72a:	2304      	movs	r3, #4
 800a72c:	9300      	str	r3, [sp, #0]
 800a72e:	4b0e      	ldr	r3, [pc, #56]	; (800a768 <powf+0x2ac>)
 800a730:	9301      	str	r3, [sp, #4]
 800a732:	ee18 0a90 	vmov	r0, s17
 800a736:	2300      	movs	r3, #0
 800a738:	9308      	str	r3, [sp, #32]
 800a73a:	f7f5 fffd 	bl	8000738 <__aeabi_f2d>
 800a73e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a742:	ee18 0a10 	vmov	r0, s16
 800a746:	f7f5 fff7 	bl	8000738 <__aeabi_f2d>
 800a74a:	2200      	movs	r2, #0
 800a74c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a750:	2300      	movs	r3, #0
 800a752:	e7b7      	b.n	800a6c4 <powf+0x208>
 800a754:	4668      	mov	r0, sp
 800a756:	f000 fbd8 	bl	800af0a <matherr>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	f47f af15 	bne.w	800a58a <powf+0xce>
 800a760:	e7b6      	b.n	800a6d0 <powf+0x214>
 800a762:	bf00      	nop
 800a764:	200001dc 	.word	0x200001dc
 800a768:	0800b5bb 	.word	0x0800b5bb
 800a76c:	3ff00000 	.word	0x3ff00000
 800a770:	00000000 	.word	0x00000000
 800a774:	fff00000 	.word	0xfff00000
 800a778:	47efffff 	.word	0x47efffff
 800a77c:	c7efffff 	.word	0xc7efffff
 800a780:	7ff00000 	.word	0x7ff00000

0800a784 <sqrtf>:
 800a784:	b510      	push	{r4, lr}
 800a786:	ed2d 8b02 	vpush	{d8}
 800a78a:	b08a      	sub	sp, #40	; 0x28
 800a78c:	eeb0 8a40 	vmov.f32	s16, s0
 800a790:	f000 fbb8 	bl	800af04 <__ieee754_sqrtf>
 800a794:	4b21      	ldr	r3, [pc, #132]	; (800a81c <sqrtf+0x98>)
 800a796:	f993 4000 	ldrsb.w	r4, [r3]
 800a79a:	1c63      	adds	r3, r4, #1
 800a79c:	d02c      	beq.n	800a7f8 <sqrtf+0x74>
 800a79e:	eeb4 8a48 	vcmp.f32	s16, s16
 800a7a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7a6:	d627      	bvs.n	800a7f8 <sqrtf+0x74>
 800a7a8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800a7ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7b0:	d522      	bpl.n	800a7f8 <sqrtf+0x74>
 800a7b2:	2301      	movs	r3, #1
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	4b1a      	ldr	r3, [pc, #104]	; (800a820 <sqrtf+0x9c>)
 800a7b8:	9301      	str	r3, [sp, #4]
 800a7ba:	ee18 0a10 	vmov	r0, s16
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9308      	str	r3, [sp, #32]
 800a7c2:	f7f5 ffb9 	bl	8000738 <__aeabi_f2d>
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a7cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	b9ac      	cbnz	r4, 800a800 <sqrtf+0x7c>
 800a7d4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a7d8:	4668      	mov	r0, sp
 800a7da:	f000 fb96 	bl	800af0a <matherr>
 800a7de:	b1b8      	cbz	r0, 800a810 <sqrtf+0x8c>
 800a7e0:	9b08      	ldr	r3, [sp, #32]
 800a7e2:	b11b      	cbz	r3, 800a7ec <sqrtf+0x68>
 800a7e4:	f7fc f8a6 	bl	8006934 <__errno>
 800a7e8:	9b08      	ldr	r3, [sp, #32]
 800a7ea:	6003      	str	r3, [r0, #0]
 800a7ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a7f0:	f7f6 faf2 	bl	8000dd8 <__aeabi_d2f>
 800a7f4:	ee00 0a10 	vmov	s0, r0
 800a7f8:	b00a      	add	sp, #40	; 0x28
 800a7fa:	ecbd 8b02 	vpop	{d8}
 800a7fe:	bd10      	pop	{r4, pc}
 800a800:	4610      	mov	r0, r2
 800a802:	4619      	mov	r1, r3
 800a804:	f7f6 f91a 	bl	8000a3c <__aeabi_ddiv>
 800a808:	2c02      	cmp	r4, #2
 800a80a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800a80e:	d1e3      	bne.n	800a7d8 <sqrtf+0x54>
 800a810:	f7fc f890 	bl	8006934 <__errno>
 800a814:	2321      	movs	r3, #33	; 0x21
 800a816:	6003      	str	r3, [r0, #0]
 800a818:	e7e2      	b.n	800a7e0 <sqrtf+0x5c>
 800a81a:	bf00      	nop
 800a81c:	200001dc 	.word	0x200001dc
 800a820:	0800b5c0 	.word	0x0800b5c0

0800a824 <__ieee754_sqrt>:
 800a824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a828:	4955      	ldr	r1, [pc, #340]	; (800a980 <__ieee754_sqrt+0x15c>)
 800a82a:	ec55 4b10 	vmov	r4, r5, d0
 800a82e:	43a9      	bics	r1, r5
 800a830:	462b      	mov	r3, r5
 800a832:	462a      	mov	r2, r5
 800a834:	d112      	bne.n	800a85c <__ieee754_sqrt+0x38>
 800a836:	ee10 2a10 	vmov	r2, s0
 800a83a:	ee10 0a10 	vmov	r0, s0
 800a83e:	4629      	mov	r1, r5
 800a840:	f7f5 ffd2 	bl	80007e8 <__aeabi_dmul>
 800a844:	4602      	mov	r2, r0
 800a846:	460b      	mov	r3, r1
 800a848:	4620      	mov	r0, r4
 800a84a:	4629      	mov	r1, r5
 800a84c:	f7f5 fe16 	bl	800047c <__adddf3>
 800a850:	4604      	mov	r4, r0
 800a852:	460d      	mov	r5, r1
 800a854:	ec45 4b10 	vmov	d0, r4, r5
 800a858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a85c:	2d00      	cmp	r5, #0
 800a85e:	ee10 0a10 	vmov	r0, s0
 800a862:	4621      	mov	r1, r4
 800a864:	dc0f      	bgt.n	800a886 <__ieee754_sqrt+0x62>
 800a866:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a86a:	4330      	orrs	r0, r6
 800a86c:	d0f2      	beq.n	800a854 <__ieee754_sqrt+0x30>
 800a86e:	b155      	cbz	r5, 800a886 <__ieee754_sqrt+0x62>
 800a870:	ee10 2a10 	vmov	r2, s0
 800a874:	4620      	mov	r0, r4
 800a876:	4629      	mov	r1, r5
 800a878:	f7f5 fdfe 	bl	8000478 <__aeabi_dsub>
 800a87c:	4602      	mov	r2, r0
 800a87e:	460b      	mov	r3, r1
 800a880:	f7f6 f8dc 	bl	8000a3c <__aeabi_ddiv>
 800a884:	e7e4      	b.n	800a850 <__ieee754_sqrt+0x2c>
 800a886:	151b      	asrs	r3, r3, #20
 800a888:	d073      	beq.n	800a972 <__ieee754_sqrt+0x14e>
 800a88a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a88e:	07dd      	lsls	r5, r3, #31
 800a890:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a894:	bf48      	it	mi
 800a896:	0fc8      	lsrmi	r0, r1, #31
 800a898:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a89c:	bf44      	itt	mi
 800a89e:	0049      	lslmi	r1, r1, #1
 800a8a0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a8a4:	2500      	movs	r5, #0
 800a8a6:	1058      	asrs	r0, r3, #1
 800a8a8:	0fcb      	lsrs	r3, r1, #31
 800a8aa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a8ae:	0049      	lsls	r1, r1, #1
 800a8b0:	2316      	movs	r3, #22
 800a8b2:	462c      	mov	r4, r5
 800a8b4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a8b8:	19a7      	adds	r7, r4, r6
 800a8ba:	4297      	cmp	r7, r2
 800a8bc:	bfde      	ittt	le
 800a8be:	19bc      	addle	r4, r7, r6
 800a8c0:	1bd2      	suble	r2, r2, r7
 800a8c2:	19ad      	addle	r5, r5, r6
 800a8c4:	0fcf      	lsrs	r7, r1, #31
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a8cc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a8d0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a8d4:	d1f0      	bne.n	800a8b8 <__ieee754_sqrt+0x94>
 800a8d6:	f04f 0c20 	mov.w	ip, #32
 800a8da:	469e      	mov	lr, r3
 800a8dc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a8e0:	42a2      	cmp	r2, r4
 800a8e2:	eb06 070e 	add.w	r7, r6, lr
 800a8e6:	dc02      	bgt.n	800a8ee <__ieee754_sqrt+0xca>
 800a8e8:	d112      	bne.n	800a910 <__ieee754_sqrt+0xec>
 800a8ea:	428f      	cmp	r7, r1
 800a8ec:	d810      	bhi.n	800a910 <__ieee754_sqrt+0xec>
 800a8ee:	2f00      	cmp	r7, #0
 800a8f0:	eb07 0e06 	add.w	lr, r7, r6
 800a8f4:	da42      	bge.n	800a97c <__ieee754_sqrt+0x158>
 800a8f6:	f1be 0f00 	cmp.w	lr, #0
 800a8fa:	db3f      	blt.n	800a97c <__ieee754_sqrt+0x158>
 800a8fc:	f104 0801 	add.w	r8, r4, #1
 800a900:	1b12      	subs	r2, r2, r4
 800a902:	428f      	cmp	r7, r1
 800a904:	bf88      	it	hi
 800a906:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a90a:	1bc9      	subs	r1, r1, r7
 800a90c:	4433      	add	r3, r6
 800a90e:	4644      	mov	r4, r8
 800a910:	0052      	lsls	r2, r2, #1
 800a912:	f1bc 0c01 	subs.w	ip, ip, #1
 800a916:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a91a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a91e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a922:	d1dd      	bne.n	800a8e0 <__ieee754_sqrt+0xbc>
 800a924:	430a      	orrs	r2, r1
 800a926:	d006      	beq.n	800a936 <__ieee754_sqrt+0x112>
 800a928:	1c5c      	adds	r4, r3, #1
 800a92a:	bf13      	iteet	ne
 800a92c:	3301      	addne	r3, #1
 800a92e:	3501      	addeq	r5, #1
 800a930:	4663      	moveq	r3, ip
 800a932:	f023 0301 	bicne.w	r3, r3, #1
 800a936:	106a      	asrs	r2, r5, #1
 800a938:	085b      	lsrs	r3, r3, #1
 800a93a:	07e9      	lsls	r1, r5, #31
 800a93c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a940:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a944:	bf48      	it	mi
 800a946:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a94a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a94e:	461c      	mov	r4, r3
 800a950:	e780      	b.n	800a854 <__ieee754_sqrt+0x30>
 800a952:	0aca      	lsrs	r2, r1, #11
 800a954:	3815      	subs	r0, #21
 800a956:	0549      	lsls	r1, r1, #21
 800a958:	2a00      	cmp	r2, #0
 800a95a:	d0fa      	beq.n	800a952 <__ieee754_sqrt+0x12e>
 800a95c:	02d6      	lsls	r6, r2, #11
 800a95e:	d50a      	bpl.n	800a976 <__ieee754_sqrt+0x152>
 800a960:	f1c3 0420 	rsb	r4, r3, #32
 800a964:	fa21 f404 	lsr.w	r4, r1, r4
 800a968:	1e5d      	subs	r5, r3, #1
 800a96a:	4099      	lsls	r1, r3
 800a96c:	4322      	orrs	r2, r4
 800a96e:	1b43      	subs	r3, r0, r5
 800a970:	e78b      	b.n	800a88a <__ieee754_sqrt+0x66>
 800a972:	4618      	mov	r0, r3
 800a974:	e7f0      	b.n	800a958 <__ieee754_sqrt+0x134>
 800a976:	0052      	lsls	r2, r2, #1
 800a978:	3301      	adds	r3, #1
 800a97a:	e7ef      	b.n	800a95c <__ieee754_sqrt+0x138>
 800a97c:	46a0      	mov	r8, r4
 800a97e:	e7bf      	b.n	800a900 <__ieee754_sqrt+0xdc>
 800a980:	7ff00000 	.word	0x7ff00000

0800a984 <__ieee754_powf>:
 800a984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a988:	ee10 5a90 	vmov	r5, s1
 800a98c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800a990:	ed2d 8b02 	vpush	{d8}
 800a994:	eeb0 8a40 	vmov.f32	s16, s0
 800a998:	eef0 8a60 	vmov.f32	s17, s1
 800a99c:	f000 8293 	beq.w	800aec6 <__ieee754_powf+0x542>
 800a9a0:	ee10 8a10 	vmov	r8, s0
 800a9a4:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800a9a8:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a9ac:	dc06      	bgt.n	800a9bc <__ieee754_powf+0x38>
 800a9ae:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a9b2:	dd0a      	ble.n	800a9ca <__ieee754_powf+0x46>
 800a9b4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a9b8:	f000 8285 	beq.w	800aec6 <__ieee754_powf+0x542>
 800a9bc:	ecbd 8b02 	vpop	{d8}
 800a9c0:	48d9      	ldr	r0, [pc, #868]	; (800ad28 <__ieee754_powf+0x3a4>)
 800a9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9c6:	f7fc be31 	b.w	800762c <nanf>
 800a9ca:	f1b8 0f00 	cmp.w	r8, #0
 800a9ce:	da1d      	bge.n	800aa0c <__ieee754_powf+0x88>
 800a9d0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800a9d4:	da2c      	bge.n	800aa30 <__ieee754_powf+0xac>
 800a9d6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a9da:	db30      	blt.n	800aa3e <__ieee754_powf+0xba>
 800a9dc:	15fb      	asrs	r3, r7, #23
 800a9de:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a9e2:	fa47 f603 	asr.w	r6, r7, r3
 800a9e6:	fa06 f303 	lsl.w	r3, r6, r3
 800a9ea:	42bb      	cmp	r3, r7
 800a9ec:	d127      	bne.n	800aa3e <__ieee754_powf+0xba>
 800a9ee:	f006 0601 	and.w	r6, r6, #1
 800a9f2:	f1c6 0602 	rsb	r6, r6, #2
 800a9f6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a9fa:	d122      	bne.n	800aa42 <__ieee754_powf+0xbe>
 800a9fc:	2d00      	cmp	r5, #0
 800a9fe:	f280 8268 	bge.w	800aed2 <__ieee754_powf+0x54e>
 800aa02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aa06:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800aa0a:	e00d      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aa0c:	2600      	movs	r6, #0
 800aa0e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800aa12:	d1f0      	bne.n	800a9f6 <__ieee754_powf+0x72>
 800aa14:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800aa18:	f000 8255 	beq.w	800aec6 <__ieee754_powf+0x542>
 800aa1c:	dd0a      	ble.n	800aa34 <__ieee754_powf+0xb0>
 800aa1e:	2d00      	cmp	r5, #0
 800aa20:	f280 8254 	bge.w	800aecc <__ieee754_powf+0x548>
 800aa24:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800ad2c <__ieee754_powf+0x3a8>
 800aa28:	ecbd 8b02 	vpop	{d8}
 800aa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa30:	2602      	movs	r6, #2
 800aa32:	e7ec      	b.n	800aa0e <__ieee754_powf+0x8a>
 800aa34:	2d00      	cmp	r5, #0
 800aa36:	daf5      	bge.n	800aa24 <__ieee754_powf+0xa0>
 800aa38:	eeb1 0a68 	vneg.f32	s0, s17
 800aa3c:	e7f4      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aa3e:	2600      	movs	r6, #0
 800aa40:	e7d9      	b.n	800a9f6 <__ieee754_powf+0x72>
 800aa42:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800aa46:	d102      	bne.n	800aa4e <__ieee754_powf+0xca>
 800aa48:	ee28 0a08 	vmul.f32	s0, s16, s16
 800aa4c:	e7ec      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aa4e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800aa52:	eeb0 0a48 	vmov.f32	s0, s16
 800aa56:	d108      	bne.n	800aa6a <__ieee754_powf+0xe6>
 800aa58:	f1b8 0f00 	cmp.w	r8, #0
 800aa5c:	db05      	blt.n	800aa6a <__ieee754_powf+0xe6>
 800aa5e:	ecbd 8b02 	vpop	{d8}
 800aa62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa66:	f000 ba4d 	b.w	800af04 <__ieee754_sqrtf>
 800aa6a:	f000 fa50 	bl	800af0e <fabsf>
 800aa6e:	b124      	cbz	r4, 800aa7a <__ieee754_powf+0xf6>
 800aa70:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800aa74:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800aa78:	d117      	bne.n	800aaaa <__ieee754_powf+0x126>
 800aa7a:	2d00      	cmp	r5, #0
 800aa7c:	bfbc      	itt	lt
 800aa7e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800aa82:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800aa86:	f1b8 0f00 	cmp.w	r8, #0
 800aa8a:	dacd      	bge.n	800aa28 <__ieee754_powf+0xa4>
 800aa8c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800aa90:	ea54 0306 	orrs.w	r3, r4, r6
 800aa94:	d104      	bne.n	800aaa0 <__ieee754_powf+0x11c>
 800aa96:	ee70 7a40 	vsub.f32	s15, s0, s0
 800aa9a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800aa9e:	e7c3      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aaa0:	2e01      	cmp	r6, #1
 800aaa2:	d1c1      	bne.n	800aa28 <__ieee754_powf+0xa4>
 800aaa4:	eeb1 0a40 	vneg.f32	s0, s0
 800aaa8:	e7be      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aaaa:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800aaae:	3801      	subs	r0, #1
 800aab0:	ea56 0300 	orrs.w	r3, r6, r0
 800aab4:	d104      	bne.n	800aac0 <__ieee754_powf+0x13c>
 800aab6:	ee38 8a48 	vsub.f32	s16, s16, s16
 800aaba:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800aabe:	e7b3      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aac0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800aac4:	dd6d      	ble.n	800aba2 <__ieee754_powf+0x21e>
 800aac6:	4b9a      	ldr	r3, [pc, #616]	; (800ad30 <__ieee754_powf+0x3ac>)
 800aac8:	429c      	cmp	r4, r3
 800aaca:	dc06      	bgt.n	800aada <__ieee754_powf+0x156>
 800aacc:	2d00      	cmp	r5, #0
 800aace:	daa9      	bge.n	800aa24 <__ieee754_powf+0xa0>
 800aad0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800ad34 <__ieee754_powf+0x3b0>
 800aad4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800aad8:	e7a6      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aada:	4b97      	ldr	r3, [pc, #604]	; (800ad38 <__ieee754_powf+0x3b4>)
 800aadc:	429c      	cmp	r4, r3
 800aade:	dd02      	ble.n	800aae6 <__ieee754_powf+0x162>
 800aae0:	2d00      	cmp	r5, #0
 800aae2:	dcf5      	bgt.n	800aad0 <__ieee754_powf+0x14c>
 800aae4:	e79e      	b.n	800aa24 <__ieee754_powf+0xa0>
 800aae6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aaea:	ee30 0a67 	vsub.f32	s0, s0, s15
 800aaee:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800ad3c <__ieee754_powf+0x3b8>
 800aaf2:	eef1 6a40 	vneg.f32	s13, s0
 800aaf6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800aafa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800aafe:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800ab02:	eee7 7a40 	vfms.f32	s15, s14, s0
 800ab06:	ee60 0a00 	vmul.f32	s1, s0, s0
 800ab0a:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800ad40 <__ieee754_powf+0x3bc>
 800ab0e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800ab12:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800ad44 <__ieee754_powf+0x3c0>
 800ab16:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800ab1a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ab1e:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800ad48 <__ieee754_powf+0x3c4>
 800ab22:	eeb0 6a67 	vmov.f32	s12, s15
 800ab26:	eea0 6a07 	vfma.f32	s12, s0, s14
 800ab2a:	ee16 3a10 	vmov	r3, s12
 800ab2e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800ab32:	f023 030f 	bic.w	r3, r3, #15
 800ab36:	ee00 3a90 	vmov	s1, r3
 800ab3a:	eee6 0a87 	vfma.f32	s1, s13, s14
 800ab3e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ab42:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800ab46:	f025 050f 	bic.w	r5, r5, #15
 800ab4a:	ee07 5a10 	vmov	s14, r5
 800ab4e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800ab52:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800ab56:	ee07 3a90 	vmov	s15, r3
 800ab5a:	eee7 0a27 	vfma.f32	s1, s14, s15
 800ab5e:	3e01      	subs	r6, #1
 800ab60:	ea56 0200 	orrs.w	r2, r6, r0
 800ab64:	ee07 5a10 	vmov	s14, r5
 800ab68:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ab6c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ab70:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800ab74:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800ab78:	ee17 4a10 	vmov	r4, s14
 800ab7c:	bf08      	it	eq
 800ab7e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800ab82:	2c00      	cmp	r4, #0
 800ab84:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ab88:	f340 8184 	ble.w	800ae94 <__ieee754_powf+0x510>
 800ab8c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800ab90:	f340 80fc 	ble.w	800ad8c <__ieee754_powf+0x408>
 800ab94:	eddf 7a67 	vldr	s15, [pc, #412]	; 800ad34 <__ieee754_powf+0x3b0>
 800ab98:	ee28 0a27 	vmul.f32	s0, s16, s15
 800ab9c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800aba0:	e742      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aba2:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800aba6:	bfbf      	itttt	lt
 800aba8:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800ad4c <__ieee754_powf+0x3c8>
 800abac:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800abb0:	f06f 0217 	mvnlt.w	r2, #23
 800abb4:	ee17 4a90 	vmovlt	r4, s15
 800abb8:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800abbc:	bfa8      	it	ge
 800abbe:	2200      	movge	r2, #0
 800abc0:	3b7f      	subs	r3, #127	; 0x7f
 800abc2:	4413      	add	r3, r2
 800abc4:	4a62      	ldr	r2, [pc, #392]	; (800ad50 <__ieee754_powf+0x3cc>)
 800abc6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800abca:	4294      	cmp	r4, r2
 800abcc:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800abd0:	dd06      	ble.n	800abe0 <__ieee754_powf+0x25c>
 800abd2:	4a60      	ldr	r2, [pc, #384]	; (800ad54 <__ieee754_powf+0x3d0>)
 800abd4:	4294      	cmp	r4, r2
 800abd6:	f340 80a5 	ble.w	800ad24 <__ieee754_powf+0x3a0>
 800abda:	3301      	adds	r3, #1
 800abdc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800abe0:	2400      	movs	r4, #0
 800abe2:	4a5d      	ldr	r2, [pc, #372]	; (800ad58 <__ieee754_powf+0x3d4>)
 800abe4:	00a7      	lsls	r7, r4, #2
 800abe6:	443a      	add	r2, r7
 800abe8:	ee07 1a90 	vmov	s15, r1
 800abec:	ed92 7a00 	vldr	s14, [r2]
 800abf0:	4a5a      	ldr	r2, [pc, #360]	; (800ad5c <__ieee754_powf+0x3d8>)
 800abf2:	ee37 6a27 	vadd.f32	s12, s14, s15
 800abf6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800abfa:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800abfe:	1049      	asrs	r1, r1, #1
 800ac00:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800ac04:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800ac08:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800ac0c:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800ac10:	ee06 1a10 	vmov	s12, r1
 800ac14:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800ac18:	ee14 ca90 	vmov	ip, s9
 800ac1c:	ea02 0c0c 	and.w	ip, r2, ip
 800ac20:	ee05 ca10 	vmov	s10, ip
 800ac24:	eeb1 4a45 	vneg.f32	s8, s10
 800ac28:	eee4 5a06 	vfma.f32	s11, s8, s12
 800ac2c:	ee36 6a47 	vsub.f32	s12, s12, s14
 800ac30:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800ad60 <__ieee754_powf+0x3dc>
 800ac34:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800ac38:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800ac3c:	eee4 5a06 	vfma.f32	s11, s8, s12
 800ac40:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800ac44:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800ac48:	eddf 5a46 	vldr	s11, [pc, #280]	; 800ad64 <__ieee754_powf+0x3e0>
 800ac4c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800ac50:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ad68 <__ieee754_powf+0x3e4>
 800ac54:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ac58:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800ad3c <__ieee754_powf+0x3b8>
 800ac5c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ac60:	eddf 5a42 	vldr	s11, [pc, #264]	; 800ad6c <__ieee754_powf+0x3e8>
 800ac64:	eee7 5a27 	vfma.f32	s11, s14, s15
 800ac68:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800ad70 <__ieee754_powf+0x3ec>
 800ac6c:	ee75 6a24 	vadd.f32	s13, s10, s9
 800ac70:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800ac74:	ee66 6a86 	vmul.f32	s13, s13, s12
 800ac78:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800ac7c:	eef0 7a65 	vmov.f32	s15, s11
 800ac80:	eee3 6a87 	vfma.f32	s13, s7, s14
 800ac84:	eee5 7a05 	vfma.f32	s15, s10, s10
 800ac88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac8c:	ee17 1a90 	vmov	r1, s15
 800ac90:	4011      	ands	r1, r2
 800ac92:	ee07 1a90 	vmov	s15, r1
 800ac96:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800ac9a:	eddf 5a36 	vldr	s11, [pc, #216]	; 800ad74 <__ieee754_powf+0x3f0>
 800ac9e:	eea4 7a05 	vfma.f32	s14, s8, s10
 800aca2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800aca6:	ee27 7a24 	vmul.f32	s14, s14, s9
 800acaa:	eea7 7a86 	vfma.f32	s14, s15, s12
 800acae:	eeb0 6a47 	vmov.f32	s12, s14
 800acb2:	eea5 6a27 	vfma.f32	s12, s10, s15
 800acb6:	ee16 1a10 	vmov	r1, s12
 800acba:	4011      	ands	r1, r2
 800acbc:	ee06 1a90 	vmov	s13, r1
 800acc0:	eee4 6a27 	vfma.f32	s13, s8, s15
 800acc4:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ad78 <__ieee754_powf+0x3f4>
 800acc8:	ee37 7a66 	vsub.f32	s14, s14, s13
 800accc:	ee06 1a10 	vmov	s12, r1
 800acd0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800acd4:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ad7c <__ieee754_powf+0x3f8>
 800acd8:	4929      	ldr	r1, [pc, #164]	; (800ad80 <__ieee754_powf+0x3fc>)
 800acda:	eea6 7a27 	vfma.f32	s14, s12, s15
 800acde:	4439      	add	r1, r7
 800ace0:	edd1 7a00 	vldr	s15, [r1]
 800ace4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eef0 0a47 	vmov.f32	s1, s14
 800acf0:	4b24      	ldr	r3, [pc, #144]	; (800ad84 <__ieee754_powf+0x400>)
 800acf2:	eee6 0a25 	vfma.f32	s1, s12, s11
 800acf6:	443b      	add	r3, r7
 800acf8:	ed93 5a00 	vldr	s10, [r3]
 800acfc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800ad00:	ee70 0a85 	vadd.f32	s1, s1, s10
 800ad04:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800ad08:	ee17 3a90 	vmov	r3, s15
 800ad0c:	4013      	ands	r3, r2
 800ad0e:	ee07 3a90 	vmov	s15, r3
 800ad12:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800ad16:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800ad1a:	eee6 7a65 	vfms.f32	s15, s12, s11
 800ad1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad22:	e70e      	b.n	800ab42 <__ieee754_powf+0x1be>
 800ad24:	2401      	movs	r4, #1
 800ad26:	e75c      	b.n	800abe2 <__ieee754_powf+0x25e>
 800ad28:	0800b4a9 	.word	0x0800b4a9
 800ad2c:	00000000 	.word	0x00000000
 800ad30:	3f7ffff7 	.word	0x3f7ffff7
 800ad34:	7149f2ca 	.word	0x7149f2ca
 800ad38:	3f800007 	.word	0x3f800007
 800ad3c:	3eaaaaab 	.word	0x3eaaaaab
 800ad40:	36eca570 	.word	0x36eca570
 800ad44:	3fb8aa3b 	.word	0x3fb8aa3b
 800ad48:	3fb8aa00 	.word	0x3fb8aa00
 800ad4c:	4b800000 	.word	0x4b800000
 800ad50:	001cc471 	.word	0x001cc471
 800ad54:	005db3d6 	.word	0x005db3d6
 800ad58:	0800b5c8 	.word	0x0800b5c8
 800ad5c:	fffff000 	.word	0xfffff000
 800ad60:	3e6c3255 	.word	0x3e6c3255
 800ad64:	3e53f142 	.word	0x3e53f142
 800ad68:	3e8ba305 	.word	0x3e8ba305
 800ad6c:	3edb6db7 	.word	0x3edb6db7
 800ad70:	3f19999a 	.word	0x3f19999a
 800ad74:	3f763800 	.word	0x3f763800
 800ad78:	3f76384f 	.word	0x3f76384f
 800ad7c:	369dc3a0 	.word	0x369dc3a0
 800ad80:	0800b5d8 	.word	0x0800b5d8
 800ad84:	0800b5d0 	.word	0x0800b5d0
 800ad88:	3338aa3c 	.word	0x3338aa3c
 800ad8c:	f040 8092 	bne.w	800aeb4 <__ieee754_powf+0x530>
 800ad90:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800ad88 <__ieee754_powf+0x404>
 800ad94:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ad98:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800ad9c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800ada0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ada4:	f73f aef6 	bgt.w	800ab94 <__ieee754_powf+0x210>
 800ada8:	15db      	asrs	r3, r3, #23
 800adaa:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800adae:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800adb2:	4103      	asrs	r3, r0
 800adb4:	4423      	add	r3, r4
 800adb6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800adba:	4947      	ldr	r1, [pc, #284]	; (800aed8 <__ieee754_powf+0x554>)
 800adbc:	3a7f      	subs	r2, #127	; 0x7f
 800adbe:	4111      	asrs	r1, r2
 800adc0:	ea23 0101 	bic.w	r1, r3, r1
 800adc4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800adc8:	ee07 1a10 	vmov	s14, r1
 800adcc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800add0:	f1c2 0217 	rsb	r2, r2, #23
 800add4:	4110      	asrs	r0, r2
 800add6:	2c00      	cmp	r4, #0
 800add8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800addc:	bfb8      	it	lt
 800adde:	4240      	neglt	r0, r0
 800ade0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800ade4:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800aedc <__ieee754_powf+0x558>
 800ade8:	ee17 3a10 	vmov	r3, s14
 800adec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800adf0:	f023 030f 	bic.w	r3, r3, #15
 800adf4:	ee07 3a10 	vmov	s14, r3
 800adf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adfc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ae00:	eddf 7a37 	vldr	s15, [pc, #220]	; 800aee0 <__ieee754_powf+0x55c>
 800ae04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae08:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800ae0c:	eddf 6a35 	vldr	s13, [pc, #212]	; 800aee4 <__ieee754_powf+0x560>
 800ae10:	eeb0 0a67 	vmov.f32	s0, s15
 800ae14:	eea7 0a26 	vfma.f32	s0, s14, s13
 800ae18:	eeb0 6a40 	vmov.f32	s12, s0
 800ae1c:	eea7 6a66 	vfms.f32	s12, s14, s13
 800ae20:	ee20 7a00 	vmul.f32	s14, s0, s0
 800ae24:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800ae28:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800aee8 <__ieee754_powf+0x564>
 800ae2c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800aeec <__ieee754_powf+0x568>
 800ae30:	eea7 6a26 	vfma.f32	s12, s14, s13
 800ae34:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800aef0 <__ieee754_powf+0x56c>
 800ae38:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ae3c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800aef4 <__ieee754_powf+0x570>
 800ae40:	eea6 6a87 	vfma.f32	s12, s13, s14
 800ae44:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800aef8 <__ieee754_powf+0x574>
 800ae48:	eee6 6a07 	vfma.f32	s13, s12, s14
 800ae4c:	eeb0 6a40 	vmov.f32	s12, s0
 800ae50:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800ae54:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800ae58:	eeb0 7a46 	vmov.f32	s14, s12
 800ae5c:	ee77 6a66 	vsub.f32	s13, s14, s13
 800ae60:	ee20 6a06 	vmul.f32	s12, s0, s12
 800ae64:	eee0 7a27 	vfma.f32	s15, s0, s15
 800ae68:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800ae6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae70:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ae74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ae78:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ae7c:	ee10 3a10 	vmov	r3, s0
 800ae80:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800ae84:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ae88:	da1a      	bge.n	800aec0 <__ieee754_powf+0x53c>
 800ae8a:	f000 f8ab 	bl	800afe4 <scalbnf>
 800ae8e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800ae92:	e5c9      	b.n	800aa28 <__ieee754_powf+0xa4>
 800ae94:	4a19      	ldr	r2, [pc, #100]	; (800aefc <__ieee754_powf+0x578>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	dd02      	ble.n	800aea0 <__ieee754_powf+0x51c>
 800ae9a:	eddf 7a19 	vldr	s15, [pc, #100]	; 800af00 <__ieee754_powf+0x57c>
 800ae9e:	e67b      	b.n	800ab98 <__ieee754_powf+0x214>
 800aea0:	d108      	bne.n	800aeb4 <__ieee754_powf+0x530>
 800aea2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aea6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800aeaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aeae:	f6ff af7b 	blt.w	800ada8 <__ieee754_powf+0x424>
 800aeb2:	e7f2      	b.n	800ae9a <__ieee754_powf+0x516>
 800aeb4:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800aeb8:	f73f af76 	bgt.w	800ada8 <__ieee754_powf+0x424>
 800aebc:	2000      	movs	r0, #0
 800aebe:	e78f      	b.n	800ade0 <__ieee754_powf+0x45c>
 800aec0:	ee00 3a10 	vmov	s0, r3
 800aec4:	e7e3      	b.n	800ae8e <__ieee754_powf+0x50a>
 800aec6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800aeca:	e5ad      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aecc:	eeb0 0a68 	vmov.f32	s0, s17
 800aed0:	e5aa      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aed2:	eeb0 0a48 	vmov.f32	s0, s16
 800aed6:	e5a7      	b.n	800aa28 <__ieee754_powf+0xa4>
 800aed8:	007fffff 	.word	0x007fffff
 800aedc:	3f317218 	.word	0x3f317218
 800aee0:	35bfbe8c 	.word	0x35bfbe8c
 800aee4:	3f317200 	.word	0x3f317200
 800aee8:	3331bb4c 	.word	0x3331bb4c
 800aeec:	b5ddea0e 	.word	0xb5ddea0e
 800aef0:	388ab355 	.word	0x388ab355
 800aef4:	bb360b61 	.word	0xbb360b61
 800aef8:	3e2aaaab 	.word	0x3e2aaaab
 800aefc:	43160000 	.word	0x43160000
 800af00:	0da24260 	.word	0x0da24260

0800af04 <__ieee754_sqrtf>:
 800af04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800af08:	4770      	bx	lr

0800af0a <matherr>:
 800af0a:	2000      	movs	r0, #0
 800af0c:	4770      	bx	lr

0800af0e <fabsf>:
 800af0e:	ee10 3a10 	vmov	r3, s0
 800af12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af16:	ee00 3a10 	vmov	s0, r3
 800af1a:	4770      	bx	lr

0800af1c <finitef>:
 800af1c:	ee10 3a10 	vmov	r3, s0
 800af20:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800af24:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800af28:	bfac      	ite	ge
 800af2a:	2000      	movge	r0, #0
 800af2c:	2001      	movlt	r0, #1
 800af2e:	4770      	bx	lr

0800af30 <rintf>:
 800af30:	b513      	push	{r0, r1, r4, lr}
 800af32:	ee10 1a10 	vmov	r1, s0
 800af36:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800af3a:	0ddc      	lsrs	r4, r3, #23
 800af3c:	3c7f      	subs	r4, #127	; 0x7f
 800af3e:	2c16      	cmp	r4, #22
 800af40:	dc46      	bgt.n	800afd0 <rintf+0xa0>
 800af42:	b32b      	cbz	r3, 800af90 <rintf+0x60>
 800af44:	2c00      	cmp	r4, #0
 800af46:	ee10 2a10 	vmov	r2, s0
 800af4a:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800af4e:	da21      	bge.n	800af94 <rintf+0x64>
 800af50:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800af54:	425b      	negs	r3, r3
 800af56:	4a21      	ldr	r2, [pc, #132]	; (800afdc <rintf+0xac>)
 800af58:	0a5b      	lsrs	r3, r3, #9
 800af5a:	0d09      	lsrs	r1, r1, #20
 800af5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af60:	0509      	lsls	r1, r1, #20
 800af62:	430b      	orrs	r3, r1
 800af64:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800af68:	ee07 3a90 	vmov	s15, r3
 800af6c:	edd2 6a00 	vldr	s13, [r2]
 800af70:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800af74:	ed8d 7a01 	vstr	s14, [sp, #4]
 800af78:	eddd 7a01 	vldr	s15, [sp, #4]
 800af7c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800af80:	ee17 3a90 	vmov	r3, s15
 800af84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800af88:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800af8c:	ee00 3a10 	vmov	s0, r3
 800af90:	b002      	add	sp, #8
 800af92:	bd10      	pop	{r4, pc}
 800af94:	4b12      	ldr	r3, [pc, #72]	; (800afe0 <rintf+0xb0>)
 800af96:	4123      	asrs	r3, r4
 800af98:	4219      	tst	r1, r3
 800af9a:	d0f9      	beq.n	800af90 <rintf+0x60>
 800af9c:	085b      	lsrs	r3, r3, #1
 800af9e:	4219      	tst	r1, r3
 800afa0:	d006      	beq.n	800afb0 <rintf+0x80>
 800afa2:	ea21 0203 	bic.w	r2, r1, r3
 800afa6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800afaa:	fa43 f404 	asr.w	r4, r3, r4
 800afae:	4322      	orrs	r2, r4
 800afb0:	4b0a      	ldr	r3, [pc, #40]	; (800afdc <rintf+0xac>)
 800afb2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800afb6:	ed90 7a00 	vldr	s14, [r0]
 800afba:	ee07 2a90 	vmov	s15, r2
 800afbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afc2:	edcd 7a01 	vstr	s15, [sp, #4]
 800afc6:	ed9d 0a01 	vldr	s0, [sp, #4]
 800afca:	ee30 0a47 	vsub.f32	s0, s0, s14
 800afce:	e7df      	b.n	800af90 <rintf+0x60>
 800afd0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800afd4:	d3dc      	bcc.n	800af90 <rintf+0x60>
 800afd6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800afda:	e7d9      	b.n	800af90 <rintf+0x60>
 800afdc:	0800b5e0 	.word	0x0800b5e0
 800afe0:	007fffff 	.word	0x007fffff

0800afe4 <scalbnf>:
 800afe4:	b508      	push	{r3, lr}
 800afe6:	ee10 2a10 	vmov	r2, s0
 800afea:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800afee:	ed2d 8b02 	vpush	{d8}
 800aff2:	eef0 0a40 	vmov.f32	s1, s0
 800aff6:	d004      	beq.n	800b002 <scalbnf+0x1e>
 800aff8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800affc:	d306      	bcc.n	800b00c <scalbnf+0x28>
 800affe:	ee70 0a00 	vadd.f32	s1, s0, s0
 800b002:	ecbd 8b02 	vpop	{d8}
 800b006:	eeb0 0a60 	vmov.f32	s0, s1
 800b00a:	bd08      	pop	{r3, pc}
 800b00c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b010:	d21c      	bcs.n	800b04c <scalbnf+0x68>
 800b012:	4b1f      	ldr	r3, [pc, #124]	; (800b090 <scalbnf+0xac>)
 800b014:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b094 <scalbnf+0xb0>
 800b018:	4298      	cmp	r0, r3
 800b01a:	ee60 0a27 	vmul.f32	s1, s0, s15
 800b01e:	db10      	blt.n	800b042 <scalbnf+0x5e>
 800b020:	ee10 2a90 	vmov	r2, s1
 800b024:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800b028:	3b19      	subs	r3, #25
 800b02a:	4403      	add	r3, r0
 800b02c:	2bfe      	cmp	r3, #254	; 0xfe
 800b02e:	dd0f      	ble.n	800b050 <scalbnf+0x6c>
 800b030:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800b098 <scalbnf+0xb4>
 800b034:	eeb0 0a48 	vmov.f32	s0, s16
 800b038:	f000 f834 	bl	800b0a4 <copysignf>
 800b03c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800b040:	e7df      	b.n	800b002 <scalbnf+0x1e>
 800b042:	eddf 7a16 	vldr	s15, [pc, #88]	; 800b09c <scalbnf+0xb8>
 800b046:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b04a:	e7da      	b.n	800b002 <scalbnf+0x1e>
 800b04c:	0ddb      	lsrs	r3, r3, #23
 800b04e:	e7ec      	b.n	800b02a <scalbnf+0x46>
 800b050:	2b00      	cmp	r3, #0
 800b052:	dd06      	ble.n	800b062 <scalbnf+0x7e>
 800b054:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b058:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b05c:	ee00 3a90 	vmov	s1, r3
 800b060:	e7cf      	b.n	800b002 <scalbnf+0x1e>
 800b062:	f113 0f16 	cmn.w	r3, #22
 800b066:	da06      	bge.n	800b076 <scalbnf+0x92>
 800b068:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b06c:	4298      	cmp	r0, r3
 800b06e:	dcdf      	bgt.n	800b030 <scalbnf+0x4c>
 800b070:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800b09c <scalbnf+0xb8>
 800b074:	e7de      	b.n	800b034 <scalbnf+0x50>
 800b076:	3319      	adds	r3, #25
 800b078:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b07c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800b080:	eddf 7a07 	vldr	s15, [pc, #28]	; 800b0a0 <scalbnf+0xbc>
 800b084:	ee07 3a10 	vmov	s14, r3
 800b088:	ee67 0a27 	vmul.f32	s1, s14, s15
 800b08c:	e7b9      	b.n	800b002 <scalbnf+0x1e>
 800b08e:	bf00      	nop
 800b090:	ffff3cb0 	.word	0xffff3cb0
 800b094:	4c000000 	.word	0x4c000000
 800b098:	7149f2ca 	.word	0x7149f2ca
 800b09c:	0da24260 	.word	0x0da24260
 800b0a0:	33000000 	.word	0x33000000

0800b0a4 <copysignf>:
 800b0a4:	ee10 3a10 	vmov	r3, s0
 800b0a8:	ee10 2a90 	vmov	r2, s1
 800b0ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b0b0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b0b4:	4313      	orrs	r3, r2
 800b0b6:	ee00 3a10 	vmov	s0, r3
 800b0ba:	4770      	bx	lr

0800b0bc <_init>:
 800b0bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0be:	bf00      	nop
 800b0c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0c2:	bc08      	pop	{r3}
 800b0c4:	469e      	mov	lr, r3
 800b0c6:	4770      	bx	lr

0800b0c8 <_fini>:
 800b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ca:	bf00      	nop
 800b0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ce:	bc08      	pop	{r3}
 800b0d0:	469e      	mov	lr, r3
 800b0d2:	4770      	bx	lr
