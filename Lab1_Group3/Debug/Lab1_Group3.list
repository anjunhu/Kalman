
Lab1_Group3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009424  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000050c  080095e8  080095e8  000195e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009af4  08009af4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009af4  08009af4  00019af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009afc  08009afc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009afc  08009afc  00019afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b00  08009b00  00019b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009b04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000108  200001e0  08009ce4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e8  08009ce4  000202e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000f654  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0001643c  00000000  00000000  0002f864  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00002f4b  00000000  00000000  00045ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001080  00000000  00000000  00048bf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010d5b3  00000000  00000000  00049c70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00000ee0  00000000  00000000  00157228  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  0002bf87  00000000  00000000  00158108  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000f0  00000000  00000000  0018408f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005030  00000000  00000000  00184180  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00002ff5  00000000  00000000  001891b0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	080095cc 	.word	0x080095cc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	080095cc 	.word	0x080095cc

08000200 <kalmanFilterA>:
/**
* int kalmanFilterA (float* InputArray, float* OutputArray, struct KalmanState* kstate, int length)
*/

kalmanFilterA:
			PUSH {R4-R7, LR}
 8000200:	b5f0      	push	{r4, r5, r6, r7, lr}
			VSTMDB.f32 SP!,{S4-S10}
 8000202:	ed2d 2a07 	vpush	{s4-s10}

			MOV R5, R0				// local pointer to current element in InputArray
 8000206:	4605      	mov	r5, r0
			MOV R6, R1				// local pointer to current element in OutputArray
 8000208:	460e      	mov	r6, r1
			MOV R7, R2
 800020a:	4617      	mov	r7, r2
			VLDMIA.f32 R7!, {S4-S8} // local copy of kstate
 800020c:	ecb7 2a05 	vldmia	r7!, {s4-s8}
			MOV R4, R3 				// local downcounter
 8000210:	461c      	mov	r4, r3

			VMRS R0, FPSCR
 8000212:	eef1 0a10 	vmrs	r0, fpscr
			BIC R0, R0, #15
 8000216:	f020 000f 	bic.w	r0, r0, #15
			VMSR FPSCR, R0
 800021a:	eee1 0a10 	vmsr	fpscr, r0

0800021e <loop>:


loop:		SUBS R4, R4, #1
 800021e:	3c01      	subs	r4, #1
			BLT return
 8000220:	db19      	blt.n	8000256 <return>

			VLDR.f32 S10, [R5]		// S10 = current InputArray element
 8000222:	ed95 5a00 	vldr	s10, [r5]

			VADD.f32 S7, S7, S4 	// p = p + q
 8000226:	ee73 3a82 	vadd.f32	s7, s7, s4
			VADD.f32 S9, S7, S5 	// p + r
 800022a:	ee73 4aa2 	vadd.f32	s9, s7, s5
			VDIV.f32 S8, S7, S9 	// k = p / (p + r)
 800022e:	ee83 4aa4 	vdiv.f32	s8, s7, s9
			VSUB.f32 S9, S10, S6 	// measurement - x
 8000232:	ee75 4a43 	vsub.f32	s9, s10, s6
			VMLA.f32 S6, S8, S9 	// x = x + k*(measurement - x)
 8000236:	ee04 3a24 	vmla.f32	s6, s8, s9
			VMLS.f32 S7, S8, S7 	// p = p - k*p
 800023a:	ee44 3a63 	vmls.f32	s7, s8, s7

			VMRS R0, FPSCR
 800023e:	eef1 0a10 	vmrs	r0, fpscr
			ANDS R0, R0, #15		// check for exceptions LSL R0, R0, #28
 8000242:	f010 000f 	ands.w	r0, r0, #15
			BNE exception
 8000246:	d10b      	bne.n	8000260 <exception>

			VSTR.f32 S6, [R6]		// current OutputArray element = x
 8000248:	ed86 3a00 	vstr	s6, [r6]

			ADD R5, R5, #4
 800024c:	f105 0504 	add.w	r5, r5, #4
			ADD R6, R6, #4
 8000250:	f106 0604 	add.w	r6, r6, #4
			B loop
 8000254:	e7e3      	b.n	800021e <loop>

08000256 <return>:

return:
			VSTMDB.f32 R7!, {S4-S8} // update kstate only if everything went well...
 8000256:	ed27 2a05 	vstmdb	r7!, {s4-s8}
			VLDMIA.f32 SP!,{S4-S10}
 800025a:	ecbd 2a07 	vpop	{s4-s10}
			POP {R4-R7, PC}
 800025e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000260 <exception>:

exception:
			VLDMIA.f32 SP!,{S4-S10}
 8000260:	ecbd 2a07 	vpop	{s4-s10}
			POP {R4-R7, PC}
 8000264:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000266 <kalmanUpdateA>:
* R0 = pointer to struct kalmanState
* S0 = measurement, then the return value x
*/

kalmanUpdateA:
			PUSH {R4, LR}
 8000266:	b510      	push	{r4, lr}
			VSTMDB.f32 SP!,{S4-S9}
 8000268:	ed2d 2a06 	vpush	{s4-s9}

			VMRS R4, FPSCR
 800026c:	eef1 4a10 	vmrs	r4, fpscr
			BIC R4, R4, #15
 8000270:	f024 040f 	bic.w	r4, r4, #15
			VMSR FPSCR, R4
 8000274:	eee1 4a10 	vmsr	fpscr, r4

			VLDMIA.f32 R0!, {S4-S8} 		// q, r, x, p, k in S4, 5, 6, 7, 8
 8000278:	ecb0 2a05 	vldmia	r0!, {s4-s8}

			VADD.f32 S7, S7, S4 			// p = p + q
 800027c:	ee73 3a82 	vadd.f32	s7, s7, s4
			VADD.f32 S9, S7, S5 			// p + r
 8000280:	ee73 4aa2 	vadd.f32	s9, s7, s5
			VDIV.f32 S8, S7, S9 			// k = p / (p + r)
 8000284:	ee83 4aa4 	vdiv.f32	s8, s7, s9
			VSUB.f32 S9, S0, S6 			// measurement - x
 8000288:	ee70 4a43 	vsub.f32	s9, s0, s6
			VMLA.f32 S6, S8, S9 			// x = x + k*(measurement - x)
 800028c:	ee04 3a24 	vmla.f32	s6, s8, s9
			VMLS.f32 S7, S8, S7 			// p = p - k*p
 8000290:	ee44 3a63 	vmls.f32	s7, s8, s7

			VMRS R4, FPSCR
 8000294:	eef1 4a10 	vmrs	r4, fpscr
			ANDS R4, R4, #15				// check for exceptions R4, R4, #28
 8000298:	f014 040f 	ands.w	r4, r4, #15
			BNE exception
 800029c:	d106      	bne.n	80002ac <exception>

			VMOV.f32 S0, S6					// return self.x
 800029e:	eeb0 0a43 	vmov.f32	s0, s6
			VSTMDB.f32 R0!, {S4-S8} 		// !!We still need this right???
 80002a2:	ed20 2a05 	vstmdb	r0!, {s4-s8}

			VLDMIA.f32 SP!,{S4-S9}
 80002a6:	ecbd 2a06 	vpop	{s4-s9}
			POP {R4, PC}
 80002aa:	bd10      	pop	{r4, pc}

080002ac <exception>:

exception:
			VMOV.f32 S0, S6					// force NaN or let it be x?
 80002ac:	eeb0 0a43 	vmov.f32	s0, s6
			VLDMIA.f32 SP!,{S4-S9}
 80002b0:	ecbd 2a06 	vpop	{s4-s9}
			POP {R4, PC}
 80002b4:	bd10      	pop	{r4, pc}

080002b6 <strlen>:
 80002b6:	4603      	mov	r3, r0
 80002b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002bc:	2a00      	cmp	r2, #0
 80002be:	d1fb      	bne.n	80002b8 <strlen+0x2>
 80002c0:	1a18      	subs	r0, r3, r0
 80002c2:	3801      	subs	r0, #1
 80002c4:	4770      	bx	lr
	...

080002d0 <memchr>:
 80002d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002d4:	2a10      	cmp	r2, #16
 80002d6:	db2b      	blt.n	8000330 <memchr+0x60>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	d008      	beq.n	80002f0 <memchr+0x20>
 80002de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e2:	3a01      	subs	r2, #1
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d02d      	beq.n	8000344 <memchr+0x74>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	b342      	cbz	r2, 8000340 <memchr+0x70>
 80002ee:	d1f6      	bne.n	80002de <memchr+0xe>
 80002f0:	b4f0      	push	{r4, r5, r6, r7}
 80002f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002fa:	f022 0407 	bic.w	r4, r2, #7
 80002fe:	f07f 0700 	mvns.w	r7, #0
 8000302:	2300      	movs	r3, #0
 8000304:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000308:	3c08      	subs	r4, #8
 800030a:	ea85 0501 	eor.w	r5, r5, r1
 800030e:	ea86 0601 	eor.w	r6, r6, r1
 8000312:	fa85 f547 	uadd8	r5, r5, r7
 8000316:	faa3 f587 	sel	r5, r3, r7
 800031a:	fa86 f647 	uadd8	r6, r6, r7
 800031e:	faa5 f687 	sel	r6, r5, r7
 8000322:	b98e      	cbnz	r6, 8000348 <memchr+0x78>
 8000324:	d1ee      	bne.n	8000304 <memchr+0x34>
 8000326:	bcf0      	pop	{r4, r5, r6, r7}
 8000328:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800032c:	f002 0207 	and.w	r2, r2, #7
 8000330:	b132      	cbz	r2, 8000340 <memchr+0x70>
 8000332:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000336:	3a01      	subs	r2, #1
 8000338:	ea83 0301 	eor.w	r3, r3, r1
 800033c:	b113      	cbz	r3, 8000344 <memchr+0x74>
 800033e:	d1f8      	bne.n	8000332 <memchr+0x62>
 8000340:	2000      	movs	r0, #0
 8000342:	4770      	bx	lr
 8000344:	3801      	subs	r0, #1
 8000346:	4770      	bx	lr
 8000348:	2d00      	cmp	r5, #0
 800034a:	bf06      	itte	eq
 800034c:	4635      	moveq	r5, r6
 800034e:	3803      	subeq	r0, #3
 8000350:	3807      	subne	r0, #7
 8000352:	f015 0f01 	tst.w	r5, #1
 8000356:	d107      	bne.n	8000368 <memchr+0x98>
 8000358:	3001      	adds	r0, #1
 800035a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800035e:	bf02      	ittt	eq
 8000360:	3001      	addeq	r0, #1
 8000362:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000366:	3001      	addeq	r0, #1
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	3801      	subs	r0, #1
 800036c:	4770      	bx	lr
 800036e:	bf00      	nop

08000370 <__aeabi_drsub>:
 8000370:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000374:	e002      	b.n	800037c <__adddf3>
 8000376:	bf00      	nop

08000378 <__aeabi_dsub>:
 8000378:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800037c <__adddf3>:
 800037c:	b530      	push	{r4, r5, lr}
 800037e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000382:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	bf1f      	itttt	ne
 8000392:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000396:	ea55 0c02 	orrsne.w	ip, r5, r2
 800039a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800039e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003a2:	f000 80e2 	beq.w	800056a <__adddf3+0x1ee>
 80003a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ae:	bfb8      	it	lt
 80003b0:	426d      	neglt	r5, r5
 80003b2:	dd0c      	ble.n	80003ce <__adddf3+0x52>
 80003b4:	442c      	add	r4, r5
 80003b6:	ea80 0202 	eor.w	r2, r0, r2
 80003ba:	ea81 0303 	eor.w	r3, r1, r3
 80003be:	ea82 0000 	eor.w	r0, r2, r0
 80003c2:	ea83 0101 	eor.w	r1, r3, r1
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	2d36      	cmp	r5, #54	; 0x36
 80003d0:	bf88      	it	hi
 80003d2:	bd30      	pophi	{r4, r5, pc}
 80003d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003e4:	d002      	beq.n	80003ec <__adddf3+0x70>
 80003e6:	4240      	negs	r0, r0
 80003e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003f8:	d002      	beq.n	8000400 <__adddf3+0x84>
 80003fa:	4252      	negs	r2, r2
 80003fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000400:	ea94 0f05 	teq	r4, r5
 8000404:	f000 80a7 	beq.w	8000556 <__adddf3+0x1da>
 8000408:	f1a4 0401 	sub.w	r4, r4, #1
 800040c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000410:	db0d      	blt.n	800042e <__adddf3+0xb2>
 8000412:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000416:	fa22 f205 	lsr.w	r2, r2, r5
 800041a:	1880      	adds	r0, r0, r2
 800041c:	f141 0100 	adc.w	r1, r1, #0
 8000420:	fa03 f20e 	lsl.w	r2, r3, lr
 8000424:	1880      	adds	r0, r0, r2
 8000426:	fa43 f305 	asr.w	r3, r3, r5
 800042a:	4159      	adcs	r1, r3
 800042c:	e00e      	b.n	800044c <__adddf3+0xd0>
 800042e:	f1a5 0520 	sub.w	r5, r5, #32
 8000432:	f10e 0e20 	add.w	lr, lr, #32
 8000436:	2a01      	cmp	r2, #1
 8000438:	fa03 fc0e 	lsl.w	ip, r3, lr
 800043c:	bf28      	it	cs
 800043e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000442:	fa43 f305 	asr.w	r3, r3, r5
 8000446:	18c0      	adds	r0, r0, r3
 8000448:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	d507      	bpl.n	8000462 <__adddf3+0xe6>
 8000452:	f04f 0e00 	mov.w	lr, #0
 8000456:	f1dc 0c00 	rsbs	ip, ip, #0
 800045a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800045e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000462:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000466:	d31b      	bcc.n	80004a0 <__adddf3+0x124>
 8000468:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800046c:	d30c      	bcc.n	8000488 <__adddf3+0x10c>
 800046e:	0849      	lsrs	r1, r1, #1
 8000470:	ea5f 0030 	movs.w	r0, r0, rrx
 8000474:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000478:	f104 0401 	add.w	r4, r4, #1
 800047c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000480:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000484:	f080 809a 	bcs.w	80005bc <__adddf3+0x240>
 8000488:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800048c:	bf08      	it	eq
 800048e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000492:	f150 0000 	adcs.w	r0, r0, #0
 8000496:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800049a:	ea41 0105 	orr.w	r1, r1, r5
 800049e:	bd30      	pop	{r4, r5, pc}
 80004a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004a4:	4140      	adcs	r0, r0
 80004a6:	eb41 0101 	adc.w	r1, r1, r1
 80004aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004ae:	f1a4 0401 	sub.w	r4, r4, #1
 80004b2:	d1e9      	bne.n	8000488 <__adddf3+0x10c>
 80004b4:	f091 0f00 	teq	r1, #0
 80004b8:	bf04      	itt	eq
 80004ba:	4601      	moveq	r1, r0
 80004bc:	2000      	moveq	r0, #0
 80004be:	fab1 f381 	clz	r3, r1
 80004c2:	bf08      	it	eq
 80004c4:	3320      	addeq	r3, #32
 80004c6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ca:	f1b3 0220 	subs.w	r2, r3, #32
 80004ce:	da0c      	bge.n	80004ea <__adddf3+0x16e>
 80004d0:	320c      	adds	r2, #12
 80004d2:	dd08      	ble.n	80004e6 <__adddf3+0x16a>
 80004d4:	f102 0c14 	add.w	ip, r2, #20
 80004d8:	f1c2 020c 	rsb	r2, r2, #12
 80004dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80004e0:	fa21 f102 	lsr.w	r1, r1, r2
 80004e4:	e00c      	b.n	8000500 <__adddf3+0x184>
 80004e6:	f102 0214 	add.w	r2, r2, #20
 80004ea:	bfd8      	it	le
 80004ec:	f1c2 0c20 	rsble	ip, r2, #32
 80004f0:	fa01 f102 	lsl.w	r1, r1, r2
 80004f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004f8:	bfdc      	itt	le
 80004fa:	ea41 010c 	orrle.w	r1, r1, ip
 80004fe:	4090      	lslle	r0, r2
 8000500:	1ae4      	subs	r4, r4, r3
 8000502:	bfa2      	ittt	ge
 8000504:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000508:	4329      	orrge	r1, r5
 800050a:	bd30      	popge	{r4, r5, pc}
 800050c:	ea6f 0404 	mvn.w	r4, r4
 8000510:	3c1f      	subs	r4, #31
 8000512:	da1c      	bge.n	800054e <__adddf3+0x1d2>
 8000514:	340c      	adds	r4, #12
 8000516:	dc0e      	bgt.n	8000536 <__adddf3+0x1ba>
 8000518:	f104 0414 	add.w	r4, r4, #20
 800051c:	f1c4 0220 	rsb	r2, r4, #32
 8000520:	fa20 f004 	lsr.w	r0, r0, r4
 8000524:	fa01 f302 	lsl.w	r3, r1, r2
 8000528:	ea40 0003 	orr.w	r0, r0, r3
 800052c:	fa21 f304 	lsr.w	r3, r1, r4
 8000530:	ea45 0103 	orr.w	r1, r5, r3
 8000534:	bd30      	pop	{r4, r5, pc}
 8000536:	f1c4 040c 	rsb	r4, r4, #12
 800053a:	f1c4 0220 	rsb	r2, r4, #32
 800053e:	fa20 f002 	lsr.w	r0, r0, r2
 8000542:	fa01 f304 	lsl.w	r3, r1, r4
 8000546:	ea40 0003 	orr.w	r0, r0, r3
 800054a:	4629      	mov	r1, r5
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	fa21 f004 	lsr.w	r0, r1, r4
 8000552:	4629      	mov	r1, r5
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f094 0f00 	teq	r4, #0
 800055a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800055e:	bf06      	itte	eq
 8000560:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000564:	3401      	addeq	r4, #1
 8000566:	3d01      	subne	r5, #1
 8000568:	e74e      	b.n	8000408 <__adddf3+0x8c>
 800056a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800056e:	bf18      	it	ne
 8000570:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000574:	d029      	beq.n	80005ca <__adddf3+0x24e>
 8000576:	ea94 0f05 	teq	r4, r5
 800057a:	bf08      	it	eq
 800057c:	ea90 0f02 	teqeq	r0, r2
 8000580:	d005      	beq.n	800058e <__adddf3+0x212>
 8000582:	ea54 0c00 	orrs.w	ip, r4, r0
 8000586:	bf04      	itt	eq
 8000588:	4619      	moveq	r1, r3
 800058a:	4610      	moveq	r0, r2
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea91 0f03 	teq	r1, r3
 8000592:	bf1e      	ittt	ne
 8000594:	2100      	movne	r1, #0
 8000596:	2000      	movne	r0, #0
 8000598:	bd30      	popne	{r4, r5, pc}
 800059a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800059e:	d105      	bne.n	80005ac <__adddf3+0x230>
 80005a0:	0040      	lsls	r0, r0, #1
 80005a2:	4149      	adcs	r1, r1
 80005a4:	bf28      	it	cs
 80005a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005b0:	bf3c      	itt	cc
 80005b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005b6:	bd30      	popcc	{r4, r5, pc}
 80005b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf1a      	itte	ne
 80005d0:	4619      	movne	r1, r3
 80005d2:	4610      	movne	r0, r2
 80005d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005d8:	bf1c      	itt	ne
 80005da:	460b      	movne	r3, r1
 80005dc:	4602      	movne	r2, r0
 80005de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005e2:	bf06      	itte	eq
 80005e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005e8:	ea91 0f03 	teqeq	r1, r3
 80005ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	bf00      	nop

080005f4 <__aeabi_ui2d>:
 80005f4:	f090 0f00 	teq	r0, #0
 80005f8:	bf04      	itt	eq
 80005fa:	2100      	moveq	r1, #0
 80005fc:	4770      	bxeq	lr
 80005fe:	b530      	push	{r4, r5, lr}
 8000600:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000604:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000608:	f04f 0500 	mov.w	r5, #0
 800060c:	f04f 0100 	mov.w	r1, #0
 8000610:	e750      	b.n	80004b4 <__adddf3+0x138>
 8000612:	bf00      	nop

08000614 <__aeabi_i2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000628:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800062c:	bf48      	it	mi
 800062e:	4240      	negmi	r0, r0
 8000630:	f04f 0100 	mov.w	r1, #0
 8000634:	e73e      	b.n	80004b4 <__adddf3+0x138>
 8000636:	bf00      	nop

08000638 <__aeabi_f2d>:
 8000638:	0042      	lsls	r2, r0, #1
 800063a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800063e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000642:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000646:	bf1f      	itttt	ne
 8000648:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800064c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000650:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000654:	4770      	bxne	lr
 8000656:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800065a:	bf08      	it	eq
 800065c:	4770      	bxeq	lr
 800065e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000662:	bf04      	itt	eq
 8000664:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000668:	4770      	bxeq	lr
 800066a:	b530      	push	{r4, r5, lr}
 800066c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000670:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000674:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000678:	e71c      	b.n	80004b4 <__adddf3+0x138>
 800067a:	bf00      	nop

0800067c <__aeabi_ul2d>:
 800067c:	ea50 0201 	orrs.w	r2, r0, r1
 8000680:	bf08      	it	eq
 8000682:	4770      	bxeq	lr
 8000684:	b530      	push	{r4, r5, lr}
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	e00a      	b.n	80006a2 <__aeabi_l2d+0x16>

0800068c <__aeabi_l2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800069a:	d502      	bpl.n	80006a2 <__aeabi_l2d+0x16>
 800069c:	4240      	negs	r0, r0
 800069e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ae:	f43f aed8 	beq.w	8000462 <__adddf3+0xe6>
 80006b2:	f04f 0203 	mov.w	r2, #3
 80006b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ba:	bf18      	it	ne
 80006bc:	3203      	addne	r2, #3
 80006be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006c2:	bf18      	it	ne
 80006c4:	3203      	addne	r2, #3
 80006c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ca:	f1c2 0320 	rsb	r3, r2, #32
 80006ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006da:	ea40 000e 	orr.w	r0, r0, lr
 80006de:	fa21 f102 	lsr.w	r1, r1, r2
 80006e2:	4414      	add	r4, r2
 80006e4:	e6bd      	b.n	8000462 <__adddf3+0xe6>
 80006e6:	bf00      	nop

080006e8 <__aeabi_dmul>:
 80006e8:	b570      	push	{r4, r5, r6, lr}
 80006ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006f6:	bf1d      	ittte	ne
 80006f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006fc:	ea94 0f0c 	teqne	r4, ip
 8000700:	ea95 0f0c 	teqne	r5, ip
 8000704:	f000 f8de 	bleq	80008c4 <__aeabi_dmul+0x1dc>
 8000708:	442c      	add	r4, r5
 800070a:	ea81 0603 	eor.w	r6, r1, r3
 800070e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000712:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000716:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800071a:	bf18      	it	ne
 800071c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000720:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000724:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000728:	d038      	beq.n	800079c <__aeabi_dmul+0xb4>
 800072a:	fba0 ce02 	umull	ip, lr, r0, r2
 800072e:	f04f 0500 	mov.w	r5, #0
 8000732:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000736:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800073a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800073e:	f04f 0600 	mov.w	r6, #0
 8000742:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000746:	f09c 0f00 	teq	ip, #0
 800074a:	bf18      	it	ne
 800074c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000750:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000754:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000758:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800075c:	d204      	bcs.n	8000768 <__aeabi_dmul+0x80>
 800075e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000762:	416d      	adcs	r5, r5
 8000764:	eb46 0606 	adc.w	r6, r6, r6
 8000768:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800076c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000770:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000774:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000778:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800077c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000780:	bf88      	it	hi
 8000782:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000786:	d81e      	bhi.n	80007c6 <__aeabi_dmul+0xde>
 8000788:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800078c:	bf08      	it	eq
 800078e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000792:	f150 0000 	adcs.w	r0, r0, #0
 8000796:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007a0:	ea46 0101 	orr.w	r1, r6, r1
 80007a4:	ea40 0002 	orr.w	r0, r0, r2
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007b0:	bfc2      	ittt	gt
 80007b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ba:	bd70      	popgt	{r4, r5, r6, pc}
 80007bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007c0:	f04f 0e00 	mov.w	lr, #0
 80007c4:	3c01      	subs	r4, #1
 80007c6:	f300 80ab 	bgt.w	8000920 <__aeabi_dmul+0x238>
 80007ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007ce:	bfde      	ittt	le
 80007d0:	2000      	movle	r0, #0
 80007d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007d6:	bd70      	pople	{r4, r5, r6, pc}
 80007d8:	f1c4 0400 	rsb	r4, r4, #0
 80007dc:	3c20      	subs	r4, #32
 80007de:	da35      	bge.n	800084c <__aeabi_dmul+0x164>
 80007e0:	340c      	adds	r4, #12
 80007e2:	dc1b      	bgt.n	800081c <__aeabi_dmul+0x134>
 80007e4:	f104 0414 	add.w	r4, r4, #20
 80007e8:	f1c4 0520 	rsb	r5, r4, #32
 80007ec:	fa00 f305 	lsl.w	r3, r0, r5
 80007f0:	fa20 f004 	lsr.w	r0, r0, r4
 80007f4:	fa01 f205 	lsl.w	r2, r1, r5
 80007f8:	ea40 0002 	orr.w	r0, r0, r2
 80007fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000800:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000804:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000808:	fa21 f604 	lsr.w	r6, r1, r4
 800080c:	eb42 0106 	adc.w	r1, r2, r6
 8000810:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000814:	bf08      	it	eq
 8000816:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800081a:	bd70      	pop	{r4, r5, r6, pc}
 800081c:	f1c4 040c 	rsb	r4, r4, #12
 8000820:	f1c4 0520 	rsb	r5, r4, #32
 8000824:	fa00 f304 	lsl.w	r3, r0, r4
 8000828:	fa20 f005 	lsr.w	r0, r0, r5
 800082c:	fa01 f204 	lsl.w	r2, r1, r4
 8000830:	ea40 0002 	orr.w	r0, r0, r2
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800083c:	f141 0100 	adc.w	r1, r1, #0
 8000840:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000844:	bf08      	it	eq
 8000846:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800084a:	bd70      	pop	{r4, r5, r6, pc}
 800084c:	f1c4 0520 	rsb	r5, r4, #32
 8000850:	fa00 f205 	lsl.w	r2, r0, r5
 8000854:	ea4e 0e02 	orr.w	lr, lr, r2
 8000858:	fa20 f304 	lsr.w	r3, r0, r4
 800085c:	fa01 f205 	lsl.w	r2, r1, r5
 8000860:	ea43 0302 	orr.w	r3, r3, r2
 8000864:	fa21 f004 	lsr.w	r0, r1, r4
 8000868:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800086c:	fa21 f204 	lsr.w	r2, r1, r4
 8000870:	ea20 0002 	bic.w	r0, r0, r2
 8000874:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000878:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800087c:	bf08      	it	eq
 800087e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f094 0f00 	teq	r4, #0
 8000888:	d10f      	bne.n	80008aa <__aeabi_dmul+0x1c2>
 800088a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800088e:	0040      	lsls	r0, r0, #1
 8000890:	eb41 0101 	adc.w	r1, r1, r1
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	bf08      	it	eq
 800089a:	3c01      	subeq	r4, #1
 800089c:	d0f7      	beq.n	800088e <__aeabi_dmul+0x1a6>
 800089e:	ea41 0106 	orr.w	r1, r1, r6
 80008a2:	f095 0f00 	teq	r5, #0
 80008a6:	bf18      	it	ne
 80008a8:	4770      	bxne	lr
 80008aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008ae:	0052      	lsls	r2, r2, #1
 80008b0:	eb43 0303 	adc.w	r3, r3, r3
 80008b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008b8:	bf08      	it	eq
 80008ba:	3d01      	subeq	r5, #1
 80008bc:	d0f7      	beq.n	80008ae <__aeabi_dmul+0x1c6>
 80008be:	ea43 0306 	orr.w	r3, r3, r6
 80008c2:	4770      	bx	lr
 80008c4:	ea94 0f0c 	teq	r4, ip
 80008c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008cc:	bf18      	it	ne
 80008ce:	ea95 0f0c 	teqne	r5, ip
 80008d2:	d00c      	beq.n	80008ee <__aeabi_dmul+0x206>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	d1d1      	bne.n	8000884 <__aeabi_dmul+0x19c>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f04f 0000 	mov.w	r0, #0
 80008ec:	bd70      	pop	{r4, r5, r6, pc}
 80008ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f2:	bf06      	itte	eq
 80008f4:	4610      	moveq	r0, r2
 80008f6:	4619      	moveq	r1, r3
 80008f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fc:	d019      	beq.n	8000932 <__aeabi_dmul+0x24a>
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	d102      	bne.n	800090a <__aeabi_dmul+0x222>
 8000904:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000908:	d113      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800090a:	ea95 0f0c 	teq	r5, ip
 800090e:	d105      	bne.n	800091c <__aeabi_dmul+0x234>
 8000910:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000914:	bf1c      	itt	ne
 8000916:	4610      	movne	r0, r2
 8000918:	4619      	movne	r1, r3
 800091a:	d10a      	bne.n	8000932 <__aeabi_dmul+0x24a>
 800091c:	ea81 0103 	eor.w	r1, r1, r3
 8000920:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000924:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000928:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800092c:	f04f 0000 	mov.w	r0, #0
 8000930:	bd70      	pop	{r4, r5, r6, pc}
 8000932:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000936:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800093a:	bd70      	pop	{r4, r5, r6, pc}

0800093c <__aeabi_ddiv>:
 800093c:	b570      	push	{r4, r5, r6, lr}
 800093e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000942:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000946:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800094a:	bf1d      	ittte	ne
 800094c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000950:	ea94 0f0c 	teqne	r4, ip
 8000954:	ea95 0f0c 	teqne	r5, ip
 8000958:	f000 f8a7 	bleq	8000aaa <__aeabi_ddiv+0x16e>
 800095c:	eba4 0405 	sub.w	r4, r4, r5
 8000960:	ea81 0e03 	eor.w	lr, r1, r3
 8000964:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000968:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800096c:	f000 8088 	beq.w	8000a80 <__aeabi_ddiv+0x144>
 8000970:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000974:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000978:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800097c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000980:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000984:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000988:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800098c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000990:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000994:	429d      	cmp	r5, r3
 8000996:	bf08      	it	eq
 8000998:	4296      	cmpeq	r6, r2
 800099a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800099e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009a2:	d202      	bcs.n	80009aa <__aeabi_ddiv+0x6e>
 80009a4:	085b      	lsrs	r3, r3, #1
 80009a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009aa:	1ab6      	subs	r6, r6, r2
 80009ac:	eb65 0503 	sbc.w	r5, r5, r3
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009be:	ebb6 0e02 	subs.w	lr, r6, r2
 80009c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009c6:	bf22      	ittt	cs
 80009c8:	1ab6      	subcs	r6, r6, r2
 80009ca:	4675      	movcs	r5, lr
 80009cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009d0:	085b      	lsrs	r3, r3, #1
 80009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009de:	bf22      	ittt	cs
 80009e0:	1ab6      	subcs	r6, r6, r2
 80009e2:	4675      	movcs	r5, lr
 80009e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009e8:	085b      	lsrs	r3, r3, #1
 80009ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80009f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009f6:	bf22      	ittt	cs
 80009f8:	1ab6      	subcs	r6, r6, r2
 80009fa:	4675      	movcs	r5, lr
 80009fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a00:	085b      	lsrs	r3, r3, #1
 8000a02:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a06:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a0a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a0e:	bf22      	ittt	cs
 8000a10:	1ab6      	subcs	r6, r6, r2
 8000a12:	4675      	movcs	r5, lr
 8000a14:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a18:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a1c:	d018      	beq.n	8000a50 <__aeabi_ddiv+0x114>
 8000a1e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a22:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a26:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a2a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a2e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a32:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a36:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a3a:	d1c0      	bne.n	80009be <__aeabi_ddiv+0x82>
 8000a3c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a40:	d10b      	bne.n	8000a5a <__aeabi_ddiv+0x11e>
 8000a42:	ea41 0100 	orr.w	r1, r1, r0
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a4e:	e7b6      	b.n	80009be <__aeabi_ddiv+0x82>
 8000a50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a54:	bf04      	itt	eq
 8000a56:	4301      	orreq	r1, r0
 8000a58:	2000      	moveq	r0, #0
 8000a5a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a5e:	bf88      	it	hi
 8000a60:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a64:	f63f aeaf 	bhi.w	80007c6 <__aeabi_dmul+0xde>
 8000a68:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a6c:	bf04      	itt	eq
 8000a6e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a76:	f150 0000 	adcs.w	r0, r0, #0
 8000a7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a7e:	bd70      	pop	{r4, r5, r6, pc}
 8000a80:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a84:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a88:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a8c:	bfc2      	ittt	gt
 8000a8e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a92:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a96:	bd70      	popgt	{r4, r5, r6, pc}
 8000a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a9c:	f04f 0e00 	mov.w	lr, #0
 8000aa0:	3c01      	subs	r4, #1
 8000aa2:	e690      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aa4:	ea45 0e06 	orr.w	lr, r5, r6
 8000aa8:	e68d      	b.n	80007c6 <__aeabi_dmul+0xde>
 8000aaa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000aae:	ea94 0f0c 	teq	r4, ip
 8000ab2:	bf08      	it	eq
 8000ab4:	ea95 0f0c 	teqeq	r5, ip
 8000ab8:	f43f af3b 	beq.w	8000932 <__aeabi_dmul+0x24a>
 8000abc:	ea94 0f0c 	teq	r4, ip
 8000ac0:	d10a      	bne.n	8000ad8 <__aeabi_ddiv+0x19c>
 8000ac2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ac6:	f47f af34 	bne.w	8000932 <__aeabi_dmul+0x24a>
 8000aca:	ea95 0f0c 	teq	r5, ip
 8000ace:	f47f af25 	bne.w	800091c <__aeabi_dmul+0x234>
 8000ad2:	4610      	mov	r0, r2
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	e72c      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000ad8:	ea95 0f0c 	teq	r5, ip
 8000adc:	d106      	bne.n	8000aec <__aeabi_ddiv+0x1b0>
 8000ade:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae2:	f43f aefd 	beq.w	80008e0 <__aeabi_dmul+0x1f8>
 8000ae6:	4610      	mov	r0, r2
 8000ae8:	4619      	mov	r1, r3
 8000aea:	e722      	b.n	8000932 <__aeabi_dmul+0x24a>
 8000aec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000af6:	f47f aec5 	bne.w	8000884 <__aeabi_dmul+0x19c>
 8000afa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000afe:	f47f af0d 	bne.w	800091c <__aeabi_dmul+0x234>
 8000b02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b06:	f47f aeeb 	bne.w	80008e0 <__aeabi_dmul+0x1f8>
 8000b0a:	e712      	b.n	8000932 <__aeabi_dmul+0x24a>

08000b0c <__gedf2>:
 8000b0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b10:	e006      	b.n	8000b20 <__cmpdf2+0x4>
 8000b12:	bf00      	nop

08000b14 <__ledf2>:
 8000b14:	f04f 0c01 	mov.w	ip, #1
 8000b18:	e002      	b.n	8000b20 <__cmpdf2+0x4>
 8000b1a:	bf00      	nop

08000b1c <__cmpdf2>:
 8000b1c:	f04f 0c01 	mov.w	ip, #1
 8000b20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	bf18      	it	ne
 8000b32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b36:	d01b      	beq.n	8000b70 <__cmpdf2+0x54>
 8000b38:	b001      	add	sp, #4
 8000b3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b3e:	bf0c      	ite	eq
 8000b40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b44:	ea91 0f03 	teqne	r1, r3
 8000b48:	bf02      	ittt	eq
 8000b4a:	ea90 0f02 	teqeq	r0, r2
 8000b4e:	2000      	moveq	r0, #0
 8000b50:	4770      	bxeq	lr
 8000b52:	f110 0f00 	cmn.w	r0, #0
 8000b56:	ea91 0f03 	teq	r1, r3
 8000b5a:	bf58      	it	pl
 8000b5c:	4299      	cmppl	r1, r3
 8000b5e:	bf08      	it	eq
 8000b60:	4290      	cmpeq	r0, r2
 8000b62:	bf2c      	ite	cs
 8000b64:	17d8      	asrcs	r0, r3, #31
 8000b66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b6a:	f040 0001 	orr.w	r0, r0, #1
 8000b6e:	4770      	bx	lr
 8000b70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b78:	d102      	bne.n	8000b80 <__cmpdf2+0x64>
 8000b7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7e:	d107      	bne.n	8000b90 <__cmpdf2+0x74>
 8000b80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d1d6      	bne.n	8000b38 <__cmpdf2+0x1c>
 8000b8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8e:	d0d3      	beq.n	8000b38 <__cmpdf2+0x1c>
 8000b90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_cdrcmple>:
 8000b98:	4684      	mov	ip, r0
 8000b9a:	4610      	mov	r0, r2
 8000b9c:	4662      	mov	r2, ip
 8000b9e:	468c      	mov	ip, r1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4663      	mov	r3, ip
 8000ba4:	e000      	b.n	8000ba8 <__aeabi_cdcmpeq>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdcmpeq>:
 8000ba8:	b501      	push	{r0, lr}
 8000baa:	f7ff ffb7 	bl	8000b1c <__cmpdf2>
 8000bae:	2800      	cmp	r0, #0
 8000bb0:	bf48      	it	mi
 8000bb2:	f110 0f00 	cmnmi.w	r0, #0
 8000bb6:	bd01      	pop	{r0, pc}

08000bb8 <__aeabi_dcmpeq>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff fff4 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bc0:	bf0c      	ite	eq
 8000bc2:	2001      	moveq	r0, #1
 8000bc4:	2000      	movne	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmplt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffea 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmple>:
 8000be0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be4:	f7ff ffe0 	bl	8000ba8 <__aeabi_cdcmpeq>
 8000be8:	bf94      	ite	ls
 8000bea:	2001      	movls	r0, #1
 8000bec:	2000      	movhi	r0, #0
 8000bee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_dcmpge>:
 8000bf4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf8:	f7ff ffce 	bl	8000b98 <__aeabi_cdrcmple>
 8000bfc:	bf94      	ite	ls
 8000bfe:	2001      	movls	r0, #1
 8000c00:	2000      	movhi	r0, #0
 8000c02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c06:	bf00      	nop

08000c08 <__aeabi_dcmpgt>:
 8000c08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c0c:	f7ff ffc4 	bl	8000b98 <__aeabi_cdrcmple>
 8000c10:	bf34      	ite	cc
 8000c12:	2001      	movcc	r0, #1
 8000c14:	2000      	movcs	r0, #0
 8000c16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c1a:	bf00      	nop

08000c1c <__aeabi_dcmpun>:
 8000c1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c24:	d102      	bne.n	8000c2c <__aeabi_dcmpun+0x10>
 8000c26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c2a:	d10a      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x20>
 8000c36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_dcmpun+0x26>
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0001 	mov.w	r0, #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2iz>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c50:	d215      	bcs.n	8000c7e <__aeabi_d2iz+0x36>
 8000c52:	d511      	bpl.n	8000c78 <__aeabi_d2iz+0x30>
 8000c54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c5c:	d912      	bls.n	8000c84 <__aeabi_d2iz+0x3c>
 8000c5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	4770      	bx	lr
 8000c78:	f04f 0000 	mov.w	r0, #0
 8000c7c:	4770      	bx	lr
 8000c7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c82:	d105      	bne.n	8000c90 <__aeabi_d2iz+0x48>
 8000c84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	bf08      	it	eq
 8000c8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c8e:	4770      	bx	lr
 8000c90:	f04f 0000 	mov.w	r0, #0
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2uiz>:
 8000c98:	004a      	lsls	r2, r1, #1
 8000c9a:	d211      	bcs.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000c9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ca0:	d211      	bcs.n	8000cc6 <__aeabi_d2uiz+0x2e>
 8000ca2:	d50d      	bpl.n	8000cc0 <__aeabi_d2uiz+0x28>
 8000ca4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ca8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cac:	d40e      	bmi.n	8000ccc <__aeabi_d2uiz+0x34>
 8000cae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cba:	fa23 f002 	lsr.w	r0, r3, r2
 8000cbe:	4770      	bx	lr
 8000cc0:	f04f 0000 	mov.w	r0, #0
 8000cc4:	4770      	bx	lr
 8000cc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000cca:	d102      	bne.n	8000cd2 <__aeabi_d2uiz+0x3a>
 8000ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd0:	4770      	bx	lr
 8000cd2:	f04f 0000 	mov.w	r0, #0
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2f>:
 8000cd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ce0:	bf24      	itt	cs
 8000ce2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ce6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cea:	d90d      	bls.n	8000d08 <__aeabi_d2f+0x30>
 8000cec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000cfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000d00:	bf08      	it	eq
 8000d02:	f020 0001 	biceq.w	r0, r0, #1
 8000d06:	4770      	bx	lr
 8000d08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000d0c:	d121      	bne.n	8000d52 <__aeabi_d2f+0x7a>
 8000d0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000d12:	bfbc      	itt	lt
 8000d14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000d18:	4770      	bxlt	lr
 8000d1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000d1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000d22:	f1c2 0218 	rsb	r2, r2, #24
 8000d26:	f1c2 0c20 	rsb	ip, r2, #32
 8000d2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000d2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000d32:	bf18      	it	ne
 8000d34:	f040 0001 	orrne.w	r0, r0, #1
 8000d38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d44:	ea40 000c 	orr.w	r0, r0, ip
 8000d48:	fa23 f302 	lsr.w	r3, r3, r2
 8000d4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d50:	e7cc      	b.n	8000cec <__aeabi_d2f+0x14>
 8000d52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d56:	d107      	bne.n	8000d68 <__aeabi_d2f+0x90>
 8000d58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d5c:	bf1e      	ittt	ne
 8000d5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d66:	4770      	bxne	lr
 8000d68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop

08000d78 <__aeabi_uldivmod>:
 8000d78:	b953      	cbnz	r3, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7a:	b94a      	cbnz	r2, 8000d90 <__aeabi_uldivmod+0x18>
 8000d7c:	2900      	cmp	r1, #0
 8000d7e:	bf08      	it	eq
 8000d80:	2800      	cmpeq	r0, #0
 8000d82:	bf1c      	itt	ne
 8000d84:	f04f 31ff 	movne.w	r1, #4294967295
 8000d88:	f04f 30ff 	movne.w	r0, #4294967295
 8000d8c:	f000 b972 	b.w	8001074 <__aeabi_idiv0>
 8000d90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d98:	f000 f806 	bl	8000da8 <__udivmoddi4>
 8000d9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000da0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000da4:	b004      	add	sp, #16
 8000da6:	4770      	bx	lr

08000da8 <__udivmoddi4>:
 8000da8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dac:	9e08      	ldr	r6, [sp, #32]
 8000dae:	4604      	mov	r4, r0
 8000db0:	4688      	mov	r8, r1
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d14b      	bne.n	8000e4e <__udivmoddi4+0xa6>
 8000db6:	428a      	cmp	r2, r1
 8000db8:	4615      	mov	r5, r2
 8000dba:	d967      	bls.n	8000e8c <__udivmoddi4+0xe4>
 8000dbc:	fab2 f282 	clz	r2, r2
 8000dc0:	b14a      	cbz	r2, 8000dd6 <__udivmoddi4+0x2e>
 8000dc2:	f1c2 0720 	rsb	r7, r2, #32
 8000dc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000dca:	fa20 f707 	lsr.w	r7, r0, r7
 8000dce:	4095      	lsls	r5, r2
 8000dd0:	ea47 0803 	orr.w	r8, r7, r3
 8000dd4:	4094      	lsls	r4, r2
 8000dd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000de0:	fa1f fc85 	uxth.w	ip, r5
 8000de4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000de8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dec:	fb07 f10c 	mul.w	r1, r7, ip
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d909      	bls.n	8000e08 <__udivmoddi4+0x60>
 8000df4:	18eb      	adds	r3, r5, r3
 8000df6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dfa:	f080 811b 	bcs.w	8001034 <__udivmoddi4+0x28c>
 8000dfe:	4299      	cmp	r1, r3
 8000e00:	f240 8118 	bls.w	8001034 <__udivmoddi4+0x28c>
 8000e04:	3f02      	subs	r7, #2
 8000e06:	442b      	add	r3, r5
 8000e08:	1a5b      	subs	r3, r3, r1
 8000e0a:	b2a4      	uxth	r4, r4
 8000e0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e1c:	45a4      	cmp	ip, r4
 8000e1e:	d909      	bls.n	8000e34 <__udivmoddi4+0x8c>
 8000e20:	192c      	adds	r4, r5, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	f080 8107 	bcs.w	8001038 <__udivmoddi4+0x290>
 8000e2a:	45a4      	cmp	ip, r4
 8000e2c:	f240 8104 	bls.w	8001038 <__udivmoddi4+0x290>
 8000e30:	3802      	subs	r0, #2
 8000e32:	442c      	add	r4, r5
 8000e34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e38:	eba4 040c 	sub.w	r4, r4, ip
 8000e3c:	2700      	movs	r7, #0
 8000e3e:	b11e      	cbz	r6, 8000e48 <__udivmoddi4+0xa0>
 8000e40:	40d4      	lsrs	r4, r2
 8000e42:	2300      	movs	r3, #0
 8000e44:	e9c6 4300 	strd	r4, r3, [r6]
 8000e48:	4639      	mov	r1, r7
 8000e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d909      	bls.n	8000e66 <__udivmoddi4+0xbe>
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	f000 80eb 	beq.w	800102e <__udivmoddi4+0x286>
 8000e58:	2700      	movs	r7, #0
 8000e5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e5e:	4638      	mov	r0, r7
 8000e60:	4639      	mov	r1, r7
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	fab3 f783 	clz	r7, r3
 8000e6a:	2f00      	cmp	r7, #0
 8000e6c:	d147      	bne.n	8000efe <__udivmoddi4+0x156>
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d302      	bcc.n	8000e78 <__udivmoddi4+0xd0>
 8000e72:	4282      	cmp	r2, r0
 8000e74:	f200 80fa 	bhi.w	800106c <__udivmoddi4+0x2c4>
 8000e78:	1a84      	subs	r4, r0, r2
 8000e7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e7e:	2001      	movs	r0, #1
 8000e80:	4698      	mov	r8, r3
 8000e82:	2e00      	cmp	r6, #0
 8000e84:	d0e0      	beq.n	8000e48 <__udivmoddi4+0xa0>
 8000e86:	e9c6 4800 	strd	r4, r8, [r6]
 8000e8a:	e7dd      	b.n	8000e48 <__udivmoddi4+0xa0>
 8000e8c:	b902      	cbnz	r2, 8000e90 <__udivmoddi4+0xe8>
 8000e8e:	deff      	udf	#255	; 0xff
 8000e90:	fab2 f282 	clz	r2, r2
 8000e94:	2a00      	cmp	r2, #0
 8000e96:	f040 808f 	bne.w	8000fb8 <__udivmoddi4+0x210>
 8000e9a:	1b49      	subs	r1, r1, r5
 8000e9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ea0:	fa1f f885 	uxth.w	r8, r5
 8000ea4:	2701      	movs	r7, #1
 8000ea6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000eaa:	0c23      	lsrs	r3, r4, #16
 8000eac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000eb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eb4:	fb08 f10c 	mul.w	r1, r8, ip
 8000eb8:	4299      	cmp	r1, r3
 8000eba:	d907      	bls.n	8000ecc <__udivmoddi4+0x124>
 8000ebc:	18eb      	adds	r3, r5, r3
 8000ebe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000ec2:	d202      	bcs.n	8000eca <__udivmoddi4+0x122>
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	f200 80cd 	bhi.w	8001064 <__udivmoddi4+0x2bc>
 8000eca:	4684      	mov	ip, r0
 8000ecc:	1a59      	subs	r1, r3, r1
 8000ece:	b2a3      	uxth	r3, r4
 8000ed0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ed4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ed8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000edc:	fb08 f800 	mul.w	r8, r8, r0
 8000ee0:	45a0      	cmp	r8, r4
 8000ee2:	d907      	bls.n	8000ef4 <__udivmoddi4+0x14c>
 8000ee4:	192c      	adds	r4, r5, r4
 8000ee6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eea:	d202      	bcs.n	8000ef2 <__udivmoddi4+0x14a>
 8000eec:	45a0      	cmp	r8, r4
 8000eee:	f200 80b6 	bhi.w	800105e <__udivmoddi4+0x2b6>
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	eba4 0408 	sub.w	r4, r4, r8
 8000ef8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000efc:	e79f      	b.n	8000e3e <__udivmoddi4+0x96>
 8000efe:	f1c7 0c20 	rsb	ip, r7, #32
 8000f02:	40bb      	lsls	r3, r7
 8000f04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000f08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000f0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000f10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000f14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000f18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000f1c:	4325      	orrs	r5, r4
 8000f1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000f22:	0c2c      	lsrs	r4, r5, #16
 8000f24:	fb08 3319 	mls	r3, r8, r9, r3
 8000f28:	fa1f fa8e 	uxth.w	sl, lr
 8000f2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f30:	fb09 f40a 	mul.w	r4, r9, sl
 8000f34:	429c      	cmp	r4, r3
 8000f36:	fa02 f207 	lsl.w	r2, r2, r7
 8000f3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f3e:	d90b      	bls.n	8000f58 <__udivmoddi4+0x1b0>
 8000f40:	eb1e 0303 	adds.w	r3, lr, r3
 8000f44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f48:	f080 8087 	bcs.w	800105a <__udivmoddi4+0x2b2>
 8000f4c:	429c      	cmp	r4, r3
 8000f4e:	f240 8084 	bls.w	800105a <__udivmoddi4+0x2b2>
 8000f52:	f1a9 0902 	sub.w	r9, r9, #2
 8000f56:	4473      	add	r3, lr
 8000f58:	1b1b      	subs	r3, r3, r4
 8000f5a:	b2ad      	uxth	r5, r5
 8000f5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f60:	fb08 3310 	mls	r3, r8, r0, r3
 8000f64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f6c:	45a2      	cmp	sl, r4
 8000f6e:	d908      	bls.n	8000f82 <__udivmoddi4+0x1da>
 8000f70:	eb1e 0404 	adds.w	r4, lr, r4
 8000f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f78:	d26b      	bcs.n	8001052 <__udivmoddi4+0x2aa>
 8000f7a:	45a2      	cmp	sl, r4
 8000f7c:	d969      	bls.n	8001052 <__udivmoddi4+0x2aa>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	4474      	add	r4, lr
 8000f82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f86:	fba0 8902 	umull	r8, r9, r0, r2
 8000f8a:	eba4 040a 	sub.w	r4, r4, sl
 8000f8e:	454c      	cmp	r4, r9
 8000f90:	46c2      	mov	sl, r8
 8000f92:	464b      	mov	r3, r9
 8000f94:	d354      	bcc.n	8001040 <__udivmoddi4+0x298>
 8000f96:	d051      	beq.n	800103c <__udivmoddi4+0x294>
 8000f98:	2e00      	cmp	r6, #0
 8000f9a:	d069      	beq.n	8001070 <__udivmoddi4+0x2c8>
 8000f9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000fa0:	eb64 0403 	sbc.w	r4, r4, r3
 8000fa4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000fa8:	40fd      	lsrs	r5, r7
 8000faa:	40fc      	lsrs	r4, r7
 8000fac:	ea4c 0505 	orr.w	r5, ip, r5
 8000fb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000fb4:	2700      	movs	r7, #0
 8000fb6:	e747      	b.n	8000e48 <__udivmoddi4+0xa0>
 8000fb8:	f1c2 0320 	rsb	r3, r2, #32
 8000fbc:	fa20 f703 	lsr.w	r7, r0, r3
 8000fc0:	4095      	lsls	r5, r2
 8000fc2:	fa01 f002 	lsl.w	r0, r1, r2
 8000fc6:	fa21 f303 	lsr.w	r3, r1, r3
 8000fca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000fce:	4338      	orrs	r0, r7
 8000fd0:	0c01      	lsrs	r1, r0, #16
 8000fd2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fd6:	fa1f f885 	uxth.w	r8, r5
 8000fda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe2:	fb07 f308 	mul.w	r3, r7, r8
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fec:	d907      	bls.n	8000ffe <__udivmoddi4+0x256>
 8000fee:	1869      	adds	r1, r5, r1
 8000ff0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ff4:	d22f      	bcs.n	8001056 <__udivmoddi4+0x2ae>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d92d      	bls.n	8001056 <__udivmoddi4+0x2ae>
 8000ffa:	3f02      	subs	r7, #2
 8000ffc:	4429      	add	r1, r5
 8000ffe:	1acb      	subs	r3, r1, r3
 8001000:	b281      	uxth	r1, r0
 8001002:	fbb3 f0fe 	udiv	r0, r3, lr
 8001006:	fb0e 3310 	mls	r3, lr, r0, r3
 800100a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800100e:	fb00 f308 	mul.w	r3, r0, r8
 8001012:	428b      	cmp	r3, r1
 8001014:	d907      	bls.n	8001026 <__udivmoddi4+0x27e>
 8001016:	1869      	adds	r1, r5, r1
 8001018:	f100 3cff 	add.w	ip, r0, #4294967295
 800101c:	d217      	bcs.n	800104e <__udivmoddi4+0x2a6>
 800101e:	428b      	cmp	r3, r1
 8001020:	d915      	bls.n	800104e <__udivmoddi4+0x2a6>
 8001022:	3802      	subs	r0, #2
 8001024:	4429      	add	r1, r5
 8001026:	1ac9      	subs	r1, r1, r3
 8001028:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800102c:	e73b      	b.n	8000ea6 <__udivmoddi4+0xfe>
 800102e:	4637      	mov	r7, r6
 8001030:	4630      	mov	r0, r6
 8001032:	e709      	b.n	8000e48 <__udivmoddi4+0xa0>
 8001034:	4607      	mov	r7, r0
 8001036:	e6e7      	b.n	8000e08 <__udivmoddi4+0x60>
 8001038:	4618      	mov	r0, r3
 800103a:	e6fb      	b.n	8000e34 <__udivmoddi4+0x8c>
 800103c:	4541      	cmp	r1, r8
 800103e:	d2ab      	bcs.n	8000f98 <__udivmoddi4+0x1f0>
 8001040:	ebb8 0a02 	subs.w	sl, r8, r2
 8001044:	eb69 020e 	sbc.w	r2, r9, lr
 8001048:	3801      	subs	r0, #1
 800104a:	4613      	mov	r3, r2
 800104c:	e7a4      	b.n	8000f98 <__udivmoddi4+0x1f0>
 800104e:	4660      	mov	r0, ip
 8001050:	e7e9      	b.n	8001026 <__udivmoddi4+0x27e>
 8001052:	4618      	mov	r0, r3
 8001054:	e795      	b.n	8000f82 <__udivmoddi4+0x1da>
 8001056:	4667      	mov	r7, ip
 8001058:	e7d1      	b.n	8000ffe <__udivmoddi4+0x256>
 800105a:	4681      	mov	r9, r0
 800105c:	e77c      	b.n	8000f58 <__udivmoddi4+0x1b0>
 800105e:	3802      	subs	r0, #2
 8001060:	442c      	add	r4, r5
 8001062:	e747      	b.n	8000ef4 <__udivmoddi4+0x14c>
 8001064:	f1ac 0c02 	sub.w	ip, ip, #2
 8001068:	442b      	add	r3, r5
 800106a:	e72f      	b.n	8000ecc <__udivmoddi4+0x124>
 800106c:	4638      	mov	r0, r7
 800106e:	e708      	b.n	8000e82 <__udivmoddi4+0xda>
 8001070:	4637      	mov	r7, r6
 8001072:	e6e9      	b.n	8000e48 <__udivmoddi4+0xa0>

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <kalmanFilterC>:
#include "main.h"
#include "math.h"
#include "lab1util.h"
#include "cmsis_gcc.h"

int kalmanFilterC(float* InputArray, float* OutputArray, struct KalmanState* kstate, int length){
 8001078:	b580      	push	{r7, lr}
 800107a:	b08a      	sub	sp, #40	; 0x28
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	60b9      	str	r1, [r7, #8]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	603b      	str	r3, [r7, #0]
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
#else
  uint32_t result;

  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 8001086:	eef1 3a10 	vmrs	r3, fpscr
 800108a:	61bb      	str	r3, [r7, #24]
  return(result);
 800108c:	69bb      	ldr	r3, [r7, #24]
//
//	// a. Subtraction of original and data obtained by Kalman filter tracking.
//	float diffArray[length];
//	float convArray[length*2-1];

	__set_FPSCR(__get_FPSCR() & 0xFFFFFFF0);
 800108e:	f023 030f 	bic.w	r3, r3, #15
 8001092:	61fb      	str	r3, [r7, #28]
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	eee1 3a10 	vmsr	fpscr, r3

	for(int i = 0; i < length; i++){
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
 800109e:	e038      	b.n	8001112 <kalmanFilterC+0x9a>
		float updateResult = kalmanUpdateC(kstate, InputArray[i]);
 80010a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	68fa      	ldr	r2, [r7, #12]
 80010a6:	4413      	add	r3, r2
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	eeb0 0a67 	vmov.f32	s0, s15
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f000 f98b 	bl	80013cc <kalmanUpdateC>
 80010b6:	ed87 0a08 	vstr	s0, [r7, #32]
		if (isnan(updateResult) || isinf(updateResult)){
 80010ba:	ed97 7a08 	vldr	s14, [r7, #32]
 80010be:	edd7 7a08 	vldr	s15, [r7, #32]
 80010c2:	eeb4 7a67 	vcmp.f32	s14, s15
 80010c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ca:	d612      	bvs.n	80010f2 <kalmanFilterC+0x7a>
 80010cc:	edd7 7a08 	vldr	s15, [r7, #32]
 80010d0:	eef0 7ae7 	vabs.f32	s15, s15
 80010d4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001124 <kalmanFilterC+0xac>
 80010d8:	eef4 7a47 	vcmp.f32	s15, s14
 80010dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e0:	bfd4      	ite	le
 80010e2:	2301      	movle	r3, #1
 80010e4:	2300      	movgt	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	f083 0301 	eor.w	r3, r3, #1
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <kalmanFilterC+0x88>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80010f2:	eef1 3a10 	vmrs	r3, fpscr
 80010f6:	617b      	str	r3, [r7, #20]
  return(result);
 80010f8:	697b      	ldr	r3, [r7, #20]
			//Return FPSCR as an error flag
			return __get_FPSCR() & 0x0000000F;
 80010fa:	f003 030f 	and.w	r3, r3, #15
 80010fe:	e00d      	b.n	800111c <kalmanFilterC+0xa4>
		}
		OutputArray[i] = updateResult;
 8001100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	68ba      	ldr	r2, [r7, #8]
 8001106:	4413      	add	r3, r2
 8001108:	6a3a      	ldr	r2, [r7, #32]
 800110a:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	3301      	adds	r3, #1
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
 8001112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	429a      	cmp	r2, r3
 8001118:	dbc2      	blt.n	80010a0 <kalmanFilterC+0x28>


	// d. Calculation of the convolution between the two vectors.
//	convC(InputArray, OutputArray, convArray, length, length);

	return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	7f7fffff 	.word	0x7f7fffff

08001128 <kalmanFilterAinC>:


int kalmanFilterAinC(float* InputArray, float* OutputArray, struct KalmanState* kstate, int length){
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	603b      	str	r3, [r7, #0]

	for(int i = 0; i < length; i++){
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e038      	b.n	80011ae <kalmanFilterAinC+0x86>
		float updateResult = kalmanUpdateA(kstate, InputArray[i]);
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	edd3 7a00 	vldr	s15, [r3]
 8001148:	eeb0 0a67 	vmov.f32	s0, s15
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f7ff f88a 	bl	8000266 <kalmanUpdateA>
 8001152:	ed87 0a06 	vstr	s0, [r7, #24]
		if (isnan(updateResult) || isinf(updateResult)){
 8001156:	ed97 7a06 	vldr	s14, [r7, #24]
 800115a:	edd7 7a06 	vldr	s15, [r7, #24]
 800115e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001166:	d612      	bvs.n	800118e <kalmanFilterAinC+0x66>
 8001168:	edd7 7a06 	vldr	s15, [r7, #24]
 800116c:	eef0 7ae7 	vabs.f32	s15, s15
 8001170:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80011c0 <kalmanFilterAinC+0x98>
 8001174:	eef4 7a47 	vcmp.f32	s15, s14
 8001178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800117c:	bfd4      	ite	le
 800117e:	2301      	movle	r3, #1
 8001180:	2300      	movgt	r3, #0
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f083 0301 	eor.w	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
 800118a:	2b00      	cmp	r3, #0
 800118c:	d006      	beq.n	800119c <kalmanFilterAinC+0x74>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800118e:	eef1 3a10 	vmrs	r3, fpscr
 8001192:	617b      	str	r3, [r7, #20]
  return(result);
 8001194:	697b      	ldr	r3, [r7, #20]
			return __get_FPSCR() & 0x0000000F;
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	e00d      	b.n	80011b8 <kalmanFilterAinC+0x90>
		}
		OutputArray[i] = updateResult;
 800119c:	69fb      	ldr	r3, [r7, #28]
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	68ba      	ldr	r2, [r7, #8]
 80011a2:	4413      	add	r3, r2
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 80011a8:	69fb      	ldr	r3, [r7, #28]
 80011aa:	3301      	adds	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
 80011ae:	69fa      	ldr	r2, [r7, #28]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dbc2      	blt.n	800113c <kalmanFilterAinC+0x14>
	}

	return 0;
 80011b6:	2300      	movs	r3, #0
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3720      	adds	r7, #32
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	7f7fffff 	.word	0x7f7fffff

080011c4 <kalmanFilterL>:
#include "main.h"
#include "lab1util.h"
#include "arm_math.h"
#include "cmsis_gcc.h"

int kalmanFilterL(float* InputArray, float* OutputArray, struct KalmanState* kstate, int length){
 80011c4:	b5b0      	push	{r4, r5, r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af02      	add	r7, sp, #8
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	603b      	str	r3, [r7, #0]
 80011d2:	466b      	mov	r3, sp
 80011d4:	461d      	mov	r5, r3
	float stdDiff= 0.0;
 80011d6:	f04f 0300 	mov.w	r3, #0
 80011da:	617b      	str	r3, [r7, #20]
	float avgDiff = 0.0;
 80011dc:	f04f 0300 	mov.w	r3, #0
 80011e0:	613b      	str	r3, [r7, #16]
	uint32_t u_len = (uint32_t) length;
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	643b      	str	r3, [r7, #64]	; 0x40
	float diffArray[length];
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	1e43      	subs	r3, r0, #1
 80011ea:	647b      	str	r3, [r7, #68]	; 0x44
 80011ec:	4603      	mov	r3, r0
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 0200 	mov.w	r2, #0
 80011f4:	f04f 0300 	mov.w	r3, #0
 80011f8:	f04f 0400 	mov.w	r4, #0
 80011fc:	0154      	lsls	r4, r2, #5
 80011fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001202:	014b      	lsls	r3, r1, #5
 8001204:	4603      	mov	r3, r0
 8001206:	4619      	mov	r1, r3
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	f04f 0400 	mov.w	r4, #0
 8001214:	0154      	lsls	r4, r2, #5
 8001216:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800121a:	014b      	lsls	r3, r1, #5
 800121c:	4603      	mov	r3, r0
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	3303      	adds	r3, #3
 8001222:	3307      	adds	r3, #7
 8001224:	08db      	lsrs	r3, r3, #3
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	ebad 0d03 	sub.w	sp, sp, r3
 800122c:	ab02      	add	r3, sp, #8
 800122e:	3303      	adds	r3, #3
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	63bb      	str	r3, [r7, #56]	; 0x38
	float corrArray[length*2-1];
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	1e58      	subs	r0, r3, #1
 800123c:	1e43      	subs	r3, r0, #1
 800123e:	637b      	str	r3, [r7, #52]	; 0x34
 8001240:	4603      	mov	r3, r0
 8001242:	4619      	mov	r1, r3
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	f04f 0400 	mov.w	r4, #0
 8001250:	0154      	lsls	r4, r2, #5
 8001252:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001256:	014b      	lsls	r3, r1, #5
 8001258:	4603      	mov	r3, r0
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 0200 	mov.w	r2, #0
 8001260:	f04f 0300 	mov.w	r3, #0
 8001264:	f04f 0400 	mov.w	r4, #0
 8001268:	0154      	lsls	r4, r2, #5
 800126a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800126e:	014b      	lsls	r3, r1, #5
 8001270:	4603      	mov	r3, r0
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	3303      	adds	r3, #3
 8001276:	3307      	adds	r3, #7
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	00db      	lsls	r3, r3, #3
 800127c:	ebad 0d03 	sub.w	sp, sp, r3
 8001280:	ab02      	add	r3, sp, #8
 8001282:	3303      	adds	r3, #3
 8001284:	089b      	lsrs	r3, r3, #2
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	633b      	str	r3, [r7, #48]	; 0x30
	float convArray[length*2-1];
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	1e58      	subs	r0, r3, #1
 8001290:	1e43      	subs	r3, r0, #1
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001294:	4603      	mov	r3, r0
 8001296:	4619      	mov	r1, r3
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	f04f 0300 	mov.w	r3, #0
 80012a0:	f04f 0400 	mov.w	r4, #0
 80012a4:	0154      	lsls	r4, r2, #5
 80012a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012aa:	014b      	lsls	r3, r1, #5
 80012ac:	4603      	mov	r3, r0
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 0200 	mov.w	r2, #0
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	f04f 0400 	mov.w	r4, #0
 80012bc:	0154      	lsls	r4, r2, #5
 80012be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80012c2:	014b      	lsls	r3, r1, #5
 80012c4:	4603      	mov	r3, r0
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	3303      	adds	r3, #3
 80012ca:	3307      	adds	r3, #7
 80012cc:	08db      	lsrs	r3, r3, #3
 80012ce:	00db      	lsls	r3, r3, #3
 80012d0:	ebad 0d03 	sub.w	sp, sp, r3
 80012d4:	ab02      	add	r3, sp, #8
 80012d6:	3303      	adds	r3, #3
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 80012de:	eef1 3a10 	vmrs	r3, fpscr
 80012e2:	61fb      	str	r3, [r7, #28]
  return(result);
 80012e4:	69fb      	ldr	r3, [r7, #28]

	__set_FPSCR(__get_FPSCR() & 0xFFFFFFF0);
 80012e6:	f023 030f 	bic.w	r3, r3, #15
 80012ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	eee1 3a10 	vmsr	fpscr, r3

	for(int i = 0; i < length; i++){
 80012f2:	2300      	movs	r3, #0
 80012f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012f6:	e038      	b.n	800136a <kalmanFilterL+0x1a6>
		float updateResult = kalmanUpdateA(kstate, InputArray[i]);
 80012f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012fa:	009b      	lsls	r3, r3, #2
 80012fc:	68fa      	ldr	r2, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	edd3 7a00 	vldr	s15, [r3]
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7fe ffac 	bl	8000266 <kalmanUpdateA>
 800130e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		if (isnan(updateResult) || isinf(updateResult)){
 8001312:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001316:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800131a:	eeb4 7a67 	vcmp.f32	s14, s15
 800131e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001322:	d612      	bvs.n	800134a <kalmanFilterL+0x186>
 8001324:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001328:	eef0 7ae7 	vabs.f32	s15, s15
 800132c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 80013c8 <kalmanFilterL+0x204>
 8001330:	eef4 7a47 	vcmp.f32	s15, s14
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	bfd4      	ite	le
 800133a:	2301      	movle	r3, #1
 800133c:	2300      	movgt	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	f083 0301 	eor.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d006      	beq.n	8001358 <kalmanFilterL+0x194>
  __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 800134a:	eef1 3a10 	vmrs	r3, fpscr
 800134e:	61bb      	str	r3, [r7, #24]
  return(result);
 8001350:	69bb      	ldr	r3, [r7, #24]
			//Return FPSCR as an error flag
			return __get_FPSCR() & 0x0000000F;
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	e031      	b.n	80013bc <kalmanFilterL+0x1f8>
		}
		OutputArray[i] = updateResult;
 8001358:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	4413      	add	r3, r2
 8001360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001362:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < length; i++){
 8001364:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001366:	3301      	adds	r3, #1
 8001368:	63fb      	str	r3, [r7, #60]	; 0x3c
 800136a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	429a      	cmp	r2, r3
 8001370:	dbc2      	blt.n	80012f8 <kalmanFilterL+0x134>
	}

	// a. Subtraction of original and data obtained by Kalman filter tracking.
	arm_sub_f32(OutputArray, InputArray, diffArray, u_len);
 8001372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001374:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001376:	68f9      	ldr	r1, [r7, #12]
 8001378:	68b8      	ldr	r0, [r7, #8]
 800137a:	f004 fb0b 	bl	8005994 <arm_sub_f32>

	// b. Calculation of the standard deviation and the average of the difference obtained in a).
	arm_mean_f32(diffArray, u_len, &avgDiff);
 800137e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001380:	f107 0210 	add.w	r2, r7, #16
 8001384:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001386:	4618      	mov	r0, r3
 8001388:	f003 fd76 	bl	8004e78 <arm_mean_f32>
	arm_std_f32(diffArray, u_len, &stdDiff);
 800138c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800138e:	f107 0214 	add.w	r2, r7, #20
 8001392:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001394:	4618      	mov	r0, r3
 8001396:	f003 fce5 	bl	8004d64 <arm_std_f32>

	// c. Calculation of the correlation between the original and tracked vectors.
	arm_correlate_f32(InputArray, u_len, OutputArray, u_len, corrArray);
 800139a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013a0:	68ba      	ldr	r2, [r7, #8]
 80013a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f003 fda5 	bl	8004ef4 <arm_correlate_f32>

	// d. Calculation of the convolution between the two vectors.
	arm_conv_f32(InputArray, u_len, OutputArray, u_len, convArray);
 80013aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ac:	9300      	str	r3, [sp, #0]
 80013ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80013b4:	68f8      	ldr	r0, [r7, #12]
 80013b6:	f004 f853 	bl	8005460 <arm_conv_f32>

	return 0;
 80013ba:	2300      	movs	r3, #0
 80013bc:	46ad      	mov	sp, r5
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3748      	adds	r7, #72	; 0x48
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bdb0      	pop	{r4, r5, r7, pc}
 80013c6:	bf00      	nop
 80013c8:	7f7fffff 	.word	0x7f7fffff

080013cc <kalmanUpdateC>:
 */
#include "math.h"
#include "string.h"
#include "lab1util.h"

float kalmanUpdateC(struct KalmanState* ksp, float measurement){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b088      	sub	sp, #32
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	ed87 0a00 	vstr	s0, [r7]
//			|| isinf(ksp->k) || isinf(ksp->p) || isinf(ksp->q) || isinf(ksp->x) || isinf(ksp->r)){
//		return NAN;
//	}

	struct KalmanState ks;
	memcpy(&ks, ksp, sizeof(ks));
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2214      	movs	r2, #20
 80013de:	6879      	ldr	r1, [r7, #4]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f004 fb5b 	bl	8005a9c <memcpy>

	ks.p += ks.q;
 80013e6:	ed97 7a06 	vldr	s14, [r7, #24]
 80013ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80013ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f2:	edc7 7a06 	vstr	s15, [r7, #24]
	ks.k = ks.p / (ks.p + ks.r);
 80013f6:	edd7 6a06 	vldr	s13, [r7, #24]
 80013fa:	ed97 7a06 	vldr	s14, [r7, #24]
 80013fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8001402:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001406:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800140a:	edc7 7a07 	vstr	s15, [r7, #28]
	ks.x += ks.k * (measurement - ks.x);
 800140e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001412:	edd7 6a07 	vldr	s13, [r7, #28]
 8001416:	edd7 7a05 	vldr	s15, [r7, #20]
 800141a:	ed97 6a00 	vldr	s12, [r7]
 800141e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001422:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001426:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142a:	edc7 7a05 	vstr	s15, [r7, #20]
	ks.p -= ks.k * ks.p;
 800142e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001432:	edd7 6a07 	vldr	s13, [r7, #28]
 8001436:	edd7 7a06 	vldr	s15, [r7, #24]
 800143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001442:	edc7 7a06 	vstr	s15, [r7, #24]

	if (isnan(ks.k) || isinf(ks.p) || isinf(ks.x) || isnan(ks.x)
 8001446:	edd7 7a07 	vldr	s15, [r7, #28]
 800144a:	eef4 7a67 	vcmp.f32	s15, s15
 800144e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001452:	d646      	bvs.n	80014e2 <kalmanUpdateC+0x116>
 8001454:	edd7 7a06 	vldr	s15, [r7, #24]
 8001458:	eef0 7ae7 	vabs.f32	s15, s15
 800145c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001504 <kalmanUpdateC+0x138>
 8001460:	eef4 7a47 	vcmp.f32	s15, s14
 8001464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001468:	bfd4      	ite	le
 800146a:	2301      	movle	r3, #1
 800146c:	2300      	movgt	r3, #0
 800146e:	b2db      	uxtb	r3, r3
 8001470:	f083 0301 	eor.w	r3, r3, #1
 8001474:	b2db      	uxtb	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d133      	bne.n	80014e2 <kalmanUpdateC+0x116>
 800147a:	edd7 7a05 	vldr	s15, [r7, #20]
 800147e:	eef0 7ae7 	vabs.f32	s15, s15
 8001482:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001504 <kalmanUpdateC+0x138>
 8001486:	eef4 7a47 	vcmp.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	bfd4      	ite	le
 8001490:	2301      	movle	r3, #1
 8001492:	2300      	movgt	r3, #0
 8001494:	b2db      	uxtb	r3, r3
 8001496:	f083 0301 	eor.w	r3, r3, #1
 800149a:	b2db      	uxtb	r3, r3
 800149c:	2b00      	cmp	r3, #0
 800149e:	d120      	bne.n	80014e2 <kalmanUpdateC+0x116>
 80014a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014a4:	eef4 7a67 	vcmp.f32	s15, s15
 80014a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ac:	d619      	bvs.n	80014e2 <kalmanUpdateC+0x116>
			|| isnan(ks.p) || isinf(ks.k))	return NAN;
 80014ae:	edd7 7a06 	vldr	s15, [r7, #24]
 80014b2:	eef4 7a67 	vcmp.f32	s15, s15
 80014b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ba:	d612      	bvs.n	80014e2 <kalmanUpdateC+0x116>
 80014bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80014c0:	eef0 7ae7 	vabs.f32	s15, s15
	if (isnan(ks.k) || isinf(ks.p) || isinf(ks.x) || isnan(ks.x)
 80014c4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001504 <kalmanUpdateC+0x138>
 80014c8:	eef4 7a47 	vcmp.f32	s15, s14
 80014cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d0:	bfd4      	ite	le
 80014d2:	2301      	movle	r3, #1
 80014d4:	2300      	movgt	r3, #0
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f083 0301 	eor.w	r3, r3, #1
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <kalmanUpdateC+0x11a>
			|| isnan(ks.p) || isinf(ks.k))	return NAN;
 80014e2:	4b09      	ldr	r3, [pc, #36]	; (8001508 <kalmanUpdateC+0x13c>)
 80014e4:	e007      	b.n	80014f6 <kalmanUpdateC+0x12a>

	memcpy(ksp, &ks, sizeof(ks));
 80014e6:	f107 030c 	add.w	r3, r7, #12
 80014ea:	2214      	movs	r2, #20
 80014ec:	4619      	mov	r1, r3
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f004 fad4 	bl	8005a9c <memcpy>
	return ks.x;
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	ee07 3a90 	vmov	s15, r3
}
 80014fa:	eeb0 0a67 	vmov.f32	s0, s15
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	7f7fffff 	.word	0x7f7fffff
 8001508:	7fc00000 	.word	0x7fc00000

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b5b0      	push	{r4, r5, r7, lr}
 800150e:	f5ad 7d7e 	sub.w	sp, sp, #1016	; 0x3f8
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001514:	f000 fc21 	bl	8001d5a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 f9a2 	bl	8001860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f000 fab0 	bl	8001a80 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001520:	f000 fa14 	bl	800194c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8001524:	f000 fa60 	bl	80019e8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  struct KalmanState ks5A = {
 8001528:	4bc5      	ldr	r3, [pc, #788]	; (8001840 <main+0x334>)
 800152a:	f507 7473 	add.w	r4, r7, #972	; 0x3cc
 800152e:	461d      	mov	r5, r3
 8001530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001534:	682b      	ldr	r3, [r5, #0]
 8001536:	6023      	str	r3, [r4, #0]
 		  .r = 0.1,
 		  .x = 5,
 		  .p = 0.1,
 		  .k = 0.0
   };
  struct KalmanState ks50A = {
 8001538:	4bc2      	ldr	r3, [pc, #776]	; (8001844 <main+0x338>)
 800153a:	f507 746e 	add.w	r4, r7, #952	; 0x3b8
 800153e:	461d      	mov	r5, r3
 8001540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001544:	682b      	ldr	r3, [r5, #0]
 8001546:	6023      	str	r3, [r4, #0]
 		  .r = 0.1,
 		  .x = 50,
 		  .p = 0.1,
 		  .k = 0.0
   };
  struct KalmanState ks5AC = {
 8001548:	4bbd      	ldr	r3, [pc, #756]	; (8001840 <main+0x334>)
 800154a:	f507 7469 	add.w	r4, r7, #932	; 0x3a4
 800154e:	461d      	mov	r5, r3
 8001550:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001552:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001554:	682b      	ldr	r3, [r5, #0]
 8001556:	6023      	str	r3, [r4, #0]
 		  .r = 0.1,
 		  .x = 5,
 		  .p = 0.1,
 		  .k = 0.0
   };
  struct KalmanState ks50AC = {
 8001558:	4bba      	ldr	r3, [pc, #744]	; (8001844 <main+0x338>)
 800155a:	f507 7464 	add.w	r4, r7, #912	; 0x390
 800155e:	461d      	mov	r5, r3
 8001560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001564:	682b      	ldr	r3, [r5, #0]
 8001566:	6023      	str	r3, [r4, #0]
 		  .r = 0.1,
 		  .x = 50,
 		  .p = 0.1,
 		  .k = 0.0
   };
  struct KalmanState ks5C = {
 8001568:	4bb5      	ldr	r3, [pc, #724]	; (8001840 <main+0x334>)
 800156a:	f507 745f 	add.w	r4, r7, #892	; 0x37c
 800156e:	461d      	mov	r5, r3
 8001570:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001572:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001574:	682b      	ldr	r3, [r5, #0]
 8001576:	6023      	str	r3, [r4, #0]
   		  .r = 0.1,
   		  .x = 5,
   		  .p = 0.1,
   		  .k = 0.0
     };
    struct KalmanState ks50C = {
 8001578:	4bb2      	ldr	r3, [pc, #712]	; (8001844 <main+0x338>)
 800157a:	f507 745a 	add.w	r4, r7, #872	; 0x368
 800157e:	461d      	mov	r5, r3
 8001580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001584:	682b      	ldr	r3, [r5, #0]
 8001586:	6023      	str	r3, [r4, #0]
   		  .p = 0.1,
   		  .k = 0.0
     };


  struct KalmanState ksZero = {
 8001588:	f04f 0300 	mov.w	r3, #0
 800158c:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8001598:	4bab      	ldr	r3, [pc, #684]	; (8001848 <main+0x33c>)
 800159a:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	f8c7 3360 	str.w	r3, [r7, #864]	; 0x360
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
		  .r = 0,
		  .x = 5,
		  .p = 0,
		  .k = 0.0
  };
  struct KalmanState ksOverflow = {
 80015ae:	4ba7      	ldr	r3, [pc, #668]	; (800184c <main+0x340>)
 80015b0:	f507 7450 	add.w	r4, r7, #832	; 0x340
 80015b4:	461d      	mov	r5, r3
 80015b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ba:	682b      	ldr	r3, [r5, #0]
 80015bc:	6023      	str	r3, [r4, #0]
  		  .r = 3e38,
  		  .x = 5,
  		  .p = 3e38,
  		  .k = 0.0
    };
  struct KalmanState ksUnderflow = {
 80015be:	4ba4      	ldr	r3, [pc, #656]	; (8001850 <main+0x344>)
 80015c0:	f507 744b 	add.w	r4, r7, #812	; 0x32c
 80015c4:	461d      	mov	r5, r3
 80015c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015ca:	682b      	ldr	r3, [r5, #0]
 80015cc:	6023      	str	r3, [r4, #0]
  		  .x = 5,
  		  .p = 3e-38,
  		  .k = 0.0
    };

  float sanitychecker = 123.45;
 80015ce:	4ba1      	ldr	r3, [pc, #644]	; (8001854 <main+0x348>)
 80015d0:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
//  for (int i=0; i<5; i++) {
//	 sanitychecker = kalmanUpdateA(&ks5A, i);
//	 sanitychecker = kalmanUpdateC(&ks5C, i);
//  }

  float TEST_ARRAY[101] = {10.4915760032, 10.1349974709, 9.53992591829, 9.60311878706, 10.4858891793, 10.1104642352, 9.51066931906, 9.75755656493, 9.82154078273, 10.2906541933, 10.4861328671, 9.57321181356, 9.70882714139, 10.4359069357, 9.70644021369, 10.2709894039, 10.0823149505, 10.2954563443, 9.57130449017, 9.66832136479, 10.4521677502, 10.4287240667, 10.1833650752, 10.0066049721, 10.3279461634, 10.4767210803, 10.3790964606, 10.1937408814, 10.0318963522, 10.4939180917, 10.2381858895, 9.59703103024, 9.62757986516, 10.1816981174, 9.65703773168, 10.3905666599, 10.0941977598, 9.93515274393, 9.71017053437, 10.0303874259, 10.0173504397, 9.69022731474, 9.73902896102, 9.52524419732, 10.3270730526, 9.54695650657, 10.3573960542, 9.88773266876, 10.1685038683, 10.1683694089, 9.88406620159, 10.3290065898, 10.2547227265, 10.4733422906, 10.0133952458, 10.4205693583, 9.71335255372, 9.89061396699, 10.1652744131, 10.2580948608, 10.3465431058, 9.98446410493, 9.79376005657, 10.202518901, 9.83867150985, 9.89532986869, 10.2885062658, 9.97748768804, 10.0403923759, 10.1538911808, 9.78303667556, 9.72420149909, 9.59117495073, 10.1716116012, 10.2015818969, 9.90650056596, 10.3251329834, 10.4550120431, 10.4925749165, 10.1548177178, 9.60547133785, 10.4644672766, 10.2326496615, 10.2279703226, 10.3535284606, 10.2437410625, 10.3851531317, 9.90784804928, 9.98208344925, 9.52778805729, 9.69323876912, 9.92987312087, 9.73938925207, 9.60543743477, 9.79600805462, 10.4950988486, 10.2814361401, 9.7985283333, 9.6287888922, 10.4491538991, 9.5799256668};
 80015d4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80015d8:	4a9f      	ldr	r2, [pc, #636]	; (8001858 <main+0x34c>)
 80015da:	4618      	mov	r0, r3
 80015dc:	4611      	mov	r1, r2
 80015de:	f44f 73ca 	mov.w	r3, #404	; 0x194
 80015e2:	461a      	mov	r2, r3
 80015e4:	f004 fa5a 	bl	8005a9c <memcpy>
//      0.41019673,  2.07180601, -2.36113329,  4.26725684,  3.39193058,
//      2.26319498, -0.19760044,  3.42103186,  2.44752323,  1.60325906,
//      4.13975267,  1.33665564, -1.34059415,  0.52844573, -3.03619423,
//     -3.07927704};

  int resultholder = 12345;
 80015e8:	f243 0339 	movw	r3, #12345	; 0x3039
 80015ec:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0

  float output[101];

  memset(output, 0, sizeof(output));
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80015f6:	2100      	movs	r1, #0
 80015f8:	4618      	mov	r0, r3
 80015fa:	f004 fa5a 	bl	8005ab2 <memset>
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ksUnderflow, 101);
 80015fe:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8001602:	1d39      	adds	r1, r7, #4
 8001604:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001608:	2365      	movs	r3, #101	; 0x65
 800160a:	f7ff fd35 	bl	8001078 <kalmanFilterC>
 800160e:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ks5C, 101);
 8001612:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8001616:	1d39      	adds	r1, r7, #4
 8001618:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800161c:	2365      	movs	r3, #101	; 0x65
 800161e:	f7ff fd2b 	bl	8001078 <kalmanFilterC>
 8001622:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ks50C, 101);
 8001626:	f507 725a 	add.w	r2, r7, #872	; 0x368
 800162a:	1d39      	adds	r1, r7, #4
 800162c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001630:	2365      	movs	r3, #101	; 0x65
 8001632:	f7ff fd21 	bl	8001078 <kalmanFilterC>
 8001636:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ksZero, 101);
 800163a:	f507 7255 	add.w	r2, r7, #852	; 0x354
 800163e:	1d39      	adds	r1, r7, #4
 8001640:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001644:	2365      	movs	r3, #101	; 0x65
 8001646:	f7ff fd17 	bl	8001078 <kalmanFilterC>
 800164a:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterC(TEST_ARRAY, output, &ksOverflow, 101);
 800164e:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8001652:	1d39      	adds	r1, r7, #4
 8001654:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001658:	2365      	movs	r3, #101	; 0x65
 800165a:	f7ff fd0d 	bl	8001078 <kalmanFilterC>
 800165e:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0


  memset(output, 0, sizeof(output));
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	f44f 72ca 	mov.w	r2, #404	; 0x194
 8001668:	2100      	movs	r1, #0
 800166a:	4618      	mov	r0, r3
 800166c:	f004 fa21 	bl	8005ab2 <memset>
  resultholder = 12345;
 8001670:	f243 0339 	movw	r3, #12345	; 0x3039
 8001674:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterA(TEST_ARRAY, output, &ks5A, 101);
 8001678:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 800167c:	1d39      	adds	r1, r7, #4
 800167e:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001682:	2365      	movs	r3, #101	; 0x65
 8001684:	f7fe fdbc 	bl	8000200 <kalmanFilterA>
 8001688:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterA(TEST_ARRAY, output, &ks50A, 101);
 800168c:	f507 726e 	add.w	r2, r7, #952	; 0x3b8
 8001690:	1d39      	adds	r1, r7, #4
 8001692:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001696:	2365      	movs	r3, #101	; 0x65
 8001698:	f7fe fdb2 	bl	8000200 <kalmanFilterA>
 800169c:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterA(TEST_ARRAY, output, &ksZero, 101);
 80016a0:	f507 7255 	add.w	r2, r7, #852	; 0x354
 80016a4:	1d39      	adds	r1, r7, #4
 80016a6:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80016aa:	2365      	movs	r3, #101	; 0x65
 80016ac:	f7fe fda8 	bl	8000200 <kalmanFilterA>
 80016b0:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterA(TEST_ARRAY, output, &ksOverflow, 101);
 80016b4:	f507 7250 	add.w	r2, r7, #832	; 0x340
 80016b8:	1d39      	adds	r1, r7, #4
 80016ba:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80016be:	2365      	movs	r3, #101	; 0x65
 80016c0:	f7fe fd9e 	bl	8000200 <kalmanFilterA>
 80016c4:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterA(TEST_ARRAY, output, &ksUnderflow, 101);
 80016c8:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 80016cc:	1d39      	adds	r1, r7, #4
 80016ce:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80016d2:	2365      	movs	r3, #101	; 0x65
 80016d4:	f7fe fd94 	bl	8000200 <kalmanFilterA>
 80016d8:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0

  memset(output, 0, sizeof(output));
 80016dc:	1d3b      	adds	r3, r7, #4
 80016de:	f44f 72ca 	mov.w	r2, #404	; 0x194
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f004 f9e4 	bl	8005ab2 <memset>
  resultholder = 12345;
 80016ea:	f243 0339 	movw	r3, #12345	; 0x3039
 80016ee:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ks5AC, 101);
 80016f2:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 80016f6:	1d39      	adds	r1, r7, #4
 80016f8:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80016fc:	2365      	movs	r3, #101	; 0x65
 80016fe:	f7ff fd13 	bl	8001128 <kalmanFilterAinC>
 8001702:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ks50AC, 101);
 8001706:	f507 7264 	add.w	r2, r7, #912	; 0x390
 800170a:	1d39      	adds	r1, r7, #4
 800170c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001710:	2365      	movs	r3, #101	; 0x65
 8001712:	f7ff fd09 	bl	8001128 <kalmanFilterAinC>
 8001716:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ksZero, 101);
 800171a:	f507 7255 	add.w	r2, r7, #852	; 0x354
 800171e:	1d39      	adds	r1, r7, #4
 8001720:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001724:	2365      	movs	r3, #101	; 0x65
 8001726:	f7ff fcff 	bl	8001128 <kalmanFilterAinC>
 800172a:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ksOverflow, 101);
 800172e:	f507 7250 	add.w	r2, r7, #832	; 0x340
 8001732:	1d39      	adds	r1, r7, #4
 8001734:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001738:	2365      	movs	r3, #101	; 0x65
 800173a:	f7ff fcf5 	bl	8001128 <kalmanFilterAinC>
 800173e:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ksUnderflow, 101);
 8001742:	f507 724b 	add.w	r2, r7, #812	; 0x32c
 8001746:	1d39      	adds	r1, r7, #4
 8001748:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 800174c:	2365      	movs	r3, #101	; 0x65
 800174e:	f7ff fceb 	bl	8001128 <kalmanFilterAinC>
 8001752:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  ITM_Port32(31) = 11111;
 8001756:	4b41      	ldr	r3, [pc, #260]	; (800185c <main+0x350>)
 8001758:	f642 3267 	movw	r2, #11111	; 0x2b67
 800175c:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 800175e:	2300      	movs	r3, #0
 8001760:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8001764:	e00e      	b.n	8001784 <main+0x278>
		  resultholder = kalmanFilterA(TEST_ARRAY, output, &ks5A, 101);
 8001766:	f507 7273 	add.w	r2, r7, #972	; 0x3cc
 800176a:	1d39      	adds	r1, r7, #4
 800176c:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001770:	2365      	movs	r3, #101	; 0x65
 8001772:	f7fe fd45 	bl	8000200 <kalmanFilterA>
 8001776:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
	  for (int i=0; i<1000; i++){
 800177a:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 800177e:	3301      	adds	r3, #1
 8001780:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8001784:	f8d7 33f4 	ldr.w	r3, [r7, #1012]	; 0x3f4
 8001788:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800178c:	dbeb      	blt.n	8001766 <main+0x25a>
	  }
	  ITM_Port32(31) = 22222;
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <main+0x350>)
 8001790:	f245 62ce 	movw	r2, #22222	; 0x56ce
 8001794:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 8001796:	2300      	movs	r3, #0
 8001798:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 800179c:	e00e      	b.n	80017bc <main+0x2b0>
		  resultholder = kalmanFilterAinC(TEST_ARRAY, output, &ks5AC, 101);
 800179e:	f507 7269 	add.w	r2, r7, #932	; 0x3a4
 80017a2:	1d39      	adds	r1, r7, #4
 80017a4:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80017a8:	2365      	movs	r3, #101	; 0x65
 80017aa:	f7ff fcbd 	bl	8001128 <kalmanFilterAinC>
 80017ae:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
	  for (int i=0; i<1000; i++){
 80017b2:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80017b6:	3301      	adds	r3, #1
 80017b8:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 80017bc:	f8d7 33f0 	ldr.w	r3, [r7, #1008]	; 0x3f0
 80017c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017c4:	dbeb      	blt.n	800179e <main+0x292>
	  }
	  ITM_Port32(31) = 33333;
 80017c6:	4b25      	ldr	r3, [pc, #148]	; (800185c <main+0x350>)
 80017c8:	f248 2235 	movw	r2, #33333	; 0x8235
 80017cc:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 80017ce:	2300      	movs	r3, #0
 80017d0:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80017d4:	e00e      	b.n	80017f4 <main+0x2e8>
		  resultholder = kalmanFilterC(TEST_ARRAY, output, &ks5C, 101);
 80017d6:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 80017da:	1d39      	adds	r1, r7, #4
 80017dc:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80017e0:	2365      	movs	r3, #101	; 0x65
 80017e2:	f7ff fc49 	bl	8001078 <kalmanFilterC>
 80017e6:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
	  for (int i=0; i<1000; i++){
 80017ea:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80017ee:	3301      	adds	r3, #1
 80017f0:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 80017f4:	f8d7 33ec 	ldr.w	r3, [r7, #1004]	; 0x3ec
 80017f8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017fc:	dbeb      	blt.n	80017d6 <main+0x2ca>
	  }
	  ITM_Port32(31) = 44444;
 80017fe:	4b17      	ldr	r3, [pc, #92]	; (800185c <main+0x350>)
 8001800:	f64a 529c 	movw	r2, #44444	; 0xad9c
 8001804:	601a      	str	r2, [r3, #0]
	  for (int i=0; i<1000; i++){
 8001806:	2300      	movs	r3, #0
 8001808:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 800180c:	e00e      	b.n	800182c <main+0x320>
		  resultholder = kalmanFilterL(TEST_ARRAY, output, &ks5C, 101);
 800180e:	f507 725f 	add.w	r2, r7, #892	; 0x37c
 8001812:	1d39      	adds	r1, r7, #4
 8001814:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 8001818:	2365      	movs	r3, #101	; 0x65
 800181a:	f7ff fcd3 	bl	80011c4 <kalmanFilterL>
 800181e:	f8c7 03e0 	str.w	r0, [r7, #992]	; 0x3e0
	  for (int i=0; i<1000; i++){
 8001822:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8001826:	3301      	adds	r3, #1
 8001828:	f8c7 33e8 	str.w	r3, [r7, #1000]	; 0x3e8
 800182c:	f8d7 33e8 	ldr.w	r3, [r7, #1000]	; 0x3e8
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001834:	dbeb      	blt.n	800180e <main+0x302>
	  }
	  ITM_Port32(31) = 55555;
 8001836:	4b09      	ldr	r3, [pc, #36]	; (800185c <main+0x350>)
 8001838:	f64d 1203 	movw	r2, #55555	; 0xd903
 800183c:	601a      	str	r2, [r3, #0]
	  ITM_Port32(31) = 11111;
 800183e:	e78a      	b.n	8001756 <main+0x24a>
 8001840:	080095e8 	.word	0x080095e8
 8001844:	080095fc 	.word	0x080095fc
 8001848:	40a00000 	.word	0x40a00000
 800184c:	08009610 	.word	0x08009610
 8001850:	08009624 	.word	0x08009624
 8001854:	42f6e666 	.word	0x42f6e666
 8001858:	08009638 	.word	0x08009638
 800185c:	e000007c 	.word	0xe000007c

08001860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b0bc      	sub	sp, #240	; 0xf0
 8001864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001866:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800186a:	2244      	movs	r2, #68	; 0x44
 800186c:	2100      	movs	r1, #0
 800186e:	4618      	mov	r0, r3
 8001870:	f004 f91f 	bl	8005ab2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001874:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001884:	1d3b      	adds	r3, r7, #4
 8001886:	2294      	movs	r2, #148	; 0x94
 8001888:	2100      	movs	r1, #0
 800188a:	4618      	mov	r0, r3
 800188c:	f004 f911 	bl	8005ab2 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001890:	2000      	movs	r0, #0
 8001892:	f000 fd6f 	bl	8002374 <HAL_PWREx_ControlVoltageScaling>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x40>
  {
    Error_Handler();
 800189c:	f000 f914 	bl	8001ac8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80018a0:	2310      	movs	r3, #16
 80018a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80018b2:	2360      	movs	r3, #96	; 0x60
 80018b4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018b8:	2302      	movs	r3, #2
 80018ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80018be:	2301      	movs	r3, #1
 80018c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80018c4:	2301      	movs	r3, #1
 80018c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLN = 60;
 80018ca:	233c      	movs	r3, #60	; 0x3c
 80018cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80018d6:	2302      	movs	r3, #2
 80018d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80018dc:	2302      	movs	r3, #2
 80018de:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 fde8 	bl	80024bc <HAL_RCC_OscConfig>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80018f2:	f000 f8e9 	bl	8001ac8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f6:	230f      	movs	r3, #15
 80018f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2303      	movs	r3, #3
 80018fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001914:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001918:	2105      	movs	r1, #5
 800191a:	4618      	mov	r0, r3
 800191c:	f001 f9f4 	bl	8002d08 <HAL_RCC_ClockConfig>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001926:	f000 f8cf 	bl	8001ac8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800192a:	2301      	movs	r3, #1
 800192c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800192e:	2300      	movs	r3, #0
 8001930:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001932:	1d3b      	adds	r3, r7, #4
 8001934:	4618      	mov	r0, r3
 8001936:	f001 fc97 	bl	8003268 <HAL_RCCEx_PeriphCLKConfig>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8001940:	f000 f8c2 	bl	8001ac8 <Error_Handler>
  }
}
 8001944:	bf00      	nop
 8001946:	37f0      	adds	r7, #240	; 0xf0
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001952:	f107 0310 	add.w	r3, r7, #16
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001960:	1d3b      	adds	r3, r7, #4
 8001962:	2200      	movs	r2, #0
 8001964:	601a      	str	r2, [r3, #0]
 8001966:	605a      	str	r2, [r3, #4]
 8001968:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800196a:	4b1e      	ldr	r3, [pc, #120]	; (80019e4 <MX_TIM2_Init+0x98>)
 800196c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001970:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <MX_TIM2_Init+0x98>)
 8001974:	f64e 2260 	movw	r2, #60000	; 0xea60
 8001978:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <MX_TIM2_Init+0x98>)
 800197c:	2200      	movs	r2, #0
 800197e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 8001980:	4b18      	ldr	r3, [pc, #96]	; (80019e4 <MX_TIM2_Init+0x98>)
 8001982:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001986:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001988:	4b16      	ldr	r3, [pc, #88]	; (80019e4 <MX_TIM2_Init+0x98>)
 800198a:	2200      	movs	r2, #0
 800198c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198e:	4b15      	ldr	r3, [pc, #84]	; (80019e4 <MX_TIM2_Init+0x98>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001994:	4813      	ldr	r0, [pc, #76]	; (80019e4 <MX_TIM2_Init+0x98>)
 8001996:	f002 f96f 	bl	8003c78 <HAL_TIM_Base_Init>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80019a0:	f000 f892 	bl	8001ac8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019aa:	f107 0310 	add.w	r3, r7, #16
 80019ae:	4619      	mov	r1, r3
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <MX_TIM2_Init+0x98>)
 80019b2:	f002 f9b8 	bl	8003d26 <HAL_TIM_ConfigClockSource>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80019bc:	f000 f884 	bl	8001ac8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019c8:	1d3b      	adds	r3, r7, #4
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <MX_TIM2_Init+0x98>)
 80019ce:	f002 fb97 	bl	8004100 <HAL_TIMEx_MasterConfigSynchronization>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80019d8:	f000 f876 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000294 	.word	0x20000294

080019e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 80019ee:	4a23      	ldr	r2, [pc, #140]	; (8001a7c <MX_USART1_UART_Init+0x94>)
 80019f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 80019f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80019fa:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a00:	4b1d      	ldr	r3, [pc, #116]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a06:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a0e:	220c      	movs	r2, #12
 8001a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a18:	4b17      	ldr	r3, [pc, #92]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a1e:	4b16      	ldr	r3, [pc, #88]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a30:	4811      	ldr	r0, [pc, #68]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a32:	f002 fbed 	bl	8004210 <HAL_UART_Init>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001a3c:	f000 f844 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a40:	2100      	movs	r1, #0
 8001a42:	480d      	ldr	r0, [pc, #52]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a44:	f003 f8a9 	bl	8004b9a <HAL_UARTEx_SetTxFifoThreshold>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001a4e:	f000 f83b 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001a52:	2100      	movs	r1, #0
 8001a54:	4808      	ldr	r0, [pc, #32]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a56:	f003 f8de 	bl	8004c16 <HAL_UARTEx_SetRxFifoThreshold>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001a60:	f000 f832 	bl	8001ac8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MX_USART1_UART_Init+0x90>)
 8001a66:	f003 f85f 	bl	8004b28 <HAL_UARTEx_DisableFifoMode>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001a70:	f000 f82a 	bl	8001ac8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000208 	.word	0x20000208
 8001a7c:	40013800 	.word	0x40013800

08001a80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <MX_GPIO_Init+0x44>)
 8001a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <MX_GPIO_Init+0x44>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_GPIO_Init+0x44>)
 8001a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_GPIO_Init+0x44>)
 8001aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <MX_GPIO_Init+0x44>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_GPIO_Init+0x44>)
 8001aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]

}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001acc:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ace:	e7fe      	b.n	8001ace <Error_Handler+0x6>

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_MspInit+0x44>)
 8001ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <HAL_MspInit+0x44>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_MspInit+0x44>)
 8001ae4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_MspInit+0x44>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_MspInit+0x44>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_MspInit+0x44>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40021000 	.word	0x40021000

08001b18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b28:	d10b      	bne.n	8001b42 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b2a:	4b09      	ldr	r3, [pc, #36]	; (8001b50 <HAL_TIM_Base_MspInit+0x38>)
 8001b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b2e:	4a08      	ldr	r2, [pc, #32]	; (8001b50 <HAL_TIM_Base_MspInit+0x38>)
 8001b30:	f043 0301 	orr.w	r3, r3, #1
 8001b34:	6593      	str	r3, [r2, #88]	; 0x58
 8001b36:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <HAL_TIM_Base_MspInit+0x38>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000

08001b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a18      	ldr	r2, [pc, #96]	; (8001bd4 <HAL_UART_MspInit+0x80>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d129      	bne.n	8001bca <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7a:	4a17      	ldr	r2, [pc, #92]	; (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6613      	str	r3, [r2, #96]	; 0x60
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b8e:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b92:	4a11      	ldr	r2, [pc, #68]	; (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b9a:	4b0f      	ldr	r3, [pc, #60]	; (8001bd8 <HAL_UART_MspInit+0x84>)
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ba6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bac:	2302      	movs	r3, #2
 8001bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001bb8:	2307      	movs	r3, #7
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f000 fa23 	bl	8002010 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bca:	bf00      	nop
 8001bcc:	3728      	adds	r7, #40	; 0x28
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40021000 	.word	0x40021000

08001bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <NMI_Handler+0x4>

08001be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <HardFault_Handler+0x4>

08001be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <MemManage_Handler+0x4>

08001bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf2:	e7fe      	b.n	8001bf2 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr

08001c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c16:	b480      	push	{r7}
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1a:	bf00      	nop
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr

08001c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c28:	f000 f8ec 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b086      	sub	sp, #24
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c38:	4a14      	ldr	r2, [pc, #80]	; (8001c8c <_sbrk+0x5c>)
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <_sbrk+0x60>)
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c44:	4b13      	ldr	r3, [pc, #76]	; (8001c94 <_sbrk+0x64>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d102      	bne.n	8001c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c4c:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <_sbrk+0x64>)
 8001c4e:	4a12      	ldr	r2, [pc, #72]	; (8001c98 <_sbrk+0x68>)
 8001c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c52:	4b10      	ldr	r3, [pc, #64]	; (8001c94 <_sbrk+0x64>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d207      	bcs.n	8001c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c60:	f003 fef2 	bl	8005a48 <__errno>
 8001c64:	4602      	mov	r2, r0
 8001c66:	230c      	movs	r3, #12
 8001c68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6e:	e009      	b.n	8001c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <_sbrk+0x64>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c76:	4b07      	ldr	r3, [pc, #28]	; (8001c94 <_sbrk+0x64>)
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4413      	add	r3, r2
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <_sbrk+0x64>)
 8001c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c82:	68fb      	ldr	r3, [r7, #12]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	200a0000 	.word	0x200a0000
 8001c90:	00000400 	.word	0x00000400
 8001c94:	200001fc 	.word	0x200001fc
 8001c98:	200002e8 	.word	0x200002e8

08001c9c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ca0:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <SystemInit+0x64>)
 8001ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ca6:	4a16      	ldr	r2, [pc, #88]	; (8001d00 <SystemInit+0x64>)
 8001ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001cb0:	4b14      	ldr	r3, [pc, #80]	; (8001d04 <SystemInit+0x68>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a13      	ldr	r2, [pc, #76]	; (8001d04 <SystemInit+0x68>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	; (8001d04 <SystemInit+0x68>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	; (8001d04 <SystemInit+0x68>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a0f      	ldr	r2, [pc, #60]	; (8001d04 <SystemInit+0x68>)
 8001cc8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001ccc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001cd0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001cd2:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <SystemInit+0x68>)
 8001cd4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001cd8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001cda:	4b0a      	ldr	r3, [pc, #40]	; (8001d04 <SystemInit+0x68>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a09      	ldr	r2, [pc, #36]	; (8001d04 <SystemInit+0x68>)
 8001ce0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001ce6:	4b07      	ldr	r3, [pc, #28]	; (8001d04 <SystemInit+0x68>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <SystemInit+0x64>)
 8001cee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cf2:	609a      	str	r2, [r3, #8]
#endif
}
 8001cf4:	bf00      	nop
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	40021000 	.word	0x40021000

08001d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d0c:	f7ff ffc6 	bl	8001c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001d10:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001d12:	e003      	b.n	8001d1c <LoopCopyDataInit>

08001d14 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001d14:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001d16:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001d18:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001d1a:	3104      	adds	r1, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001d1c:	480a      	ldr	r0, [pc, #40]	; (8001d48 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001d20:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001d22:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001d24:	d3f6      	bcc.n	8001d14 <CopyDataInit>
	ldr	r2, =_sbss
 8001d26:	4a0a      	ldr	r2, [pc, #40]	; (8001d50 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001d28:	e002      	b.n	8001d30 <LoopFillZerobss>

08001d2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001d2a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001d2c:	f842 3b04 	str.w	r3, [r2], #4

08001d30 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <LoopForever+0x16>)
	cmp	r2, r3
 8001d32:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001d34:	d3f9      	bcc.n	8001d2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d36:	f003 fe8d 	bl	8005a54 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d3a:	f7ff fbe7 	bl	800150c <main>

08001d3e <LoopForever>:

LoopForever:
    b LoopForever
 8001d3e:	e7fe      	b.n	8001d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d40:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001d44:	08009b04 	.word	0x08009b04
	ldr	r0, =_sdata
 8001d48:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001d4c:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001d50:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001d54:	200002e8 	.word	0x200002e8

08001d58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC1_IRQHandler>

08001d5a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d64:	2003      	movs	r0, #3
 8001d66:	f000 f91f 	bl	8001fa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	f000 f80e 	bl	8001d8c <HAL_InitTick>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	71fb      	strb	r3, [r7, #7]
 8001d7a:	e001      	b.n	8001d80 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d7c:	f7ff fea8 	bl	8001ad0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d80:	79fb      	ldrb	r3, [r7, #7]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3708      	adds	r7, #8
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d94:	2300      	movs	r3, #0
 8001d96:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d98:	4b17      	ldr	r3, [pc, #92]	; (8001df8 <HAL_InitTick+0x6c>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001da0:	4b16      	ldr	r3, [pc, #88]	; (8001dfc <HAL_InitTick+0x70>)
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	4b14      	ldr	r3, [pc, #80]	; (8001df8 <HAL_InitTick+0x6c>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	4619      	mov	r1, r3
 8001daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db6:	4618      	mov	r0, r3
 8001db8:	f000 f91d 	bl	8001ff6 <HAL_SYSTICK_Config>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d10f      	bne.n	8001de2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d809      	bhi.n	8001ddc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 f8f5 	bl	8001fbe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dd4:	4a0a      	ldr	r2, [pc, #40]	; (8001e00 <HAL_InitTick+0x74>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	e007      	b.n	8001dec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
 8001de0:	e004      	b.n	8001dec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	73fb      	strb	r3, [r7, #15]
 8001de6:	e001      	b.n	8001dec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd80      	pop	{r7, pc}
 8001df6:	bf00      	nop
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x20>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	4b06      	ldr	r3, [pc, #24]	; (8001e28 <HAL_IncTick+0x24>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4413      	add	r3, r2
 8001e14:	4a04      	ldr	r2, [pc, #16]	; (8001e28 <HAL_IncTick+0x24>)
 8001e16:	6013      	str	r3, [r2, #0]
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	20000008 	.word	0x20000008
 8001e28:	200002e0 	.word	0x200002e0

08001e2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e30:	4b03      	ldr	r3, [pc, #12]	; (8001e40 <HAL_GetTick+0x14>)
 8001e32:	681b      	ldr	r3, [r3, #0]
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	46bd      	mov	sp, r7
 8001e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3c:	4770      	bx	lr
 8001e3e:	bf00      	nop
 8001e40:	200002e0 	.word	0x200002e0

08001e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f003 0307 	and.w	r3, r3, #7
 8001e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e5a:	68ba      	ldr	r2, [r7, #8]
 8001e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e60:	4013      	ands	r3, r2
 8001e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <__NVIC_SetPriorityGrouping+0x44>)
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	60d3      	str	r3, [r2, #12]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f003 0307 	and.w	r3, r3, #7
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	6039      	str	r1, [r7, #0]
 8001eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	db0a      	blt.n	8001ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	b2da      	uxtb	r2, r3
 8001ec0:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <__NVIC_SetPriority+0x4c>)
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	0112      	lsls	r2, r2, #4
 8001ec8:	b2d2      	uxtb	r2, r2
 8001eca:	440b      	add	r3, r1
 8001ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ed0:	e00a      	b.n	8001ee8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2da      	uxtb	r2, r3
 8001ed6:	4908      	ldr	r1, [pc, #32]	; (8001ef8 <__NVIC_SetPriority+0x50>)
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 030f 	and.w	r3, r3, #15
 8001ede:	3b04      	subs	r3, #4
 8001ee0:	0112      	lsls	r2, r2, #4
 8001ee2:	b2d2      	uxtb	r2, r2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	761a      	strb	r2, [r3, #24]
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000e100 	.word	0xe000e100
 8001ef8:	e000ed00 	.word	0xe000ed00

08001efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b089      	sub	sp, #36	; 0x24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f1c3 0307 	rsb	r3, r3, #7
 8001f16:	2b04      	cmp	r3, #4
 8001f18:	bf28      	it	cs
 8001f1a:	2304      	movcs	r3, #4
 8001f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2b06      	cmp	r3, #6
 8001f24:	d902      	bls.n	8001f2c <NVIC_EncodePriority+0x30>
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	3b03      	subs	r3, #3
 8001f2a:	e000      	b.n	8001f2e <NVIC_EncodePriority+0x32>
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f30:	f04f 32ff 	mov.w	r2, #4294967295
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3a:	43da      	mvns	r2, r3
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	401a      	ands	r2, r3
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f44:	f04f 31ff 	mov.w	r1, #4294967295
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4e:	43d9      	mvns	r1, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	4313      	orrs	r3, r2
         );
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3724      	adds	r7, #36	; 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f74:	d301      	bcc.n	8001f7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f76:	2301      	movs	r3, #1
 8001f78:	e00f      	b.n	8001f9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <SysTick_Config+0x40>)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f82:	210f      	movs	r1, #15
 8001f84:	f04f 30ff 	mov.w	r0, #4294967295
 8001f88:	f7ff ff8e 	bl	8001ea8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f8c:	4b05      	ldr	r3, [pc, #20]	; (8001fa4 <SysTick_Config+0x40>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f92:	4b04      	ldr	r3, [pc, #16]	; (8001fa4 <SysTick_Config+0x40>)
 8001f94:	2207      	movs	r2, #7
 8001f96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	e000e010 	.word	0xe000e010

08001fa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f7ff ff47 	bl	8001e44 <__NVIC_SetPriorityGrouping>
}
 8001fb6:	bf00      	nop
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b086      	sub	sp, #24
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	60b9      	str	r1, [r7, #8]
 8001fc8:	607a      	str	r2, [r7, #4]
 8001fca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fd0:	f7ff ff5c 	bl	8001e8c <__NVIC_GetPriorityGrouping>
 8001fd4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	6978      	ldr	r0, [r7, #20]
 8001fdc:	f7ff ff8e 	bl	8001efc <NVIC_EncodePriority>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff ff5d 	bl	8001ea8 <__NVIC_SetPriority>
}
 8001fee:	bf00      	nop
 8001ff0:	3718      	adds	r7, #24
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b082      	sub	sp, #8
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f7ff ffb0 	bl	8001f64 <SysTick_Config>
 8002004:	4603      	mov	r3, r0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3708      	adds	r7, #8
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002010:	b480      	push	{r7}
 8002012:	b087      	sub	sp, #28
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201a:	2300      	movs	r3, #0
 800201c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800201e:	e166      	b.n	80022ee <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2101      	movs	r1, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	4013      	ands	r3, r2
 800202e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	2b00      	cmp	r3, #0
 8002034:	f000 8158 	beq.w	80022e8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d00b      	beq.n	8002058 <HAL_GPIO_Init+0x48>
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	2b02      	cmp	r3, #2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800204c:	2b11      	cmp	r3, #17
 800204e:	d003      	beq.n	8002058 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	2b12      	cmp	r3, #18
 8002056:	d130      	bne.n	80020ba <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	005b      	lsls	r3, r3, #1
 8002062:	2203      	movs	r2, #3
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	43db      	mvns	r3, r3
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	4013      	ands	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	68da      	ldr	r2, [r3, #12]
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800208e:	2201      	movs	r2, #1
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43db      	mvns	r3, r3
 8002098:	693a      	ldr	r2, [r7, #16]
 800209a:	4013      	ands	r3, r2
 800209c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 0201 	and.w	r2, r3, #1
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	693a      	ldr	r2, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d003      	beq.n	80020fa <HAL_GPIO_Init+0xea>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b12      	cmp	r3, #18
 80020f8:	d123      	bne.n	8002142 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	08da      	lsrs	r2, r3, #3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	3208      	adds	r2, #8
 8002102:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002106:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	f003 0307 	and.w	r3, r3, #7
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	220f      	movs	r2, #15
 8002112:	fa02 f303 	lsl.w	r3, r2, r3
 8002116:	43db      	mvns	r3, r3
 8002118:	693a      	ldr	r2, [r7, #16]
 800211a:	4013      	ands	r3, r2
 800211c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	fa02 f303 	lsl.w	r3, r2, r3
 800212e:	693a      	ldr	r2, [r7, #16]
 8002130:	4313      	orrs	r3, r2
 8002132:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	6939      	ldr	r1, [r7, #16]
 800213e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	2203      	movs	r2, #3
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	693a      	ldr	r2, [r7, #16]
 8002156:	4013      	ands	r3, r2
 8002158:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	f003 0203 	and.w	r2, r3, #3
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	693a      	ldr	r2, [r7, #16]
 800216c:	4313      	orrs	r3, r2
 800216e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	f000 80b2 	beq.w	80022e8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002184:	4b61      	ldr	r3, [pc, #388]	; (800230c <HAL_GPIO_Init+0x2fc>)
 8002186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002188:	4a60      	ldr	r2, [pc, #384]	; (800230c <HAL_GPIO_Init+0x2fc>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6613      	str	r3, [r2, #96]	; 0x60
 8002190:	4b5e      	ldr	r3, [pc, #376]	; (800230c <HAL_GPIO_Init+0x2fc>)
 8002192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	60bb      	str	r3, [r7, #8]
 800219a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800219c:	4a5c      	ldr	r2, [pc, #368]	; (8002310 <HAL_GPIO_Init+0x300>)
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3302      	adds	r3, #2
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	220f      	movs	r2, #15
 80021b4:	fa02 f303 	lsl.w	r3, r2, r3
 80021b8:	43db      	mvns	r3, r3
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	4013      	ands	r3, r2
 80021be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80021c6:	d02b      	beq.n	8002220 <HAL_GPIO_Init+0x210>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a52      	ldr	r2, [pc, #328]	; (8002314 <HAL_GPIO_Init+0x304>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d025      	beq.n	800221c <HAL_GPIO_Init+0x20c>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	4a51      	ldr	r2, [pc, #324]	; (8002318 <HAL_GPIO_Init+0x308>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d01f      	beq.n	8002218 <HAL_GPIO_Init+0x208>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a50      	ldr	r2, [pc, #320]	; (800231c <HAL_GPIO_Init+0x30c>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d019      	beq.n	8002214 <HAL_GPIO_Init+0x204>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a4f      	ldr	r2, [pc, #316]	; (8002320 <HAL_GPIO_Init+0x310>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_GPIO_Init+0x200>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a4e      	ldr	r2, [pc, #312]	; (8002324 <HAL_GPIO_Init+0x314>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00d      	beq.n	800220c <HAL_GPIO_Init+0x1fc>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a4d      	ldr	r2, [pc, #308]	; (8002328 <HAL_GPIO_Init+0x318>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d007      	beq.n	8002208 <HAL_GPIO_Init+0x1f8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a4c      	ldr	r2, [pc, #304]	; (800232c <HAL_GPIO_Init+0x31c>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d101      	bne.n	8002204 <HAL_GPIO_Init+0x1f4>
 8002200:	2307      	movs	r3, #7
 8002202:	e00e      	b.n	8002222 <HAL_GPIO_Init+0x212>
 8002204:	2308      	movs	r3, #8
 8002206:	e00c      	b.n	8002222 <HAL_GPIO_Init+0x212>
 8002208:	2306      	movs	r3, #6
 800220a:	e00a      	b.n	8002222 <HAL_GPIO_Init+0x212>
 800220c:	2305      	movs	r3, #5
 800220e:	e008      	b.n	8002222 <HAL_GPIO_Init+0x212>
 8002210:	2304      	movs	r3, #4
 8002212:	e006      	b.n	8002222 <HAL_GPIO_Init+0x212>
 8002214:	2303      	movs	r3, #3
 8002216:	e004      	b.n	8002222 <HAL_GPIO_Init+0x212>
 8002218:	2302      	movs	r3, #2
 800221a:	e002      	b.n	8002222 <HAL_GPIO_Init+0x212>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <HAL_GPIO_Init+0x212>
 8002220:	2300      	movs	r3, #0
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	f002 0203 	and.w	r2, r2, #3
 8002228:	0092      	lsls	r2, r2, #2
 800222a:	4093      	lsls	r3, r2
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002232:	4937      	ldr	r1, [pc, #220]	; (8002310 <HAL_GPIO_Init+0x300>)
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	089b      	lsrs	r3, r3, #2
 8002238:	3302      	adds	r3, #2
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002240:	4b3b      	ldr	r3, [pc, #236]	; (8002330 <HAL_GPIO_Init+0x320>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	43db      	mvns	r3, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4013      	ands	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	4313      	orrs	r3, r2
 8002262:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002264:	4a32      	ldr	r2, [pc, #200]	; (8002330 <HAL_GPIO_Init+0x320>)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800226a:	4b31      	ldr	r3, [pc, #196]	; (8002330 <HAL_GPIO_Init+0x320>)
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	43db      	mvns	r3, r3
 8002274:	693a      	ldr	r2, [r7, #16]
 8002276:	4013      	ands	r3, r2
 8002278:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4313      	orrs	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800228e:	4a28      	ldr	r2, [pc, #160]	; (8002330 <HAL_GPIO_Init+0x320>)
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002294:	4b26      	ldr	r3, [pc, #152]	; (8002330 <HAL_GPIO_Init+0x320>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	43db      	mvns	r3, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4013      	ands	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80022b8:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_GPIO_Init+0x320>)
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80022be:	4b1c      	ldr	r3, [pc, #112]	; (8002330 <HAL_GPIO_Init+0x320>)
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	4013      	ands	r3, r2
 80022cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80022e2:	4a13      	ldr	r2, [pc, #76]	; (8002330 <HAL_GPIO_Init+0x320>)
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	3301      	adds	r3, #1
 80022ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	fa22 f303 	lsr.w	r3, r2, r3
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f47f ae91 	bne.w	8002020 <HAL_GPIO_Init+0x10>
  }
}
 80022fe:	bf00      	nop
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	40010000 	.word	0x40010000
 8002314:	48000400 	.word	0x48000400
 8002318:	48000800 	.word	0x48000800
 800231c:	48000c00 	.word	0x48000c00
 8002320:	48001000 	.word	0x48001000
 8002324:	48001400 	.word	0x48001400
 8002328:	48001800 	.word	0x48001800
 800232c:	48001c00 	.word	0x48001c00
 8002330:	40010400 	.word	0x40010400

08002334 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002338:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_PWREx_GetVoltageRange+0x3c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002344:	d102      	bne.n	800234c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800234a:	e00b      	b.n	8002364 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <HAL_PWREx_GetVoltageRange+0x3c>)
 800234e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800235a:	d102      	bne.n	8002362 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800235c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002360:	e000      	b.n	8002364 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002362:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002364:	4618      	mov	r0, r3
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40007000 	.word	0x40007000

08002374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d141      	bne.n	8002406 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002382:	4b4b      	ldr	r3, [pc, #300]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800238a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800238e:	d131      	bne.n	80023f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002390:	4b47      	ldr	r3, [pc, #284]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800239c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80023a8:	4a41      	ldr	r2, [pc, #260]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023b0:	4b40      	ldr	r3, [pc, #256]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2232      	movs	r2, #50	; 0x32
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	4a3f      	ldr	r2, [pc, #252]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023bc:	fba2 2303 	umull	r2, r3, r2, r3
 80023c0:	0c9b      	lsrs	r3, r3, #18
 80023c2:	3301      	adds	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c6:	e002      	b.n	80023ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	3b01      	subs	r3, #1
 80023cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ce:	4b38      	ldr	r3, [pc, #224]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023da:	d102      	bne.n	80023e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1f2      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e4:	695b      	ldr	r3, [r3, #20]
 80023e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ee:	d158      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e057      	b.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023f4:	4b2e      	ldr	r3, [pc, #184]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023fa:	4a2d      	ldr	r2, [pc, #180]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002404:	e04d      	b.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800240c:	d141      	bne.n	8002492 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800241a:	d131      	bne.n	8002480 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002422:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800242c:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002434:	4a1e      	ldr	r2, [pc, #120]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800243a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800243c:	4b1d      	ldr	r3, [pc, #116]	; (80024b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2232      	movs	r2, #50	; 0x32
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	0c9b      	lsrs	r3, r3, #18
 800244e:	3301      	adds	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002452:	e002      	b.n	800245a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	3b01      	subs	r3, #1
 8002458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800245a:	4b15      	ldr	r3, [pc, #84]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002466:	d102      	bne.n	800246e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f2      	bne.n	8002454 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800246e:	4b10      	ldr	r3, [pc, #64]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800247a:	d112      	bne.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e011      	b.n	80024a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002486:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002490:	e007      	b.n	80024a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002492:	4b07      	ldr	r3, [pc, #28]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800249a:	4a05      	ldr	r2, [pc, #20]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800249c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024a0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40007000 	.word	0x40007000
 80024b4:	20000000 	.word	0x20000000
 80024b8:	431bde83 	.word	0x431bde83

080024bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d102      	bne.n	80024d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f000 bc16 	b.w	8002cfc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d0:	4ba0      	ldr	r3, [pc, #640]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 030c 	and.w	r3, r3, #12
 80024d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024da:	4b9e      	ldr	r3, [pc, #632]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	f003 0303 	and.w	r3, r3, #3
 80024e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80e4 	beq.w	80026ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d007      	beq.n	8002508 <HAL_RCC_OscConfig+0x4c>
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	2b0c      	cmp	r3, #12
 80024fc:	f040 808b 	bne.w	8002616 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	2b01      	cmp	r3, #1
 8002504:	f040 8087 	bne.w	8002616 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002508:	4b92      	ldr	r3, [pc, #584]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0302 	and.w	r3, r3, #2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x64>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	699b      	ldr	r3, [r3, #24]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e3ed      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1a      	ldr	r2, [r3, #32]
 8002524:	4b8b      	ldr	r3, [pc, #556]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d004      	beq.n	800253a <HAL_RCC_OscConfig+0x7e>
 8002530:	4b88      	ldr	r3, [pc, #544]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002538:	e005      	b.n	8002546 <HAL_RCC_OscConfig+0x8a>
 800253a:	4b86      	ldr	r3, [pc, #536]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800253c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002540:	091b      	lsrs	r3, r3, #4
 8002542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002546:	4293      	cmp	r3, r2
 8002548:	d223      	bcs.n	8002592 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fdc8 	bl	80030e4 <RCC_SetFlashLatencyFromMSIRange>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e3ce      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800255e:	4b7d      	ldr	r3, [pc, #500]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7c      	ldr	r2, [pc, #496]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002564:	f043 0308 	orr.w	r3, r3, #8
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b7a      	ldr	r3, [pc, #488]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	4977      	ldr	r1, [pc, #476]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002578:	4313      	orrs	r3, r2
 800257a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800257c:	4b75      	ldr	r3, [pc, #468]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	69db      	ldr	r3, [r3, #28]
 8002588:	021b      	lsls	r3, r3, #8
 800258a:	4972      	ldr	r1, [pc, #456]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800258c:	4313      	orrs	r3, r2
 800258e:	604b      	str	r3, [r1, #4]
 8002590:	e025      	b.n	80025de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002592:	4b70      	ldr	r3, [pc, #448]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a6f      	ldr	r2, [pc, #444]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002598:	f043 0308 	orr.w	r3, r3, #8
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	4b6d      	ldr	r3, [pc, #436]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	496a      	ldr	r1, [pc, #424]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80025ac:	4313      	orrs	r3, r2
 80025ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	021b      	lsls	r3, r3, #8
 80025be:	4965      	ldr	r1, [pc, #404]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d109      	bne.n	80025de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 fd88 	bl	80030e4 <RCC_SetFlashLatencyFromMSIRange>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e38e      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80025de:	f000 fcbf 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 80025e2:	4601      	mov	r1, r0
 80025e4:	4b5b      	ldr	r3, [pc, #364]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	4a5a      	ldr	r2, [pc, #360]	; (8002758 <HAL_RCC_OscConfig+0x29c>)
 80025f0:	5cd3      	ldrb	r3, [r2, r3]
 80025f2:	f003 031f 	and.w	r3, r3, #31
 80025f6:	fa21 f303 	lsr.w	r3, r1, r3
 80025fa:	4a58      	ldr	r2, [pc, #352]	; (800275c <HAL_RCC_OscConfig+0x2a0>)
 80025fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025fe:	4b58      	ldr	r3, [pc, #352]	; (8002760 <HAL_RCC_OscConfig+0x2a4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff fbc2 	bl	8001d8c <HAL_InitTick>
 8002608:	4603      	mov	r3, r0
 800260a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800260c:	7bfb      	ldrb	r3, [r7, #15]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d052      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	e372      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d032      	beq.n	8002684 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800261e:	4b4d      	ldr	r3, [pc, #308]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a4c      	ldr	r2, [pc, #304]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002624:	f043 0301 	orr.w	r3, r3, #1
 8002628:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800262a:	f7ff fbff 	bl	8001e2c <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002632:	f7ff fbfb 	bl	8001e2c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e35b      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002644:	4b43      	ldr	r3, [pc, #268]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002650:	4b40      	ldr	r3, [pc, #256]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a3f      	ldr	r2, [pc, #252]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002656:	f043 0308 	orr.w	r3, r3, #8
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a1b      	ldr	r3, [r3, #32]
 8002668:	493a      	ldr	r1, [pc, #232]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800266e:	4b39      	ldr	r3, [pc, #228]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	021b      	lsls	r3, r3, #8
 800267c:	4935      	ldr	r1, [pc, #212]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
 8002682:	e01a      	b.n	80026ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002684:	4b33      	ldr	r3, [pc, #204]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a32      	ldr	r2, [pc, #200]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800268a:	f023 0301 	bic.w	r3, r3, #1
 800268e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002690:	f7ff fbcc 	bl	8001e2c <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002698:	f7ff fbc8 	bl	8001e2c <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e328      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80026aa:	4b2a      	ldr	r3, [pc, #168]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1f0      	bne.n	8002698 <HAL_RCC_OscConfig+0x1dc>
 80026b6:	e000      	b.n	80026ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80026b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d073      	beq.n	80027ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	2b08      	cmp	r3, #8
 80026ca:	d005      	beq.n	80026d8 <HAL_RCC_OscConfig+0x21c>
 80026cc:	69bb      	ldr	r3, [r7, #24]
 80026ce:	2b0c      	cmp	r3, #12
 80026d0:	d10e      	bne.n	80026f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	2b03      	cmp	r3, #3
 80026d6:	d10b      	bne.n	80026f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d8:	4b1e      	ldr	r3, [pc, #120]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d063      	beq.n	80027ac <HAL_RCC_OscConfig+0x2f0>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d15f      	bne.n	80027ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e305      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f8:	d106      	bne.n	8002708 <HAL_RCC_OscConfig+0x24c>
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a15      	ldr	r2, [pc, #84]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002704:	6013      	str	r3, [r2, #0]
 8002706:	e01d      	b.n	8002744 <HAL_RCC_OscConfig+0x288>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x270>
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a0f      	ldr	r2, [pc, #60]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800271c:	6013      	str	r3, [r2, #0]
 800271e:	4b0d      	ldr	r3, [pc, #52]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a0c      	ldr	r2, [pc, #48]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0x288>
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 8002732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002736:	6013      	str	r3, [r2, #0]
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a05      	ldr	r2, [pc, #20]	; (8002754 <HAL_RCC_OscConfig+0x298>)
 800273e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274c:	f7ff fb6e 	bl	8001e2c <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002752:	e010      	b.n	8002776 <HAL_RCC_OscConfig+0x2ba>
 8002754:	40021000 	.word	0x40021000
 8002758:	080097dc 	.word	0x080097dc
 800275c:	20000000 	.word	0x20000000
 8002760:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002764:	f7ff fb62 	bl	8001e2c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b64      	cmp	r3, #100	; 0x64
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e2c2      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002776:	4baf      	ldr	r3, [pc, #700]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x2a8>
 8002782:	e014      	b.n	80027ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7ff fb52 	bl	8001e2c <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800278c:	f7ff fb4e 	bl	8001e2c <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b64      	cmp	r3, #100	; 0x64
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e2ae      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800279e:	4ba5      	ldr	r3, [pc, #660]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x2d0>
 80027aa:	e000      	b.n	80027ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0302 	and.w	r3, r3, #2
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d060      	beq.n	800287c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	2b04      	cmp	r3, #4
 80027be:	d005      	beq.n	80027cc <HAL_RCC_OscConfig+0x310>
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b0c      	cmp	r3, #12
 80027c4:	d119      	bne.n	80027fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d116      	bne.n	80027fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027cc:	4b99      	ldr	r3, [pc, #612]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d005      	beq.n	80027e4 <HAL_RCC_OscConfig+0x328>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d101      	bne.n	80027e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e28b      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e4:	4b93      	ldr	r3, [pc, #588]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	691b      	ldr	r3, [r3, #16]
 80027f0:	061b      	lsls	r3, r3, #24
 80027f2:	4990      	ldr	r1, [pc, #576]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027f8:	e040      	b.n	800287c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d023      	beq.n	800284a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002802:	4b8c      	ldr	r3, [pc, #560]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a8b      	ldr	r2, [pc, #556]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280e:	f7ff fb0d 	bl	8001e2c <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002816:	f7ff fb09 	bl	8001e2c <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e269      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002828:	4b82      	ldr	r3, [pc, #520]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002834:	4b7f      	ldr	r3, [pc, #508]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	497c      	ldr	r1, [pc, #496]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002844:	4313      	orrs	r3, r2
 8002846:	604b      	str	r3, [r1, #4]
 8002848:	e018      	b.n	800287c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a79      	ldr	r2, [pc, #484]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7ff fae9 	bl	8001e2c <HAL_GetTick>
 800285a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800285e:	f7ff fae5 	bl	8001e2c <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e245      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002870:	4b70      	ldr	r3, [pc, #448]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1f0      	bne.n	800285e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d03c      	beq.n	8002902 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01c      	beq.n	80028ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002890:	4b68      	ldr	r3, [pc, #416]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002896:	4a67      	ldr	r2, [pc, #412]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028a0:	f7ff fac4 	bl	8001e2c <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028a8:	f7ff fac0 	bl	8001e2c <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e220      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ba:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80028bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0ef      	beq.n	80028a8 <HAL_RCC_OscConfig+0x3ec>
 80028c8:	e01b      	b.n	8002902 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80028cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028d0:	4a58      	ldr	r2, [pc, #352]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80028d2:	f023 0301 	bic.w	r3, r3, #1
 80028d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028da:	f7ff faa7 	bl	8001e2c <HAL_GetTick>
 80028de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028e0:	e008      	b.n	80028f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028e2:	f7ff faa3 	bl	8001e2c <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d901      	bls.n	80028f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80028f0:	2303      	movs	r3, #3
 80028f2:	e203      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80028f4:	4b4f      	ldr	r3, [pc, #316]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80028f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ef      	bne.n	80028e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0304 	and.w	r3, r3, #4
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80a6 	beq.w	8002a5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002910:	2300      	movs	r3, #0
 8002912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002914:	4b47      	ldr	r3, [pc, #284]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10d      	bne.n	800293c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	4b44      	ldr	r3, [pc, #272]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002924:	4a43      	ldr	r2, [pc, #268]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292a:	6593      	str	r3, [r2, #88]	; 0x58
 800292c:	4b41      	ldr	r3, [pc, #260]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800292e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002938:	2301      	movs	r3, #1
 800293a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800293c:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <HAL_RCC_OscConfig+0x57c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d118      	bne.n	800297a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_OscConfig+0x57c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a3a      	ldr	r2, [pc, #232]	; (8002a38 <HAL_RCC_OscConfig+0x57c>)
 800294e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002954:	f7ff fa6a 	bl	8001e2c <HAL_GetTick>
 8002958:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800295a:	e008      	b.n	800296e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800295c:	f7ff fa66 	bl	8001e2c <HAL_GetTick>
 8002960:	4602      	mov	r2, r0
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e1c6      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800296e:	4b32      	ldr	r3, [pc, #200]	; (8002a38 <HAL_RCC_OscConfig+0x57c>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0f0      	beq.n	800295c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b01      	cmp	r3, #1
 8002980:	d108      	bne.n	8002994 <HAL_RCC_OscConfig+0x4d8>
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	4a2a      	ldr	r2, [pc, #168]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800298a:	f043 0301 	orr.w	r3, r3, #1
 800298e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002992:	e024      	b.n	80029de <HAL_RCC_OscConfig+0x522>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	2b05      	cmp	r3, #5
 800299a:	d110      	bne.n	80029be <HAL_RCC_OscConfig+0x502>
 800299c:	4b25      	ldr	r3, [pc, #148]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	4a24      	ldr	r2, [pc, #144]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029a4:	f043 0304 	orr.w	r3, r3, #4
 80029a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b2:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029b4:	f043 0301 	orr.w	r3, r3, #1
 80029b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029bc:	e00f      	b.n	80029de <HAL_RCC_OscConfig+0x522>
 80029be:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c4:	4a1b      	ldr	r2, [pc, #108]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80029ce:	4b19      	ldr	r3, [pc, #100]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029d4:	4a17      	ldr	r2, [pc, #92]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 80029d6:	f023 0304 	bic.w	r3, r3, #4
 80029da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d016      	beq.n	8002a14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e6:	f7ff fa21 	bl	8001e2c <HAL_GetTick>
 80029ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029ec:	e00a      	b.n	8002a04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ee:	f7ff fa1d 	bl	8001e2c <HAL_GetTick>
 80029f2:	4602      	mov	r2, r0
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	1ad3      	subs	r3, r2, r3
 80029f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d901      	bls.n	8002a04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	e17b      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a04:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <HAL_RCC_OscConfig+0x578>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0ed      	beq.n	80029ee <HAL_RCC_OscConfig+0x532>
 8002a12:	e01a      	b.n	8002a4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7ff fa0a 	bl	8001e2c <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a1a:	e00f      	b.n	8002a3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1c:	f7ff fa06 	bl	8001e2c <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d906      	bls.n	8002a3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e164      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a3c:	4ba8      	ldr	r3, [pc, #672]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1e8      	bne.n	8002a1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a4a:	7ffb      	ldrb	r3, [r7, #31]
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a50:	4ba3      	ldr	r3, [pc, #652]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a54:	4aa2      	ldr	r2, [pc, #648]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d03c      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d01c      	beq.n	8002aaa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a70:	4b9b      	ldr	r3, [pc, #620]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a76:	4a9a      	ldr	r2, [pc, #616]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a80:	f7ff f9d4 	bl	8001e2c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a88:	f7ff f9d0 	bl	8001e2c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e130      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a9a:	4b91      	ldr	r3, [pc, #580]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0ef      	beq.n	8002a88 <HAL_RCC_OscConfig+0x5cc>
 8002aa8:	e01b      	b.n	8002ae2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002aaa:	4b8d      	ldr	r3, [pc, #564]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ab0:	4a8b      	ldr	r2, [pc, #556]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aba:	f7ff f9b7 	bl	8001e2c <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ac2:	f7ff f9b3 	bl	8001e2c <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e113      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ad4:	4b82      	ldr	r3, [pc, #520]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ef      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 8107 	beq.w	8002cfa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	f040 80cb 	bne.w	8002c8c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002af6:	4b7a      	ldr	r3, [pc, #488]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f003 0203 	and.w	r2, r3, #3
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d12c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	3b01      	subs	r3, #1
 8002b16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d123      	bne.n	8002b64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d11b      	bne.n	8002b64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d113      	bne.n	8002b64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d109      	bne.n	8002b64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	085b      	lsrs	r3, r3, #1
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d06d      	beq.n	8002c40 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	2b0c      	cmp	r3, #12
 8002b68:	d068      	beq.n	8002c3c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b6a:	4b5d      	ldr	r3, [pc, #372]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d105      	bne.n	8002b82 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b76:	4b5a      	ldr	r3, [pc, #360]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d001      	beq.n	8002b86 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e0ba      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b86:	4b56      	ldr	r3, [pc, #344]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a55      	ldr	r2, [pc, #340]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b92:	f7ff f94b 	bl	8001e2c <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b98:	e008      	b.n	8002bac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b9a:	f7ff f947 	bl	8001e2c <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e0a7      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bac:	4b4c      	ldr	r3, [pc, #304]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1f0      	bne.n	8002b9a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb8:	4b49      	ldr	r3, [pc, #292]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	4b49      	ldr	r3, [pc, #292]	; (8002ce4 <HAL_RCC_OscConfig+0x828>)
 8002bbe:	4013      	ands	r3, r2
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bc8:	3a01      	subs	r2, #1
 8002bca:	0112      	lsls	r2, r2, #4
 8002bcc:	4311      	orrs	r1, r2
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bd2:	0212      	lsls	r2, r2, #8
 8002bd4:	4311      	orrs	r1, r2
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bda:	0852      	lsrs	r2, r2, #1
 8002bdc:	3a01      	subs	r2, #1
 8002bde:	0552      	lsls	r2, r2, #21
 8002be0:	4311      	orrs	r1, r2
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002be6:	0852      	lsrs	r2, r2, #1
 8002be8:	3a01      	subs	r2, #1
 8002bea:	0652      	lsls	r2, r2, #25
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf2:	06d2      	lsls	r2, r2, #27
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	493a      	ldr	r1, [pc, #232]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a37      	ldr	r2, [pc, #220]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c08:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c14:	f7ff f90a 	bl	8001e2c <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7ff f906 	bl	8001e2c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e066      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2e:	4b2c      	ldr	r3, [pc, #176]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c3a:	e05e      	b.n	8002cfa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e05d      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c40:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d156      	bne.n	8002cfa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a23      	ldr	r2, [pc, #140]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c58:	4b21      	ldr	r3, [pc, #132]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a20      	ldr	r2, [pc, #128]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c64:	f7ff f8e2 	bl	8001e2c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7ff f8de 	bl	8001e2c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e03e      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7e:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x7b0>
 8002c8a:	e036      	b.n	8002cfa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d031      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002caa:	4b0d      	ldr	r3, [pc, #52]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a0c      	ldr	r2, [pc, #48]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002cb0:	f023 0303 	bic.w	r3, r3, #3
 8002cb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cb6:	4b0a      	ldr	r3, [pc, #40]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_OscConfig+0x824>)
 8002cbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7ff f8b1 	bl	8001e2c <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ccc:	e00c      	b.n	8002ce8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7ff f8ad 	bl	8001e2c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d905      	bls.n	8002ce8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e00d      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <HAL_RCC_OscConfig+0x848>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d1ec      	bne.n	8002cce <HAL_RCC_OscConfig+0x812>
 8002cf4:	e001      	b.n	8002cfa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e000      	b.n	8002cfc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3720      	adds	r7, #32
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d12:	2300      	movs	r3, #0
 8002d14:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e10f      	b.n	8002f40 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b89      	ldr	r3, [pc, #548]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 030f 	and.w	r3, r3, #15
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b86      	ldr	r3, [pc, #536]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 020f 	bic.w	r2, r3, #15
 8002d36:	4984      	ldr	r1, [pc, #528]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b82      	ldr	r3, [pc, #520]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e0f7      	b.n	8002f40 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0301 	and.w	r3, r3, #1
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8089 	beq.w	8002e70 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b03      	cmp	r3, #3
 8002d64:	d133      	bne.n	8002dce <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d66:	4b79      	ldr	r3, [pc, #484]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0e4      	b.n	8002f40 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002d76:	f000 fa0f 	bl	8003198 <RCC_GetSysClockFreqFromPLLSource>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	4b74      	ldr	r3, [pc, #464]	; (8002f50 <HAL_RCC_ClockConfig+0x248>)
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d955      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002d82:	4b72      	ldr	r3, [pc, #456]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10a      	bne.n	8002da4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002d8e:	4b6f      	ldr	r3, [pc, #444]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d96:	4a6d      	ldr	r2, [pc, #436]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002d9e:	2380      	movs	r3, #128	; 0x80
 8002da0:	617b      	str	r3, [r7, #20]
 8002da2:	e044      	b.n	8002e2e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d03e      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x126>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d13a      	bne.n	8002e2e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002db8:	4b64      	ldr	r3, [pc, #400]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dc0:	4a62      	ldr	r2, [pc, #392]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dc6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	617b      	str	r3, [r7, #20]
 8002dcc:	e02f      	b.n	8002e2e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d107      	bne.n	8002de6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d115      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e0ac      	b.n	8002f40 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d107      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002dee:	4b57      	ldr	r3, [pc, #348]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d109      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0a0      	b.n	8002f40 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002dfe:	4b53      	ldr	r3, [pc, #332]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d101      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e098      	b.n	8002f40 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e0e:	f000 f8a7 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002e12:	4602      	mov	r2, r0
 8002e14:	4b4e      	ldr	r3, [pc, #312]	; (8002f50 <HAL_RCC_ClockConfig+0x248>)
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d909      	bls.n	8002e2e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e22:	4a4a      	ldr	r2, [pc, #296]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e2a:	2380      	movs	r3, #128	; 0x80
 8002e2c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f023 0203 	bic.w	r2, r3, #3
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	4944      	ldr	r1, [pc, #272]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e40:	f7fe fff4 	bl	8001e2c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e48:	f7fe fff0 	bl	8001e2c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e070      	b.n	8002f40 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e5e:	4b3b      	ldr	r3, [pc, #236]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f003 020c 	and.w	r2, r3, #12
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d1eb      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d009      	beq.n	8002e90 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7c:	4b33      	ldr	r3, [pc, #204]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	4930      	ldr	r1, [pc, #192]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	608b      	str	r3, [r1, #8]
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	2b80      	cmp	r3, #128	; 0x80
 8002e94:	d105      	bne.n	8002ea2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002e96:	4b2d      	ldr	r3, [pc, #180]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	4a2c      	ldr	r2, [pc, #176]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ea0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea2:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d210      	bcs.n	8002ed2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb0:	4b25      	ldr	r3, [pc, #148]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f023 020f 	bic.w	r2, r3, #15
 8002eb8:	4923      	ldr	r1, [pc, #140]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec0:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <HAL_RCC_ClockConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 030f 	and.w	r3, r3, #15
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d001      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e036      	b.n	8002f40 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0304 	and.w	r3, r3, #4
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d008      	beq.n	8002ef0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ede:	4b1b      	ldr	r3, [pc, #108]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	4918      	ldr	r1, [pc, #96]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002efc:	4b13      	ldr	r3, [pc, #76]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4910      	ldr	r1, [pc, #64]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f10:	f000 f826 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 8002f14:	4601      	mov	r1, r0
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_RCC_ClockConfig+0x244>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	091b      	lsrs	r3, r3, #4
 8002f1c:	f003 030f 	and.w	r3, r3, #15
 8002f20:	4a0c      	ldr	r2, [pc, #48]	; (8002f54 <HAL_RCC_ClockConfig+0x24c>)
 8002f22:	5cd3      	ldrb	r3, [r2, r3]
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	fa21 f303 	lsr.w	r3, r1, r3
 8002f2c:	4a0a      	ldr	r2, [pc, #40]	; (8002f58 <HAL_RCC_ClockConfig+0x250>)
 8002f2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_RCC_ClockConfig+0x254>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fe ff29 	bl	8001d8c <HAL_InitTick>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	73fb      	strb	r3, [r7, #15]

  return status;
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	40022000 	.word	0x40022000
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	04c4b400 	.word	0x04c4b400
 8002f54:	080097dc 	.word	0x080097dc
 8002f58:	20000000 	.word	0x20000000
 8002f5c:	20000004 	.word	0x20000004

08002f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	; (8003064 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f78:	4b3a      	ldr	r3, [pc, #232]	; (8003064 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	f003 0303 	and.w	r3, r3, #3
 8002f80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_RCC_GetSysClockFreq+0x34>
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	2b0c      	cmp	r3, #12
 8002f8c:	d121      	bne.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d11e      	bne.n	8002fd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f94:	4b33      	ldr	r3, [pc, #204]	; (8003064 <HAL_RCC_GetSysClockFreq+0x104>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0308 	and.w	r3, r3, #8
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002fa0:	4b30      	ldr	r3, [pc, #192]	; (8003064 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa6:	0a1b      	lsrs	r3, r3, #8
 8002fa8:	f003 030f 	and.w	r3, r3, #15
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	e005      	b.n	8002fbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002fb0:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002fbc:	4a2a      	ldr	r2, [pc, #168]	; (8003068 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d10d      	bne.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fd0:	e00a      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d102      	bne.n	8002fde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002fda:	61bb      	str	r3, [r7, #24]
 8002fdc:	e004      	b.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fe4:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d133      	bne.n	8003056 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fee:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_RCC_GetSysClockFreq+0x104>)
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d002      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0xa4>
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d003      	beq.n	800300a <HAL_RCC_GetSysClockFreq+0xaa>
 8003002:	e005      	b.n	8003010 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003004:	4b19      	ldr	r3, [pc, #100]	; (800306c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003006:	617b      	str	r3, [r7, #20]
      break;
 8003008:	e005      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_RCC_GetSysClockFreq+0x110>)
 800300c:	617b      	str	r3, [r7, #20]
      break;
 800300e:	e002      	b.n	8003016 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	617b      	str	r3, [r7, #20]
      break;
 8003014:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003016:	4b13      	ldr	r3, [pc, #76]	; (8003064 <HAL_RCC_GetSysClockFreq+0x104>)
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	091b      	lsrs	r3, r3, #4
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	3301      	adds	r3, #1
 8003022:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003024:	4b0f      	ldr	r3, [pc, #60]	; (8003064 <HAL_RCC_GetSysClockFreq+0x104>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	fb02 f203 	mul.w	r2, r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800303c:	4b09      	ldr	r3, [pc, #36]	; (8003064 <HAL_RCC_GetSysClockFreq+0x104>)
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	0e5b      	lsrs	r3, r3, #25
 8003042:	f003 0303 	and.w	r3, r3, #3
 8003046:	3301      	adds	r3, #1
 8003048:	005b      	lsls	r3, r3, #1
 800304a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	fbb2 f3f3 	udiv	r3, r2, r3
 8003054:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003056:	69bb      	ldr	r3, [r7, #24]
}
 8003058:	4618      	mov	r0, r3
 800305a:	3724      	adds	r7, #36	; 0x24
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr
 8003064:	40021000 	.word	0x40021000
 8003068:	080097f4 	.word	0x080097f4
 800306c:	00f42400 	.word	0x00f42400
 8003070:	007a1200 	.word	0x007a1200

08003074 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003078:	4b03      	ldr	r3, [pc, #12]	; (8003088 <HAL_RCC_GetHCLKFreq+0x14>)
 800307a:	681b      	ldr	r3, [r3, #0]
}
 800307c:	4618      	mov	r0, r3
 800307e:	46bd      	mov	sp, r7
 8003080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003084:	4770      	bx	lr
 8003086:	bf00      	nop
 8003088:	20000000 	.word	0x20000000

0800308c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003090:	f7ff fff0 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 8003094:	4601      	mov	r1, r0
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	4a04      	ldr	r2, [pc, #16]	; (80030b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030a2:	5cd3      	ldrb	r3, [r2, r3]
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	40021000 	.word	0x40021000
 80030b4:	080097ec 	.word	0x080097ec

080030b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030bc:	f7ff ffda 	bl	8003074 <HAL_RCC_GetHCLKFreq>
 80030c0:	4601      	mov	r1, r0
 80030c2:	4b06      	ldr	r3, [pc, #24]	; (80030dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0adb      	lsrs	r3, r3, #11
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4a04      	ldr	r2, [pc, #16]	; (80030e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030ce:	5cd3      	ldrb	r3, [r2, r3]
 80030d0:	f003 031f 	and.w	r3, r3, #31
 80030d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80030d8:	4618      	mov	r0, r3
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	40021000 	.word	0x40021000
 80030e0:	080097ec 	.word	0x080097ec

080030e4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b086      	sub	sp, #24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80030ec:	2300      	movs	r3, #0
 80030ee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80030f0:	4b27      	ldr	r3, [pc, #156]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80030fc:	f7ff f91a 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8003100:	6178      	str	r0, [r7, #20]
 8003102:	e014      	b.n	800312e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003104:	4b22      	ldr	r3, [pc, #136]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003108:	4a21      	ldr	r2, [pc, #132]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800310a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800310e:	6593      	str	r3, [r2, #88]	; 0x58
 8003110:	4b1f      	ldr	r3, [pc, #124]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003114:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003118:	60fb      	str	r3, [r7, #12]
 800311a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800311c:	f7ff f90a 	bl	8002334 <HAL_PWREx_GetVoltageRange>
 8003120:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003122:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003126:	4a1a      	ldr	r2, [pc, #104]	; (8003190 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003128:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800312c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003134:	d10b      	bne.n	800314e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d913      	bls.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2ba0      	cmp	r3, #160	; 0xa0
 8003140:	d902      	bls.n	8003148 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003142:	2302      	movs	r3, #2
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	e00d      	b.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003148:	2301      	movs	r3, #1
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	e00a      	b.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b7f      	cmp	r3, #127	; 0x7f
 8003152:	d902      	bls.n	800315a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003154:	2302      	movs	r3, #2
 8003156:	613b      	str	r3, [r7, #16]
 8003158:	e004      	b.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2b70      	cmp	r3, #112	; 0x70
 800315e:	d101      	bne.n	8003164 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003160:	2301      	movs	r3, #1
 8003162:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003164:	4b0b      	ldr	r3, [pc, #44]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f023 020f 	bic.w	r2, r3, #15
 800316c:	4909      	ldr	r1, [pc, #36]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003174:	4b07      	ldr	r3, [pc, #28]	; (8003194 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 030f 	and.w	r3, r3, #15
 800317c:	693a      	ldr	r2, [r7, #16]
 800317e:	429a      	cmp	r2, r3
 8003180:	d001      	beq.n	8003186 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e000      	b.n	8003188 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3718      	adds	r7, #24
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	40021000 	.word	0x40021000
 8003194:	40022000 	.word	0x40022000

08003198 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003198:	b480      	push	{r7}
 800319a:	b087      	sub	sp, #28
 800319c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 80031a2:	4b2d      	ldr	r3, [pc, #180]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d118      	bne.n	80031e0 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031ae:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 0308 	and.w	r3, r3, #8
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d107      	bne.n	80031ca <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031ba:	4b27      	ldr	r3, [pc, #156]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031c0:	0a1b      	lsrs	r3, r3, #8
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	617b      	str	r3, [r7, #20]
 80031c8:	e005      	b.n	80031d6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031ca:	4b23      	ldr	r3, [pc, #140]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	091b      	lsrs	r3, r3, #4
 80031d0:	f003 030f 	and.w	r3, r3, #15
 80031d4:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031d6:	4a21      	ldr	r2, [pc, #132]	; (800325c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031de:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d002      	beq.n	80031f6 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d003      	beq.n	80031fc <RCC_GetSysClockFreqFromPLLSource+0x64>
 80031f4:	e005      	b.n	8003202 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80031f6:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80031f8:	613b      	str	r3, [r7, #16]
    break;
 80031fa:	e005      	b.n	8003208 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80031fc:	4b19      	ldr	r3, [pc, #100]	; (8003264 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80031fe:	613b      	str	r3, [r7, #16]
    break;
 8003200:	e002      	b.n	8003208 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	613b      	str	r3, [r7, #16]
    break;
 8003206:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003208:	4b13      	ldr	r3, [pc, #76]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	091b      	lsrs	r3, r3, #4
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	3301      	adds	r3, #1
 8003214:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003216:	4b10      	ldr	r3, [pc, #64]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	fb02 f203 	mul.w	r2, r2, r3
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	fbb2 f3f3 	udiv	r3, r2, r3
 800322c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800322e:	4b0a      	ldr	r3, [pc, #40]	; (8003258 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	0e5b      	lsrs	r3, r3, #25
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	3301      	adds	r3, #1
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	fbb2 f3f3 	udiv	r3, r2, r3
 8003246:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003248:	683b      	ldr	r3, [r7, #0]
}
 800324a:	4618      	mov	r0, r3
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40021000 	.word	0x40021000
 800325c:	080097f4 	.word	0x080097f4
 8003260:	00f42400 	.word	0x00f42400
 8003264:	007a1200 	.word	0x007a1200

08003268 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b086      	sub	sp, #24
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003270:	2300      	movs	r3, #0
 8003272:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003274:	2300      	movs	r3, #0
 8003276:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003280:	2b00      	cmp	r3, #0
 8003282:	d03d      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003288:	2b40      	cmp	r3, #64	; 0x40
 800328a:	d00b      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800328c:	2b40      	cmp	r3, #64	; 0x40
 800328e:	d804      	bhi.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00e      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003294:	2b20      	cmp	r3, #32
 8003296:	d015      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003298:	e01d      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800329a:	2b60      	cmp	r3, #96	; 0x60
 800329c:	d01e      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 800329e:	2b80      	cmp	r3, #128	; 0x80
 80032a0:	d01c      	beq.n	80032dc <HAL_RCCEx_PeriphCLKConfig+0x74>
 80032a2:	e018      	b.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80032a4:	4b86      	ldr	r3, [pc, #536]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4a85      	ldr	r2, [pc, #532]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032b0:	e015      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	3304      	adds	r3, #4
 80032b6:	2100      	movs	r1, #0
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 fafd 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 80032be:	4603      	mov	r3, r0
 80032c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032c2:	e00c      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	3320      	adds	r3, #32
 80032c8:	2100      	movs	r1, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	f000 fbe4 	bl	8003a98 <RCCEx_PLLSAI2_Config>
 80032d0:	4603      	mov	r3, r0
 80032d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80032d4:	e003      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	74fb      	strb	r3, [r7, #19]
      break;
 80032da:	e000      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 80032dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10b      	bne.n	80032fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80032e4:	4b76      	ldr	r3, [pc, #472]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032ea:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f2:	4973      	ldr	r1, [pc, #460]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80032fa:	e001      	b.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032fc:	7cfb      	ldrb	r3, [r7, #19]
 80032fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d042      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d00f      	beq.n	8003336 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003316:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331a:	d805      	bhi.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d011      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 8003320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003324:	d017      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003326:	e01f      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003328:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800332c:	d01f      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x106>
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d01c      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003334:	e018      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003336:	4b62      	ldr	r3, [pc, #392]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	4a61      	ldr	r2, [pc, #388]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800333c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003340:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003342:	e015      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	3304      	adds	r3, #4
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fab4 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003354:	e00c      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	3320      	adds	r3, #32
 800335a:	2100      	movs	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f000 fb9b 	bl	8003a98 <RCCEx_PLLSAI2_Config>
 8003362:	4603      	mov	r3, r0
 8003364:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003366:	e003      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	74fb      	strb	r3, [r7, #19]
      break;
 800336c:	e000      	b.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 800336e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003370:	7cfb      	ldrb	r3, [r7, #19]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003376:	4b52      	ldr	r3, [pc, #328]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003378:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800337c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	494e      	ldr	r1, [pc, #312]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003386:	4313      	orrs	r3, r2
 8003388:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800338c:	e001      	b.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338e:	7cfb      	ldrb	r3, [r7, #19]
 8003390:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 809f 	beq.w	80034de <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033a0:	2300      	movs	r3, #0
 80033a2:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033a4:	4b46      	ldr	r3, [pc, #280]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80033b4:	2300      	movs	r3, #0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00d      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	4b41      	ldr	r3, [pc, #260]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033be:	4a40      	ldr	r2, [pc, #256]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033c4:	6593      	str	r3, [r2, #88]	; 0x58
 80033c6:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033d2:	2301      	movs	r3, #1
 80033d4:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033d6:	4b3b      	ldr	r3, [pc, #236]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a3a      	ldr	r2, [pc, #232]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033e2:	f7fe fd23 	bl	8001e2c <HAL_GetTick>
 80033e6:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033e8:	e009      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe fd1f 	bl	8001e2c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d902      	bls.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	74fb      	strb	r3, [r7, #19]
        break;
 80033fc:	e005      	b.n	800340a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033fe:	4b31      	ldr	r3, [pc, #196]	; (80034c4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0ef      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 800340a:	7cfb      	ldrb	r3, [r7, #19]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d15b      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003410:	4b2b      	ldr	r3, [pc, #172]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003416:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800341a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d01f      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	697a      	ldr	r2, [r7, #20]
 800342a:	429a      	cmp	r2, r3
 800342c:	d019      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800342e:	4b24      	ldr	r3, [pc, #144]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003434:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003438:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800343a:	4b21      	ldr	r3, [pc, #132]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800343c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003440:	4a1f      	ldr	r2, [pc, #124]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800344a:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800344c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003450:	4a1b      	ldr	r2, [pc, #108]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003452:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003456:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800345a:	4a19      	ldr	r2, [pc, #100]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	f003 0301 	and.w	r3, r3, #1
 8003468:	2b00      	cmp	r3, #0
 800346a:	d016      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800346c:	f7fe fcde 	bl	8001e2c <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003472:	e00b      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003474:	f7fe fcda 	bl	8001e2c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d902      	bls.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	74fb      	strb	r3, [r7, #19]
            break;
 800348a:	e006      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800348c:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800348e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d0ec      	beq.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 800349a:	7cfb      	ldrb	r3, [r7, #19]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d10c      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034a0:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b0:	4903      	ldr	r1, [pc, #12]	; (80034c0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034b8:	e008      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	74bb      	strb	r3, [r7, #18]
 80034be:	e005      	b.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x264>
 80034c0:	40021000 	.word	0x40021000
 80034c4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034c8:	7cfb      	ldrb	r3, [r7, #19]
 80034ca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034cc:	7c7b      	ldrb	r3, [r7, #17]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d105      	bne.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034d2:	4ba0      	ldr	r3, [pc, #640]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034d6:	4a9f      	ldr	r2, [pc, #636]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034ea:	4b9a      	ldr	r3, [pc, #616]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f023 0203 	bic.w	r2, r3, #3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034f8:	4996      	ldr	r1, [pc, #600]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0302 	and.w	r3, r3, #2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800350c:	4b91      	ldr	r3, [pc, #580]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f023 020c 	bic.w	r2, r3, #12
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	498e      	ldr	r1, [pc, #568]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0304 	and.w	r3, r3, #4
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800352e:	4b89      	ldr	r3, [pc, #548]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353c:	4985      	ldr	r1, [pc, #532]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0308 	and.w	r3, r3, #8
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003550:	4b80      	ldr	r3, [pc, #512]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800355e:	497d      	ldr	r1, [pc, #500]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003572:	4b78      	ldr	r3, [pc, #480]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003580:	4974      	ldr	r1, [pc, #464]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0320 	and.w	r3, r3, #32
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035a2:	496c      	ldr	r1, [pc, #432]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035b6:	4b67      	ldr	r3, [pc, #412]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c4:	4963      	ldr	r1, [pc, #396]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035d8:	4b5e      	ldr	r3, [pc, #376]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e6:	495b      	ldr	r1, [pc, #364]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80035fa:	4b56      	ldr	r3, [pc, #344]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003608:	4952      	ldr	r1, [pc, #328]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800361c:	4b4d      	ldr	r3, [pc, #308]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	494a      	ldr	r1, [pc, #296]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800363e:	4b45      	ldr	r3, [pc, #276]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	4941      	ldr	r1, [pc, #260]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003660:	4b3c      	ldr	r3, [pc, #240]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003666:	f023 0203 	bic.w	r2, r3, #3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800366e:	4939      	ldr	r1, [pc, #228]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d028      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003682:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003688:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003690:	4930      	ldr	r1, [pc, #192]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800369c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036a0:	d106      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036a2:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	4a2b      	ldr	r2, [pc, #172]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ac:	60d3      	str	r3, [r2, #12]
 80036ae:	e011      	b.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036b8:	d10c      	bne.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	2101      	movs	r1, #1
 80036c0:	4618      	mov	r0, r3
 80036c2:	f000 f8f9 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 80036c6:	4603      	mov	r3, r0
 80036c8:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036ca:	7cfb      	ldrb	r3, [r7, #19]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 80036d0:	7cfb      	ldrb	r3, [r7, #19]
 80036d2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d04d      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036e8:	d108      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80036ea:	4b1a      	ldr	r3, [pc, #104]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036f0:	4a18      	ldr	r2, [pc, #96]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80036f6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80036fa:	e012      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 80036fc:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003702:	4a14      	ldr	r2, [pc, #80]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003704:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003708:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800370c:	4b11      	ldr	r3, [pc, #68]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371a:	490e      	ldr	r1, [pc, #56]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003726:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800372a:	d106      	bne.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800372c:	4b09      	ldr	r3, [pc, #36]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	4a08      	ldr	r2, [pc, #32]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003736:	60d3      	str	r3, [r2, #12]
 8003738:	e020      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800373e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003742:	d109      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4a02      	ldr	r2, [pc, #8]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800374e:	60d3      	str	r3, [r2, #12]
 8003750:	e014      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800375c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003760:	d10c      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	3304      	adds	r3, #4
 8003766:	2101      	movs	r1, #1
 8003768:	4618      	mov	r0, r3
 800376a:	f000 f8a5 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 800376e:	4603      	mov	r3, r0
 8003770:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003772:	7cfb      	ldrb	r3, [r7, #19]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003778:	7cfb      	ldrb	r3, [r7, #19]
 800377a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d028      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003788:	4b4a      	ldr	r3, [pc, #296]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003796:	4947      	ldr	r1, [pc, #284]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80037a6:	d106      	bne.n	80037b6 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037a8:	4b42      	ldr	r3, [pc, #264]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	4a41      	ldr	r2, [pc, #260]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037b2:	60d3      	str	r3, [r2, #12]
 80037b4:	e011      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037ba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037be:	d10c      	bne.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3304      	adds	r3, #4
 80037c4:	2101      	movs	r1, #1
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 f876 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037d0:	7cfb      	ldrb	r3, [r7, #19]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 80037d6:	7cfb      	ldrb	r3, [r7, #19]
 80037d8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01e      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037e6:	4b33      	ldr	r3, [pc, #204]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f6:	492f      	ldr	r1, [pc, #188]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003804:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003808:	d10c      	bne.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	3304      	adds	r3, #4
 800380e:	2102      	movs	r1, #2
 8003810:	4618      	mov	r0, r3
 8003812:	f000 f851 	bl	80038b8 <RCCEx_PLLSAI1_Config>
 8003816:	4603      	mov	r3, r0
 8003818:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800381a:	7cfb      	ldrb	r3, [r7, #19]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003830:	4b20      	ldr	r3, [pc, #128]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003832:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003836:	f023 0204 	bic.w	r2, r3, #4
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003840:	491c      	ldr	r1, [pc, #112]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00b      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800385a:	f023 0218 	bic.w	r2, r3, #24
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003864:	4913      	ldr	r1, [pc, #76]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d017      	beq.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003878:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800387a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800387e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003888:	490a      	ldr	r1, [pc, #40]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800388a:	4313      	orrs	r3, r2
 800388c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003896:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800389a:	d105      	bne.n	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x640>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a04      	ldr	r2, [pc, #16]	; (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80038a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80038a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3718      	adds	r7, #24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40021000 	.word	0x40021000

080038b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038c2:	2300      	movs	r3, #0
 80038c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038c6:	4b70      	ldr	r3, [pc, #448]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f003 0303 	and.w	r3, r3, #3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d00e      	beq.n	80038f0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80038d2:	4b6d      	ldr	r3, [pc, #436]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	f003 0203 	and.w	r2, r3, #3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d103      	bne.n	80038ea <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
       ||
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d13f      	bne.n	800396a <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e03c      	b.n	800396a <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d00c      	beq.n	8003912 <RCCEx_PLLSAI1_Config+0x5a>
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d013      	beq.n	8003924 <RCCEx_PLLSAI1_Config+0x6c>
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d120      	bne.n	8003942 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003900:	4b61      	ldr	r3, [pc, #388]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f003 0302 	and.w	r3, r3, #2
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11d      	bne.n	8003948 <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003910:	e01a      	b.n	8003948 <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003912:	4b5d      	ldr	r3, [pc, #372]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800391a:	2b00      	cmp	r3, #0
 800391c:	d116      	bne.n	800394c <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003922:	e013      	b.n	800394c <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003924:	4b58      	ldr	r3, [pc, #352]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10f      	bne.n	8003950 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003930:	4b55      	ldr	r3, [pc, #340]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d109      	bne.n	8003950 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003940:	e006      	b.n	8003950 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	73fb      	strb	r3, [r7, #15]
      break;
 8003946:	e004      	b.n	8003952 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003948:	bf00      	nop
 800394a:	e002      	b.n	8003952 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 800394c:	bf00      	nop
 800394e:	e000      	b.n	8003952 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003950:	bf00      	nop
    }

    if(status == HAL_OK)
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d108      	bne.n	800396a <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003958:	4b4b      	ldr	r3, [pc, #300]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	f023 0203 	bic.w	r2, r3, #3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4948      	ldr	r1, [pc, #288]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003966:	4313      	orrs	r3, r2
 8003968:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800396a:	7bfb      	ldrb	r3, [r7, #15]
 800396c:	2b00      	cmp	r3, #0
 800396e:	f040 8086 	bne.w	8003a7e <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003972:	4b45      	ldr	r3, [pc, #276]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a44      	ldr	r2, [pc, #272]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003978:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800397c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800397e:	f7fe fa55 	bl	8001e2c <HAL_GetTick>
 8003982:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003984:	e009      	b.n	800399a <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003986:	f7fe fa51 	bl	8001e2c <HAL_GetTick>
 800398a:	4602      	mov	r2, r0
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	1ad3      	subs	r3, r2, r3
 8003990:	2b02      	cmp	r3, #2
 8003992:	d902      	bls.n	800399a <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	73fb      	strb	r3, [r7, #15]
        break;
 8003998:	e005      	b.n	80039a6 <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800399a:	4b3b      	ldr	r3, [pc, #236]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1ef      	bne.n	8003986 <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d168      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d113      	bne.n	80039da <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039b2:	4b35      	ldr	r3, [pc, #212]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039b4:	691a      	ldr	r2, [r3, #16]
 80039b6:	4b35      	ldr	r3, [pc, #212]	; (8003a8c <RCCEx_PLLSAI1_Config+0x1d4>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	6892      	ldr	r2, [r2, #8]
 80039be:	0211      	lsls	r1, r2, #8
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	68d2      	ldr	r2, [r2, #12]
 80039c4:	06d2      	lsls	r2, r2, #27
 80039c6:	4311      	orrs	r1, r2
 80039c8:	687a      	ldr	r2, [r7, #4]
 80039ca:	6852      	ldr	r2, [r2, #4]
 80039cc:	3a01      	subs	r2, #1
 80039ce:	0112      	lsls	r2, r2, #4
 80039d0:	430a      	orrs	r2, r1
 80039d2:	492d      	ldr	r1, [pc, #180]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	610b      	str	r3, [r1, #16]
 80039d8:	e02d      	b.n	8003a36 <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d115      	bne.n	8003a0c <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80039e0:	4b29      	ldr	r3, [pc, #164]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 80039e2:	691a      	ldr	r2, [r3, #16]
 80039e4:	4b2a      	ldr	r3, [pc, #168]	; (8003a90 <RCCEx_PLLSAI1_Config+0x1d8>)
 80039e6:	4013      	ands	r3, r2
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	6892      	ldr	r2, [r2, #8]
 80039ec:	0211      	lsls	r1, r2, #8
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	6912      	ldr	r2, [r2, #16]
 80039f2:	0852      	lsrs	r2, r2, #1
 80039f4:	3a01      	subs	r2, #1
 80039f6:	0552      	lsls	r2, r2, #21
 80039f8:	4311      	orrs	r1, r2
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	6852      	ldr	r2, [r2, #4]
 80039fe:	3a01      	subs	r2, #1
 8003a00:	0112      	lsls	r2, r2, #4
 8003a02:	430a      	orrs	r2, r1
 8003a04:	4920      	ldr	r1, [pc, #128]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	610b      	str	r3, [r1, #16]
 8003a0a:	e014      	b.n	8003a36 <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003a0c:	4b1e      	ldr	r3, [pc, #120]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	4b20      	ldr	r3, [pc, #128]	; (8003a94 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003a12:	4013      	ands	r3, r2
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	6892      	ldr	r2, [r2, #8]
 8003a18:	0211      	lsls	r1, r2, #8
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6952      	ldr	r2, [r2, #20]
 8003a1e:	0852      	lsrs	r2, r2, #1
 8003a20:	3a01      	subs	r2, #1
 8003a22:	0652      	lsls	r2, r2, #25
 8003a24:	4311      	orrs	r1, r2
 8003a26:	687a      	ldr	r2, [r7, #4]
 8003a28:	6852      	ldr	r2, [r2, #4]
 8003a2a:	3a01      	subs	r2, #1
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	4915      	ldr	r1, [pc, #84]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003a36:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a13      	ldr	r2, [pc, #76]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a40:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a42:	f7fe f9f3 	bl	8001e2c <HAL_GetTick>
 8003a46:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a48:	e009      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a4a:	f7fe f9ef 	bl	8001e2c <HAL_GetTick>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d902      	bls.n	8003a5e <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	73fb      	strb	r3, [r7, #15]
          break;
 8003a5c:	e005      	b.n	8003a6a <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003a5e:	4b0a      	ldr	r3, [pc, #40]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d0ef      	beq.n	8003a4a <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d106      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a72:	691a      	ldr	r2, [r3, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	4903      	ldr	r1, [pc, #12]	; (8003a88 <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	3710      	adds	r7, #16
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	07ff800f 	.word	0x07ff800f
 8003a90:	ff9f800f 	.word	0xff9f800f
 8003a94:	f9ff800f 	.word	0xf9ff800f

08003a98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003aa6:	4b70      	ldr	r3, [pc, #448]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0303 	and.w	r3, r3, #3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d00e      	beq.n	8003ad0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003ab2:	4b6d      	ldr	r3, [pc, #436]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f003 0203 	and.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d103      	bne.n	8003aca <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
       ||
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d13f      	bne.n	8003b4a <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	e03c      	b.n	8003b4a <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d00c      	beq.n	8003af2 <RCCEx_PLLSAI2_Config+0x5a>
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d013      	beq.n	8003b04 <RCCEx_PLLSAI2_Config+0x6c>
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d120      	bne.n	8003b22 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003ae0:	4b61      	ldr	r3, [pc, #388]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11d      	bne.n	8003b28 <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003af0:	e01a      	b.n	8003b28 <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003af2:	4b5d      	ldr	r3, [pc, #372]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d116      	bne.n	8003b2c <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b02:	e013      	b.n	8003b2c <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003b04:	4b58      	ldr	r3, [pc, #352]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10f      	bne.n	8003b30 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003b10:	4b55      	ldr	r3, [pc, #340]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d109      	bne.n	8003b30 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b20:	e006      	b.n	8003b30 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	73fb      	strb	r3, [r7, #15]
      break;
 8003b26:	e004      	b.n	8003b32 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003b28:	bf00      	nop
 8003b2a:	e002      	b.n	8003b32 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003b2c:	bf00      	nop
 8003b2e:	e000      	b.n	8003b32 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003b30:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003b38:	4b4b      	ldr	r3, [pc, #300]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	f023 0203 	bic.w	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4948      	ldr	r1, [pc, #288]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	f040 8086 	bne.w	8003c5e <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003b52:	4b45      	ldr	r3, [pc, #276]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a44      	ldr	r2, [pc, #272]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b5e:	f7fe f965 	bl	8001e2c <HAL_GetTick>
 8003b62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b64:	e009      	b.n	8003b7a <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003b66:	f7fe f961 	bl	8001e2c <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d902      	bls.n	8003b7a <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	73fb      	strb	r3, [r7, #15]
        break;
 8003b78:	e005      	b.n	8003b86 <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d1ef      	bne.n	8003b66 <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003b86:	7bfb      	ldrb	r3, [r7, #15]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d168      	bne.n	8003c5e <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d113      	bne.n	8003bba <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003b92:	4b35      	ldr	r3, [pc, #212]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	4b35      	ldr	r3, [pc, #212]	; (8003c6c <RCCEx_PLLSAI2_Config+0x1d4>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6892      	ldr	r2, [r2, #8]
 8003b9e:	0211      	lsls	r1, r2, #8
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68d2      	ldr	r2, [r2, #12]
 8003ba4:	06d2      	lsls	r2, r2, #27
 8003ba6:	4311      	orrs	r1, r2
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	6852      	ldr	r2, [r2, #4]
 8003bac:	3a01      	subs	r2, #1
 8003bae:	0112      	lsls	r2, r2, #4
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	492d      	ldr	r1, [pc, #180]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	614b      	str	r3, [r1, #20]
 8003bb8:	e02d      	b.n	8003c16 <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d115      	bne.n	8003bec <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bc0:	4b29      	ldr	r3, [pc, #164]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bc2:	695a      	ldr	r2, [r3, #20]
 8003bc4:	4b2a      	ldr	r3, [pc, #168]	; (8003c70 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	6892      	ldr	r2, [r2, #8]
 8003bcc:	0211      	lsls	r1, r2, #8
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6912      	ldr	r2, [r2, #16]
 8003bd2:	0852      	lsrs	r2, r2, #1
 8003bd4:	3a01      	subs	r2, #1
 8003bd6:	0552      	lsls	r2, r2, #21
 8003bd8:	4311      	orrs	r1, r2
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	6852      	ldr	r2, [r2, #4]
 8003bde:	3a01      	subs	r2, #1
 8003be0:	0112      	lsls	r2, r2, #4
 8003be2:	430a      	orrs	r2, r1
 8003be4:	4920      	ldr	r1, [pc, #128]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	614b      	str	r3, [r1, #20]
 8003bea:	e014      	b.n	8003c16 <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003bec:	4b1e      	ldr	r3, [pc, #120]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bee:	695a      	ldr	r2, [r3, #20]
 8003bf0:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	6892      	ldr	r2, [r2, #8]
 8003bf8:	0211      	lsls	r1, r2, #8
 8003bfa:	687a      	ldr	r2, [r7, #4]
 8003bfc:	6952      	ldr	r2, [r2, #20]
 8003bfe:	0852      	lsrs	r2, r2, #1
 8003c00:	3a01      	subs	r2, #1
 8003c02:	0652      	lsls	r2, r2, #25
 8003c04:	4311      	orrs	r1, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6852      	ldr	r2, [r2, #4]
 8003c0a:	3a01      	subs	r2, #1
 8003c0c:	0112      	lsls	r2, r2, #4
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	4915      	ldr	r1, [pc, #84]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003c16:	4b14      	ldr	r3, [pc, #80]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	4a13      	ldr	r2, [pc, #76]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c20:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c22:	f7fe f903 	bl	8001e2c <HAL_GetTick>
 8003c26:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c28:	e009      	b.n	8003c3e <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c2a:	f7fe f8ff 	bl	8001e2c <HAL_GetTick>
 8003c2e:	4602      	mov	r2, r0
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	1ad3      	subs	r3, r2, r3
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d902      	bls.n	8003c3e <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	73fb      	strb	r3, [r7, #15]
          break;
 8003c3c:	e005      	b.n	8003c4a <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003c3e:	4b0a      	ldr	r3, [pc, #40]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d0ef      	beq.n	8003c2a <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003c4a:	7bfb      	ldrb	r3, [r7, #15]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d106      	bne.n	8003c5e <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003c50:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c52:	695a      	ldr	r2, [r3, #20]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	699b      	ldr	r3, [r3, #24]
 8003c58:	4903      	ldr	r1, [pc, #12]	; (8003c68 <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40021000 	.word	0x40021000
 8003c6c:	07ff800f 	.word	0x07ff800f
 8003c70:	ff9f800f 	.word	0xff9f800f
 8003c74:	f9ff800f 	.word	0xf9ff800f

08003c78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e049      	b.n	8003d1e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c90:	b2db      	uxtb	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d106      	bne.n	8003ca4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f7fd ff3a 	bl	8001b18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	f000 f8ee 	bl	8003e98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2201      	movs	r2, #1
 8003d00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d26:	b580      	push	{r7, lr}
 8003d28:	b084      	sub	sp, #16
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
 8003d2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d101      	bne.n	8003d3e <HAL_TIM_ConfigClockSource+0x18>
 8003d3a:	2302      	movs	r3, #2
 8003d3c:	e0a8      	b.n	8003e90 <HAL_TIM_ConfigClockSource+0x16a>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2201      	movs	r2, #1
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2202      	movs	r2, #2
 8003d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d5c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d68:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	d067      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x124>
 8003d7a:	2b40      	cmp	r3, #64	; 0x40
 8003d7c:	d80b      	bhi.n	8003d96 <HAL_TIM_ConfigClockSource+0x70>
 8003d7e:	2b10      	cmp	r3, #16
 8003d80:	d073      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x144>
 8003d82:	2b10      	cmp	r3, #16
 8003d84:	d802      	bhi.n	8003d8c <HAL_TIM_ConfigClockSource+0x66>
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d06f      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003d8a:	e078      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d8c:	2b20      	cmp	r3, #32
 8003d8e:	d06c      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x144>
 8003d90:	2b30      	cmp	r3, #48	; 0x30
 8003d92:	d06a      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x144>
      break;
 8003d94:	e073      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003d96:	2b70      	cmp	r3, #112	; 0x70
 8003d98:	d00d      	beq.n	8003db6 <HAL_TIM_ConfigClockSource+0x90>
 8003d9a:	2b70      	cmp	r3, #112	; 0x70
 8003d9c:	d804      	bhi.n	8003da8 <HAL_TIM_ConfigClockSource+0x82>
 8003d9e:	2b50      	cmp	r3, #80	; 0x50
 8003da0:	d033      	beq.n	8003e0a <HAL_TIM_ConfigClockSource+0xe4>
 8003da2:	2b60      	cmp	r3, #96	; 0x60
 8003da4:	d041      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0x104>
      break;
 8003da6:	e06a      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d066      	beq.n	8003e7c <HAL_TIM_ConfigClockSource+0x156>
 8003dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db2:	d017      	beq.n	8003de4 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8003db4:	e063      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6818      	ldr	r0, [r3, #0]
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	6899      	ldr	r1, [r3, #8]
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	f000 f97b 	bl	80040c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dd8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	609a      	str	r2, [r3, #8]
      break;
 8003de2:	e04c      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6818      	ldr	r0, [r3, #0]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	6899      	ldr	r1, [r3, #8]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	f000 f964 	bl	80040c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	689a      	ldr	r2, [r3, #8]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e06:	609a      	str	r2, [r3, #8]
      break;
 8003e08:	e039      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6818      	ldr	r0, [r3, #0]
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6859      	ldr	r1, [r3, #4]
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	68db      	ldr	r3, [r3, #12]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f000 f8d8 	bl	8003fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2150      	movs	r1, #80	; 0x50
 8003e22:	4618      	mov	r0, r3
 8003e24:	f000 f931 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 8003e28:	e029      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f000 f8f7 	bl	800402a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2160      	movs	r1, #96	; 0x60
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f921 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 8003e48:	e019      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 f8b8 	bl	8003fcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2140      	movs	r1, #64	; 0x40
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f911 	bl	800408a <TIM_ITRx_SetConfig>
      break;
 8003e68:	e009      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4619      	mov	r1, r3
 8003e74:	4610      	mov	r0, r2
 8003e76:	f000 f908 	bl	800408a <TIM_ITRx_SetConfig>
        break;
 8003e7a:	e000      	b.n	8003e7e <HAL_TIM_ConfigClockSource+0x158>
      break;
 8003e7c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a40      	ldr	r2, [pc, #256]	; (8003fac <TIM_Base_SetConfig+0x114>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d013      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003eb6:	d00f      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a3d      	ldr	r2, [pc, #244]	; (8003fb0 <TIM_Base_SetConfig+0x118>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d00b      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	4a3c      	ldr	r2, [pc, #240]	; (8003fb4 <TIM_Base_SetConfig+0x11c>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d007      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a3b      	ldr	r2, [pc, #236]	; (8003fb8 <TIM_Base_SetConfig+0x120>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d003      	beq.n	8003ed8 <TIM_Base_SetConfig+0x40>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a3a      	ldr	r2, [pc, #232]	; (8003fbc <TIM_Base_SetConfig+0x124>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d108      	bne.n	8003eea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ede:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a2f      	ldr	r2, [pc, #188]	; (8003fac <TIM_Base_SetConfig+0x114>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d01f      	beq.n	8003f32 <TIM_Base_SetConfig+0x9a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ef8:	d01b      	beq.n	8003f32 <TIM_Base_SetConfig+0x9a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <TIM_Base_SetConfig+0x118>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d017      	beq.n	8003f32 <TIM_Base_SetConfig+0x9a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a2b      	ldr	r2, [pc, #172]	; (8003fb4 <TIM_Base_SetConfig+0x11c>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <TIM_Base_SetConfig+0x9a>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2a      	ldr	r2, [pc, #168]	; (8003fb8 <TIM_Base_SetConfig+0x120>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00f      	beq.n	8003f32 <TIM_Base_SetConfig+0x9a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <TIM_Base_SetConfig+0x124>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d00b      	beq.n	8003f32 <TIM_Base_SetConfig+0x9a>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a28      	ldr	r2, [pc, #160]	; (8003fc0 <TIM_Base_SetConfig+0x128>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d007      	beq.n	8003f32 <TIM_Base_SetConfig+0x9a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a27      	ldr	r2, [pc, #156]	; (8003fc4 <TIM_Base_SetConfig+0x12c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d003      	beq.n	8003f32 <TIM_Base_SetConfig+0x9a>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a26      	ldr	r2, [pc, #152]	; (8003fc8 <TIM_Base_SetConfig+0x130>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d108      	bne.n	8003f44 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	695b      	ldr	r3, [r3, #20]
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a10      	ldr	r2, [pc, #64]	; (8003fac <TIM_Base_SetConfig+0x114>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00f      	beq.n	8003f90 <TIM_Base_SetConfig+0xf8>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a12      	ldr	r2, [pc, #72]	; (8003fbc <TIM_Base_SetConfig+0x124>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00b      	beq.n	8003f90 <TIM_Base_SetConfig+0xf8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <TIM_Base_SetConfig+0x128>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <TIM_Base_SetConfig+0xf8>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a10      	ldr	r2, [pc, #64]	; (8003fc4 <TIM_Base_SetConfig+0x12c>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d003      	beq.n	8003f90 <TIM_Base_SetConfig+0xf8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	4a0f      	ldr	r2, [pc, #60]	; (8003fc8 <TIM_Base_SetConfig+0x130>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d103      	bne.n	8003f98 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	691a      	ldr	r2, [r3, #16]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	615a      	str	r2, [r3, #20]
}
 8003f9e:	bf00      	nop
 8003fa0:	3714      	adds	r7, #20
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40012c00 	.word	0x40012c00
 8003fb0:	40000400 	.word	0x40000400
 8003fb4:	40000800 	.word	0x40000800
 8003fb8:	40000c00 	.word	0x40000c00
 8003fbc:	40013400 	.word	0x40013400
 8003fc0:	40014000 	.word	0x40014000
 8003fc4:	40014400 	.word	0x40014400
 8003fc8:	40014800 	.word	0x40014800

08003fcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f023 0201 	bic.w	r2, r3, #1
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	699b      	ldr	r3, [r3, #24]
 8003fee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	011b      	lsls	r3, r3, #4
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4313      	orrs	r3, r2
 8004000:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	f023 030a 	bic.w	r3, r3, #10
 8004008:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800400a:	697a      	ldr	r2, [r7, #20]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	621a      	str	r2, [r3, #32]
}
 800401e:	bf00      	nop
 8004020:	371c      	adds	r7, #28
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800402a:	b480      	push	{r7}
 800402c:	b087      	sub	sp, #28
 800402e:	af00      	add	r7, sp, #0
 8004030:	60f8      	str	r0, [r7, #12]
 8004032:	60b9      	str	r1, [r7, #8]
 8004034:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f023 0210 	bic.w	r2, r3, #16
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	699b      	ldr	r3, [r3, #24]
 8004046:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004054:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	031b      	lsls	r3, r3, #12
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004066:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	693a      	ldr	r2, [r7, #16]
 800406e:	4313      	orrs	r3, r2
 8004070:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	693a      	ldr	r2, [r7, #16]
 800407c:	621a      	str	r2, [r3, #32]
}
 800407e:	bf00      	nop
 8004080:	371c      	adds	r7, #28
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800408a:	b480      	push	{r7}
 800408c:	b085      	sub	sp, #20
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	f043 0307 	orr.w	r3, r3, #7
 80040ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	609a      	str	r2, [r3, #8]
}
 80040b4:	bf00      	nop
 80040b6:	3714      	adds	r7, #20
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
 80040cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	021a      	lsls	r2, r3, #8
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	697a      	ldr	r2, [r7, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	609a      	str	r2, [r3, #8]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d101      	bne.n	8004118 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004114:	2302      	movs	r3, #2
 8004116:	e068      	b.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2201      	movs	r2, #1
 800411c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2202      	movs	r2, #2
 8004124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a2e      	ldr	r2, [pc, #184]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d004      	beq.n	800414c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a2d      	ldr	r2, [pc, #180]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d108      	bne.n	800415e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004152:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004164:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4313      	orrs	r3, r2
 800416e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01d      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d018      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d013      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a1a      	ldr	r2, [pc, #104]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d00e      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a18      	ldr	r2, [pc, #96]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d009      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a13      	ldr	r2, [pc, #76]	; (80041fc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d004      	beq.n	80041be <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a14      	ldr	r2, [pc, #80]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d10c      	bne.n	80041d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	68ba      	ldr	r2, [r7, #8]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40012c00 	.word	0x40012c00
 80041fc:	40013400 	.word	0x40013400
 8004200:	40000400 	.word	0x40000400
 8004204:	40000800 	.word	0x40000800
 8004208:	40000c00 	.word	0x40000c00
 800420c:	40014000 	.word	0x40014000

08004210 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b082      	sub	sp, #8
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e042      	b.n	80042a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004228:	2b00      	cmp	r3, #0
 800422a:	d106      	bne.n	800423a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2200      	movs	r2, #0
 8004230:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7fd fc8d 	bl	8001b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2224      	movs	r2, #36	; 0x24
 800423e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0201 	bic.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	f000 f82c 	bl	80042b0 <UART_SetConfig>
 8004258:	4603      	mov	r3, r0
 800425a:	2b01      	cmp	r3, #1
 800425c:	d101      	bne.n	8004262 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e022      	b.n	80042a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 faf2 	bl	8004854 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800427e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	689a      	ldr	r2, [r3, #8]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800428e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0201 	orr.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 fb79 	bl	8004998 <UART_CheckIdleState>
 80042a6:	4603      	mov	r3, r0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3708      	adds	r7, #8
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80042b4:	b088      	sub	sp, #32
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ba:	2300      	movs	r3, #0
 80042bc:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	4313      	orrs	r3, r2
 80042de:	61fb      	str	r3, [r7, #28]
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	4bb1      	ldr	r3, [pc, #708]	; (80045ac <UART_SetConfig+0x2fc>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	6812      	ldr	r2, [r2, #0]
 80042ee:	69f9      	ldr	r1, [r7, #28]
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4aa6      	ldr	r2, [pc, #664]	; (80045b0 <UART_SetConfig+0x300>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6a1b      	ldr	r3, [r3, #32]
 800431e:	69fa      	ldr	r2, [r7, #28]
 8004320:	4313      	orrs	r3, r2
 8004322:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800432e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	69f9      	ldr	r1, [r7, #28]
 8004338:	430b      	orrs	r3, r1
 800433a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004342:	f023 010f 	bic.w	r1, r3, #15
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a97      	ldr	r2, [pc, #604]	; (80045b4 <UART_SetConfig+0x304>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d121      	bne.n	80043a0 <UART_SetConfig+0xf0>
 800435c:	4b96      	ldr	r3, [pc, #600]	; (80045b8 <UART_SetConfig+0x308>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f003 0303 	and.w	r3, r3, #3
 8004366:	2b03      	cmp	r3, #3
 8004368:	d816      	bhi.n	8004398 <UART_SetConfig+0xe8>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0xc0>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	08004381 	.word	0x08004381
 8004374:	0800438d 	.word	0x0800438d
 8004378:	08004387 	.word	0x08004387
 800437c:	08004393 	.word	0x08004393
 8004380:	2301      	movs	r3, #1
 8004382:	76fb      	strb	r3, [r7, #27]
 8004384:	e0e8      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004386:	2302      	movs	r3, #2
 8004388:	76fb      	strb	r3, [r7, #27]
 800438a:	e0e5      	b.n	8004558 <UART_SetConfig+0x2a8>
 800438c:	2304      	movs	r3, #4
 800438e:	76fb      	strb	r3, [r7, #27]
 8004390:	e0e2      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004392:	2308      	movs	r3, #8
 8004394:	76fb      	strb	r3, [r7, #27]
 8004396:	e0df      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004398:	2310      	movs	r3, #16
 800439a:	76fb      	strb	r3, [r7, #27]
 800439c:	bf00      	nop
 800439e:	e0db      	b.n	8004558 <UART_SetConfig+0x2a8>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a85      	ldr	r2, [pc, #532]	; (80045bc <UART_SetConfig+0x30c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d134      	bne.n	8004414 <UART_SetConfig+0x164>
 80043aa:	4b83      	ldr	r3, [pc, #524]	; (80045b8 <UART_SetConfig+0x308>)
 80043ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043b0:	f003 030c 	and.w	r3, r3, #12
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d829      	bhi.n	800440c <UART_SetConfig+0x15c>
 80043b8:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <UART_SetConfig+0x110>)
 80043ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043be:	bf00      	nop
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	0800440d 	.word	0x0800440d
 80043c8:	0800440d 	.word	0x0800440d
 80043cc:	0800440d 	.word	0x0800440d
 80043d0:	08004401 	.word	0x08004401
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	0800440d 	.word	0x0800440d
 80043e0:	080043fb 	.word	0x080043fb
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	0800440d 	.word	0x0800440d
 80043ec:	0800440d 	.word	0x0800440d
 80043f0:	08004407 	.word	0x08004407
 80043f4:	2300      	movs	r3, #0
 80043f6:	76fb      	strb	r3, [r7, #27]
 80043f8:	e0ae      	b.n	8004558 <UART_SetConfig+0x2a8>
 80043fa:	2302      	movs	r3, #2
 80043fc:	76fb      	strb	r3, [r7, #27]
 80043fe:	e0ab      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004400:	2304      	movs	r3, #4
 8004402:	76fb      	strb	r3, [r7, #27]
 8004404:	e0a8      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004406:	2308      	movs	r3, #8
 8004408:	76fb      	strb	r3, [r7, #27]
 800440a:	e0a5      	b.n	8004558 <UART_SetConfig+0x2a8>
 800440c:	2310      	movs	r3, #16
 800440e:	76fb      	strb	r3, [r7, #27]
 8004410:	bf00      	nop
 8004412:	e0a1      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a69      	ldr	r2, [pc, #420]	; (80045c0 <UART_SetConfig+0x310>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d120      	bne.n	8004460 <UART_SetConfig+0x1b0>
 800441e:	4b66      	ldr	r3, [pc, #408]	; (80045b8 <UART_SetConfig+0x308>)
 8004420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004424:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004428:	2b10      	cmp	r3, #16
 800442a:	d00f      	beq.n	800444c <UART_SetConfig+0x19c>
 800442c:	2b10      	cmp	r3, #16
 800442e:	d802      	bhi.n	8004436 <UART_SetConfig+0x186>
 8004430:	2b00      	cmp	r3, #0
 8004432:	d005      	beq.n	8004440 <UART_SetConfig+0x190>
 8004434:	e010      	b.n	8004458 <UART_SetConfig+0x1a8>
 8004436:	2b20      	cmp	r3, #32
 8004438:	d005      	beq.n	8004446 <UART_SetConfig+0x196>
 800443a:	2b30      	cmp	r3, #48	; 0x30
 800443c:	d009      	beq.n	8004452 <UART_SetConfig+0x1a2>
 800443e:	e00b      	b.n	8004458 <UART_SetConfig+0x1a8>
 8004440:	2300      	movs	r3, #0
 8004442:	76fb      	strb	r3, [r7, #27]
 8004444:	e088      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004446:	2302      	movs	r3, #2
 8004448:	76fb      	strb	r3, [r7, #27]
 800444a:	e085      	b.n	8004558 <UART_SetConfig+0x2a8>
 800444c:	2304      	movs	r3, #4
 800444e:	76fb      	strb	r3, [r7, #27]
 8004450:	e082      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004452:	2308      	movs	r3, #8
 8004454:	76fb      	strb	r3, [r7, #27]
 8004456:	e07f      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004458:	2310      	movs	r3, #16
 800445a:	76fb      	strb	r3, [r7, #27]
 800445c:	bf00      	nop
 800445e:	e07b      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a57      	ldr	r2, [pc, #348]	; (80045c4 <UART_SetConfig+0x314>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d120      	bne.n	80044ac <UART_SetConfig+0x1fc>
 800446a:	4b53      	ldr	r3, [pc, #332]	; (80045b8 <UART_SetConfig+0x308>)
 800446c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004470:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d00f      	beq.n	8004498 <UART_SetConfig+0x1e8>
 8004478:	2b40      	cmp	r3, #64	; 0x40
 800447a:	d802      	bhi.n	8004482 <UART_SetConfig+0x1d2>
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <UART_SetConfig+0x1dc>
 8004480:	e010      	b.n	80044a4 <UART_SetConfig+0x1f4>
 8004482:	2b80      	cmp	r3, #128	; 0x80
 8004484:	d005      	beq.n	8004492 <UART_SetConfig+0x1e2>
 8004486:	2bc0      	cmp	r3, #192	; 0xc0
 8004488:	d009      	beq.n	800449e <UART_SetConfig+0x1ee>
 800448a:	e00b      	b.n	80044a4 <UART_SetConfig+0x1f4>
 800448c:	2300      	movs	r3, #0
 800448e:	76fb      	strb	r3, [r7, #27]
 8004490:	e062      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004492:	2302      	movs	r3, #2
 8004494:	76fb      	strb	r3, [r7, #27]
 8004496:	e05f      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004498:	2304      	movs	r3, #4
 800449a:	76fb      	strb	r3, [r7, #27]
 800449c:	e05c      	b.n	8004558 <UART_SetConfig+0x2a8>
 800449e:	2308      	movs	r3, #8
 80044a0:	76fb      	strb	r3, [r7, #27]
 80044a2:	e059      	b.n	8004558 <UART_SetConfig+0x2a8>
 80044a4:	2310      	movs	r3, #16
 80044a6:	76fb      	strb	r3, [r7, #27]
 80044a8:	bf00      	nop
 80044aa:	e055      	b.n	8004558 <UART_SetConfig+0x2a8>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a45      	ldr	r2, [pc, #276]	; (80045c8 <UART_SetConfig+0x318>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d124      	bne.n	8004500 <UART_SetConfig+0x250>
 80044b6:	4b40      	ldr	r3, [pc, #256]	; (80045b8 <UART_SetConfig+0x308>)
 80044b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044c4:	d012      	beq.n	80044ec <UART_SetConfig+0x23c>
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ca:	d802      	bhi.n	80044d2 <UART_SetConfig+0x222>
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <UART_SetConfig+0x230>
 80044d0:	e012      	b.n	80044f8 <UART_SetConfig+0x248>
 80044d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044d6:	d006      	beq.n	80044e6 <UART_SetConfig+0x236>
 80044d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044dc:	d009      	beq.n	80044f2 <UART_SetConfig+0x242>
 80044de:	e00b      	b.n	80044f8 <UART_SetConfig+0x248>
 80044e0:	2300      	movs	r3, #0
 80044e2:	76fb      	strb	r3, [r7, #27]
 80044e4:	e038      	b.n	8004558 <UART_SetConfig+0x2a8>
 80044e6:	2302      	movs	r3, #2
 80044e8:	76fb      	strb	r3, [r7, #27]
 80044ea:	e035      	b.n	8004558 <UART_SetConfig+0x2a8>
 80044ec:	2304      	movs	r3, #4
 80044ee:	76fb      	strb	r3, [r7, #27]
 80044f0:	e032      	b.n	8004558 <UART_SetConfig+0x2a8>
 80044f2:	2308      	movs	r3, #8
 80044f4:	76fb      	strb	r3, [r7, #27]
 80044f6:	e02f      	b.n	8004558 <UART_SetConfig+0x2a8>
 80044f8:	2310      	movs	r3, #16
 80044fa:	76fb      	strb	r3, [r7, #27]
 80044fc:	bf00      	nop
 80044fe:	e02b      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a2a      	ldr	r2, [pc, #168]	; (80045b0 <UART_SetConfig+0x300>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d124      	bne.n	8004554 <UART_SetConfig+0x2a4>
 800450a:	4b2b      	ldr	r3, [pc, #172]	; (80045b8 <UART_SetConfig+0x308>)
 800450c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004510:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004518:	d012      	beq.n	8004540 <UART_SetConfig+0x290>
 800451a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800451e:	d802      	bhi.n	8004526 <UART_SetConfig+0x276>
 8004520:	2b00      	cmp	r3, #0
 8004522:	d007      	beq.n	8004534 <UART_SetConfig+0x284>
 8004524:	e012      	b.n	800454c <UART_SetConfig+0x29c>
 8004526:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800452a:	d006      	beq.n	800453a <UART_SetConfig+0x28a>
 800452c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004530:	d009      	beq.n	8004546 <UART_SetConfig+0x296>
 8004532:	e00b      	b.n	800454c <UART_SetConfig+0x29c>
 8004534:	2300      	movs	r3, #0
 8004536:	76fb      	strb	r3, [r7, #27]
 8004538:	e00e      	b.n	8004558 <UART_SetConfig+0x2a8>
 800453a:	2302      	movs	r3, #2
 800453c:	76fb      	strb	r3, [r7, #27]
 800453e:	e00b      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004540:	2304      	movs	r3, #4
 8004542:	76fb      	strb	r3, [r7, #27]
 8004544:	e008      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004546:	2308      	movs	r3, #8
 8004548:	76fb      	strb	r3, [r7, #27]
 800454a:	e005      	b.n	8004558 <UART_SetConfig+0x2a8>
 800454c:	2310      	movs	r3, #16
 800454e:	76fb      	strb	r3, [r7, #27]
 8004550:	bf00      	nop
 8004552:	e001      	b.n	8004558 <UART_SetConfig+0x2a8>
 8004554:	2310      	movs	r3, #16
 8004556:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a14      	ldr	r2, [pc, #80]	; (80045b0 <UART_SetConfig+0x300>)
 800455e:	4293      	cmp	r3, r2
 8004560:	f040 80a1 	bne.w	80046a6 <UART_SetConfig+0x3f6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004564:	7efb      	ldrb	r3, [r7, #27]
 8004566:	2b08      	cmp	r3, #8
 8004568:	d836      	bhi.n	80045d8 <UART_SetConfig+0x328>
 800456a:	a201      	add	r2, pc, #4	; (adr r2, 8004570 <UART_SetConfig+0x2c0>)
 800456c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004570:	08004595 	.word	0x08004595
 8004574:	080045d9 	.word	0x080045d9
 8004578:	0800459d 	.word	0x0800459d
 800457c:	080045d9 	.word	0x080045d9
 8004580:	080045a3 	.word	0x080045a3
 8004584:	080045d9 	.word	0x080045d9
 8004588:	080045d9 	.word	0x080045d9
 800458c:	080045d9 	.word	0x080045d9
 8004590:	080045d1 	.word	0x080045d1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004594:	f7fe fd7a 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 8004598:	6178      	str	r0, [r7, #20]
        break;
 800459a:	e022      	b.n	80045e2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800459c:	4b0b      	ldr	r3, [pc, #44]	; (80045cc <UART_SetConfig+0x31c>)
 800459e:	617b      	str	r3, [r7, #20]
        break;
 80045a0:	e01f      	b.n	80045e2 <UART_SetConfig+0x332>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a2:	f7fe fcdd 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 80045a6:	6178      	str	r0, [r7, #20]
        break;
 80045a8:	e01b      	b.n	80045e2 <UART_SetConfig+0x332>
 80045aa:	bf00      	nop
 80045ac:	cfff69f3 	.word	0xcfff69f3
 80045b0:	40008000 	.word	0x40008000
 80045b4:	40013800 	.word	0x40013800
 80045b8:	40021000 	.word	0x40021000
 80045bc:	40004400 	.word	0x40004400
 80045c0:	40004800 	.word	0x40004800
 80045c4:	40004c00 	.word	0x40004c00
 80045c8:	40005000 	.word	0x40005000
 80045cc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045d4:	617b      	str	r3, [r7, #20]
        break;
 80045d6:	e004      	b.n	80045e2 <UART_SetConfig+0x332>
      default:
        pclk = 0U;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	76bb      	strb	r3, [r7, #26]
        break;
 80045e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 811d 	beq.w	8004824 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	4a97      	ldr	r2, [pc, #604]	; (800484c <UART_SetConfig+0x59c>)
 80045f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f4:	461a      	mov	r2, r3
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80045fc:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	4613      	mov	r3, r2
 8004604:	005b      	lsls	r3, r3, #1
 8004606:	4413      	add	r3, r2
 8004608:	68ba      	ldr	r2, [r7, #8]
 800460a:	429a      	cmp	r2, r3
 800460c:	d305      	bcc.n	800461a <UART_SetConfig+0x36a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004614:	68ba      	ldr	r2, [r7, #8]
 8004616:	429a      	cmp	r2, r3
 8004618:	d902      	bls.n	8004620 <UART_SetConfig+0x370>
      {
        ret = HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	76bb      	strb	r3, [r7, #26]
 800461e:	e101      	b.n	8004824 <UART_SetConfig+0x574>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4618      	mov	r0, r3
 8004624:	f04f 0100 	mov.w	r1, #0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	4a87      	ldr	r2, [pc, #540]	; (800484c <UART_SetConfig+0x59c>)
 800462e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004632:	b29b      	uxth	r3, r3
 8004634:	f04f 0400 	mov.w	r4, #0
 8004638:	461a      	mov	r2, r3
 800463a:	4623      	mov	r3, r4
 800463c:	f7fc fb9c 	bl	8000d78 <__aeabi_uldivmod>
 8004640:	4603      	mov	r3, r0
 8004642:	460c      	mov	r4, r1
 8004644:	4619      	mov	r1, r3
 8004646:	4622      	mov	r2, r4
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	f04f 0400 	mov.w	r4, #0
 8004650:	0214      	lsls	r4, r2, #8
 8004652:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004656:	020b      	lsls	r3, r1, #8
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	6852      	ldr	r2, [r2, #4]
 800465c:	0852      	lsrs	r2, r2, #1
 800465e:	4611      	mov	r1, r2
 8004660:	f04f 0200 	mov.w	r2, #0
 8004664:	eb13 0b01 	adds.w	fp, r3, r1
 8004668:	eb44 0c02 	adc.w	ip, r4, r2
 800466c:	4658      	mov	r0, fp
 800466e:	4661      	mov	r1, ip
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f04f 0400 	mov.w	r4, #0
 8004678:	461a      	mov	r2, r3
 800467a:	4623      	mov	r3, r4
 800467c:	f7fc fb7c 	bl	8000d78 <__aeabi_uldivmod>
 8004680:	4603      	mov	r3, r0
 8004682:	460c      	mov	r4, r1
 8004684:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468c:	d308      	bcc.n	80046a0 <UART_SetConfig+0x3f0>
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004694:	d204      	bcs.n	80046a0 <UART_SetConfig+0x3f0>
        {
          huart->Instance->BRR = usartdiv;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	e0c1      	b.n	8004824 <UART_SetConfig+0x574>
        }
        else
        {
          ret = HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	76bb      	strb	r3, [r7, #26]
 80046a4:	e0be      	b.n	8004824 <UART_SetConfig+0x574>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	69db      	ldr	r3, [r3, #28]
 80046aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ae:	d164      	bne.n	800477a <UART_SetConfig+0x4ca>
  {
    switch (clocksource)
 80046b0:	7efb      	ldrb	r3, [r7, #27]
 80046b2:	2b08      	cmp	r3, #8
 80046b4:	d827      	bhi.n	8004706 <UART_SetConfig+0x456>
 80046b6:	a201      	add	r2, pc, #4	; (adr r2, 80046bc <UART_SetConfig+0x40c>)
 80046b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046bc:	080046e1 	.word	0x080046e1
 80046c0:	080046e9 	.word	0x080046e9
 80046c4:	080046f1 	.word	0x080046f1
 80046c8:	08004707 	.word	0x08004707
 80046cc:	080046f7 	.word	0x080046f7
 80046d0:	08004707 	.word	0x08004707
 80046d4:	08004707 	.word	0x08004707
 80046d8:	08004707 	.word	0x08004707
 80046dc:	080046ff 	.word	0x080046ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046e0:	f7fe fcd4 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80046e4:	6178      	str	r0, [r7, #20]
        break;
 80046e6:	e013      	b.n	8004710 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046e8:	f7fe fce6 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 80046ec:	6178      	str	r0, [r7, #20]
        break;
 80046ee:	e00f      	b.n	8004710 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046f0:	4b57      	ldr	r3, [pc, #348]	; (8004850 <UART_SetConfig+0x5a0>)
 80046f2:	617b      	str	r3, [r7, #20]
        break;
 80046f4:	e00c      	b.n	8004710 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046f6:	f7fe fc33 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 80046fa:	6178      	str	r0, [r7, #20]
        break;
 80046fc:	e008      	b.n	8004710 <UART_SetConfig+0x460>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004702:	617b      	str	r3, [r7, #20]
        break;
 8004704:	e004      	b.n	8004710 <UART_SetConfig+0x460>
      default:
        pclk = 0U;
 8004706:	2300      	movs	r3, #0
 8004708:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	76bb      	strb	r3, [r7, #26]
        break;
 800470e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	f000 8086 	beq.w	8004824 <UART_SetConfig+0x574>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	4a4b      	ldr	r2, [pc, #300]	; (800484c <UART_SetConfig+0x59c>)
 800471e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004722:	461a      	mov	r2, r3
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	fbb3 f3f2 	udiv	r3, r3, r2
 800472a:	005a      	lsls	r2, r3, #1
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	441a      	add	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	fbb2 f3f3 	udiv	r3, r2, r3
 800473c:	b29b      	uxth	r3, r3
 800473e:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b0f      	cmp	r3, #15
 8004744:	d916      	bls.n	8004774 <UART_SetConfig+0x4c4>
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800474c:	d212      	bcs.n	8004774 <UART_SetConfig+0x4c4>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f023 030f 	bic.w	r3, r3, #15
 8004756:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	085b      	lsrs	r3, r3, #1
 800475c:	b29b      	uxth	r3, r3
 800475e:	f003 0307 	and.w	r3, r3, #7
 8004762:	b29a      	uxth	r2, r3
 8004764:	89fb      	ldrh	r3, [r7, #14]
 8004766:	4313      	orrs	r3, r2
 8004768:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	89fa      	ldrh	r2, [r7, #14]
 8004770:	60da      	str	r2, [r3, #12]
 8004772:	e057      	b.n	8004824 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	76bb      	strb	r3, [r7, #26]
 8004778:	e054      	b.n	8004824 <UART_SetConfig+0x574>
      }
    }
  }
  else
  {
    switch (clocksource)
 800477a:	7efb      	ldrb	r3, [r7, #27]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d828      	bhi.n	80047d2 <UART_SetConfig+0x522>
 8004780:	a201      	add	r2, pc, #4	; (adr r2, 8004788 <UART_SetConfig+0x4d8>)
 8004782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004786:	bf00      	nop
 8004788:	080047ad 	.word	0x080047ad
 800478c:	080047b5 	.word	0x080047b5
 8004790:	080047bd 	.word	0x080047bd
 8004794:	080047d3 	.word	0x080047d3
 8004798:	080047c3 	.word	0x080047c3
 800479c:	080047d3 	.word	0x080047d3
 80047a0:	080047d3 	.word	0x080047d3
 80047a4:	080047d3 	.word	0x080047d3
 80047a8:	080047cb 	.word	0x080047cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ac:	f7fe fc6e 	bl	800308c <HAL_RCC_GetPCLK1Freq>
 80047b0:	6178      	str	r0, [r7, #20]
        break;
 80047b2:	e013      	b.n	80047dc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047b4:	f7fe fc80 	bl	80030b8 <HAL_RCC_GetPCLK2Freq>
 80047b8:	6178      	str	r0, [r7, #20]
        break;
 80047ba:	e00f      	b.n	80047dc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047bc:	4b24      	ldr	r3, [pc, #144]	; (8004850 <UART_SetConfig+0x5a0>)
 80047be:	617b      	str	r3, [r7, #20]
        break;
 80047c0:	e00c      	b.n	80047dc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047c2:	f7fe fbcd 	bl	8002f60 <HAL_RCC_GetSysClockFreq>
 80047c6:	6178      	str	r0, [r7, #20]
        break;
 80047c8:	e008      	b.n	80047dc <UART_SetConfig+0x52c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ce:	617b      	str	r3, [r7, #20]
        break;
 80047d0:	e004      	b.n	80047dc <UART_SetConfig+0x52c>
      default:
        pclk = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	76bb      	strb	r3, [r7, #26]
        break;
 80047da:	bf00      	nop
    }

    if (pclk != 0U)
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d020      	beq.n	8004824 <UART_SetConfig+0x574>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	4a19      	ldr	r2, [pc, #100]	; (800484c <UART_SetConfig+0x59c>)
 80047e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047ec:	461a      	mov	r2, r3
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	085b      	lsrs	r3, r3, #1
 80047fa:	441a      	add	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	fbb2 f3f3 	udiv	r3, r2, r3
 8004804:	b29b      	uxth	r3, r3
 8004806:	613b      	str	r3, [r7, #16]
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	2b0f      	cmp	r3, #15
 800480c:	d908      	bls.n	8004820 <UART_SetConfig+0x570>
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004814:	d204      	bcs.n	8004820 <UART_SetConfig+0x570>
      {
        huart->Instance->BRR = usartdiv;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	e001      	b.n	8004824 <UART_SetConfig+0x574>
      }
      else
      {
        ret = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	76bb      	strb	r3, [r7, #26]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8004840:	7ebb      	ldrb	r3, [r7, #26]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3720      	adds	r7, #32
 8004846:	46bd      	mov	sp, r7
 8004848:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800484c:	08009824 	.word	0x08009824
 8004850:	00f42400 	.word	0x00f42400

08004854 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004860:	f003 0301 	and.w	r3, r3, #1
 8004864:	2b00      	cmp	r3, #0
 8004866:	d00a      	beq.n	800487e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	430a      	orrs	r2, r1
 800489e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d00a      	beq.n	80048c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	430a      	orrs	r2, r1
 80048c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00a      	beq.n	80048e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00a      	beq.n	8004906 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	430a      	orrs	r2, r1
 8004904:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	430a      	orrs	r2, r1
 8004926:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800492c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01a      	beq.n	800496a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	430a      	orrs	r2, r1
 8004948:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800494e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004952:	d10a      	bne.n	800496a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004972:	2b00      	cmp	r3, #0
 8004974:	d00a      	beq.n	800498c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	430a      	orrs	r2, r1
 800498a:	605a      	str	r2, [r3, #4]
  }
}
 800498c:	bf00      	nop
 800498e:	370c      	adds	r7, #12
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af02      	add	r7, sp, #8
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80049a8:	f7fd fa40 	bl	8001e2c <HAL_GetTick>
 80049ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0308 	and.w	r3, r3, #8
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d10e      	bne.n	80049da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049c0:	9300      	str	r3, [sp, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f82c 	bl	8004a28 <UART_WaitOnFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e022      	b.n	8004a20 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d10e      	bne.n	8004a06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f816 	bl	8004a28 <UART_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e00c      	b.n	8004a20 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004a1e:	2300      	movs	r3, #0
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	603b      	str	r3, [r7, #0]
 8004a34:	4613      	mov	r3, r2
 8004a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a38:	e062      	b.n	8004b00 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a40:	d05e      	beq.n	8004b00 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a42:	f7fd f9f3 	bl	8001e2c <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	69ba      	ldr	r2, [r7, #24]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d302      	bcc.n	8004a58 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d11d      	bne.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a66:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0201 	bic.w	r2, r2, #1
 8004a76:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2220      	movs	r2, #32
 8004a84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004a90:	2303      	movs	r3, #3
 8004a92:	e045      	b.n	8004b20 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0304 	and.w	r3, r3, #4
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d02e      	beq.n	8004b00 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ab0:	d126      	bne.n	8004b00 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004aba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aca:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	689a      	ldr	r2, [r3, #8]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0201 	bic.w	r2, r2, #1
 8004ada:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2220      	movs	r2, #32
 8004ae0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e00f      	b.n	8004b20 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69da      	ldr	r2, [r3, #28]
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	68ba      	ldr	r2, [r7, #8]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	bf0c      	ite	eq
 8004b10:	2301      	moveq	r3, #1
 8004b12:	2300      	movne	r3, #0
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	461a      	mov	r2, r3
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d08d      	beq.n	8004a3a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_UARTEx_DisableFifoMode+0x16>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e027      	b.n	8004b8e <HAL_UARTEx_DisableFifoMode+0x66>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2224      	movs	r2, #36	; 0x24
 8004b4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b6c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3714      	adds	r7, #20
 8004b92:	46bd      	mov	sp, r7
 8004b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b98:	4770      	bx	lr

08004b9a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b084      	sub	sp, #16
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e02d      	b.n	8004c0e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2224      	movs	r2, #36	; 0x24
 8004bbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0201 	bic.w	r2, r2, #1
 8004bd8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	430a      	orrs	r2, r1
 8004bec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f850 	bl	8004c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68fa      	ldr	r2, [r7, #12]
 8004bfa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2220      	movs	r2, #32
 8004c00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b084      	sub	sp, #16
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	6078      	str	r0, [r7, #4]
 8004c1e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d101      	bne.n	8004c2e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004c2a:	2302      	movs	r3, #2
 8004c2c:	e02d      	b.n	8004c8a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2224      	movs	r2, #36	; 0x24
 8004c3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0201 	bic.w	r2, r2, #1
 8004c54:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	430a      	orrs	r2, r1
 8004c68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f812 	bl	8004c94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b089      	sub	sp, #36	; 0x24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8004c9c:	4a2f      	ldr	r2, [pc, #188]	; (8004d5c <UARTEx_SetNbDataToProcess+0xc8>)
 8004c9e:	f107 0314 	add.w	r3, r7, #20
 8004ca2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ca6:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8004caa:	4a2d      	ldr	r2, [pc, #180]	; (8004d60 <UARTEx_SetNbDataToProcess+0xcc>)
 8004cac:	f107 030c 	add.w	r3, r7, #12
 8004cb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004cb4:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d108      	bne.n	8004cd2 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2201      	movs	r2, #1
 8004ccc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004cd0:	e03d      	b.n	8004d4e <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004cd2:	2308      	movs	r3, #8
 8004cd4:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004cd6:	2308      	movs	r3, #8
 8004cd8:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	0e5b      	lsrs	r3, r3, #25
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	0f5b      	lsrs	r3, r3, #29
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004cfa:	7fbb      	ldrb	r3, [r7, #30]
 8004cfc:	7f3a      	ldrb	r2, [r7, #28]
 8004cfe:	f107 0120 	add.w	r1, r7, #32
 8004d02:	440a      	add	r2, r1
 8004d04:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004d08:	fb02 f303 	mul.w	r3, r2, r3
 8004d0c:	7f3a      	ldrb	r2, [r7, #28]
 8004d0e:	f107 0120 	add.w	r1, r7, #32
 8004d12:	440a      	add	r2, r1
 8004d14:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004d18:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004d24:	7ffb      	ldrb	r3, [r7, #31]
 8004d26:	7f7a      	ldrb	r2, [r7, #29]
 8004d28:	f107 0120 	add.w	r1, r7, #32
 8004d2c:	440a      	add	r2, r1
 8004d2e:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8004d32:	fb02 f303 	mul.w	r3, r2, r3
 8004d36:	7f7a      	ldrb	r2, [r7, #29]
 8004d38:	f107 0120 	add.w	r1, r7, #32
 8004d3c:	440a      	add	r2, r1
 8004d3e:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8004d42:	fb93 f3f2 	sdiv	r3, r3, r2
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004d4e:	bf00      	nop
 8004d50:	3724      	adds	r7, #36	; 0x24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	080097cc 	.word	0x080097cc
 8004d60:	080097d4 	.word	0x080097d4

08004d64 <arm_std_f32>:
 8004d64:	2901      	cmp	r1, #1
 8004d66:	d97d      	bls.n	8004e64 <arm_std_f32+0x100>
 8004d68:	b530      	push	{r4, r5, lr}
 8004d6a:	ed2d 8b02 	vpush	{d8}
 8004d6e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8004e74 <arm_std_f32+0x110>
 8004d72:	088d      	lsrs	r5, r1, #2
 8004d74:	b083      	sub	sp, #12
 8004d76:	eef0 4a47 	vmov.f32	s9, s14
 8004d7a:	d028      	beq.n	8004dce <arm_std_f32+0x6a>
 8004d7c:	f100 0310 	add.w	r3, r0, #16
 8004d80:	462c      	mov	r4, r5
 8004d82:	ed53 7a04 	vldr	s15, [r3, #-16]
 8004d86:	ed13 5a03 	vldr	s10, [r3, #-12]
 8004d8a:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004d8e:	ed13 6a01 	vldr	s12, [r3, #-4]
 8004d92:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8004d96:	ee77 7aa4 	vadd.f32	s15, s15, s9
 8004d9a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8004d9e:	ee65 6a05 	vmul.f32	s13, s10, s10
 8004da2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8004da6:	ee76 6a87 	vadd.f32	s13, s13, s14
 8004daa:	ee25 7aa5 	vmul.f32	s14, s11, s11
 8004dae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004db2:	ee77 6a26 	vadd.f32	s13, s14, s13
 8004db6:	ee26 7a06 	vmul.f32	s14, s12, s12
 8004dba:	3c01      	subs	r4, #1
 8004dbc:	ee77 4a86 	vadd.f32	s9, s15, s12
 8004dc0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004dc4:	f103 0310 	add.w	r3, r3, #16
 8004dc8:	d1db      	bne.n	8004d82 <arm_std_f32+0x1e>
 8004dca:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8004dce:	f011 0303 	ands.w	r3, r1, #3
 8004dd2:	d01b      	beq.n	8004e0c <arm_std_f32+0xa8>
 8004dd4:	edd0 7a00 	vldr	s15, [r0]
 8004dd8:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8004de2:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004de6:	d011      	beq.n	8004e0c <arm_std_f32+0xa8>
 8004de8:	edd0 7a01 	vldr	s15, [r0, #4]
 8004dec:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8004df6:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004dfa:	d007      	beq.n	8004e0c <arm_std_f32+0xa8>
 8004dfc:	edd0 7a02 	vldr	s15, [r0, #8]
 8004e00:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8004e04:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8004e08:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004e0c:	ee07 1a90 	vmov	s15, r1
 8004e10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e14:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004e18:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8004e1c:	eec4 6aa7 	vdiv.f32	s13, s9, s15
 8004e20:	eec7 5a86 	vdiv.f32	s11, s15, s12
 8004e24:	ee87 0a06 	vdiv.f32	s0, s14, s12
 8004e28:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8004e2c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004e30:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004e34:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004e38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e3c:	db0c      	blt.n	8004e58 <arm_std_f32+0xf4>
 8004e3e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004e42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e46:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8004e4a:	d40e      	bmi.n	8004e6a <arm_std_f32+0x106>
 8004e4c:	ed82 8a00 	vstr	s16, [r2]
 8004e50:	b003      	add	sp, #12
 8004e52:	ecbd 8b02 	vpop	{d8}
 8004e56:	bd30      	pop	{r4, r5, pc}
 8004e58:	2300      	movs	r3, #0
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	b003      	add	sp, #12
 8004e5e:	ecbd 8b02 	vpop	{d8}
 8004e62:	bd30      	pop	{r4, r5, pc}
 8004e64:	2300      	movs	r3, #0
 8004e66:	6013      	str	r3, [r2, #0]
 8004e68:	4770      	bx	lr
 8004e6a:	9201      	str	r2, [sp, #4]
 8004e6c:	f004 fb58 	bl	8009520 <sqrtf>
 8004e70:	9a01      	ldr	r2, [sp, #4]
 8004e72:	e7eb      	b.n	8004e4c <arm_std_f32+0xe8>
 8004e74:	00000000 	.word	0x00000000

08004e78 <arm_mean_f32>:
 8004e78:	b430      	push	{r4, r5}
 8004e7a:	088d      	lsrs	r5, r1, #2
 8004e7c:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8004ef0 <arm_mean_f32+0x78>
 8004e80:	d018      	beq.n	8004eb4 <arm_mean_f32+0x3c>
 8004e82:	f100 0310 	add.w	r3, r0, #16
 8004e86:	462c      	mov	r4, r5
 8004e88:	ed53 5a04 	vldr	s11, [r3, #-16]
 8004e8c:	ed13 6a03 	vldr	s12, [r3, #-12]
 8004e90:	ed53 6a02 	vldr	s13, [r3, #-8]
 8004e94:	ed13 7a01 	vldr	s14, [r3, #-4]
 8004e98:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8004e9c:	3c01      	subs	r4, #1
 8004e9e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8004ea2:	f103 0310 	add.w	r3, r3, #16
 8004ea6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004eae:	d1eb      	bne.n	8004e88 <arm_mean_f32+0x10>
 8004eb0:	eb00 1005 	add.w	r0, r0, r5, lsl #4
 8004eb4:	f011 0303 	ands.w	r3, r1, #3
 8004eb8:	d00f      	beq.n	8004eda <arm_mean_f32+0x62>
 8004eba:	ed90 7a00 	vldr	s14, [r0]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ec4:	d009      	beq.n	8004eda <arm_mean_f32+0x62>
 8004ec6:	ed90 7a01 	vldr	s14, [r0, #4]
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ed0:	bf1c      	itt	ne
 8004ed2:	ed90 7a02 	vldrne	s14, [r0, #8]
 8004ed6:	ee77 7a87 	vaddne.f32	s15, s15, s14
 8004eda:	ee07 1a10 	vmov	s14, r1
 8004ede:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ee2:	bc30      	pop	{r4, r5}
 8004ee4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004ee8:	edc2 6a00 	vstr	s13, [r2]
 8004eec:	4770      	bx	lr
 8004eee:	bf00      	nop
 8004ef0:	00000000 	.word	0x00000000

08004ef4 <arm_correlate_f32>:
 8004ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef8:	4299      	cmp	r1, r3
 8004efa:	b08d      	sub	sp, #52	; 0x34
 8004efc:	f0c0 824c 	bcc.w	8005398 <arm_correlate_f32+0x4a4>
 8004f00:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8004f02:	eba1 0c03 	sub.w	ip, r1, r3
 8004f06:	eb04 0c8c 	add.w	ip, r4, ip, lsl #2
 8004f0a:	f04f 0e04 	mov.w	lr, #4
 8004f0e:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 8004f12:	3101      	adds	r1, #1
 8004f14:	1ac9      	subs	r1, r1, r3
 8004f16:	3c01      	subs	r4, #1
 8004f18:	1e5e      	subs	r6, r3, #1
 8004f1a:	9102      	str	r1, [sp, #8]
 8004f1c:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8004f20:	f000 8294 	beq.w	800544c <arm_correlate_f32+0x558>
 8004f24:	eddf 7a53 	vldr	s15, [pc, #332]	; 8005074 <arm_correlate_f32+0x180>
 8004f28:	f1a1 0804 	sub.w	r8, r1, #4
 8004f2c:	46e1      	mov	r9, ip
 8004f2e:	4605      	mov	r5, r0
 8004f30:	2401      	movs	r4, #1
 8004f32:	f014 0703 	ands.w	r7, r4, #3
 8004f36:	d01b      	beq.n	8004f70 <arm_correlate_f32+0x7c>
 8004f38:	ed91 7a00 	vldr	s14, [r1]
 8004f3c:	edd5 6a00 	vldr	s13, [r5]
 8004f40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004f44:	3f01      	subs	r7, #1
 8004f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f4a:	d011      	beq.n	8004f70 <arm_correlate_f32+0x7c>
 8004f4c:	ed91 7a01 	vldr	s14, [r1, #4]
 8004f50:	edd5 6a01 	vldr	s13, [r5, #4]
 8004f54:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004f58:	2f01      	cmp	r7, #1
 8004f5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f5e:	d007      	beq.n	8004f70 <arm_correlate_f32+0x7c>
 8004f60:	ed95 7a02 	vldr	s14, [r5, #8]
 8004f64:	edd1 6a02 	vldr	s13, [r1, #8]
 8004f68:	ee27 7a26 	vmul.f32	s14, s14, s13
 8004f6c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004f70:	1c67      	adds	r7, r4, #1
 8004f72:	42bb      	cmp	r3, r7
 8004f74:	edc9 7a00 	vstr	s15, [r9]
 8004f78:	4641      	mov	r1, r8
 8004f7a:	44f1      	add	r9, lr
 8004f7c:	d03a      	beq.n	8004ff4 <arm_correlate_f32+0x100>
 8004f7e:	ea5f 0a97 	movs.w	sl, r7, lsr #2
 8004f82:	f000 8267 	beq.w	8005454 <arm_correlate_f32+0x560>
 8004f86:	ea4f 1a0a 	mov.w	sl, sl, lsl #4
 8004f8a:	f100 0110 	add.w	r1, r0, #16
 8004f8e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8005074 <arm_correlate_f32+0x180>
 8004f92:	eb01 050a 	add.w	r5, r1, sl
 8004f96:	f108 0410 	add.w	r4, r8, #16
 8004f9a:	ed11 7a04 	vldr	s14, [r1, #-16]
 8004f9e:	ed54 3a04 	vldr	s7, [r4, #-16]
 8004fa2:	ed11 6a03 	vldr	s12, [r1, #-12]
 8004fa6:	ed14 4a03 	vldr	s8, [r4, #-12]
 8004faa:	ed51 6a02 	vldr	s13, [r1, #-8]
 8004fae:	ed54 4a02 	vldr	s9, [r4, #-8]
 8004fb2:	ed51 5a01 	vldr	s11, [r1, #-4]
 8004fb6:	ed14 5a01 	vldr	s10, [r4, #-4]
 8004fba:	ee27 7a23 	vmul.f32	s14, s14, s7
 8004fbe:	ee26 6a04 	vmul.f32	s12, s12, s8
 8004fc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fc6:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8004fca:	ee76 7a27 	vadd.f32	s15, s12, s15
 8004fce:	ee65 6a85 	vmul.f32	s13, s11, s10
 8004fd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004fd6:	3110      	adds	r1, #16
 8004fd8:	428d      	cmp	r5, r1
 8004fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fde:	f104 0410 	add.w	r4, r4, #16
 8004fe2:	d1da      	bne.n	8004f9a <arm_correlate_f32+0xa6>
 8004fe4:	eb00 050a 	add.w	r5, r0, sl
 8004fe8:	eb08 010a 	add.w	r1, r8, sl
 8004fec:	f1a8 0804 	sub.w	r8, r8, #4
 8004ff0:	463c      	mov	r4, r7
 8004ff2:	e79e      	b.n	8004f32 <arm_correlate_f32+0x3e>
 8004ff4:	2b03      	cmp	r3, #3
 8004ff6:	fb0e cc04 	mla	ip, lr, r4, ip
 8004ffa:	f240 81dd 	bls.w	80053b8 <arm_correlate_f32+0x4c4>
 8004ffe:	9b02      	ldr	r3, [sp, #8]
 8005000:	0899      	lsrs	r1, r3, #2
 8005002:	9103      	str	r1, [sp, #12]
 8005004:	f000 8220 	beq.w	8005448 <arm_correlate_f32+0x554>
 8005008:	08bb      	lsrs	r3, r7, #2
 800500a:	f007 0403 	and.w	r4, r7, #3
 800500e:	9300      	str	r3, [sp, #0]
 8005010:	011b      	lsls	r3, r3, #4
 8005012:	f103 0b0c 	add.w	fp, r3, #12
 8005016:	18d5      	adds	r5, r2, r3
 8005018:	1e63      	subs	r3, r4, #1
 800501a:	0109      	lsls	r1, r1, #4
 800501c:	9306      	str	r3, [sp, #24]
 800501e:	f100 080c 	add.w	r8, r0, #12
 8005022:	9401      	str	r4, [sp, #4]
 8005024:	9104      	str	r1, [sp, #16]
 8005026:	ea4f 048e 	mov.w	r4, lr, lsl #2
 800502a:	4441      	add	r1, r8
 800502c:	f102 0310 	add.w	r3, r2, #16
 8005030:	e9cd 6009 	strd	r6, r0, [sp, #36]	; 0x24
 8005034:	9e06      	ldr	r6, [sp, #24]
 8005036:	9405      	str	r4, [sp, #20]
 8005038:	e9cd 7c07 	strd	r7, ip, [sp, #28]
 800503c:	eb0c 0a4e 	add.w	sl, ip, lr, lsl #1
 8005040:	46e1      	mov	r9, ip
 8005042:	4483      	add	fp, r0
 8005044:	460f      	mov	r7, r1
 8005046:	920b      	str	r2, [sp, #44]	; 0x2c
 8005048:	469c      	mov	ip, r3
 800504a:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 8005074 <arm_correlate_f32+0x180>
 800504e:	ed58 1a03 	vldr	s3, [r8, #-12]
 8005052:	ed18 2a02 	vldr	s4, [r8, #-8]
 8005056:	ed58 2a01 	vldr	s5, [r8, #-4]
 800505a:	ed98 0a00 	vldr	s0, [r8]
 800505e:	9900      	ldr	r1, [sp, #0]
 8005060:	eef0 5a46 	vmov.f32	s11, s12
 8005064:	eeb0 5a46 	vmov.f32	s10, s12
 8005068:	eef0 4a46 	vmov.f32	s9, s12
 800506c:	4663      	mov	r3, ip
 800506e:	4642      	mov	r2, r8
 8005070:	e005      	b.n	800507e <arm_correlate_f32+0x18a>
 8005072:	bf00      	nop
 8005074:	00000000 	.word	0x00000000
 8005078:	ed90 0a04 	vldr	s0, [r0, #16]
 800507c:	3210      	adds	r2, #16
 800507e:	ed53 6a04 	vldr	s13, [r3, #-16]
 8005082:	ed13 7a03 	vldr	s14, [r3, #-12]
 8005086:	ed53 7a02 	vldr	s15, [r3, #-8]
 800508a:	ed13 1a01 	vldr	s2, [r3, #-4]
 800508e:	ee62 3a26 	vmul.f32	s7, s4, s13
 8005092:	ee22 4aa6 	vmul.f32	s8, s5, s13
 8005096:	ee61 0aa6 	vmul.f32	s1, s3, s13
 800509a:	edd2 1a01 	vldr	s3, [r2, #4]
 800509e:	ee66 6a80 	vmul.f32	s13, s13, s0
 80050a2:	ee22 3a07 	vmul.f32	s6, s4, s14
 80050a6:	ee33 5a85 	vadd.f32	s10, s7, s10
 80050aa:	ee74 5a25 	vadd.f32	s11, s8, s11
 80050ae:	ee62 3a87 	vmul.f32	s7, s5, s14
 80050b2:	ee20 4a07 	vmul.f32	s8, s0, s14
 80050b6:	ee70 4aa4 	vadd.f32	s9, s1, s9
 80050ba:	ee36 6a86 	vadd.f32	s12, s13, s12
 80050be:	ed92 2a02 	vldr	s4, [r2, #8]
 80050c2:	ee27 7a21 	vmul.f32	s14, s14, s3
 80050c6:	ee73 3a85 	vadd.f32	s7, s7, s10
 80050ca:	ee37 7a06 	vadd.f32	s14, s14, s12
 80050ce:	ee20 5a27 	vmul.f32	s10, s0, s15
 80050d2:	ee33 3a24 	vadd.f32	s6, s6, s9
 80050d6:	ee34 4a25 	vadd.f32	s8, s8, s11
 80050da:	ee62 4aa7 	vmul.f32	s9, s5, s15
 80050de:	ee61 5aa7 	vmul.f32	s11, s3, s15
 80050e2:	edd2 2a03 	vldr	s5, [r2, #12]
 80050e6:	ee67 7a82 	vmul.f32	s15, s15, s4
 80050ea:	ee35 5a23 	vadd.f32	s10, s10, s7
 80050ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80050f2:	ee74 4a83 	vadd.f32	s9, s9, s6
 80050f6:	ee20 0a01 	vmul.f32	s0, s0, s2
 80050fa:	ee61 3a81 	vmul.f32	s7, s3, s2
 80050fe:	ee75 5a84 	vadd.f32	s11, s11, s8
 8005102:	ee22 7a01 	vmul.f32	s14, s4, s2
 8005106:	ee21 6a22 	vmul.f32	s12, s2, s5
 800510a:	3901      	subs	r1, #1
 800510c:	f103 0310 	add.w	r3, r3, #16
 8005110:	ee70 4a24 	vadd.f32	s9, s0, s9
 8005114:	ee33 5a85 	vadd.f32	s10, s7, s10
 8005118:	ee77 5a25 	vadd.f32	s11, s14, s11
 800511c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005120:	4610      	mov	r0, r2
 8005122:	d1a9      	bne.n	8005078 <arm_correlate_f32+0x184>
 8005124:	9b01      	ldr	r3, [sp, #4]
 8005126:	b3f3      	cbz	r3, 80051a6 <arm_correlate_f32+0x2b2>
 8005128:	edd5 7a00 	vldr	s15, [r5]
 800512c:	ed9b 4a00 	vldr	s8, [fp]
 8005130:	ee61 6aa7 	vmul.f32	s13, s3, s15
 8005134:	ee62 3a27 	vmul.f32	s7, s4, s15
 8005138:	ee22 7aa7 	vmul.f32	s14, s5, s15
 800513c:	ee64 7a27 	vmul.f32	s15, s8, s15
 8005140:	ee74 4aa6 	vadd.f32	s9, s9, s13
 8005144:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005148:	ee75 5a87 	vadd.f32	s11, s11, s14
 800514c:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005150:	b34e      	cbz	r6, 80051a6 <arm_correlate_f32+0x2b2>
 8005152:	edd5 7a01 	vldr	s15, [r5, #4]
 8005156:	eddb 6a01 	vldr	s13, [fp, #4]
 800515a:	ee22 7a27 	vmul.f32	s14, s4, s15
 800515e:	ee22 3aa7 	vmul.f32	s6, s5, s15
 8005162:	ee67 3a84 	vmul.f32	s7, s15, s8
 8005166:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800516a:	2e01      	cmp	r6, #1
 800516c:	ee74 4a87 	vadd.f32	s9, s9, s14
 8005170:	ee35 5a03 	vadd.f32	s10, s10, s6
 8005174:	ee75 5aa3 	vadd.f32	s11, s11, s7
 8005178:	ee36 6a27 	vadd.f32	s12, s12, s15
 800517c:	d013      	beq.n	80051a6 <arm_correlate_f32+0x2b2>
 800517e:	ed95 7a02 	vldr	s14, [r5, #8]
 8005182:	eddb 3a02 	vldr	s7, [fp, #8]
 8005186:	ee62 7a87 	vmul.f32	s15, s5, s14
 800518a:	ee27 4a04 	vmul.f32	s8, s14, s8
 800518e:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005192:	ee27 7a23 	vmul.f32	s14, s14, s7
 8005196:	ee74 4aa7 	vadd.f32	s9, s9, s15
 800519a:	ee35 5a04 	vadd.f32	s10, s10, s8
 800519e:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80051a2:	ee36 6a07 	vadd.f32	s12, s12, s14
 80051a6:	f108 0810 	add.w	r8, r8, #16
 80051aa:	eb09 020e 	add.w	r2, r9, lr
 80051ae:	eb0a 030e 	add.w	r3, sl, lr
 80051b2:	4547      	cmp	r7, r8
 80051b4:	edc9 4a00 	vstr	s9, [r9]
 80051b8:	f10b 0b10 	add.w	fp, fp, #16
 80051bc:	ed82 5a00 	vstr	s10, [r2]
 80051c0:	44a1      	add	r9, r4
 80051c2:	edca 5a00 	vstr	s11, [sl]
 80051c6:	ed83 6a00 	vstr	s12, [r3]
 80051ca:	44a2      	add	sl, r4
 80051cc:	f47f af3d 	bne.w	800504a <arm_correlate_f32+0x156>
 80051d0:	e9dd 7c07 	ldrd	r7, ip, [sp, #28]
 80051d4:	e9dd 6009 	ldrd	r6, r0, [sp, #36]	; 0x24
 80051d8:	9b03      	ldr	r3, [sp, #12]
 80051da:	9c05      	ldr	r4, [sp, #20]
 80051dc:	9904      	ldr	r1, [sp, #16]
 80051de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051e0:	fb04 cc03 	mla	ip, r4, r3, ip
 80051e4:	4401      	add	r1, r0
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	460d      	mov	r5, r1
 80051ea:	9303      	str	r3, [sp, #12]
 80051ec:	9b02      	ldr	r3, [sp, #8]
 80051ee:	f013 0303 	ands.w	r3, r3, #3
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	d071      	beq.n	80052da <arm_correlate_f32+0x3e6>
 80051f6:	9903      	ldr	r1, [sp, #12]
 80051f8:	9205      	str	r2, [sp, #20]
 80051fa:	f007 0403 	and.w	r4, r7, #3
 80051fe:	ea4f 0b97 	mov.w	fp, r7, lsr #2
 8005202:	1c4f      	adds	r7, r1, #1
 8005204:	1859      	adds	r1, r3, r1
 8005206:	1d03      	adds	r3, r0, #4
 8005208:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800520c:	9400      	str	r4, [sp, #0]
 800520e:	f102 0110 	add.w	r1, r2, #16
 8005212:	ea4f 1a0b 	mov.w	sl, fp, lsl #4
 8005216:	3c01      	subs	r4, #1
 8005218:	e9cd 6003 	strd	r6, r0, [sp, #12]
 800521c:	eb02 090a 	add.w	r9, r2, sl
 8005220:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005224:	46e0      	mov	r8, ip
 8005226:	4618      	mov	r0, r3
 8005228:	460e      	mov	r6, r1
 800522a:	4622      	mov	r2, r4
 800522c:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 8005074 <arm_correlate_f32+0x180>
 8005230:	f105 0110 	add.w	r1, r5, #16
 8005234:	4633      	mov	r3, r6
 8005236:	465c      	mov	r4, fp
 8005238:	ed11 7a04 	vldr	s14, [r1, #-16]
 800523c:	ed53 3a04 	vldr	s7, [r3, #-16]
 8005240:	ed11 6a03 	vldr	s12, [r1, #-12]
 8005244:	ed13 4a03 	vldr	s8, [r3, #-12]
 8005248:	ed51 6a02 	vldr	s13, [r1, #-8]
 800524c:	ed53 4a02 	vldr	s9, [r3, #-8]
 8005250:	ed51 5a01 	vldr	s11, [r1, #-4]
 8005254:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005258:	ee27 7a23 	vmul.f32	s14, s14, s7
 800525c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005260:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005264:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8005268:	ee76 7a27 	vadd.f32	s15, s12, s15
 800526c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8005270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005274:	3c01      	subs	r4, #1
 8005276:	f101 0110 	add.w	r1, r1, #16
 800527a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800527e:	f103 0310 	add.w	r3, r3, #16
 8005282:	d1d9      	bne.n	8005238 <arm_correlate_f32+0x344>
 8005284:	9b00      	ldr	r3, [sp, #0]
 8005286:	4455      	add	r5, sl
 8005288:	b1d3      	cbz	r3, 80052c0 <arm_correlate_f32+0x3cc>
 800528a:	ed99 7a00 	vldr	s14, [r9]
 800528e:	edd5 6a00 	vldr	s13, [r5]
 8005292:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005296:	ee77 7a87 	vadd.f32	s15, s15, s14
 800529a:	b18a      	cbz	r2, 80052c0 <arm_correlate_f32+0x3cc>
 800529c:	ed99 7a01 	vldr	s14, [r9, #4]
 80052a0:	edd5 6a01 	vldr	s13, [r5, #4]
 80052a4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80052a8:	2a01      	cmp	r2, #1
 80052aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052ae:	d007      	beq.n	80052c0 <arm_correlate_f32+0x3cc>
 80052b0:	ed95 7a02 	vldr	s14, [r5, #8]
 80052b4:	edd9 6a02 	vldr	s13, [r9, #8]
 80052b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80052bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80052c0:	463d      	mov	r5, r7
 80052c2:	3704      	adds	r7, #4
 80052c4:	42b8      	cmp	r0, r7
 80052c6:	edc8 7a00 	vstr	s15, [r8]
 80052ca:	44f0      	add	r8, lr
 80052cc:	d1ae      	bne.n	800522c <arm_correlate_f32+0x338>
 80052ce:	9b01      	ldr	r3, [sp, #4]
 80052d0:	9a05      	ldr	r2, [sp, #20]
 80052d2:	e9dd 6003 	ldrd	r6, r0, [sp, #12]
 80052d6:	fb0e cc03 	mla	ip, lr, r3, ip
 80052da:	9b02      	ldr	r3, [sp, #8]
 80052dc:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80052e0:	08b5      	lsrs	r5, r6, #2
 80052e2:	ed5f 5a9c 	vldr	s11, [pc, #-624]	; 8005074 <arm_correlate_f32+0x180>
 80052e6:	f000 80ac 	beq.w	8005442 <arm_correlate_f32+0x54e>
 80052ea:	f100 0110 	add.w	r1, r0, #16
 80052ee:	f102 0310 	add.w	r3, r2, #16
 80052f2:	462c      	mov	r4, r5
 80052f4:	ed51 6a04 	vldr	s13, [r1, #-16]
 80052f8:	ed53 3a04 	vldr	s7, [r3, #-16]
 80052fc:	ed11 7a03 	vldr	s14, [r1, #-12]
 8005300:	ed13 4a03 	vldr	s8, [r3, #-12]
 8005304:	ed51 7a02 	vldr	s15, [r1, #-8]
 8005308:	ed53 4a02 	vldr	s9, [r3, #-8]
 800530c:	ed11 6a01 	vldr	s12, [r1, #-4]
 8005310:	ed13 5a01 	vldr	s10, [r3, #-4]
 8005314:	ee66 6aa3 	vmul.f32	s13, s13, s7
 8005318:	ee27 7a04 	vmul.f32	s14, s14, s8
 800531c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8005320:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8005324:	ee37 7a26 	vadd.f32	s14, s14, s13
 8005328:	ee66 6a05 	vmul.f32	s13, s12, s10
 800532c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005330:	3c01      	subs	r4, #1
 8005332:	f101 0110 	add.w	r1, r1, #16
 8005336:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800533a:	f103 0310 	add.w	r3, r3, #16
 800533e:	d1d9      	bne.n	80052f4 <arm_correlate_f32+0x400>
 8005340:	012d      	lsls	r5, r5, #4
 8005342:	1941      	adds	r1, r0, r5
 8005344:	4415      	add	r5, r2
 8005346:	f016 0303 	ands.w	r3, r6, #3
 800534a:	d01b      	beq.n	8005384 <arm_correlate_f32+0x490>
 800534c:	edd5 7a00 	vldr	s15, [r5]
 8005350:	ed91 7a00 	vldr	s14, [r1]
 8005354:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005358:	3b01      	subs	r3, #1
 800535a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800535e:	d011      	beq.n	8005384 <arm_correlate_f32+0x490>
 8005360:	edd5 7a01 	vldr	s15, [r5, #4]
 8005364:	ed91 7a01 	vldr	s14, [r1, #4]
 8005368:	ee67 7a87 	vmul.f32	s15, s15, s14
 800536c:	2b01      	cmp	r3, #1
 800536e:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005372:	d007      	beq.n	8005384 <arm_correlate_f32+0x490>
 8005374:	edd1 7a02 	vldr	s15, [r1, #8]
 8005378:	ed95 7a02 	vldr	s14, [r5, #8]
 800537c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005380:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005384:	3e01      	subs	r6, #1
 8005386:	edcc 5a00 	vstr	s11, [ip]
 800538a:	f100 0004 	add.w	r0, r0, #4
 800538e:	44f4      	add	ip, lr
 8005390:	d1a6      	bne.n	80052e0 <arm_correlate_f32+0x3ec>
 8005392:	b00d      	add	sp, #52	; 0x34
 8005394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005398:	f103 4480 	add.w	r4, r3, #1073741824	; 0x40000000
 800539c:	4606      	mov	r6, r0
 800539e:	3c02      	subs	r4, #2
 80053a0:	4610      	mov	r0, r2
 80053a2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80053a4:	440c      	add	r4, r1
 80053a6:	460d      	mov	r5, r1
 80053a8:	eb02 0c84 	add.w	ip, r2, r4, lsl #2
 80053ac:	4619      	mov	r1, r3
 80053ae:	4632      	mov	r2, r6
 80053b0:	f06f 0e03 	mvn.w	lr, #3
 80053b4:	462b      	mov	r3, r5
 80053b6:	e5aa      	b.n	8004f0e <arm_correlate_f32+0x1a>
 80053b8:	9902      	ldr	r1, [sp, #8]
 80053ba:	2900      	cmp	r1, #0
 80053bc:	d090      	beq.n	80052e0 <arm_correlate_f32+0x3ec>
 80053be:	9902      	ldr	r1, [sp, #8]
 80053c0:	ed1f 6ad4 	vldr	s12, [pc, #-848]	; 8005074 <arm_correlate_f32+0x180>
 80053c4:	ea4f 0881 	mov.w	r8, r1, lsl #2
 80053c8:	eb00 0708 	add.w	r7, r0, r8
 80053cc:	4601      	mov	r1, r0
 80053ce:	4665      	mov	r5, ip
 80053d0:	e020      	b.n	8005414 <arm_correlate_f32+0x520>
 80053d2:	edd2 7a00 	vldr	s15, [r2]
 80053d6:	ecb4 7a01 	vldmia	r4!, {s14}
 80053da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053de:	ee77 7a86 	vadd.f32	s15, s15, s12
 80053e2:	b18e      	cbz	r6, 8005408 <arm_correlate_f32+0x514>
 80053e4:	ed92 7a01 	vldr	s14, [r2, #4]
 80053e8:	edd1 6a01 	vldr	s13, [r1, #4]
 80053ec:	ee27 7a26 	vmul.f32	s14, s14, s13
 80053f0:	2b02      	cmp	r3, #2
 80053f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053f6:	d007      	beq.n	8005408 <arm_correlate_f32+0x514>
 80053f8:	ed91 7a02 	vldr	s14, [r1, #8]
 80053fc:	edd2 6a02 	vldr	s13, [r2, #8]
 8005400:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005404:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005408:	42bc      	cmp	r4, r7
 800540a:	edc5 7a00 	vstr	s15, [r5]
 800540e:	4621      	mov	r1, r4
 8005410:	4475      	add	r5, lr
 8005412:	d00b      	beq.n	800542c <arm_correlate_f32+0x538>
 8005414:	460c      	mov	r4, r1
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1db      	bne.n	80053d2 <arm_correlate_f32+0x4de>
 800541a:	1d0c      	adds	r4, r1, #4
 800541c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800545c <arm_correlate_f32+0x568>
 8005420:	42bc      	cmp	r4, r7
 8005422:	edc5 7a00 	vstr	s15, [r5]
 8005426:	4621      	mov	r1, r4
 8005428:	4475      	add	r5, lr
 800542a:	d1f3      	bne.n	8005414 <arm_correlate_f32+0x520>
 800542c:	9b02      	ldr	r3, [sp, #8]
 800542e:	4440      	add	r0, r8
 8005430:	fb0e cc03 	mla	ip, lr, r3, ip
 8005434:	2e00      	cmp	r6, #0
 8005436:	d0ac      	beq.n	8005392 <arm_correlate_f32+0x49e>
 8005438:	08b5      	lsrs	r5, r6, #2
 800543a:	eddf 5a08 	vldr	s11, [pc, #32]	; 800545c <arm_correlate_f32+0x568>
 800543e:	f47f af54 	bne.w	80052ea <arm_correlate_f32+0x3f6>
 8005442:	4615      	mov	r5, r2
 8005444:	4601      	mov	r1, r0
 8005446:	e77e      	b.n	8005346 <arm_correlate_f32+0x452>
 8005448:	4605      	mov	r5, r0
 800544a:	e6cf      	b.n	80051ec <arm_correlate_f32+0x2f8>
 800544c:	9902      	ldr	r1, [sp, #8]
 800544e:	2900      	cmp	r1, #0
 8005450:	d1b5      	bne.n	80053be <arm_correlate_f32+0x4ca>
 8005452:	e79e      	b.n	8005392 <arm_correlate_f32+0x49e>
 8005454:	eddf 7a01 	vldr	s15, [pc, #4]	; 800545c <arm_correlate_f32+0x568>
 8005458:	4605      	mov	r5, r0
 800545a:	e5c7      	b.n	8004fec <arm_correlate_f32+0xf8>
 800545c:	00000000 	.word	0x00000000

08005460 <arm_conv_f32>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	b08b      	sub	sp, #44	; 0x2c
 8005466:	4299      	cmp	r1, r3
 8005468:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800546a:	d205      	bcs.n	8005478 <arm_conv_f32+0x18>
 800546c:	4606      	mov	r6, r0
 800546e:	460c      	mov	r4, r1
 8005470:	4610      	mov	r0, r2
 8005472:	4619      	mov	r1, r3
 8005474:	4632      	mov	r2, r6
 8005476:	4623      	mov	r3, r4
 8005478:	f103 4b80 	add.w	fp, r3, #1073741824	; 0x40000000
 800547c:	3101      	adds	r1, #1
 800547e:	1ac9      	subs	r1, r1, r3
 8005480:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005484:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005488:	9101      	str	r1, [sp, #4]
 800548a:	1e59      	subs	r1, r3, #1
 800548c:	eb02 070b 	add.w	r7, r2, fp
 8005490:	f000 8277 	beq.w	8005982 <arm_conv_f32+0x522>
 8005494:	eddf 7aaf 	vldr	s15, [pc, #700]	; 8005754 <arm_conv_f32+0x2f4>
 8005498:	f102 0904 	add.w	r9, r2, #4
 800549c:	46aa      	mov	sl, r5
 800549e:	4680      	mov	r8, r0
 80054a0:	2401      	movs	r4, #1
 80054a2:	f014 0603 	ands.w	r6, r4, #3
 80054a6:	d01b      	beq.n	80054e0 <arm_conv_f32+0x80>
 80054a8:	ed92 7a00 	vldr	s14, [r2]
 80054ac:	edd8 6a00 	vldr	s13, [r8]
 80054b0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054b4:	3e01      	subs	r6, #1
 80054b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054ba:	d011      	beq.n	80054e0 <arm_conv_f32+0x80>
 80054bc:	ed12 7a01 	vldr	s14, [r2, #-4]
 80054c0:	edd8 6a01 	vldr	s13, [r8, #4]
 80054c4:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054c8:	2e01      	cmp	r6, #1
 80054ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054ce:	d007      	beq.n	80054e0 <arm_conv_f32+0x80>
 80054d0:	ed98 7a02 	vldr	s14, [r8, #8]
 80054d4:	ed52 6a02 	vldr	s13, [r2, #-8]
 80054d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80054dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80054e0:	3401      	adds	r4, #1
 80054e2:	42a3      	cmp	r3, r4
 80054e4:	ecea 7a01 	vstmia	sl!, {s15}
 80054e8:	464a      	mov	r2, r9
 80054ea:	d03a      	beq.n	8005562 <arm_conv_f32+0x102>
 80054ec:	ea5f 0e94 	movs.w	lr, r4, lsr #2
 80054f0:	f000 824c 	beq.w	800598c <arm_conv_f32+0x52c>
 80054f4:	f100 0210 	add.w	r2, r0, #16
 80054f8:	ea4f 180e 	mov.w	r8, lr, lsl #4
 80054fc:	eddf 7a95 	vldr	s15, [pc, #596]	; 8005754 <arm_conv_f32+0x2f4>
 8005500:	eb02 0c08 	add.w	ip, r2, r8
 8005504:	f1a9 0610 	sub.w	r6, r9, #16
 8005508:	ed12 7a04 	vldr	s14, [r2, #-16]
 800550c:	edd6 3a04 	vldr	s7, [r6, #16]
 8005510:	ed12 6a03 	vldr	s12, [r2, #-12]
 8005514:	ed96 4a03 	vldr	s8, [r6, #12]
 8005518:	ed52 6a02 	vldr	s13, [r2, #-8]
 800551c:	edd6 4a02 	vldr	s9, [r6, #8]
 8005520:	ed52 5a01 	vldr	s11, [r2, #-4]
 8005524:	ed96 5a01 	vldr	s10, [r6, #4]
 8005528:	ee27 7a23 	vmul.f32	s14, s14, s7
 800552c:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005530:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005534:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8005538:	ee76 7a27 	vadd.f32	s15, s12, s15
 800553c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8005540:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005544:	3210      	adds	r2, #16
 8005546:	4594      	cmp	ip, r2
 8005548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554c:	f1a6 0610 	sub.w	r6, r6, #16
 8005550:	d1da      	bne.n	8005508 <arm_conv_f32+0xa8>
 8005552:	ebce 7e0e 	rsb	lr, lr, lr, lsl #28
 8005556:	eb09 120e 	add.w	r2, r9, lr, lsl #4
 800555a:	4480      	add	r8, r0
 800555c:	f109 0904 	add.w	r9, r9, #4
 8005560:	e79f      	b.n	80054a2 <arm_conv_f32+0x42>
 8005562:	2b03      	cmp	r3, #3
 8005564:	445d      	add	r5, fp
 8005566:	f240 80e9 	bls.w	800573c <arm_conv_f32+0x2dc>
 800556a:	9b01      	ldr	r3, [sp, #4]
 800556c:	089a      	lsrs	r2, r3, #2
 800556e:	9202      	str	r2, [sp, #8]
 8005570:	f000 8203 	beq.w	800597a <arm_conv_f32+0x51a>
 8005574:	ea4f 0894 	mov.w	r8, r4, lsr #2
 8005578:	ea4f 1308 	mov.w	r3, r8, lsl #4
 800557c:	0112      	lsls	r2, r2, #4
 800557e:	f004 0603 	and.w	r6, r4, #3
 8005582:	9203      	str	r2, [sp, #12]
 8005584:	f1a3 0a10 	sub.w	sl, r3, #16
 8005588:	f1a3 020c 	sub.w	r2, r3, #12
 800558c:	3b08      	subs	r3, #8
 800558e:	9204      	str	r2, [sp, #16]
 8005590:	9305      	str	r3, [sp, #20]
 8005592:	f106 39ff 	add.w	r9, r6, #4294967295
 8005596:	e9cd 7008 	strd	r7, r0, [sp, #32]
 800559a:	9a03      	ldr	r2, [sp, #12]
 800559c:	f100 0c1c 	add.w	ip, r0, #28
 80055a0:	e9cd 4106 	strd	r4, r1, [sp, #24]
 80055a4:	464c      	mov	r4, r9
 80055a6:	e9dd 9004 	ldrd	r9, r0, [sp, #16]
 80055aa:	ebc8 7e08 	rsb	lr, r8, r8, lsl #28
 80055ae:	f1a7 0310 	sub.w	r3, r7, #16
 80055b2:	eb07 1e0e 	add.w	lr, r7, lr, lsl #4
 80055b6:	eb05 0b02 	add.w	fp, r5, r2
 80055ba:	461f      	mov	r7, r3
 80055bc:	3510      	adds	r5, #16
 80055be:	ed9f 6a65 	vldr	s12, [pc, #404]	; 8005754 <arm_conv_f32+0x2f4>
 80055c2:	ed1c 1a07 	vldr	s2, [ip, #-28]	; 0xffffffe4
 80055c6:	ed5c 1a06 	vldr	s3, [ip, #-24]	; 0xffffffe8
 80055ca:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 80055ce:	eeb0 5a46 	vmov.f32	s10, s12
 80055d2:	eef0 4a46 	vmov.f32	s9, s12
 80055d6:	eef0 5a46 	vmov.f32	s11, s12
 80055da:	463a      	mov	r2, r7
 80055dc:	4663      	mov	r3, ip
 80055de:	4641      	mov	r1, r8
 80055e0:	edd2 6a04 	vldr	s13, [r2, #16]
 80055e4:	ed13 0a04 	vldr	s0, [r3, #-16]
 80055e8:	ed92 7a03 	vldr	s14, [r2, #12]
 80055ec:	edd2 7a02 	vldr	s15, [r2, #8]
 80055f0:	edd2 0a01 	vldr	s1, [r2, #4]
 80055f4:	ee21 3aa6 	vmul.f32	s6, s3, s13
 80055f8:	ee62 3a26 	vmul.f32	s7, s4, s13
 80055fc:	ee61 2a26 	vmul.f32	s5, s2, s13
 8005600:	ed13 1a03 	vldr	s2, [r3, #-12]
 8005604:	ee66 6a80 	vmul.f32	s13, s13, s0
 8005608:	ee21 4a87 	vmul.f32	s8, s3, s14
 800560c:	ee73 4a24 	vadd.f32	s9, s6, s9
 8005610:	ee33 5a85 	vadd.f32	s10, s7, s10
 8005614:	ee22 3a07 	vmul.f32	s6, s4, s14
 8005618:	ed53 1a02 	vldr	s3, [r3, #-8]
 800561c:	ee72 2aa5 	vadd.f32	s5, s5, s11
 8005620:	ee36 6a86 	vadd.f32	s12, s13, s12
 8005624:	ee60 3a07 	vmul.f32	s7, s0, s14
 8005628:	ee27 7a01 	vmul.f32	s14, s14, s2
 800562c:	ee33 3a24 	vadd.f32	s6, s6, s9
 8005630:	ee37 7a06 	vadd.f32	s14, s14, s12
 8005634:	ee74 2a22 	vadd.f32	s5, s8, s5
 8005638:	ee60 4a27 	vmul.f32	s9, s0, s15
 800563c:	ee22 4a27 	vmul.f32	s8, s4, s15
 8005640:	ee73 3a85 	vadd.f32	s7, s7, s10
 8005644:	ed13 2a01 	vldr	s4, [r3, #-4]
 8005648:	ee21 5a27 	vmul.f32	s10, s2, s15
 800564c:	ee67 7aa1 	vmul.f32	s15, s15, s3
 8005650:	ee74 4a83 	vadd.f32	s9, s9, s6
 8005654:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005658:	ee34 4a22 	vadd.f32	s8, s8, s5
 800565c:	ee60 5a20 	vmul.f32	s11, s0, s1
 8005660:	ee21 3a20 	vmul.f32	s6, s2, s1
 8005664:	ee35 5a23 	vadd.f32	s10, s10, s7
 8005668:	ee21 7aa0 	vmul.f32	s14, s3, s1
 800566c:	ee20 6a82 	vmul.f32	s12, s1, s4
 8005670:	3901      	subs	r1, #1
 8005672:	f1a2 0210 	sub.w	r2, r2, #16
 8005676:	ee75 5a84 	vadd.f32	s11, s11, s8
 800567a:	ee73 4a24 	vadd.f32	s9, s6, s9
 800567e:	ee37 5a05 	vadd.f32	s10, s14, s10
 8005682:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005686:	f103 0310 	add.w	r3, r3, #16
 800568a:	d1a9      	bne.n	80055e0 <arm_conv_f32+0x180>
 800568c:	eb0a 030c 	add.w	r3, sl, ip
 8005690:	2e00      	cmp	r6, #0
 8005692:	d042      	beq.n	800571a <arm_conv_f32+0x2ba>
 8005694:	edde 7a00 	vldr	s15, [lr]
 8005698:	ed93 4a00 	vldr	s8, [r3]
 800569c:	ee61 6a27 	vmul.f32	s13, s2, s15
 80056a0:	ee61 3aa7 	vmul.f32	s7, s3, s15
 80056a4:	ee22 7a27 	vmul.f32	s14, s4, s15
 80056a8:	ee64 7a27 	vmul.f32	s15, s8, s15
 80056ac:	ee75 5aa6 	vadd.f32	s11, s11, s13
 80056b0:	ee74 4aa3 	vadd.f32	s9, s9, s7
 80056b4:	ee35 5a07 	vadd.f32	s10, s10, s14
 80056b8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80056bc:	eb09 030c 	add.w	r3, r9, ip
 80056c0:	b35c      	cbz	r4, 800571a <arm_conv_f32+0x2ba>
 80056c2:	ed5e 7a01 	vldr	s15, [lr, #-4]
 80056c6:	edd3 6a00 	vldr	s13, [r3]
 80056ca:	ee21 7aa7 	vmul.f32	s14, s3, s15
 80056ce:	ee22 3a27 	vmul.f32	s6, s4, s15
 80056d2:	ee67 3a84 	vmul.f32	s7, s15, s8
 80056d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80056da:	2c01      	cmp	r4, #1
 80056dc:	ee75 5a87 	vadd.f32	s11, s11, s14
 80056e0:	ee74 4a83 	vadd.f32	s9, s9, s6
 80056e4:	ee35 5a23 	vadd.f32	s10, s10, s7
 80056e8:	ee36 6a27 	vadd.f32	s12, s12, s15
 80056ec:	eb00 030c 	add.w	r3, r0, ip
 80056f0:	d013      	beq.n	800571a <arm_conv_f32+0x2ba>
 80056f2:	ed1e 7a02 	vldr	s14, [lr, #-8]
 80056f6:	edd3 3a00 	vldr	s7, [r3]
 80056fa:	ee62 7a07 	vmul.f32	s15, s4, s14
 80056fe:	ee27 4a04 	vmul.f32	s8, s14, s8
 8005702:	ee67 6a26 	vmul.f32	s13, s14, s13
 8005706:	ee27 7a23 	vmul.f32	s14, s14, s7
 800570a:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800570e:	ee74 4a84 	vadd.f32	s9, s9, s8
 8005712:	ee35 5a26 	vadd.f32	s10, s10, s13
 8005716:	ee36 6a07 	vadd.f32	s12, s12, s14
 800571a:	45ab      	cmp	fp, r5
 800571c:	ed45 5a04 	vstr	s11, [r5, #-16]
 8005720:	ed45 4a03 	vstr	s9, [r5, #-12]
 8005724:	ed05 5a02 	vstr	s10, [r5, #-8]
 8005728:	ed05 6a01 	vstr	s12, [r5, #-4]
 800572c:	f10c 0c10 	add.w	ip, ip, #16
 8005730:	f105 0310 	add.w	r3, r5, #16
 8005734:	f000 809e 	beq.w	8005874 <arm_conv_f32+0x414>
 8005738:	461d      	mov	r5, r3
 800573a:	e740      	b.n	80055be <arm_conv_f32+0x15e>
 800573c:	9a01      	ldr	r2, [sp, #4]
 800573e:	46ac      	mov	ip, r5
 8005740:	2a00      	cmp	r2, #0
 8005742:	d037      	beq.n	80057b4 <arm_conv_f32+0x354>
 8005744:	9a01      	ldr	r2, [sp, #4]
 8005746:	ed9f 6a03 	vldr	s12, [pc, #12]	; 8005754 <arm_conv_f32+0x2f4>
 800574a:	0096      	lsls	r6, r2, #2
 800574c:	eb05 0c06 	add.w	ip, r5, r6
 8005750:	4604      	mov	r4, r0
 8005752:	e021      	b.n	8005798 <arm_conv_f32+0x338>
 8005754:	00000000 	.word	0x00000000
 8005758:	edd7 7a00 	vldr	s15, [r7]
 800575c:	ecb2 7a01 	vldmia	r2!, {s14}
 8005760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005764:	ee77 7a86 	vadd.f32	s15, s15, s12
 8005768:	b189      	cbz	r1, 800578e <arm_conv_f32+0x32e>
 800576a:	ed17 7a01 	vldr	s14, [r7, #-4]
 800576e:	edd4 6a01 	vldr	s13, [r4, #4]
 8005772:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005776:	2b02      	cmp	r3, #2
 8005778:	ee77 7a87 	vadd.f32	s15, s15, s14
 800577c:	d007      	beq.n	800578e <arm_conv_f32+0x32e>
 800577e:	ed94 7a02 	vldr	s14, [r4, #8]
 8005782:	ed57 6a02 	vldr	s13, [r7, #-8]
 8005786:	ee27 7a26 	vmul.f32	s14, s14, s13
 800578a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800578e:	ece5 7a01 	vstmia	r5!, {s15}
 8005792:	4565      	cmp	r5, ip
 8005794:	4614      	mov	r4, r2
 8005796:	d00a      	beq.n	80057ae <arm_conv_f32+0x34e>
 8005798:	4622      	mov	r2, r4
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1dc      	bne.n	8005758 <arm_conv_f32+0x2f8>
 800579e:	ed5f 7a13 	vldr	s15, [pc, #-76]	; 8005754 <arm_conv_f32+0x2f4>
 80057a2:	ece5 7a01 	vstmia	r5!, {s15}
 80057a6:	1d22      	adds	r2, r4, #4
 80057a8:	4565      	cmp	r5, ip
 80057aa:	4614      	mov	r4, r2
 80057ac:	d1f4      	bne.n	8005798 <arm_conv_f32+0x338>
 80057ae:	4430      	add	r0, r6
 80057b0:	2900      	cmp	r1, #0
 80057b2:	d059      	beq.n	8005868 <arm_conv_f32+0x408>
 80057b4:	088d      	lsrs	r5, r1, #2
 80057b6:	ed5f 5a19 	vldr	s11, [pc, #-100]	; 8005754 <arm_conv_f32+0x2f4>
 80057ba:	d058      	beq.n	800586e <arm_conv_f32+0x40e>
 80057bc:	f100 0210 	add.w	r2, r0, #16
 80057c0:	f1a7 0310 	sub.w	r3, r7, #16
 80057c4:	462c      	mov	r4, r5
 80057c6:	ed52 6a04 	vldr	s13, [r2, #-16]
 80057ca:	edd3 3a04 	vldr	s7, [r3, #16]
 80057ce:	ed12 7a03 	vldr	s14, [r2, #-12]
 80057d2:	ed93 4a03 	vldr	s8, [r3, #12]
 80057d6:	ed52 7a02 	vldr	s15, [r2, #-8]
 80057da:	edd3 4a02 	vldr	s9, [r3, #8]
 80057de:	ed12 6a01 	vldr	s12, [r2, #-4]
 80057e2:	ed93 5a01 	vldr	s10, [r3, #4]
 80057e6:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80057ea:	ee27 7a04 	vmul.f32	s14, s14, s8
 80057ee:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80057f2:	ee67 7aa4 	vmul.f32	s15, s15, s9
 80057f6:	ee37 7a26 	vadd.f32	s14, s14, s13
 80057fa:	ee66 6a05 	vmul.f32	s13, s12, s10
 80057fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005802:	3c01      	subs	r4, #1
 8005804:	f102 0210 	add.w	r2, r2, #16
 8005808:	ee76 5aa7 	vadd.f32	s11, s13, s15
 800580c:	f1a3 0310 	sub.w	r3, r3, #16
 8005810:	d1d9      	bne.n	80057c6 <arm_conv_f32+0x366>
 8005812:	ebc5 7305 	rsb	r3, r5, r5, lsl #28
 8005816:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800581a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 800581e:	f011 0203 	ands.w	r2, r1, #3
 8005822:	d01b      	beq.n	800585c <arm_conv_f32+0x3fc>
 8005824:	edd3 7a00 	vldr	s15, [r3]
 8005828:	ed95 7a00 	vldr	s14, [r5]
 800582c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005830:	3a01      	subs	r2, #1
 8005832:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8005836:	d011      	beq.n	800585c <arm_conv_f32+0x3fc>
 8005838:	ed53 7a01 	vldr	s15, [r3, #-4]
 800583c:	ed95 7a01 	vldr	s14, [r5, #4]
 8005840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005844:	2a01      	cmp	r2, #1
 8005846:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800584a:	d007      	beq.n	800585c <arm_conv_f32+0x3fc>
 800584c:	edd5 7a02 	vldr	s15, [r5, #8]
 8005850:	ed13 7a02 	vldr	s14, [r3, #-8]
 8005854:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005858:	ee75 5aa7 	vadd.f32	s11, s11, s15
 800585c:	3901      	subs	r1, #1
 800585e:	ecec 5a01 	vstmia	ip!, {s11}
 8005862:	f100 0004 	add.w	r0, r0, #4
 8005866:	d1a5      	bne.n	80057b4 <arm_conv_f32+0x354>
 8005868:	b00b      	add	sp, #44	; 0x2c
 800586a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800586e:	463b      	mov	r3, r7
 8005870:	4605      	mov	r5, r0
 8005872:	e7d4      	b.n	800581e <arm_conv_f32+0x3be>
 8005874:	9b02      	ldr	r3, [sp, #8]
 8005876:	e9dd 7008 	ldrd	r7, r0, [sp, #32]
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	9302      	str	r3, [sp, #8]
 800587e:	9b03      	ldr	r3, [sp, #12]
 8005880:	e9dd 4106 	ldrd	r4, r1, [sp, #24]
 8005884:	4403      	add	r3, r0
 8005886:	465d      	mov	r5, fp
 8005888:	469e      	mov	lr, r3
 800588a:	9b01      	ldr	r3, [sp, #4]
 800588c:	f013 0c03 	ands.w	ip, r3, #3
 8005890:	d075      	beq.n	800597e <arm_conv_f32+0x51e>
 8005892:	9b02      	ldr	r3, [sp, #8]
 8005894:	ea4f 0a94 	mov.w	sl, r4, lsr #2
 8005898:	f004 0403 	and.w	r4, r4, #3
 800589c:	f104 3bff 	add.w	fp, r4, #4294967295
 80058a0:	f103 0801 	add.w	r8, r3, #1
 80058a4:	ea4f 130a 	mov.w	r3, sl, lsl #4
 80058a8:	e9cd 7002 	strd	r7, r0, [sp, #8]
 80058ac:	ebca 790a 	rsb	r9, sl, sl, lsl #28
 80058b0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80058b4:	f1a7 0210 	sub.w	r2, r7, #16
 80058b8:	4618      	mov	r0, r3
 80058ba:	465b      	mov	r3, fp
 80058bc:	eb07 1909 	add.w	r9, r7, r9, lsl #4
 80058c0:	468b      	mov	fp, r1
 80058c2:	eb05 0c8c 	add.w	ip, r5, ip, lsl #2
 80058c6:	4621      	mov	r1, r4
 80058c8:	4617      	mov	r7, r2
 80058ca:	461c      	mov	r4, r3
 80058cc:	ed5f 7a5f 	vldr	s15, [pc, #-380]	; 8005754 <arm_conv_f32+0x2f4>
 80058d0:	f10e 0210 	add.w	r2, lr, #16
 80058d4:	463b      	mov	r3, r7
 80058d6:	4656      	mov	r6, sl
 80058d8:	ed12 7a04 	vldr	s14, [r2, #-16]
 80058dc:	edd3 3a04 	vldr	s7, [r3, #16]
 80058e0:	ed12 6a03 	vldr	s12, [r2, #-12]
 80058e4:	ed93 4a03 	vldr	s8, [r3, #12]
 80058e8:	ed52 6a02 	vldr	s13, [r2, #-8]
 80058ec:	edd3 4a02 	vldr	s9, [r3, #8]
 80058f0:	ed52 5a01 	vldr	s11, [r2, #-4]
 80058f4:	ed93 5a01 	vldr	s10, [r3, #4]
 80058f8:	ee27 7a23 	vmul.f32	s14, s14, s7
 80058fc:	ee26 6a04 	vmul.f32	s12, s12, s8
 8005900:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005904:	ee26 7aa4 	vmul.f32	s14, s13, s9
 8005908:	ee76 7a27 	vadd.f32	s15, s12, s15
 800590c:	ee65 6a85 	vmul.f32	s13, s11, s10
 8005910:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005914:	3e01      	subs	r6, #1
 8005916:	f102 0210 	add.w	r2, r2, #16
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	f1a3 0310 	sub.w	r3, r3, #16
 8005922:	d1d9      	bne.n	80058d8 <arm_conv_f32+0x478>
 8005924:	4486      	add	lr, r0
 8005926:	b1d1      	cbz	r1, 800595e <arm_conv_f32+0x4fe>
 8005928:	ed99 7a00 	vldr	s14, [r9]
 800592c:	edde 6a00 	vldr	s13, [lr]
 8005930:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005934:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005938:	b18c      	cbz	r4, 800595e <arm_conv_f32+0x4fe>
 800593a:	ed19 7a01 	vldr	s14, [r9, #-4]
 800593e:	edde 6a01 	vldr	s13, [lr, #4]
 8005942:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005946:	2c01      	cmp	r4, #1
 8005948:	ee77 7a87 	vadd.f32	s15, s15, s14
 800594c:	d007      	beq.n	800595e <arm_conv_f32+0x4fe>
 800594e:	ed9e 7a02 	vldr	s14, [lr, #8]
 8005952:	ed59 6a02 	vldr	s13, [r9, #-8]
 8005956:	ee27 7a26 	vmul.f32	s14, s14, s13
 800595a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800595e:	ece5 7a01 	vstmia	r5!, {s15}
 8005962:	4565      	cmp	r5, ip
 8005964:	46c6      	mov	lr, r8
 8005966:	f108 0804 	add.w	r8, r8, #4
 800596a:	d1af      	bne.n	80058cc <arm_conv_f32+0x46c>
 800596c:	e9dd 7002 	ldrd	r7, r0, [sp, #8]
 8005970:	4659      	mov	r1, fp
 8005972:	9b01      	ldr	r3, [sp, #4]
 8005974:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005978:	e71c      	b.n	80057b4 <arm_conv_f32+0x354>
 800597a:	4686      	mov	lr, r0
 800597c:	e785      	b.n	800588a <arm_conv_f32+0x42a>
 800597e:	46ac      	mov	ip, r5
 8005980:	e7f7      	b.n	8005972 <arm_conv_f32+0x512>
 8005982:	9a01      	ldr	r2, [sp, #4]
 8005984:	2a00      	cmp	r2, #0
 8005986:	f47f aedd 	bne.w	8005744 <arm_conv_f32+0x2e4>
 800598a:	e76d      	b.n	8005868 <arm_conv_f32+0x408>
 800598c:	ed5f 7a8f 	vldr	s15, [pc, #-572]	; 8005754 <arm_conv_f32+0x2f4>
 8005990:	4680      	mov	r8, r0
 8005992:	e5e3      	b.n	800555c <arm_conv_f32+0xfc>

08005994 <arm_sub_f32>:
 8005994:	ea5f 0c93 	movs.w	ip, r3, lsr #2
 8005998:	b4f0      	push	{r4, r5, r6, r7}
 800599a:	d033      	beq.n	8005a04 <arm_sub_f32+0x70>
 800599c:	f100 0610 	add.w	r6, r0, #16
 80059a0:	f101 0510 	add.w	r5, r1, #16
 80059a4:	f102 0410 	add.w	r4, r2, #16
 80059a8:	4667      	mov	r7, ip
 80059aa:	ed15 7a04 	vldr	s14, [r5, #-16]
 80059ae:	ed56 7a04 	vldr	s15, [r6, #-16]
 80059b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059b6:	3f01      	subs	r7, #1
 80059b8:	ed44 7a04 	vstr	s15, [r4, #-16]
 80059bc:	ed15 7a03 	vldr	s14, [r5, #-12]
 80059c0:	ed56 7a03 	vldr	s15, [r6, #-12]
 80059c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059c8:	f106 0610 	add.w	r6, r6, #16
 80059cc:	ed44 7a03 	vstr	s15, [r4, #-12]
 80059d0:	ed15 7a02 	vldr	s14, [r5, #-8]
 80059d4:	ed56 7a06 	vldr	s15, [r6, #-24]	; 0xffffffe8
 80059d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059dc:	f105 0510 	add.w	r5, r5, #16
 80059e0:	ed44 7a02 	vstr	s15, [r4, #-8]
 80059e4:	ed56 7a05 	vldr	s15, [r6, #-20]	; 0xffffffec
 80059e8:	ed15 7a05 	vldr	s14, [r5, #-20]	; 0xffffffec
 80059ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059f0:	f104 0410 	add.w	r4, r4, #16
 80059f4:	ed44 7a05 	vstr	s15, [r4, #-20]	; 0xffffffec
 80059f8:	d1d7      	bne.n	80059aa <arm_sub_f32+0x16>
 80059fa:	ea4f 140c 	mov.w	r4, ip, lsl #4
 80059fe:	4420      	add	r0, r4
 8005a00:	4421      	add	r1, r4
 8005a02:	4422      	add	r2, r4
 8005a04:	f013 0303 	ands.w	r3, r3, #3
 8005a08:	d01b      	beq.n	8005a42 <arm_sub_f32+0xae>
 8005a0a:	edd0 7a00 	vldr	s15, [r0]
 8005a0e:	ed91 7a00 	vldr	s14, [r1]
 8005a12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a16:	3b01      	subs	r3, #1
 8005a18:	edc2 7a00 	vstr	s15, [r2]
 8005a1c:	d011      	beq.n	8005a42 <arm_sub_f32+0xae>
 8005a1e:	edd0 7a01 	vldr	s15, [r0, #4]
 8005a22:	ed91 7a01 	vldr	s14, [r1, #4]
 8005a26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a2a:	2b01      	cmp	r3, #1
 8005a2c:	edc2 7a01 	vstr	s15, [r2, #4]
 8005a30:	d007      	beq.n	8005a42 <arm_sub_f32+0xae>
 8005a32:	edd0 7a02 	vldr	s15, [r0, #8]
 8005a36:	ed91 7a02 	vldr	s14, [r1, #8]
 8005a3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a3e:	edc2 7a02 	vstr	s15, [r2, #8]
 8005a42:	bcf0      	pop	{r4, r5, r6, r7}
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop

08005a48 <__errno>:
 8005a48:	4b01      	ldr	r3, [pc, #4]	; (8005a50 <__errno+0x8>)
 8005a4a:	6818      	ldr	r0, [r3, #0]
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	2000000c 	.word	0x2000000c

08005a54 <__libc_init_array>:
 8005a54:	b570      	push	{r4, r5, r6, lr}
 8005a56:	4e0d      	ldr	r6, [pc, #52]	; (8005a8c <__libc_init_array+0x38>)
 8005a58:	4c0d      	ldr	r4, [pc, #52]	; (8005a90 <__libc_init_array+0x3c>)
 8005a5a:	1ba4      	subs	r4, r4, r6
 8005a5c:	10a4      	asrs	r4, r4, #2
 8005a5e:	2500      	movs	r5, #0
 8005a60:	42a5      	cmp	r5, r4
 8005a62:	d109      	bne.n	8005a78 <__libc_init_array+0x24>
 8005a64:	4e0b      	ldr	r6, [pc, #44]	; (8005a94 <__libc_init_array+0x40>)
 8005a66:	4c0c      	ldr	r4, [pc, #48]	; (8005a98 <__libc_init_array+0x44>)
 8005a68:	f003 fdb0 	bl	80095cc <_init>
 8005a6c:	1ba4      	subs	r4, r4, r6
 8005a6e:	10a4      	asrs	r4, r4, #2
 8005a70:	2500      	movs	r5, #0
 8005a72:	42a5      	cmp	r5, r4
 8005a74:	d105      	bne.n	8005a82 <__libc_init_array+0x2e>
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
 8005a78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a7c:	4798      	blx	r3
 8005a7e:	3501      	adds	r5, #1
 8005a80:	e7ee      	b.n	8005a60 <__libc_init_array+0xc>
 8005a82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005a86:	4798      	blx	r3
 8005a88:	3501      	adds	r5, #1
 8005a8a:	e7f2      	b.n	8005a72 <__libc_init_array+0x1e>
 8005a8c:	08009afc 	.word	0x08009afc
 8005a90:	08009afc 	.word	0x08009afc
 8005a94:	08009afc 	.word	0x08009afc
 8005a98:	08009b00 	.word	0x08009b00

08005a9c <memcpy>:
 8005a9c:	b510      	push	{r4, lr}
 8005a9e:	1e43      	subs	r3, r0, #1
 8005aa0:	440a      	add	r2, r1
 8005aa2:	4291      	cmp	r1, r2
 8005aa4:	d100      	bne.n	8005aa8 <memcpy+0xc>
 8005aa6:	bd10      	pop	{r4, pc}
 8005aa8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005aac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ab0:	e7f7      	b.n	8005aa2 <memcpy+0x6>

08005ab2 <memset>:
 8005ab2:	4402      	add	r2, r0
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d100      	bne.n	8005abc <memset+0xa>
 8005aba:	4770      	bx	lr
 8005abc:	f803 1b01 	strb.w	r1, [r3], #1
 8005ac0:	e7f9      	b.n	8005ab6 <memset+0x4>

08005ac2 <__cvt>:
 8005ac2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ac6:	ec55 4b10 	vmov	r4, r5, d0
 8005aca:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8005acc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005ad0:	2d00      	cmp	r5, #0
 8005ad2:	460e      	mov	r6, r1
 8005ad4:	4691      	mov	r9, r2
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	bfb8      	it	lt
 8005ada:	4622      	movlt	r2, r4
 8005adc:	462b      	mov	r3, r5
 8005ade:	f027 0720 	bic.w	r7, r7, #32
 8005ae2:	bfbb      	ittet	lt
 8005ae4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005ae8:	461d      	movlt	r5, r3
 8005aea:	2300      	movge	r3, #0
 8005aec:	232d      	movlt	r3, #45	; 0x2d
 8005aee:	bfb8      	it	lt
 8005af0:	4614      	movlt	r4, r2
 8005af2:	2f46      	cmp	r7, #70	; 0x46
 8005af4:	700b      	strb	r3, [r1, #0]
 8005af6:	d004      	beq.n	8005b02 <__cvt+0x40>
 8005af8:	2f45      	cmp	r7, #69	; 0x45
 8005afa:	d100      	bne.n	8005afe <__cvt+0x3c>
 8005afc:	3601      	adds	r6, #1
 8005afe:	2102      	movs	r1, #2
 8005b00:	e000      	b.n	8005b04 <__cvt+0x42>
 8005b02:	2103      	movs	r1, #3
 8005b04:	ab03      	add	r3, sp, #12
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	ab02      	add	r3, sp, #8
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	4653      	mov	r3, sl
 8005b10:	ec45 4b10 	vmov	d0, r4, r5
 8005b14:	f001 fd78 	bl	8007608 <_dtoa_r>
 8005b18:	2f47      	cmp	r7, #71	; 0x47
 8005b1a:	4680      	mov	r8, r0
 8005b1c:	d102      	bne.n	8005b24 <__cvt+0x62>
 8005b1e:	f019 0f01 	tst.w	r9, #1
 8005b22:	d026      	beq.n	8005b72 <__cvt+0xb0>
 8005b24:	2f46      	cmp	r7, #70	; 0x46
 8005b26:	eb08 0906 	add.w	r9, r8, r6
 8005b2a:	d111      	bne.n	8005b50 <__cvt+0x8e>
 8005b2c:	f898 3000 	ldrb.w	r3, [r8]
 8005b30:	2b30      	cmp	r3, #48	; 0x30
 8005b32:	d10a      	bne.n	8005b4a <__cvt+0x88>
 8005b34:	2200      	movs	r2, #0
 8005b36:	2300      	movs	r3, #0
 8005b38:	4620      	mov	r0, r4
 8005b3a:	4629      	mov	r1, r5
 8005b3c:	f7fb f83c 	bl	8000bb8 <__aeabi_dcmpeq>
 8005b40:	b918      	cbnz	r0, 8005b4a <__cvt+0x88>
 8005b42:	f1c6 0601 	rsb	r6, r6, #1
 8005b46:	f8ca 6000 	str.w	r6, [sl]
 8005b4a:	f8da 3000 	ldr.w	r3, [sl]
 8005b4e:	4499      	add	r9, r3
 8005b50:	2200      	movs	r2, #0
 8005b52:	2300      	movs	r3, #0
 8005b54:	4620      	mov	r0, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	f7fb f82e 	bl	8000bb8 <__aeabi_dcmpeq>
 8005b5c:	b938      	cbnz	r0, 8005b6e <__cvt+0xac>
 8005b5e:	2230      	movs	r2, #48	; 0x30
 8005b60:	9b03      	ldr	r3, [sp, #12]
 8005b62:	454b      	cmp	r3, r9
 8005b64:	d205      	bcs.n	8005b72 <__cvt+0xb0>
 8005b66:	1c59      	adds	r1, r3, #1
 8005b68:	9103      	str	r1, [sp, #12]
 8005b6a:	701a      	strb	r2, [r3, #0]
 8005b6c:	e7f8      	b.n	8005b60 <__cvt+0x9e>
 8005b6e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005b72:	9b03      	ldr	r3, [sp, #12]
 8005b74:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005b76:	eba3 0308 	sub.w	r3, r3, r8
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	6013      	str	r3, [r2, #0]
 8005b7e:	b004      	add	sp, #16
 8005b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005b84 <__exponent>:
 8005b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b86:	2900      	cmp	r1, #0
 8005b88:	4604      	mov	r4, r0
 8005b8a:	bfba      	itte	lt
 8005b8c:	4249      	neglt	r1, r1
 8005b8e:	232d      	movlt	r3, #45	; 0x2d
 8005b90:	232b      	movge	r3, #43	; 0x2b
 8005b92:	2909      	cmp	r1, #9
 8005b94:	f804 2b02 	strb.w	r2, [r4], #2
 8005b98:	7043      	strb	r3, [r0, #1]
 8005b9a:	dd20      	ble.n	8005bde <__exponent+0x5a>
 8005b9c:	f10d 0307 	add.w	r3, sp, #7
 8005ba0:	461f      	mov	r7, r3
 8005ba2:	260a      	movs	r6, #10
 8005ba4:	fb91 f5f6 	sdiv	r5, r1, r6
 8005ba8:	fb06 1115 	mls	r1, r6, r5, r1
 8005bac:	3130      	adds	r1, #48	; 0x30
 8005bae:	2d09      	cmp	r5, #9
 8005bb0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005bb4:	f103 32ff 	add.w	r2, r3, #4294967295
 8005bb8:	4629      	mov	r1, r5
 8005bba:	dc09      	bgt.n	8005bd0 <__exponent+0x4c>
 8005bbc:	3130      	adds	r1, #48	; 0x30
 8005bbe:	3b02      	subs	r3, #2
 8005bc0:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005bc4:	42bb      	cmp	r3, r7
 8005bc6:	4622      	mov	r2, r4
 8005bc8:	d304      	bcc.n	8005bd4 <__exponent+0x50>
 8005bca:	1a10      	subs	r0, r2, r0
 8005bcc:	b003      	add	sp, #12
 8005bce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	e7e7      	b.n	8005ba4 <__exponent+0x20>
 8005bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bd8:	f804 2b01 	strb.w	r2, [r4], #1
 8005bdc:	e7f2      	b.n	8005bc4 <__exponent+0x40>
 8005bde:	2330      	movs	r3, #48	; 0x30
 8005be0:	4419      	add	r1, r3
 8005be2:	7083      	strb	r3, [r0, #2]
 8005be4:	1d02      	adds	r2, r0, #4
 8005be6:	70c1      	strb	r1, [r0, #3]
 8005be8:	e7ef      	b.n	8005bca <__exponent+0x46>
	...

08005bec <_printf_float>:
 8005bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bf0:	b08d      	sub	sp, #52	; 0x34
 8005bf2:	460c      	mov	r4, r1
 8005bf4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8005bf8:	4616      	mov	r6, r2
 8005bfa:	461f      	mov	r7, r3
 8005bfc:	4605      	mov	r5, r0
 8005bfe:	f002 fde7 	bl	80087d0 <_localeconv_r>
 8005c02:	6803      	ldr	r3, [r0, #0]
 8005c04:	9304      	str	r3, [sp, #16]
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fa fb55 	bl	80002b6 <strlen>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c10:	f8d8 3000 	ldr.w	r3, [r8]
 8005c14:	9005      	str	r0, [sp, #20]
 8005c16:	3307      	adds	r3, #7
 8005c18:	f023 0307 	bic.w	r3, r3, #7
 8005c1c:	f103 0208 	add.w	r2, r3, #8
 8005c20:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005c24:	f8d4 b000 	ldr.w	fp, [r4]
 8005c28:	f8c8 2000 	str.w	r2, [r8]
 8005c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c30:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005c34:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005c38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005c3c:	9307      	str	r3, [sp, #28]
 8005c3e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c42:	f04f 32ff 	mov.w	r2, #4294967295
 8005c46:	4ba7      	ldr	r3, [pc, #668]	; (8005ee4 <_printf_float+0x2f8>)
 8005c48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c4c:	f7fa ffe6 	bl	8000c1c <__aeabi_dcmpun>
 8005c50:	bb70      	cbnz	r0, 8005cb0 <_printf_float+0xc4>
 8005c52:	f04f 32ff 	mov.w	r2, #4294967295
 8005c56:	4ba3      	ldr	r3, [pc, #652]	; (8005ee4 <_printf_float+0x2f8>)
 8005c58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c5c:	f7fa ffc0 	bl	8000be0 <__aeabi_dcmple>
 8005c60:	bb30      	cbnz	r0, 8005cb0 <_printf_float+0xc4>
 8005c62:	2200      	movs	r2, #0
 8005c64:	2300      	movs	r3, #0
 8005c66:	4640      	mov	r0, r8
 8005c68:	4649      	mov	r1, r9
 8005c6a:	f7fa ffaf 	bl	8000bcc <__aeabi_dcmplt>
 8005c6e:	b110      	cbz	r0, 8005c76 <_printf_float+0x8a>
 8005c70:	232d      	movs	r3, #45	; 0x2d
 8005c72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c76:	4a9c      	ldr	r2, [pc, #624]	; (8005ee8 <_printf_float+0x2fc>)
 8005c78:	4b9c      	ldr	r3, [pc, #624]	; (8005eec <_printf_float+0x300>)
 8005c7a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005c7e:	bf8c      	ite	hi
 8005c80:	4690      	movhi	r8, r2
 8005c82:	4698      	movls	r8, r3
 8005c84:	2303      	movs	r3, #3
 8005c86:	f02b 0204 	bic.w	r2, fp, #4
 8005c8a:	6123      	str	r3, [r4, #16]
 8005c8c:	6022      	str	r2, [r4, #0]
 8005c8e:	f04f 0900 	mov.w	r9, #0
 8005c92:	9700      	str	r7, [sp, #0]
 8005c94:	4633      	mov	r3, r6
 8005c96:	aa0b      	add	r2, sp, #44	; 0x2c
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f9e6 	bl	800606c <_printf_common>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	f040 808d 	bne.w	8005dc0 <_printf_float+0x1d4>
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	b00d      	add	sp, #52	; 0x34
 8005cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	4640      	mov	r0, r8
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	f7fa ffb0 	bl	8000c1c <__aeabi_dcmpun>
 8005cbc:	b110      	cbz	r0, 8005cc4 <_printf_float+0xd8>
 8005cbe:	4a8c      	ldr	r2, [pc, #560]	; (8005ef0 <_printf_float+0x304>)
 8005cc0:	4b8c      	ldr	r3, [pc, #560]	; (8005ef4 <_printf_float+0x308>)
 8005cc2:	e7da      	b.n	8005c7a <_printf_float+0x8e>
 8005cc4:	6861      	ldr	r1, [r4, #4]
 8005cc6:	1c4b      	adds	r3, r1, #1
 8005cc8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8005ccc:	a80a      	add	r0, sp, #40	; 0x28
 8005cce:	d13e      	bne.n	8005d4e <_printf_float+0x162>
 8005cd0:	2306      	movs	r3, #6
 8005cd2:	6063      	str	r3, [r4, #4]
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005cda:	ab09      	add	r3, sp, #36	; 0x24
 8005cdc:	9300      	str	r3, [sp, #0]
 8005cde:	ec49 8b10 	vmov	d0, r8, r9
 8005ce2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005ce6:	6022      	str	r2, [r4, #0]
 8005ce8:	f8cd a004 	str.w	sl, [sp, #4]
 8005cec:	6861      	ldr	r1, [r4, #4]
 8005cee:	4628      	mov	r0, r5
 8005cf0:	f7ff fee7 	bl	8005ac2 <__cvt>
 8005cf4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8005cf8:	2b47      	cmp	r3, #71	; 0x47
 8005cfa:	4680      	mov	r8, r0
 8005cfc:	d109      	bne.n	8005d12 <_printf_float+0x126>
 8005cfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d00:	1cd8      	adds	r0, r3, #3
 8005d02:	db02      	blt.n	8005d0a <_printf_float+0x11e>
 8005d04:	6862      	ldr	r2, [r4, #4]
 8005d06:	4293      	cmp	r3, r2
 8005d08:	dd47      	ble.n	8005d9a <_printf_float+0x1ae>
 8005d0a:	f1aa 0a02 	sub.w	sl, sl, #2
 8005d0e:	fa5f fa8a 	uxtb.w	sl, sl
 8005d12:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005d16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d18:	d824      	bhi.n	8005d64 <_printf_float+0x178>
 8005d1a:	3901      	subs	r1, #1
 8005d1c:	4652      	mov	r2, sl
 8005d1e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005d22:	9109      	str	r1, [sp, #36]	; 0x24
 8005d24:	f7ff ff2e 	bl	8005b84 <__exponent>
 8005d28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d2a:	1813      	adds	r3, r2, r0
 8005d2c:	2a01      	cmp	r2, #1
 8005d2e:	4681      	mov	r9, r0
 8005d30:	6123      	str	r3, [r4, #16]
 8005d32:	dc02      	bgt.n	8005d3a <_printf_float+0x14e>
 8005d34:	6822      	ldr	r2, [r4, #0]
 8005d36:	07d1      	lsls	r1, r2, #31
 8005d38:	d501      	bpl.n	8005d3e <_printf_float+0x152>
 8005d3a:	3301      	adds	r3, #1
 8005d3c:	6123      	str	r3, [r4, #16]
 8005d3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d0a5      	beq.n	8005c92 <_printf_float+0xa6>
 8005d46:	232d      	movs	r3, #45	; 0x2d
 8005d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d4c:	e7a1      	b.n	8005c92 <_printf_float+0xa6>
 8005d4e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005d52:	f000 8177 	beq.w	8006044 <_printf_float+0x458>
 8005d56:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8005d5a:	d1bb      	bne.n	8005cd4 <_printf_float+0xe8>
 8005d5c:	2900      	cmp	r1, #0
 8005d5e:	d1b9      	bne.n	8005cd4 <_printf_float+0xe8>
 8005d60:	2301      	movs	r3, #1
 8005d62:	e7b6      	b.n	8005cd2 <_printf_float+0xe6>
 8005d64:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005d68:	d119      	bne.n	8005d9e <_printf_float+0x1b2>
 8005d6a:	2900      	cmp	r1, #0
 8005d6c:	6863      	ldr	r3, [r4, #4]
 8005d6e:	dd0c      	ble.n	8005d8a <_printf_float+0x19e>
 8005d70:	6121      	str	r1, [r4, #16]
 8005d72:	b913      	cbnz	r3, 8005d7a <_printf_float+0x18e>
 8005d74:	6822      	ldr	r2, [r4, #0]
 8005d76:	07d2      	lsls	r2, r2, #31
 8005d78:	d502      	bpl.n	8005d80 <_printf_float+0x194>
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	440b      	add	r3, r1
 8005d7e:	6123      	str	r3, [r4, #16]
 8005d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d82:	65a3      	str	r3, [r4, #88]	; 0x58
 8005d84:	f04f 0900 	mov.w	r9, #0
 8005d88:	e7d9      	b.n	8005d3e <_printf_float+0x152>
 8005d8a:	b913      	cbnz	r3, 8005d92 <_printf_float+0x1a6>
 8005d8c:	6822      	ldr	r2, [r4, #0]
 8005d8e:	07d0      	lsls	r0, r2, #31
 8005d90:	d501      	bpl.n	8005d96 <_printf_float+0x1aa>
 8005d92:	3302      	adds	r3, #2
 8005d94:	e7f3      	b.n	8005d7e <_printf_float+0x192>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e7f1      	b.n	8005d7e <_printf_float+0x192>
 8005d9a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8005d9e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005da2:	4293      	cmp	r3, r2
 8005da4:	db05      	blt.n	8005db2 <_printf_float+0x1c6>
 8005da6:	6822      	ldr	r2, [r4, #0]
 8005da8:	6123      	str	r3, [r4, #16]
 8005daa:	07d1      	lsls	r1, r2, #31
 8005dac:	d5e8      	bpl.n	8005d80 <_printf_float+0x194>
 8005dae:	3301      	adds	r3, #1
 8005db0:	e7e5      	b.n	8005d7e <_printf_float+0x192>
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bfd4      	ite	le
 8005db6:	f1c3 0302 	rsble	r3, r3, #2
 8005dba:	2301      	movgt	r3, #1
 8005dbc:	4413      	add	r3, r2
 8005dbe:	e7de      	b.n	8005d7e <_printf_float+0x192>
 8005dc0:	6823      	ldr	r3, [r4, #0]
 8005dc2:	055a      	lsls	r2, r3, #21
 8005dc4:	d407      	bmi.n	8005dd6 <_printf_float+0x1ea>
 8005dc6:	6923      	ldr	r3, [r4, #16]
 8005dc8:	4642      	mov	r2, r8
 8005dca:	4631      	mov	r1, r6
 8005dcc:	4628      	mov	r0, r5
 8005dce:	47b8      	blx	r7
 8005dd0:	3001      	adds	r0, #1
 8005dd2:	d12b      	bne.n	8005e2c <_printf_float+0x240>
 8005dd4:	e767      	b.n	8005ca6 <_printf_float+0xba>
 8005dd6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005dda:	f240 80dc 	bls.w	8005f96 <_printf_float+0x3aa>
 8005dde:	2200      	movs	r2, #0
 8005de0:	2300      	movs	r3, #0
 8005de2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005de6:	f7fa fee7 	bl	8000bb8 <__aeabi_dcmpeq>
 8005dea:	2800      	cmp	r0, #0
 8005dec:	d033      	beq.n	8005e56 <_printf_float+0x26a>
 8005dee:	2301      	movs	r3, #1
 8005df0:	4a41      	ldr	r2, [pc, #260]	; (8005ef8 <_printf_float+0x30c>)
 8005df2:	4631      	mov	r1, r6
 8005df4:	4628      	mov	r0, r5
 8005df6:	47b8      	blx	r7
 8005df8:	3001      	adds	r0, #1
 8005dfa:	f43f af54 	beq.w	8005ca6 <_printf_float+0xba>
 8005dfe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005e02:	429a      	cmp	r2, r3
 8005e04:	db02      	blt.n	8005e0c <_printf_float+0x220>
 8005e06:	6823      	ldr	r3, [r4, #0]
 8005e08:	07d8      	lsls	r0, r3, #31
 8005e0a:	d50f      	bpl.n	8005e2c <_printf_float+0x240>
 8005e0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e10:	4631      	mov	r1, r6
 8005e12:	4628      	mov	r0, r5
 8005e14:	47b8      	blx	r7
 8005e16:	3001      	adds	r0, #1
 8005e18:	f43f af45 	beq.w	8005ca6 <_printf_float+0xba>
 8005e1c:	f04f 0800 	mov.w	r8, #0
 8005e20:	f104 091a 	add.w	r9, r4, #26
 8005e24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e26:	3b01      	subs	r3, #1
 8005e28:	4543      	cmp	r3, r8
 8005e2a:	dc09      	bgt.n	8005e40 <_printf_float+0x254>
 8005e2c:	6823      	ldr	r3, [r4, #0]
 8005e2e:	079b      	lsls	r3, r3, #30
 8005e30:	f100 8103 	bmi.w	800603a <_printf_float+0x44e>
 8005e34:	68e0      	ldr	r0, [r4, #12]
 8005e36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e38:	4298      	cmp	r0, r3
 8005e3a:	bfb8      	it	lt
 8005e3c:	4618      	movlt	r0, r3
 8005e3e:	e734      	b.n	8005caa <_printf_float+0xbe>
 8005e40:	2301      	movs	r3, #1
 8005e42:	464a      	mov	r2, r9
 8005e44:	4631      	mov	r1, r6
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f af2b 	beq.w	8005ca6 <_printf_float+0xba>
 8005e50:	f108 0801 	add.w	r8, r8, #1
 8005e54:	e7e6      	b.n	8005e24 <_printf_float+0x238>
 8005e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	dc2b      	bgt.n	8005eb4 <_printf_float+0x2c8>
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	4a26      	ldr	r2, [pc, #152]	; (8005ef8 <_printf_float+0x30c>)
 8005e60:	4631      	mov	r1, r6
 8005e62:	4628      	mov	r0, r5
 8005e64:	47b8      	blx	r7
 8005e66:	3001      	adds	r0, #1
 8005e68:	f43f af1d 	beq.w	8005ca6 <_printf_float+0xba>
 8005e6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e6e:	b923      	cbnz	r3, 8005e7a <_printf_float+0x28e>
 8005e70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e72:	b913      	cbnz	r3, 8005e7a <_printf_float+0x28e>
 8005e74:	6823      	ldr	r3, [r4, #0]
 8005e76:	07d9      	lsls	r1, r3, #31
 8005e78:	d5d8      	bpl.n	8005e2c <_printf_float+0x240>
 8005e7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f af0e 	beq.w	8005ca6 <_printf_float+0xba>
 8005e8a:	f04f 0900 	mov.w	r9, #0
 8005e8e:	f104 0a1a 	add.w	sl, r4, #26
 8005e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e94:	425b      	negs	r3, r3
 8005e96:	454b      	cmp	r3, r9
 8005e98:	dc01      	bgt.n	8005e9e <_printf_float+0x2b2>
 8005e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e9c:	e794      	b.n	8005dc8 <_printf_float+0x1dc>
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	4652      	mov	r2, sl
 8005ea2:	4631      	mov	r1, r6
 8005ea4:	4628      	mov	r0, r5
 8005ea6:	47b8      	blx	r7
 8005ea8:	3001      	adds	r0, #1
 8005eaa:	f43f aefc 	beq.w	8005ca6 <_printf_float+0xba>
 8005eae:	f109 0901 	add.w	r9, r9, #1
 8005eb2:	e7ee      	b.n	8005e92 <_printf_float+0x2a6>
 8005eb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005eb6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	bfa8      	it	ge
 8005ebc:	461a      	movge	r2, r3
 8005ebe:	2a00      	cmp	r2, #0
 8005ec0:	4691      	mov	r9, r2
 8005ec2:	dd07      	ble.n	8005ed4 <_printf_float+0x2e8>
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	4631      	mov	r1, r6
 8005ec8:	4642      	mov	r2, r8
 8005eca:	4628      	mov	r0, r5
 8005ecc:	47b8      	blx	r7
 8005ece:	3001      	adds	r0, #1
 8005ed0:	f43f aee9 	beq.w	8005ca6 <_printf_float+0xba>
 8005ed4:	f104 031a 	add.w	r3, r4, #26
 8005ed8:	f04f 0b00 	mov.w	fp, #0
 8005edc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ee0:	9306      	str	r3, [sp, #24]
 8005ee2:	e015      	b.n	8005f10 <_printf_float+0x324>
 8005ee4:	7fefffff 	.word	0x7fefffff
 8005ee8:	08009840 	.word	0x08009840
 8005eec:	0800983c 	.word	0x0800983c
 8005ef0:	08009848 	.word	0x08009848
 8005ef4:	08009844 	.word	0x08009844
 8005ef8:	0800984c 	.word	0x0800984c
 8005efc:	2301      	movs	r3, #1
 8005efe:	9a06      	ldr	r2, [sp, #24]
 8005f00:	4631      	mov	r1, r6
 8005f02:	4628      	mov	r0, r5
 8005f04:	47b8      	blx	r7
 8005f06:	3001      	adds	r0, #1
 8005f08:	f43f aecd 	beq.w	8005ca6 <_printf_float+0xba>
 8005f0c:	f10b 0b01 	add.w	fp, fp, #1
 8005f10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005f14:	ebaa 0309 	sub.w	r3, sl, r9
 8005f18:	455b      	cmp	r3, fp
 8005f1a:	dcef      	bgt.n	8005efc <_printf_float+0x310>
 8005f1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f20:	429a      	cmp	r2, r3
 8005f22:	44d0      	add	r8, sl
 8005f24:	db15      	blt.n	8005f52 <_printf_float+0x366>
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	07da      	lsls	r2, r3, #31
 8005f2a:	d412      	bmi.n	8005f52 <_printf_float+0x366>
 8005f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f30:	eba3 020a 	sub.w	r2, r3, sl
 8005f34:	eba3 0a01 	sub.w	sl, r3, r1
 8005f38:	4592      	cmp	sl, r2
 8005f3a:	bfa8      	it	ge
 8005f3c:	4692      	movge	sl, r2
 8005f3e:	f1ba 0f00 	cmp.w	sl, #0
 8005f42:	dc0e      	bgt.n	8005f62 <_printf_float+0x376>
 8005f44:	f04f 0800 	mov.w	r8, #0
 8005f48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f4c:	f104 091a 	add.w	r9, r4, #26
 8005f50:	e019      	b.n	8005f86 <_printf_float+0x39a>
 8005f52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f56:	4631      	mov	r1, r6
 8005f58:	4628      	mov	r0, r5
 8005f5a:	47b8      	blx	r7
 8005f5c:	3001      	adds	r0, #1
 8005f5e:	d1e5      	bne.n	8005f2c <_printf_float+0x340>
 8005f60:	e6a1      	b.n	8005ca6 <_printf_float+0xba>
 8005f62:	4653      	mov	r3, sl
 8005f64:	4642      	mov	r2, r8
 8005f66:	4631      	mov	r1, r6
 8005f68:	4628      	mov	r0, r5
 8005f6a:	47b8      	blx	r7
 8005f6c:	3001      	adds	r0, #1
 8005f6e:	d1e9      	bne.n	8005f44 <_printf_float+0x358>
 8005f70:	e699      	b.n	8005ca6 <_printf_float+0xba>
 8005f72:	2301      	movs	r3, #1
 8005f74:	464a      	mov	r2, r9
 8005f76:	4631      	mov	r1, r6
 8005f78:	4628      	mov	r0, r5
 8005f7a:	47b8      	blx	r7
 8005f7c:	3001      	adds	r0, #1
 8005f7e:	f43f ae92 	beq.w	8005ca6 <_printf_float+0xba>
 8005f82:	f108 0801 	add.w	r8, r8, #1
 8005f86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005f8a:	1a9b      	subs	r3, r3, r2
 8005f8c:	eba3 030a 	sub.w	r3, r3, sl
 8005f90:	4543      	cmp	r3, r8
 8005f92:	dcee      	bgt.n	8005f72 <_printf_float+0x386>
 8005f94:	e74a      	b.n	8005e2c <_printf_float+0x240>
 8005f96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f98:	2a01      	cmp	r2, #1
 8005f9a:	dc01      	bgt.n	8005fa0 <_printf_float+0x3b4>
 8005f9c:	07db      	lsls	r3, r3, #31
 8005f9e:	d53a      	bpl.n	8006016 <_printf_float+0x42a>
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	4642      	mov	r2, r8
 8005fa4:	4631      	mov	r1, r6
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	47b8      	blx	r7
 8005faa:	3001      	adds	r0, #1
 8005fac:	f43f ae7b 	beq.w	8005ca6 <_printf_float+0xba>
 8005fb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005fb4:	4631      	mov	r1, r6
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	47b8      	blx	r7
 8005fba:	3001      	adds	r0, #1
 8005fbc:	f108 0801 	add.w	r8, r8, #1
 8005fc0:	f43f ae71 	beq.w	8005ca6 <_printf_float+0xba>
 8005fc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f103 3aff 	add.w	sl, r3, #4294967295
 8005fcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f7fa fdf1 	bl	8000bb8 <__aeabi_dcmpeq>
 8005fd6:	b9c8      	cbnz	r0, 800600c <_printf_float+0x420>
 8005fd8:	4653      	mov	r3, sl
 8005fda:	4642      	mov	r2, r8
 8005fdc:	4631      	mov	r1, r6
 8005fde:	4628      	mov	r0, r5
 8005fe0:	47b8      	blx	r7
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d10e      	bne.n	8006004 <_printf_float+0x418>
 8005fe6:	e65e      	b.n	8005ca6 <_printf_float+0xba>
 8005fe8:	2301      	movs	r3, #1
 8005fea:	4652      	mov	r2, sl
 8005fec:	4631      	mov	r1, r6
 8005fee:	4628      	mov	r0, r5
 8005ff0:	47b8      	blx	r7
 8005ff2:	3001      	adds	r0, #1
 8005ff4:	f43f ae57 	beq.w	8005ca6 <_printf_float+0xba>
 8005ff8:	f108 0801 	add.w	r8, r8, #1
 8005ffc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ffe:	3b01      	subs	r3, #1
 8006000:	4543      	cmp	r3, r8
 8006002:	dcf1      	bgt.n	8005fe8 <_printf_float+0x3fc>
 8006004:	464b      	mov	r3, r9
 8006006:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800600a:	e6de      	b.n	8005dca <_printf_float+0x1de>
 800600c:	f04f 0800 	mov.w	r8, #0
 8006010:	f104 0a1a 	add.w	sl, r4, #26
 8006014:	e7f2      	b.n	8005ffc <_printf_float+0x410>
 8006016:	2301      	movs	r3, #1
 8006018:	e7df      	b.n	8005fda <_printf_float+0x3ee>
 800601a:	2301      	movs	r3, #1
 800601c:	464a      	mov	r2, r9
 800601e:	4631      	mov	r1, r6
 8006020:	4628      	mov	r0, r5
 8006022:	47b8      	blx	r7
 8006024:	3001      	adds	r0, #1
 8006026:	f43f ae3e 	beq.w	8005ca6 <_printf_float+0xba>
 800602a:	f108 0801 	add.w	r8, r8, #1
 800602e:	68e3      	ldr	r3, [r4, #12]
 8006030:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	4543      	cmp	r3, r8
 8006036:	dcf0      	bgt.n	800601a <_printf_float+0x42e>
 8006038:	e6fc      	b.n	8005e34 <_printf_float+0x248>
 800603a:	f04f 0800 	mov.w	r8, #0
 800603e:	f104 0919 	add.w	r9, r4, #25
 8006042:	e7f4      	b.n	800602e <_printf_float+0x442>
 8006044:	2900      	cmp	r1, #0
 8006046:	f43f ae8b 	beq.w	8005d60 <_printf_float+0x174>
 800604a:	2300      	movs	r3, #0
 800604c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006050:	ab09      	add	r3, sp, #36	; 0x24
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	ec49 8b10 	vmov	d0, r8, r9
 8006058:	6022      	str	r2, [r4, #0]
 800605a:	f8cd a004 	str.w	sl, [sp, #4]
 800605e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006062:	4628      	mov	r0, r5
 8006064:	f7ff fd2d 	bl	8005ac2 <__cvt>
 8006068:	4680      	mov	r8, r0
 800606a:	e648      	b.n	8005cfe <_printf_float+0x112>

0800606c <_printf_common>:
 800606c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006070:	4691      	mov	r9, r2
 8006072:	461f      	mov	r7, r3
 8006074:	688a      	ldr	r2, [r1, #8]
 8006076:	690b      	ldr	r3, [r1, #16]
 8006078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800607c:	4293      	cmp	r3, r2
 800607e:	bfb8      	it	lt
 8006080:	4613      	movlt	r3, r2
 8006082:	f8c9 3000 	str.w	r3, [r9]
 8006086:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800608a:	4606      	mov	r6, r0
 800608c:	460c      	mov	r4, r1
 800608e:	b112      	cbz	r2, 8006096 <_printf_common+0x2a>
 8006090:	3301      	adds	r3, #1
 8006092:	f8c9 3000 	str.w	r3, [r9]
 8006096:	6823      	ldr	r3, [r4, #0]
 8006098:	0699      	lsls	r1, r3, #26
 800609a:	bf42      	ittt	mi
 800609c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80060a0:	3302      	addmi	r3, #2
 80060a2:	f8c9 3000 	strmi.w	r3, [r9]
 80060a6:	6825      	ldr	r5, [r4, #0]
 80060a8:	f015 0506 	ands.w	r5, r5, #6
 80060ac:	d107      	bne.n	80060be <_printf_common+0x52>
 80060ae:	f104 0a19 	add.w	sl, r4, #25
 80060b2:	68e3      	ldr	r3, [r4, #12]
 80060b4:	f8d9 2000 	ldr.w	r2, [r9]
 80060b8:	1a9b      	subs	r3, r3, r2
 80060ba:	42ab      	cmp	r3, r5
 80060bc:	dc28      	bgt.n	8006110 <_printf_common+0xa4>
 80060be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80060c2:	6822      	ldr	r2, [r4, #0]
 80060c4:	3300      	adds	r3, #0
 80060c6:	bf18      	it	ne
 80060c8:	2301      	movne	r3, #1
 80060ca:	0692      	lsls	r2, r2, #26
 80060cc:	d42d      	bmi.n	800612a <_printf_common+0xbe>
 80060ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80060d2:	4639      	mov	r1, r7
 80060d4:	4630      	mov	r0, r6
 80060d6:	47c0      	blx	r8
 80060d8:	3001      	adds	r0, #1
 80060da:	d020      	beq.n	800611e <_printf_common+0xb2>
 80060dc:	6823      	ldr	r3, [r4, #0]
 80060de:	68e5      	ldr	r5, [r4, #12]
 80060e0:	f8d9 2000 	ldr.w	r2, [r9]
 80060e4:	f003 0306 	and.w	r3, r3, #6
 80060e8:	2b04      	cmp	r3, #4
 80060ea:	bf08      	it	eq
 80060ec:	1aad      	subeq	r5, r5, r2
 80060ee:	68a3      	ldr	r3, [r4, #8]
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	bf0c      	ite	eq
 80060f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80060f8:	2500      	movne	r5, #0
 80060fa:	4293      	cmp	r3, r2
 80060fc:	bfc4      	itt	gt
 80060fe:	1a9b      	subgt	r3, r3, r2
 8006100:	18ed      	addgt	r5, r5, r3
 8006102:	f04f 0900 	mov.w	r9, #0
 8006106:	341a      	adds	r4, #26
 8006108:	454d      	cmp	r5, r9
 800610a:	d11a      	bne.n	8006142 <_printf_common+0xd6>
 800610c:	2000      	movs	r0, #0
 800610e:	e008      	b.n	8006122 <_printf_common+0xb6>
 8006110:	2301      	movs	r3, #1
 8006112:	4652      	mov	r2, sl
 8006114:	4639      	mov	r1, r7
 8006116:	4630      	mov	r0, r6
 8006118:	47c0      	blx	r8
 800611a:	3001      	adds	r0, #1
 800611c:	d103      	bne.n	8006126 <_printf_common+0xba>
 800611e:	f04f 30ff 	mov.w	r0, #4294967295
 8006122:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006126:	3501      	adds	r5, #1
 8006128:	e7c3      	b.n	80060b2 <_printf_common+0x46>
 800612a:	18e1      	adds	r1, r4, r3
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	2030      	movs	r0, #48	; 0x30
 8006130:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006134:	4422      	add	r2, r4
 8006136:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800613a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800613e:	3302      	adds	r3, #2
 8006140:	e7c5      	b.n	80060ce <_printf_common+0x62>
 8006142:	2301      	movs	r3, #1
 8006144:	4622      	mov	r2, r4
 8006146:	4639      	mov	r1, r7
 8006148:	4630      	mov	r0, r6
 800614a:	47c0      	blx	r8
 800614c:	3001      	adds	r0, #1
 800614e:	d0e6      	beq.n	800611e <_printf_common+0xb2>
 8006150:	f109 0901 	add.w	r9, r9, #1
 8006154:	e7d8      	b.n	8006108 <_printf_common+0x9c>
	...

08006158 <_printf_i>:
 8006158:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800615c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006160:	460c      	mov	r4, r1
 8006162:	7e09      	ldrb	r1, [r1, #24]
 8006164:	b085      	sub	sp, #20
 8006166:	296e      	cmp	r1, #110	; 0x6e
 8006168:	4617      	mov	r7, r2
 800616a:	4606      	mov	r6, r0
 800616c:	4698      	mov	r8, r3
 800616e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006170:	f000 80b3 	beq.w	80062da <_printf_i+0x182>
 8006174:	d822      	bhi.n	80061bc <_printf_i+0x64>
 8006176:	2963      	cmp	r1, #99	; 0x63
 8006178:	d036      	beq.n	80061e8 <_printf_i+0x90>
 800617a:	d80a      	bhi.n	8006192 <_printf_i+0x3a>
 800617c:	2900      	cmp	r1, #0
 800617e:	f000 80b9 	beq.w	80062f4 <_printf_i+0x19c>
 8006182:	2958      	cmp	r1, #88	; 0x58
 8006184:	f000 8083 	beq.w	800628e <_printf_i+0x136>
 8006188:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800618c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006190:	e032      	b.n	80061f8 <_printf_i+0xa0>
 8006192:	2964      	cmp	r1, #100	; 0x64
 8006194:	d001      	beq.n	800619a <_printf_i+0x42>
 8006196:	2969      	cmp	r1, #105	; 0x69
 8006198:	d1f6      	bne.n	8006188 <_printf_i+0x30>
 800619a:	6820      	ldr	r0, [r4, #0]
 800619c:	6813      	ldr	r3, [r2, #0]
 800619e:	0605      	lsls	r5, r0, #24
 80061a0:	f103 0104 	add.w	r1, r3, #4
 80061a4:	d52a      	bpl.n	80061fc <_printf_i+0xa4>
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6011      	str	r1, [r2, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	da03      	bge.n	80061b6 <_printf_i+0x5e>
 80061ae:	222d      	movs	r2, #45	; 0x2d
 80061b0:	425b      	negs	r3, r3
 80061b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80061b6:	486f      	ldr	r0, [pc, #444]	; (8006374 <_printf_i+0x21c>)
 80061b8:	220a      	movs	r2, #10
 80061ba:	e039      	b.n	8006230 <_printf_i+0xd8>
 80061bc:	2973      	cmp	r1, #115	; 0x73
 80061be:	f000 809d 	beq.w	80062fc <_printf_i+0x1a4>
 80061c2:	d808      	bhi.n	80061d6 <_printf_i+0x7e>
 80061c4:	296f      	cmp	r1, #111	; 0x6f
 80061c6:	d020      	beq.n	800620a <_printf_i+0xb2>
 80061c8:	2970      	cmp	r1, #112	; 0x70
 80061ca:	d1dd      	bne.n	8006188 <_printf_i+0x30>
 80061cc:	6823      	ldr	r3, [r4, #0]
 80061ce:	f043 0320 	orr.w	r3, r3, #32
 80061d2:	6023      	str	r3, [r4, #0]
 80061d4:	e003      	b.n	80061de <_printf_i+0x86>
 80061d6:	2975      	cmp	r1, #117	; 0x75
 80061d8:	d017      	beq.n	800620a <_printf_i+0xb2>
 80061da:	2978      	cmp	r1, #120	; 0x78
 80061dc:	d1d4      	bne.n	8006188 <_printf_i+0x30>
 80061de:	2378      	movs	r3, #120	; 0x78
 80061e0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80061e4:	4864      	ldr	r0, [pc, #400]	; (8006378 <_printf_i+0x220>)
 80061e6:	e055      	b.n	8006294 <_printf_i+0x13c>
 80061e8:	6813      	ldr	r3, [r2, #0]
 80061ea:	1d19      	adds	r1, r3, #4
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	6011      	str	r1, [r2, #0]
 80061f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80061f8:	2301      	movs	r3, #1
 80061fa:	e08c      	b.n	8006316 <_printf_i+0x1be>
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	6011      	str	r1, [r2, #0]
 8006200:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006204:	bf18      	it	ne
 8006206:	b21b      	sxthne	r3, r3
 8006208:	e7cf      	b.n	80061aa <_printf_i+0x52>
 800620a:	6813      	ldr	r3, [r2, #0]
 800620c:	6825      	ldr	r5, [r4, #0]
 800620e:	1d18      	adds	r0, r3, #4
 8006210:	6010      	str	r0, [r2, #0]
 8006212:	0628      	lsls	r0, r5, #24
 8006214:	d501      	bpl.n	800621a <_printf_i+0xc2>
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	e002      	b.n	8006220 <_printf_i+0xc8>
 800621a:	0668      	lsls	r0, r5, #25
 800621c:	d5fb      	bpl.n	8006216 <_printf_i+0xbe>
 800621e:	881b      	ldrh	r3, [r3, #0]
 8006220:	4854      	ldr	r0, [pc, #336]	; (8006374 <_printf_i+0x21c>)
 8006222:	296f      	cmp	r1, #111	; 0x6f
 8006224:	bf14      	ite	ne
 8006226:	220a      	movne	r2, #10
 8006228:	2208      	moveq	r2, #8
 800622a:	2100      	movs	r1, #0
 800622c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006230:	6865      	ldr	r5, [r4, #4]
 8006232:	60a5      	str	r5, [r4, #8]
 8006234:	2d00      	cmp	r5, #0
 8006236:	f2c0 8095 	blt.w	8006364 <_printf_i+0x20c>
 800623a:	6821      	ldr	r1, [r4, #0]
 800623c:	f021 0104 	bic.w	r1, r1, #4
 8006240:	6021      	str	r1, [r4, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d13d      	bne.n	80062c2 <_printf_i+0x16a>
 8006246:	2d00      	cmp	r5, #0
 8006248:	f040 808e 	bne.w	8006368 <_printf_i+0x210>
 800624c:	4665      	mov	r5, ip
 800624e:	2a08      	cmp	r2, #8
 8006250:	d10b      	bne.n	800626a <_printf_i+0x112>
 8006252:	6823      	ldr	r3, [r4, #0]
 8006254:	07db      	lsls	r3, r3, #31
 8006256:	d508      	bpl.n	800626a <_printf_i+0x112>
 8006258:	6923      	ldr	r3, [r4, #16]
 800625a:	6862      	ldr	r2, [r4, #4]
 800625c:	429a      	cmp	r2, r3
 800625e:	bfde      	ittt	le
 8006260:	2330      	movle	r3, #48	; 0x30
 8006262:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006266:	f105 35ff 	addle.w	r5, r5, #4294967295
 800626a:	ebac 0305 	sub.w	r3, ip, r5
 800626e:	6123      	str	r3, [r4, #16]
 8006270:	f8cd 8000 	str.w	r8, [sp]
 8006274:	463b      	mov	r3, r7
 8006276:	aa03      	add	r2, sp, #12
 8006278:	4621      	mov	r1, r4
 800627a:	4630      	mov	r0, r6
 800627c:	f7ff fef6 	bl	800606c <_printf_common>
 8006280:	3001      	adds	r0, #1
 8006282:	d14d      	bne.n	8006320 <_printf_i+0x1c8>
 8006284:	f04f 30ff 	mov.w	r0, #4294967295
 8006288:	b005      	add	sp, #20
 800628a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800628e:	4839      	ldr	r0, [pc, #228]	; (8006374 <_printf_i+0x21c>)
 8006290:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006294:	6813      	ldr	r3, [r2, #0]
 8006296:	6821      	ldr	r1, [r4, #0]
 8006298:	1d1d      	adds	r5, r3, #4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6015      	str	r5, [r2, #0]
 800629e:	060a      	lsls	r2, r1, #24
 80062a0:	d50b      	bpl.n	80062ba <_printf_i+0x162>
 80062a2:	07ca      	lsls	r2, r1, #31
 80062a4:	bf44      	itt	mi
 80062a6:	f041 0120 	orrmi.w	r1, r1, #32
 80062aa:	6021      	strmi	r1, [r4, #0]
 80062ac:	b91b      	cbnz	r3, 80062b6 <_printf_i+0x15e>
 80062ae:	6822      	ldr	r2, [r4, #0]
 80062b0:	f022 0220 	bic.w	r2, r2, #32
 80062b4:	6022      	str	r2, [r4, #0]
 80062b6:	2210      	movs	r2, #16
 80062b8:	e7b7      	b.n	800622a <_printf_i+0xd2>
 80062ba:	064d      	lsls	r5, r1, #25
 80062bc:	bf48      	it	mi
 80062be:	b29b      	uxthmi	r3, r3
 80062c0:	e7ef      	b.n	80062a2 <_printf_i+0x14a>
 80062c2:	4665      	mov	r5, ip
 80062c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80062c8:	fb02 3311 	mls	r3, r2, r1, r3
 80062cc:	5cc3      	ldrb	r3, [r0, r3]
 80062ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80062d2:	460b      	mov	r3, r1
 80062d4:	2900      	cmp	r1, #0
 80062d6:	d1f5      	bne.n	80062c4 <_printf_i+0x16c>
 80062d8:	e7b9      	b.n	800624e <_printf_i+0xf6>
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	6825      	ldr	r5, [r4, #0]
 80062de:	6961      	ldr	r1, [r4, #20]
 80062e0:	1d18      	adds	r0, r3, #4
 80062e2:	6010      	str	r0, [r2, #0]
 80062e4:	0628      	lsls	r0, r5, #24
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	d501      	bpl.n	80062ee <_printf_i+0x196>
 80062ea:	6019      	str	r1, [r3, #0]
 80062ec:	e002      	b.n	80062f4 <_printf_i+0x19c>
 80062ee:	066a      	lsls	r2, r5, #25
 80062f0:	d5fb      	bpl.n	80062ea <_printf_i+0x192>
 80062f2:	8019      	strh	r1, [r3, #0]
 80062f4:	2300      	movs	r3, #0
 80062f6:	6123      	str	r3, [r4, #16]
 80062f8:	4665      	mov	r5, ip
 80062fa:	e7b9      	b.n	8006270 <_printf_i+0x118>
 80062fc:	6813      	ldr	r3, [r2, #0]
 80062fe:	1d19      	adds	r1, r3, #4
 8006300:	6011      	str	r1, [r2, #0]
 8006302:	681d      	ldr	r5, [r3, #0]
 8006304:	6862      	ldr	r2, [r4, #4]
 8006306:	2100      	movs	r1, #0
 8006308:	4628      	mov	r0, r5
 800630a:	f7f9 ffe1 	bl	80002d0 <memchr>
 800630e:	b108      	cbz	r0, 8006314 <_printf_i+0x1bc>
 8006310:	1b40      	subs	r0, r0, r5
 8006312:	6060      	str	r0, [r4, #4]
 8006314:	6863      	ldr	r3, [r4, #4]
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	2300      	movs	r3, #0
 800631a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800631e:	e7a7      	b.n	8006270 <_printf_i+0x118>
 8006320:	6923      	ldr	r3, [r4, #16]
 8006322:	462a      	mov	r2, r5
 8006324:	4639      	mov	r1, r7
 8006326:	4630      	mov	r0, r6
 8006328:	47c0      	blx	r8
 800632a:	3001      	adds	r0, #1
 800632c:	d0aa      	beq.n	8006284 <_printf_i+0x12c>
 800632e:	6823      	ldr	r3, [r4, #0]
 8006330:	079b      	lsls	r3, r3, #30
 8006332:	d413      	bmi.n	800635c <_printf_i+0x204>
 8006334:	68e0      	ldr	r0, [r4, #12]
 8006336:	9b03      	ldr	r3, [sp, #12]
 8006338:	4298      	cmp	r0, r3
 800633a:	bfb8      	it	lt
 800633c:	4618      	movlt	r0, r3
 800633e:	e7a3      	b.n	8006288 <_printf_i+0x130>
 8006340:	2301      	movs	r3, #1
 8006342:	464a      	mov	r2, r9
 8006344:	4639      	mov	r1, r7
 8006346:	4630      	mov	r0, r6
 8006348:	47c0      	blx	r8
 800634a:	3001      	adds	r0, #1
 800634c:	d09a      	beq.n	8006284 <_printf_i+0x12c>
 800634e:	3501      	adds	r5, #1
 8006350:	68e3      	ldr	r3, [r4, #12]
 8006352:	9a03      	ldr	r2, [sp, #12]
 8006354:	1a9b      	subs	r3, r3, r2
 8006356:	42ab      	cmp	r3, r5
 8006358:	dcf2      	bgt.n	8006340 <_printf_i+0x1e8>
 800635a:	e7eb      	b.n	8006334 <_printf_i+0x1dc>
 800635c:	2500      	movs	r5, #0
 800635e:	f104 0919 	add.w	r9, r4, #25
 8006362:	e7f5      	b.n	8006350 <_printf_i+0x1f8>
 8006364:	2b00      	cmp	r3, #0
 8006366:	d1ac      	bne.n	80062c2 <_printf_i+0x16a>
 8006368:	7803      	ldrb	r3, [r0, #0]
 800636a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800636e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006372:	e76c      	b.n	800624e <_printf_i+0xf6>
 8006374:	0800984e 	.word	0x0800984e
 8006378:	0800985f 	.word	0x0800985f

0800637c <_scanf_float>:
 800637c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006380:	469a      	mov	sl, r3
 8006382:	688b      	ldr	r3, [r1, #8]
 8006384:	4616      	mov	r6, r2
 8006386:	1e5a      	subs	r2, r3, #1
 8006388:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800638c:	b087      	sub	sp, #28
 800638e:	bf83      	ittte	hi
 8006390:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006394:	189b      	addhi	r3, r3, r2
 8006396:	9301      	strhi	r3, [sp, #4]
 8006398:	2300      	movls	r3, #0
 800639a:	bf86      	itte	hi
 800639c:	f240 135d 	movwhi	r3, #349	; 0x15d
 80063a0:	608b      	strhi	r3, [r1, #8]
 80063a2:	9301      	strls	r3, [sp, #4]
 80063a4:	680b      	ldr	r3, [r1, #0]
 80063a6:	4688      	mov	r8, r1
 80063a8:	f04f 0b00 	mov.w	fp, #0
 80063ac:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80063b0:	f848 3b1c 	str.w	r3, [r8], #28
 80063b4:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80063b8:	4607      	mov	r7, r0
 80063ba:	460c      	mov	r4, r1
 80063bc:	4645      	mov	r5, r8
 80063be:	465a      	mov	r2, fp
 80063c0:	46d9      	mov	r9, fp
 80063c2:	f8cd b008 	str.w	fp, [sp, #8]
 80063c6:	68a1      	ldr	r1, [r4, #8]
 80063c8:	b181      	cbz	r1, 80063ec <_scanf_float+0x70>
 80063ca:	6833      	ldr	r3, [r6, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b49      	cmp	r3, #73	; 0x49
 80063d0:	d071      	beq.n	80064b6 <_scanf_float+0x13a>
 80063d2:	d84d      	bhi.n	8006470 <_scanf_float+0xf4>
 80063d4:	2b39      	cmp	r3, #57	; 0x39
 80063d6:	d840      	bhi.n	800645a <_scanf_float+0xde>
 80063d8:	2b31      	cmp	r3, #49	; 0x31
 80063da:	f080 8088 	bcs.w	80064ee <_scanf_float+0x172>
 80063de:	2b2d      	cmp	r3, #45	; 0x2d
 80063e0:	f000 8090 	beq.w	8006504 <_scanf_float+0x188>
 80063e4:	d815      	bhi.n	8006412 <_scanf_float+0x96>
 80063e6:	2b2b      	cmp	r3, #43	; 0x2b
 80063e8:	f000 808c 	beq.w	8006504 <_scanf_float+0x188>
 80063ec:	f1b9 0f00 	cmp.w	r9, #0
 80063f0:	d003      	beq.n	80063fa <_scanf_float+0x7e>
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	3a01      	subs	r2, #1
 80063fc:	2a01      	cmp	r2, #1
 80063fe:	f200 80ea 	bhi.w	80065d6 <_scanf_float+0x25a>
 8006402:	4545      	cmp	r5, r8
 8006404:	f200 80dc 	bhi.w	80065c0 <_scanf_float+0x244>
 8006408:	2601      	movs	r6, #1
 800640a:	4630      	mov	r0, r6
 800640c:	b007      	add	sp, #28
 800640e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006412:	2b2e      	cmp	r3, #46	; 0x2e
 8006414:	f000 809f 	beq.w	8006556 <_scanf_float+0x1da>
 8006418:	2b30      	cmp	r3, #48	; 0x30
 800641a:	d1e7      	bne.n	80063ec <_scanf_float+0x70>
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006422:	d064      	beq.n	80064ee <_scanf_float+0x172>
 8006424:	9b01      	ldr	r3, [sp, #4]
 8006426:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 800642a:	6020      	str	r0, [r4, #0]
 800642c:	f109 0901 	add.w	r9, r9, #1
 8006430:	b11b      	cbz	r3, 800643a <_scanf_float+0xbe>
 8006432:	3b01      	subs	r3, #1
 8006434:	3101      	adds	r1, #1
 8006436:	9301      	str	r3, [sp, #4]
 8006438:	60a1      	str	r1, [r4, #8]
 800643a:	68a3      	ldr	r3, [r4, #8]
 800643c:	3b01      	subs	r3, #1
 800643e:	60a3      	str	r3, [r4, #8]
 8006440:	6923      	ldr	r3, [r4, #16]
 8006442:	3301      	adds	r3, #1
 8006444:	6123      	str	r3, [r4, #16]
 8006446:	6873      	ldr	r3, [r6, #4]
 8006448:	3b01      	subs	r3, #1
 800644a:	2b00      	cmp	r3, #0
 800644c:	6073      	str	r3, [r6, #4]
 800644e:	f340 80ac 	ble.w	80065aa <_scanf_float+0x22e>
 8006452:	6833      	ldr	r3, [r6, #0]
 8006454:	3301      	adds	r3, #1
 8006456:	6033      	str	r3, [r6, #0]
 8006458:	e7b5      	b.n	80063c6 <_scanf_float+0x4a>
 800645a:	2b45      	cmp	r3, #69	; 0x45
 800645c:	f000 8085 	beq.w	800656a <_scanf_float+0x1ee>
 8006460:	2b46      	cmp	r3, #70	; 0x46
 8006462:	d06a      	beq.n	800653a <_scanf_float+0x1be>
 8006464:	2b41      	cmp	r3, #65	; 0x41
 8006466:	d1c1      	bne.n	80063ec <_scanf_float+0x70>
 8006468:	2a01      	cmp	r2, #1
 800646a:	d1bf      	bne.n	80063ec <_scanf_float+0x70>
 800646c:	2202      	movs	r2, #2
 800646e:	e046      	b.n	80064fe <_scanf_float+0x182>
 8006470:	2b65      	cmp	r3, #101	; 0x65
 8006472:	d07a      	beq.n	800656a <_scanf_float+0x1ee>
 8006474:	d818      	bhi.n	80064a8 <_scanf_float+0x12c>
 8006476:	2b54      	cmp	r3, #84	; 0x54
 8006478:	d066      	beq.n	8006548 <_scanf_float+0x1cc>
 800647a:	d811      	bhi.n	80064a0 <_scanf_float+0x124>
 800647c:	2b4e      	cmp	r3, #78	; 0x4e
 800647e:	d1b5      	bne.n	80063ec <_scanf_float+0x70>
 8006480:	2a00      	cmp	r2, #0
 8006482:	d146      	bne.n	8006512 <_scanf_float+0x196>
 8006484:	f1b9 0f00 	cmp.w	r9, #0
 8006488:	d145      	bne.n	8006516 <_scanf_float+0x19a>
 800648a:	6821      	ldr	r1, [r4, #0]
 800648c:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006490:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006494:	d13f      	bne.n	8006516 <_scanf_float+0x19a>
 8006496:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800649a:	6021      	str	r1, [r4, #0]
 800649c:	2201      	movs	r2, #1
 800649e:	e02e      	b.n	80064fe <_scanf_float+0x182>
 80064a0:	2b59      	cmp	r3, #89	; 0x59
 80064a2:	d01e      	beq.n	80064e2 <_scanf_float+0x166>
 80064a4:	2b61      	cmp	r3, #97	; 0x61
 80064a6:	e7de      	b.n	8006466 <_scanf_float+0xea>
 80064a8:	2b6e      	cmp	r3, #110	; 0x6e
 80064aa:	d0e9      	beq.n	8006480 <_scanf_float+0x104>
 80064ac:	d815      	bhi.n	80064da <_scanf_float+0x15e>
 80064ae:	2b66      	cmp	r3, #102	; 0x66
 80064b0:	d043      	beq.n	800653a <_scanf_float+0x1be>
 80064b2:	2b69      	cmp	r3, #105	; 0x69
 80064b4:	d19a      	bne.n	80063ec <_scanf_float+0x70>
 80064b6:	f1bb 0f00 	cmp.w	fp, #0
 80064ba:	d138      	bne.n	800652e <_scanf_float+0x1b2>
 80064bc:	f1b9 0f00 	cmp.w	r9, #0
 80064c0:	d197      	bne.n	80063f2 <_scanf_float+0x76>
 80064c2:	6821      	ldr	r1, [r4, #0]
 80064c4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80064c8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80064cc:	d195      	bne.n	80063fa <_scanf_float+0x7e>
 80064ce:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80064d2:	6021      	str	r1, [r4, #0]
 80064d4:	f04f 0b01 	mov.w	fp, #1
 80064d8:	e011      	b.n	80064fe <_scanf_float+0x182>
 80064da:	2b74      	cmp	r3, #116	; 0x74
 80064dc:	d034      	beq.n	8006548 <_scanf_float+0x1cc>
 80064de:	2b79      	cmp	r3, #121	; 0x79
 80064e0:	d184      	bne.n	80063ec <_scanf_float+0x70>
 80064e2:	f1bb 0f07 	cmp.w	fp, #7
 80064e6:	d181      	bne.n	80063ec <_scanf_float+0x70>
 80064e8:	f04f 0b08 	mov.w	fp, #8
 80064ec:	e007      	b.n	80064fe <_scanf_float+0x182>
 80064ee:	eb12 0f0b 	cmn.w	r2, fp
 80064f2:	f47f af7b 	bne.w	80063ec <_scanf_float+0x70>
 80064f6:	6821      	ldr	r1, [r4, #0]
 80064f8:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 80064fc:	6021      	str	r1, [r4, #0]
 80064fe:	702b      	strb	r3, [r5, #0]
 8006500:	3501      	adds	r5, #1
 8006502:	e79a      	b.n	800643a <_scanf_float+0xbe>
 8006504:	6821      	ldr	r1, [r4, #0]
 8006506:	0608      	lsls	r0, r1, #24
 8006508:	f57f af70 	bpl.w	80063ec <_scanf_float+0x70>
 800650c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006510:	e7f4      	b.n	80064fc <_scanf_float+0x180>
 8006512:	2a02      	cmp	r2, #2
 8006514:	d047      	beq.n	80065a6 <_scanf_float+0x22a>
 8006516:	f1bb 0f01 	cmp.w	fp, #1
 800651a:	d003      	beq.n	8006524 <_scanf_float+0x1a8>
 800651c:	f1bb 0f04 	cmp.w	fp, #4
 8006520:	f47f af64 	bne.w	80063ec <_scanf_float+0x70>
 8006524:	f10b 0b01 	add.w	fp, fp, #1
 8006528:	fa5f fb8b 	uxtb.w	fp, fp
 800652c:	e7e7      	b.n	80064fe <_scanf_float+0x182>
 800652e:	f1bb 0f03 	cmp.w	fp, #3
 8006532:	d0f7      	beq.n	8006524 <_scanf_float+0x1a8>
 8006534:	f1bb 0f05 	cmp.w	fp, #5
 8006538:	e7f2      	b.n	8006520 <_scanf_float+0x1a4>
 800653a:	f1bb 0f02 	cmp.w	fp, #2
 800653e:	f47f af55 	bne.w	80063ec <_scanf_float+0x70>
 8006542:	f04f 0b03 	mov.w	fp, #3
 8006546:	e7da      	b.n	80064fe <_scanf_float+0x182>
 8006548:	f1bb 0f06 	cmp.w	fp, #6
 800654c:	f47f af4e 	bne.w	80063ec <_scanf_float+0x70>
 8006550:	f04f 0b07 	mov.w	fp, #7
 8006554:	e7d3      	b.n	80064fe <_scanf_float+0x182>
 8006556:	6821      	ldr	r1, [r4, #0]
 8006558:	0588      	lsls	r0, r1, #22
 800655a:	f57f af47 	bpl.w	80063ec <_scanf_float+0x70>
 800655e:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006562:	6021      	str	r1, [r4, #0]
 8006564:	f8cd 9008 	str.w	r9, [sp, #8]
 8006568:	e7c9      	b.n	80064fe <_scanf_float+0x182>
 800656a:	6821      	ldr	r1, [r4, #0]
 800656c:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006570:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006574:	d006      	beq.n	8006584 <_scanf_float+0x208>
 8006576:	0548      	lsls	r0, r1, #21
 8006578:	f57f af38 	bpl.w	80063ec <_scanf_float+0x70>
 800657c:	f1b9 0f00 	cmp.w	r9, #0
 8006580:	f43f af3b 	beq.w	80063fa <_scanf_float+0x7e>
 8006584:	0588      	lsls	r0, r1, #22
 8006586:	bf58      	it	pl
 8006588:	9802      	ldrpl	r0, [sp, #8]
 800658a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 800658e:	bf58      	it	pl
 8006590:	eba9 0000 	subpl.w	r0, r9, r0
 8006594:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006598:	bf58      	it	pl
 800659a:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 800659e:	6021      	str	r1, [r4, #0]
 80065a0:	f04f 0900 	mov.w	r9, #0
 80065a4:	e7ab      	b.n	80064fe <_scanf_float+0x182>
 80065a6:	2203      	movs	r2, #3
 80065a8:	e7a9      	b.n	80064fe <_scanf_float+0x182>
 80065aa:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80065ae:	9205      	str	r2, [sp, #20]
 80065b0:	4631      	mov	r1, r6
 80065b2:	4638      	mov	r0, r7
 80065b4:	4798      	blx	r3
 80065b6:	9a05      	ldr	r2, [sp, #20]
 80065b8:	2800      	cmp	r0, #0
 80065ba:	f43f af04 	beq.w	80063c6 <_scanf_float+0x4a>
 80065be:	e715      	b.n	80063ec <_scanf_float+0x70>
 80065c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80065c4:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80065c8:	4632      	mov	r2, r6
 80065ca:	4638      	mov	r0, r7
 80065cc:	4798      	blx	r3
 80065ce:	6923      	ldr	r3, [r4, #16]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	6123      	str	r3, [r4, #16]
 80065d4:	e715      	b.n	8006402 <_scanf_float+0x86>
 80065d6:	f10b 33ff 	add.w	r3, fp, #4294967295
 80065da:	2b06      	cmp	r3, #6
 80065dc:	d80a      	bhi.n	80065f4 <_scanf_float+0x278>
 80065de:	f1bb 0f02 	cmp.w	fp, #2
 80065e2:	d968      	bls.n	80066b6 <_scanf_float+0x33a>
 80065e4:	f1ab 0b03 	sub.w	fp, fp, #3
 80065e8:	fa5f fb8b 	uxtb.w	fp, fp
 80065ec:	eba5 0b0b 	sub.w	fp, r5, fp
 80065f0:	455d      	cmp	r5, fp
 80065f2:	d14b      	bne.n	800668c <_scanf_float+0x310>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	05da      	lsls	r2, r3, #23
 80065f8:	d51f      	bpl.n	800663a <_scanf_float+0x2be>
 80065fa:	055b      	lsls	r3, r3, #21
 80065fc:	d468      	bmi.n	80066d0 <_scanf_float+0x354>
 80065fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006602:	6923      	ldr	r3, [r4, #16]
 8006604:	2965      	cmp	r1, #101	; 0x65
 8006606:	f103 33ff 	add.w	r3, r3, #4294967295
 800660a:	f105 3bff 	add.w	fp, r5, #4294967295
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	d00d      	beq.n	800662e <_scanf_float+0x2b2>
 8006612:	2945      	cmp	r1, #69	; 0x45
 8006614:	d00b      	beq.n	800662e <_scanf_float+0x2b2>
 8006616:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800661a:	4632      	mov	r2, r6
 800661c:	4638      	mov	r0, r7
 800661e:	4798      	blx	r3
 8006620:	6923      	ldr	r3, [r4, #16]
 8006622:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006626:	3b01      	subs	r3, #1
 8006628:	f1a5 0b02 	sub.w	fp, r5, #2
 800662c:	6123      	str	r3, [r4, #16]
 800662e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006632:	4632      	mov	r2, r6
 8006634:	4638      	mov	r0, r7
 8006636:	4798      	blx	r3
 8006638:	465d      	mov	r5, fp
 800663a:	6826      	ldr	r6, [r4, #0]
 800663c:	f016 0610 	ands.w	r6, r6, #16
 8006640:	d17a      	bne.n	8006738 <_scanf_float+0x3bc>
 8006642:	702e      	strb	r6, [r5, #0]
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800664a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664e:	d142      	bne.n	80066d6 <_scanf_float+0x35a>
 8006650:	9b02      	ldr	r3, [sp, #8]
 8006652:	eba9 0303 	sub.w	r3, r9, r3
 8006656:	425a      	negs	r2, r3
 8006658:	2b00      	cmp	r3, #0
 800665a:	d149      	bne.n	80066f0 <_scanf_float+0x374>
 800665c:	2200      	movs	r2, #0
 800665e:	4641      	mov	r1, r8
 8006660:	4638      	mov	r0, r7
 8006662:	f000 fea5 	bl	80073b0 <_strtod_r>
 8006666:	6825      	ldr	r5, [r4, #0]
 8006668:	f8da 3000 	ldr.w	r3, [sl]
 800666c:	f015 0f02 	tst.w	r5, #2
 8006670:	f103 0204 	add.w	r2, r3, #4
 8006674:	ec59 8b10 	vmov	r8, r9, d0
 8006678:	f8ca 2000 	str.w	r2, [sl]
 800667c:	d043      	beq.n	8006706 <_scanf_float+0x38a>
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	e9c3 8900 	strd	r8, r9, [r3]
 8006684:	68e3      	ldr	r3, [r4, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	60e3      	str	r3, [r4, #12]
 800668a:	e6be      	b.n	800640a <_scanf_float+0x8e>
 800668c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006690:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006694:	4632      	mov	r2, r6
 8006696:	4638      	mov	r0, r7
 8006698:	4798      	blx	r3
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	3b01      	subs	r3, #1
 800669e:	6123      	str	r3, [r4, #16]
 80066a0:	e7a6      	b.n	80065f0 <_scanf_float+0x274>
 80066a2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066a6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80066aa:	4632      	mov	r2, r6
 80066ac:	4638      	mov	r0, r7
 80066ae:	4798      	blx	r3
 80066b0:	6923      	ldr	r3, [r4, #16]
 80066b2:	3b01      	subs	r3, #1
 80066b4:	6123      	str	r3, [r4, #16]
 80066b6:	4545      	cmp	r5, r8
 80066b8:	d8f3      	bhi.n	80066a2 <_scanf_float+0x326>
 80066ba:	e6a5      	b.n	8006408 <_scanf_float+0x8c>
 80066bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80066c0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80066c4:	4632      	mov	r2, r6
 80066c6:	4638      	mov	r0, r7
 80066c8:	4798      	blx	r3
 80066ca:	6923      	ldr	r3, [r4, #16]
 80066cc:	3b01      	subs	r3, #1
 80066ce:	6123      	str	r3, [r4, #16]
 80066d0:	4545      	cmp	r5, r8
 80066d2:	d8f3      	bhi.n	80066bc <_scanf_float+0x340>
 80066d4:	e698      	b.n	8006408 <_scanf_float+0x8c>
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d0bf      	beq.n	800665c <_scanf_float+0x2e0>
 80066dc:	9904      	ldr	r1, [sp, #16]
 80066de:	230a      	movs	r3, #10
 80066e0:	4632      	mov	r2, r6
 80066e2:	3101      	adds	r1, #1
 80066e4:	4638      	mov	r0, r7
 80066e6:	f000 feef 	bl	80074c8 <_strtol_r>
 80066ea:	9b03      	ldr	r3, [sp, #12]
 80066ec:	9d04      	ldr	r5, [sp, #16]
 80066ee:	1ac2      	subs	r2, r0, r3
 80066f0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80066f4:	429d      	cmp	r5, r3
 80066f6:	bf28      	it	cs
 80066f8:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 80066fc:	490f      	ldr	r1, [pc, #60]	; (800673c <_scanf_float+0x3c0>)
 80066fe:	4628      	mov	r0, r5
 8006700:	f000 f824 	bl	800674c <siprintf>
 8006704:	e7aa      	b.n	800665c <_scanf_float+0x2e0>
 8006706:	f015 0504 	ands.w	r5, r5, #4
 800670a:	d1b8      	bne.n	800667e <_scanf_float+0x302>
 800670c:	681f      	ldr	r7, [r3, #0]
 800670e:	ee10 2a10 	vmov	r2, s0
 8006712:	464b      	mov	r3, r9
 8006714:	ee10 0a10 	vmov	r0, s0
 8006718:	4649      	mov	r1, r9
 800671a:	f7fa fa7f 	bl	8000c1c <__aeabi_dcmpun>
 800671e:	b128      	cbz	r0, 800672c <_scanf_float+0x3b0>
 8006720:	4628      	mov	r0, r5
 8006722:	f000 f80d 	bl	8006740 <nanf>
 8006726:	ed87 0a00 	vstr	s0, [r7]
 800672a:	e7ab      	b.n	8006684 <_scanf_float+0x308>
 800672c:	4640      	mov	r0, r8
 800672e:	4649      	mov	r1, r9
 8006730:	f7fa fad2 	bl	8000cd8 <__aeabi_d2f>
 8006734:	6038      	str	r0, [r7, #0]
 8006736:	e7a5      	b.n	8006684 <_scanf_float+0x308>
 8006738:	2600      	movs	r6, #0
 800673a:	e666      	b.n	800640a <_scanf_float+0x8e>
 800673c:	08009870 	.word	0x08009870

08006740 <nanf>:
 8006740:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006748 <nanf+0x8>
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	7fc00000 	.word	0x7fc00000

0800674c <siprintf>:
 800674c:	b40e      	push	{r1, r2, r3}
 800674e:	b500      	push	{lr}
 8006750:	b09c      	sub	sp, #112	; 0x70
 8006752:	ab1d      	add	r3, sp, #116	; 0x74
 8006754:	9002      	str	r0, [sp, #8]
 8006756:	9006      	str	r0, [sp, #24]
 8006758:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800675c:	4809      	ldr	r0, [pc, #36]	; (8006784 <siprintf+0x38>)
 800675e:	9107      	str	r1, [sp, #28]
 8006760:	9104      	str	r1, [sp, #16]
 8006762:	4909      	ldr	r1, [pc, #36]	; (8006788 <siprintf+0x3c>)
 8006764:	f853 2b04 	ldr.w	r2, [r3], #4
 8006768:	9105      	str	r1, [sp, #20]
 800676a:	6800      	ldr	r0, [r0, #0]
 800676c:	9301      	str	r3, [sp, #4]
 800676e:	a902      	add	r1, sp, #8
 8006770:	f002 fd66 	bl	8009240 <_svfiprintf_r>
 8006774:	9b02      	ldr	r3, [sp, #8]
 8006776:	2200      	movs	r2, #0
 8006778:	701a      	strb	r2, [r3, #0]
 800677a:	b01c      	add	sp, #112	; 0x70
 800677c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006780:	b003      	add	sp, #12
 8006782:	4770      	bx	lr
 8006784:	2000000c 	.word	0x2000000c
 8006788:	ffff0208 	.word	0xffff0208

0800678c <sulp>:
 800678c:	b570      	push	{r4, r5, r6, lr}
 800678e:	4604      	mov	r4, r0
 8006790:	460d      	mov	r5, r1
 8006792:	ec45 4b10 	vmov	d0, r4, r5
 8006796:	4616      	mov	r6, r2
 8006798:	f002 fb0e 	bl	8008db8 <__ulp>
 800679c:	ec51 0b10 	vmov	r0, r1, d0
 80067a0:	b17e      	cbz	r6, 80067c2 <sulp+0x36>
 80067a2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067a6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	dd09      	ble.n	80067c2 <sulp+0x36>
 80067ae:	051b      	lsls	r3, r3, #20
 80067b0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80067b4:	2400      	movs	r4, #0
 80067b6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80067ba:	4622      	mov	r2, r4
 80067bc:	462b      	mov	r3, r5
 80067be:	f7f9 ff93 	bl	80006e8 <__aeabi_dmul>
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
 80067c4:	0000      	movs	r0, r0
	...

080067c8 <_strtod_l>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	461f      	mov	r7, r3
 80067ce:	b0a1      	sub	sp, #132	; 0x84
 80067d0:	2300      	movs	r3, #0
 80067d2:	4681      	mov	r9, r0
 80067d4:	4638      	mov	r0, r7
 80067d6:	460e      	mov	r6, r1
 80067d8:	9217      	str	r2, [sp, #92]	; 0x5c
 80067da:	931c      	str	r3, [sp, #112]	; 0x70
 80067dc:	f001 fff5 	bl	80087ca <__localeconv_l>
 80067e0:	4680      	mov	r8, r0
 80067e2:	6800      	ldr	r0, [r0, #0]
 80067e4:	f7f9 fd67 	bl	80002b6 <strlen>
 80067e8:	f04f 0a00 	mov.w	sl, #0
 80067ec:	4604      	mov	r4, r0
 80067ee:	f04f 0b00 	mov.w	fp, #0
 80067f2:	961b      	str	r6, [sp, #108]	; 0x6c
 80067f4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80067f6:	781a      	ldrb	r2, [r3, #0]
 80067f8:	2a0d      	cmp	r2, #13
 80067fa:	d832      	bhi.n	8006862 <_strtod_l+0x9a>
 80067fc:	2a09      	cmp	r2, #9
 80067fe:	d236      	bcs.n	800686e <_strtod_l+0xa6>
 8006800:	2a00      	cmp	r2, #0
 8006802:	d03e      	beq.n	8006882 <_strtod_l+0xba>
 8006804:	2300      	movs	r3, #0
 8006806:	930d      	str	r3, [sp, #52]	; 0x34
 8006808:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800680a:	782b      	ldrb	r3, [r5, #0]
 800680c:	2b30      	cmp	r3, #48	; 0x30
 800680e:	f040 80ac 	bne.w	800696a <_strtod_l+0x1a2>
 8006812:	786b      	ldrb	r3, [r5, #1]
 8006814:	2b58      	cmp	r3, #88	; 0x58
 8006816:	d001      	beq.n	800681c <_strtod_l+0x54>
 8006818:	2b78      	cmp	r3, #120	; 0x78
 800681a:	d167      	bne.n	80068ec <_strtod_l+0x124>
 800681c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	ab1c      	add	r3, sp, #112	; 0x70
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	9702      	str	r7, [sp, #8]
 8006826:	ab1d      	add	r3, sp, #116	; 0x74
 8006828:	4a88      	ldr	r2, [pc, #544]	; (8006a4c <_strtod_l+0x284>)
 800682a:	a91b      	add	r1, sp, #108	; 0x6c
 800682c:	4648      	mov	r0, r9
 800682e:	f001 fcf2 	bl	8008216 <__gethex>
 8006832:	f010 0407 	ands.w	r4, r0, #7
 8006836:	4606      	mov	r6, r0
 8006838:	d005      	beq.n	8006846 <_strtod_l+0x7e>
 800683a:	2c06      	cmp	r4, #6
 800683c:	d12b      	bne.n	8006896 <_strtod_l+0xce>
 800683e:	3501      	adds	r5, #1
 8006840:	2300      	movs	r3, #0
 8006842:	951b      	str	r5, [sp, #108]	; 0x6c
 8006844:	930d      	str	r3, [sp, #52]	; 0x34
 8006846:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006848:	2b00      	cmp	r3, #0
 800684a:	f040 859a 	bne.w	8007382 <_strtod_l+0xbba>
 800684e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006850:	b1e3      	cbz	r3, 800688c <_strtod_l+0xc4>
 8006852:	4652      	mov	r2, sl
 8006854:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006858:	ec43 2b10 	vmov	d0, r2, r3
 800685c:	b021      	add	sp, #132	; 0x84
 800685e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006862:	2a2b      	cmp	r2, #43	; 0x2b
 8006864:	d015      	beq.n	8006892 <_strtod_l+0xca>
 8006866:	2a2d      	cmp	r2, #45	; 0x2d
 8006868:	d004      	beq.n	8006874 <_strtod_l+0xac>
 800686a:	2a20      	cmp	r2, #32
 800686c:	d1ca      	bne.n	8006804 <_strtod_l+0x3c>
 800686e:	3301      	adds	r3, #1
 8006870:	931b      	str	r3, [sp, #108]	; 0x6c
 8006872:	e7bf      	b.n	80067f4 <_strtod_l+0x2c>
 8006874:	2201      	movs	r2, #1
 8006876:	920d      	str	r2, [sp, #52]	; 0x34
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	921b      	str	r2, [sp, #108]	; 0x6c
 800687c:	785b      	ldrb	r3, [r3, #1]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1c2      	bne.n	8006808 <_strtod_l+0x40>
 8006882:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006884:	961b      	str	r6, [sp, #108]	; 0x6c
 8006886:	2b00      	cmp	r3, #0
 8006888:	f040 8579 	bne.w	800737e <_strtod_l+0xbb6>
 800688c:	4652      	mov	r2, sl
 800688e:	465b      	mov	r3, fp
 8006890:	e7e2      	b.n	8006858 <_strtod_l+0x90>
 8006892:	2200      	movs	r2, #0
 8006894:	e7ef      	b.n	8006876 <_strtod_l+0xae>
 8006896:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006898:	b13a      	cbz	r2, 80068aa <_strtod_l+0xe2>
 800689a:	2135      	movs	r1, #53	; 0x35
 800689c:	a81e      	add	r0, sp, #120	; 0x78
 800689e:	f002 fb83 	bl	8008fa8 <__copybits>
 80068a2:	991c      	ldr	r1, [sp, #112]	; 0x70
 80068a4:	4648      	mov	r0, r9
 80068a6:	f001 ffef 	bl	8008888 <_Bfree>
 80068aa:	3c01      	subs	r4, #1
 80068ac:	2c04      	cmp	r4, #4
 80068ae:	d806      	bhi.n	80068be <_strtod_l+0xf6>
 80068b0:	e8df f004 	tbb	[pc, r4]
 80068b4:	1714030a 	.word	0x1714030a
 80068b8:	0a          	.byte	0x0a
 80068b9:	00          	.byte	0x00
 80068ba:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80068be:	0730      	lsls	r0, r6, #28
 80068c0:	d5c1      	bpl.n	8006846 <_strtod_l+0x7e>
 80068c2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80068c6:	e7be      	b.n	8006846 <_strtod_l+0x7e>
 80068c8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80068cc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80068ce:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068d2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068d6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80068da:	e7f0      	b.n	80068be <_strtod_l+0xf6>
 80068dc:	f8df b170 	ldr.w	fp, [pc, #368]	; 8006a50 <_strtod_l+0x288>
 80068e0:	e7ed      	b.n	80068be <_strtod_l+0xf6>
 80068e2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80068e6:	f04f 3aff 	mov.w	sl, #4294967295
 80068ea:	e7e8      	b.n	80068be <_strtod_l+0xf6>
 80068ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80068ee:	1c5a      	adds	r2, r3, #1
 80068f0:	921b      	str	r2, [sp, #108]	; 0x6c
 80068f2:	785b      	ldrb	r3, [r3, #1]
 80068f4:	2b30      	cmp	r3, #48	; 0x30
 80068f6:	d0f9      	beq.n	80068ec <_strtod_l+0x124>
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0a4      	beq.n	8006846 <_strtod_l+0x7e>
 80068fc:	2301      	movs	r3, #1
 80068fe:	2500      	movs	r5, #0
 8006900:	9306      	str	r3, [sp, #24]
 8006902:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006904:	9308      	str	r3, [sp, #32]
 8006906:	9507      	str	r5, [sp, #28]
 8006908:	9505      	str	r5, [sp, #20]
 800690a:	220a      	movs	r2, #10
 800690c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800690e:	7807      	ldrb	r7, [r0, #0]
 8006910:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8006914:	b2d9      	uxtb	r1, r3
 8006916:	2909      	cmp	r1, #9
 8006918:	d929      	bls.n	800696e <_strtod_l+0x1a6>
 800691a:	4622      	mov	r2, r4
 800691c:	f8d8 1000 	ldr.w	r1, [r8]
 8006920:	f002 fd96 	bl	8009450 <strncmp>
 8006924:	2800      	cmp	r0, #0
 8006926:	d031      	beq.n	800698c <_strtod_l+0x1c4>
 8006928:	2000      	movs	r0, #0
 800692a:	9c05      	ldr	r4, [sp, #20]
 800692c:	9004      	str	r0, [sp, #16]
 800692e:	463b      	mov	r3, r7
 8006930:	4602      	mov	r2, r0
 8006932:	2b65      	cmp	r3, #101	; 0x65
 8006934:	d001      	beq.n	800693a <_strtod_l+0x172>
 8006936:	2b45      	cmp	r3, #69	; 0x45
 8006938:	d114      	bne.n	8006964 <_strtod_l+0x19c>
 800693a:	b924      	cbnz	r4, 8006946 <_strtod_l+0x17e>
 800693c:	b910      	cbnz	r0, 8006944 <_strtod_l+0x17c>
 800693e:	9b06      	ldr	r3, [sp, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d09e      	beq.n	8006882 <_strtod_l+0xba>
 8006944:	2400      	movs	r4, #0
 8006946:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8006948:	1c73      	adds	r3, r6, #1
 800694a:	931b      	str	r3, [sp, #108]	; 0x6c
 800694c:	7873      	ldrb	r3, [r6, #1]
 800694e:	2b2b      	cmp	r3, #43	; 0x2b
 8006950:	d078      	beq.n	8006a44 <_strtod_l+0x27c>
 8006952:	2b2d      	cmp	r3, #45	; 0x2d
 8006954:	d070      	beq.n	8006a38 <_strtod_l+0x270>
 8006956:	f04f 0c00 	mov.w	ip, #0
 800695a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800695e:	2f09      	cmp	r7, #9
 8006960:	d97c      	bls.n	8006a5c <_strtod_l+0x294>
 8006962:	961b      	str	r6, [sp, #108]	; 0x6c
 8006964:	f04f 0e00 	mov.w	lr, #0
 8006968:	e09a      	b.n	8006aa0 <_strtod_l+0x2d8>
 800696a:	2300      	movs	r3, #0
 800696c:	e7c7      	b.n	80068fe <_strtod_l+0x136>
 800696e:	9905      	ldr	r1, [sp, #20]
 8006970:	2908      	cmp	r1, #8
 8006972:	bfdd      	ittte	le
 8006974:	9907      	ldrle	r1, [sp, #28]
 8006976:	fb02 3301 	mlale	r3, r2, r1, r3
 800697a:	9307      	strle	r3, [sp, #28]
 800697c:	fb02 3505 	mlagt	r5, r2, r5, r3
 8006980:	9b05      	ldr	r3, [sp, #20]
 8006982:	3001      	adds	r0, #1
 8006984:	3301      	adds	r3, #1
 8006986:	9305      	str	r3, [sp, #20]
 8006988:	901b      	str	r0, [sp, #108]	; 0x6c
 800698a:	e7bf      	b.n	800690c <_strtod_l+0x144>
 800698c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800698e:	191a      	adds	r2, r3, r4
 8006990:	921b      	str	r2, [sp, #108]	; 0x6c
 8006992:	9a05      	ldr	r2, [sp, #20]
 8006994:	5d1b      	ldrb	r3, [r3, r4]
 8006996:	2a00      	cmp	r2, #0
 8006998:	d037      	beq.n	8006a0a <_strtod_l+0x242>
 800699a:	9c05      	ldr	r4, [sp, #20]
 800699c:	4602      	mov	r2, r0
 800699e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80069a2:	2909      	cmp	r1, #9
 80069a4:	d913      	bls.n	80069ce <_strtod_l+0x206>
 80069a6:	2101      	movs	r1, #1
 80069a8:	9104      	str	r1, [sp, #16]
 80069aa:	e7c2      	b.n	8006932 <_strtod_l+0x16a>
 80069ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	921b      	str	r2, [sp, #108]	; 0x6c
 80069b2:	785b      	ldrb	r3, [r3, #1]
 80069b4:	3001      	adds	r0, #1
 80069b6:	2b30      	cmp	r3, #48	; 0x30
 80069b8:	d0f8      	beq.n	80069ac <_strtod_l+0x1e4>
 80069ba:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80069be:	2a08      	cmp	r2, #8
 80069c0:	f200 84e4 	bhi.w	800738c <_strtod_l+0xbc4>
 80069c4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80069c6:	9208      	str	r2, [sp, #32]
 80069c8:	4602      	mov	r2, r0
 80069ca:	2000      	movs	r0, #0
 80069cc:	4604      	mov	r4, r0
 80069ce:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80069d2:	f100 0101 	add.w	r1, r0, #1
 80069d6:	d012      	beq.n	80069fe <_strtod_l+0x236>
 80069d8:	440a      	add	r2, r1
 80069da:	eb00 0c04 	add.w	ip, r0, r4
 80069de:	4621      	mov	r1, r4
 80069e0:	270a      	movs	r7, #10
 80069e2:	458c      	cmp	ip, r1
 80069e4:	d113      	bne.n	8006a0e <_strtod_l+0x246>
 80069e6:	1821      	adds	r1, r4, r0
 80069e8:	2908      	cmp	r1, #8
 80069ea:	f104 0401 	add.w	r4, r4, #1
 80069ee:	4404      	add	r4, r0
 80069f0:	dc19      	bgt.n	8006a26 <_strtod_l+0x25e>
 80069f2:	9b07      	ldr	r3, [sp, #28]
 80069f4:	210a      	movs	r1, #10
 80069f6:	fb01 e303 	mla	r3, r1, r3, lr
 80069fa:	9307      	str	r3, [sp, #28]
 80069fc:	2100      	movs	r1, #0
 80069fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a00:	1c58      	adds	r0, r3, #1
 8006a02:	901b      	str	r0, [sp, #108]	; 0x6c
 8006a04:	785b      	ldrb	r3, [r3, #1]
 8006a06:	4608      	mov	r0, r1
 8006a08:	e7c9      	b.n	800699e <_strtod_l+0x1d6>
 8006a0a:	9805      	ldr	r0, [sp, #20]
 8006a0c:	e7d3      	b.n	80069b6 <_strtod_l+0x1ee>
 8006a0e:	2908      	cmp	r1, #8
 8006a10:	f101 0101 	add.w	r1, r1, #1
 8006a14:	dc03      	bgt.n	8006a1e <_strtod_l+0x256>
 8006a16:	9b07      	ldr	r3, [sp, #28]
 8006a18:	437b      	muls	r3, r7
 8006a1a:	9307      	str	r3, [sp, #28]
 8006a1c:	e7e1      	b.n	80069e2 <_strtod_l+0x21a>
 8006a1e:	2910      	cmp	r1, #16
 8006a20:	bfd8      	it	le
 8006a22:	437d      	mulle	r5, r7
 8006a24:	e7dd      	b.n	80069e2 <_strtod_l+0x21a>
 8006a26:	2c10      	cmp	r4, #16
 8006a28:	bfdc      	itt	le
 8006a2a:	210a      	movle	r1, #10
 8006a2c:	fb01 e505 	mlale	r5, r1, r5, lr
 8006a30:	e7e4      	b.n	80069fc <_strtod_l+0x234>
 8006a32:	2301      	movs	r3, #1
 8006a34:	9304      	str	r3, [sp, #16]
 8006a36:	e781      	b.n	800693c <_strtod_l+0x174>
 8006a38:	f04f 0c01 	mov.w	ip, #1
 8006a3c:	1cb3      	adds	r3, r6, #2
 8006a3e:	931b      	str	r3, [sp, #108]	; 0x6c
 8006a40:	78b3      	ldrb	r3, [r6, #2]
 8006a42:	e78a      	b.n	800695a <_strtod_l+0x192>
 8006a44:	f04f 0c00 	mov.w	ip, #0
 8006a48:	e7f8      	b.n	8006a3c <_strtod_l+0x274>
 8006a4a:	bf00      	nop
 8006a4c:	08009878 	.word	0x08009878
 8006a50:	7ff00000 	.word	0x7ff00000
 8006a54:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a56:	1c5f      	adds	r7, r3, #1
 8006a58:	971b      	str	r7, [sp, #108]	; 0x6c
 8006a5a:	785b      	ldrb	r3, [r3, #1]
 8006a5c:	2b30      	cmp	r3, #48	; 0x30
 8006a5e:	d0f9      	beq.n	8006a54 <_strtod_l+0x28c>
 8006a60:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8006a64:	2f08      	cmp	r7, #8
 8006a66:	f63f af7d 	bhi.w	8006964 <_strtod_l+0x19c>
 8006a6a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006a6e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a70:	930a      	str	r3, [sp, #40]	; 0x28
 8006a72:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006a74:	1c5f      	adds	r7, r3, #1
 8006a76:	971b      	str	r7, [sp, #108]	; 0x6c
 8006a78:	785b      	ldrb	r3, [r3, #1]
 8006a7a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8006a7e:	f1b8 0f09 	cmp.w	r8, #9
 8006a82:	d937      	bls.n	8006af4 <_strtod_l+0x32c>
 8006a84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006a86:	1a7f      	subs	r7, r7, r1
 8006a88:	2f08      	cmp	r7, #8
 8006a8a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006a8e:	dc37      	bgt.n	8006b00 <_strtod_l+0x338>
 8006a90:	45be      	cmp	lr, r7
 8006a92:	bfa8      	it	ge
 8006a94:	46be      	movge	lr, r7
 8006a96:	f1bc 0f00 	cmp.w	ip, #0
 8006a9a:	d001      	beq.n	8006aa0 <_strtod_l+0x2d8>
 8006a9c:	f1ce 0e00 	rsb	lr, lr, #0
 8006aa0:	2c00      	cmp	r4, #0
 8006aa2:	d151      	bne.n	8006b48 <_strtod_l+0x380>
 8006aa4:	2800      	cmp	r0, #0
 8006aa6:	f47f aece 	bne.w	8006846 <_strtod_l+0x7e>
 8006aaa:	9a06      	ldr	r2, [sp, #24]
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	f47f aeca 	bne.w	8006846 <_strtod_l+0x7e>
 8006ab2:	9a04      	ldr	r2, [sp, #16]
 8006ab4:	2a00      	cmp	r2, #0
 8006ab6:	f47f aee4 	bne.w	8006882 <_strtod_l+0xba>
 8006aba:	2b4e      	cmp	r3, #78	; 0x4e
 8006abc:	d027      	beq.n	8006b0e <_strtod_l+0x346>
 8006abe:	dc21      	bgt.n	8006b04 <_strtod_l+0x33c>
 8006ac0:	2b49      	cmp	r3, #73	; 0x49
 8006ac2:	f47f aede 	bne.w	8006882 <_strtod_l+0xba>
 8006ac6:	49a0      	ldr	r1, [pc, #640]	; (8006d48 <_strtod_l+0x580>)
 8006ac8:	a81b      	add	r0, sp, #108	; 0x6c
 8006aca:	f001 fdd7 	bl	800867c <__match>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	f43f aed7 	beq.w	8006882 <_strtod_l+0xba>
 8006ad4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ad6:	499d      	ldr	r1, [pc, #628]	; (8006d4c <_strtod_l+0x584>)
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	a81b      	add	r0, sp, #108	; 0x6c
 8006adc:	931b      	str	r3, [sp, #108]	; 0x6c
 8006ade:	f001 fdcd 	bl	800867c <__match>
 8006ae2:	b910      	cbnz	r0, 8006aea <_strtod_l+0x322>
 8006ae4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	931b      	str	r3, [sp, #108]	; 0x6c
 8006aea:	f8df b274 	ldr.w	fp, [pc, #628]	; 8006d60 <_strtod_l+0x598>
 8006aee:	f04f 0a00 	mov.w	sl, #0
 8006af2:	e6a8      	b.n	8006846 <_strtod_l+0x7e>
 8006af4:	210a      	movs	r1, #10
 8006af6:	fb01 3e0e 	mla	lr, r1, lr, r3
 8006afa:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8006afe:	e7b8      	b.n	8006a72 <_strtod_l+0x2aa>
 8006b00:	46be      	mov	lr, r7
 8006b02:	e7c8      	b.n	8006a96 <_strtod_l+0x2ce>
 8006b04:	2b69      	cmp	r3, #105	; 0x69
 8006b06:	d0de      	beq.n	8006ac6 <_strtod_l+0x2fe>
 8006b08:	2b6e      	cmp	r3, #110	; 0x6e
 8006b0a:	f47f aeba 	bne.w	8006882 <_strtod_l+0xba>
 8006b0e:	4990      	ldr	r1, [pc, #576]	; (8006d50 <_strtod_l+0x588>)
 8006b10:	a81b      	add	r0, sp, #108	; 0x6c
 8006b12:	f001 fdb3 	bl	800867c <__match>
 8006b16:	2800      	cmp	r0, #0
 8006b18:	f43f aeb3 	beq.w	8006882 <_strtod_l+0xba>
 8006b1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b28      	cmp	r3, #40	; 0x28
 8006b22:	d10e      	bne.n	8006b42 <_strtod_l+0x37a>
 8006b24:	aa1e      	add	r2, sp, #120	; 0x78
 8006b26:	498b      	ldr	r1, [pc, #556]	; (8006d54 <_strtod_l+0x58c>)
 8006b28:	a81b      	add	r0, sp, #108	; 0x6c
 8006b2a:	f001 fdbb 	bl	80086a4 <__hexnan>
 8006b2e:	2805      	cmp	r0, #5
 8006b30:	d107      	bne.n	8006b42 <_strtod_l+0x37a>
 8006b32:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006b34:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8006b38:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8006b3c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8006b40:	e681      	b.n	8006846 <_strtod_l+0x7e>
 8006b42:	f8df b224 	ldr.w	fp, [pc, #548]	; 8006d68 <_strtod_l+0x5a0>
 8006b46:	e7d2      	b.n	8006aee <_strtod_l+0x326>
 8006b48:	ebae 0302 	sub.w	r3, lr, r2
 8006b4c:	9306      	str	r3, [sp, #24]
 8006b4e:	9b05      	ldr	r3, [sp, #20]
 8006b50:	9807      	ldr	r0, [sp, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	bf08      	it	eq
 8006b56:	4623      	moveq	r3, r4
 8006b58:	2c10      	cmp	r4, #16
 8006b5a:	9305      	str	r3, [sp, #20]
 8006b5c:	46a0      	mov	r8, r4
 8006b5e:	bfa8      	it	ge
 8006b60:	f04f 0810 	movge.w	r8, #16
 8006b64:	f7f9 fd46 	bl	80005f4 <__aeabi_ui2d>
 8006b68:	2c09      	cmp	r4, #9
 8006b6a:	4682      	mov	sl, r0
 8006b6c:	468b      	mov	fp, r1
 8006b6e:	dc13      	bgt.n	8006b98 <_strtod_l+0x3d0>
 8006b70:	9b06      	ldr	r3, [sp, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	f43f ae67 	beq.w	8006846 <_strtod_l+0x7e>
 8006b78:	9b06      	ldr	r3, [sp, #24]
 8006b7a:	dd7a      	ble.n	8006c72 <_strtod_l+0x4aa>
 8006b7c:	2b16      	cmp	r3, #22
 8006b7e:	dc61      	bgt.n	8006c44 <_strtod_l+0x47c>
 8006b80:	4a75      	ldr	r2, [pc, #468]	; (8006d58 <_strtod_l+0x590>)
 8006b82:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8006b86:	e9de 0100 	ldrd	r0, r1, [lr]
 8006b8a:	4652      	mov	r2, sl
 8006b8c:	465b      	mov	r3, fp
 8006b8e:	f7f9 fdab 	bl	80006e8 <__aeabi_dmul>
 8006b92:	4682      	mov	sl, r0
 8006b94:	468b      	mov	fp, r1
 8006b96:	e656      	b.n	8006846 <_strtod_l+0x7e>
 8006b98:	4b6f      	ldr	r3, [pc, #444]	; (8006d58 <_strtod_l+0x590>)
 8006b9a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006b9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006ba2:	f7f9 fda1 	bl	80006e8 <__aeabi_dmul>
 8006ba6:	4606      	mov	r6, r0
 8006ba8:	4628      	mov	r0, r5
 8006baa:	460f      	mov	r7, r1
 8006bac:	f7f9 fd22 	bl	80005f4 <__aeabi_ui2d>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4630      	mov	r0, r6
 8006bb6:	4639      	mov	r1, r7
 8006bb8:	f7f9 fbe0 	bl	800037c <__adddf3>
 8006bbc:	2c0f      	cmp	r4, #15
 8006bbe:	4682      	mov	sl, r0
 8006bc0:	468b      	mov	fp, r1
 8006bc2:	ddd5      	ble.n	8006b70 <_strtod_l+0x3a8>
 8006bc4:	9b06      	ldr	r3, [sp, #24]
 8006bc6:	eba4 0808 	sub.w	r8, r4, r8
 8006bca:	4498      	add	r8, r3
 8006bcc:	f1b8 0f00 	cmp.w	r8, #0
 8006bd0:	f340 8096 	ble.w	8006d00 <_strtod_l+0x538>
 8006bd4:	f018 030f 	ands.w	r3, r8, #15
 8006bd8:	d00a      	beq.n	8006bf0 <_strtod_l+0x428>
 8006bda:	495f      	ldr	r1, [pc, #380]	; (8006d58 <_strtod_l+0x590>)
 8006bdc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006be0:	4652      	mov	r2, sl
 8006be2:	465b      	mov	r3, fp
 8006be4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006be8:	f7f9 fd7e 	bl	80006e8 <__aeabi_dmul>
 8006bec:	4682      	mov	sl, r0
 8006bee:	468b      	mov	fp, r1
 8006bf0:	f038 080f 	bics.w	r8, r8, #15
 8006bf4:	d073      	beq.n	8006cde <_strtod_l+0x516>
 8006bf6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8006bfa:	dd47      	ble.n	8006c8c <_strtod_l+0x4c4>
 8006bfc:	2400      	movs	r4, #0
 8006bfe:	46a0      	mov	r8, r4
 8006c00:	9407      	str	r4, [sp, #28]
 8006c02:	9405      	str	r4, [sp, #20]
 8006c04:	2322      	movs	r3, #34	; 0x22
 8006c06:	f8df b158 	ldr.w	fp, [pc, #344]	; 8006d60 <_strtod_l+0x598>
 8006c0a:	f8c9 3000 	str.w	r3, [r9]
 8006c0e:	f04f 0a00 	mov.w	sl, #0
 8006c12:	9b07      	ldr	r3, [sp, #28]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f43f ae16 	beq.w	8006846 <_strtod_l+0x7e>
 8006c1a:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006c1c:	4648      	mov	r0, r9
 8006c1e:	f001 fe33 	bl	8008888 <_Bfree>
 8006c22:	9905      	ldr	r1, [sp, #20]
 8006c24:	4648      	mov	r0, r9
 8006c26:	f001 fe2f 	bl	8008888 <_Bfree>
 8006c2a:	4641      	mov	r1, r8
 8006c2c:	4648      	mov	r0, r9
 8006c2e:	f001 fe2b 	bl	8008888 <_Bfree>
 8006c32:	9907      	ldr	r1, [sp, #28]
 8006c34:	4648      	mov	r0, r9
 8006c36:	f001 fe27 	bl	8008888 <_Bfree>
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	f001 fe23 	bl	8008888 <_Bfree>
 8006c42:	e600      	b.n	8006846 <_strtod_l+0x7e>
 8006c44:	9a06      	ldr	r2, [sp, #24]
 8006c46:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	dbba      	blt.n	8006bc4 <_strtod_l+0x3fc>
 8006c4e:	4d42      	ldr	r5, [pc, #264]	; (8006d58 <_strtod_l+0x590>)
 8006c50:	f1c4 040f 	rsb	r4, r4, #15
 8006c54:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8006c58:	4652      	mov	r2, sl
 8006c5a:	465b      	mov	r3, fp
 8006c5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c60:	f7f9 fd42 	bl	80006e8 <__aeabi_dmul>
 8006c64:	9b06      	ldr	r3, [sp, #24]
 8006c66:	1b1c      	subs	r4, r3, r4
 8006c68:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8006c6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c70:	e78d      	b.n	8006b8e <_strtod_l+0x3c6>
 8006c72:	f113 0f16 	cmn.w	r3, #22
 8006c76:	dba5      	blt.n	8006bc4 <_strtod_l+0x3fc>
 8006c78:	4a37      	ldr	r2, [pc, #220]	; (8006d58 <_strtod_l+0x590>)
 8006c7a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8006c7e:	e9d2 2300 	ldrd	r2, r3, [r2]
 8006c82:	4650      	mov	r0, sl
 8006c84:	4659      	mov	r1, fp
 8006c86:	f7f9 fe59 	bl	800093c <__aeabi_ddiv>
 8006c8a:	e782      	b.n	8006b92 <_strtod_l+0x3ca>
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	4e33      	ldr	r6, [pc, #204]	; (8006d5c <_strtod_l+0x594>)
 8006c90:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006c94:	4650      	mov	r0, sl
 8006c96:	4659      	mov	r1, fp
 8006c98:	461d      	mov	r5, r3
 8006c9a:	f1b8 0f01 	cmp.w	r8, #1
 8006c9e:	dc21      	bgt.n	8006ce4 <_strtod_l+0x51c>
 8006ca0:	b10b      	cbz	r3, 8006ca6 <_strtod_l+0x4de>
 8006ca2:	4682      	mov	sl, r0
 8006ca4:	468b      	mov	fp, r1
 8006ca6:	4b2d      	ldr	r3, [pc, #180]	; (8006d5c <_strtod_l+0x594>)
 8006ca8:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006cac:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006cb0:	4652      	mov	r2, sl
 8006cb2:	465b      	mov	r3, fp
 8006cb4:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006cb8:	f7f9 fd16 	bl	80006e8 <__aeabi_dmul>
 8006cbc:	4b28      	ldr	r3, [pc, #160]	; (8006d60 <_strtod_l+0x598>)
 8006cbe:	460a      	mov	r2, r1
 8006cc0:	400b      	ands	r3, r1
 8006cc2:	4928      	ldr	r1, [pc, #160]	; (8006d64 <_strtod_l+0x59c>)
 8006cc4:	428b      	cmp	r3, r1
 8006cc6:	4682      	mov	sl, r0
 8006cc8:	d898      	bhi.n	8006bfc <_strtod_l+0x434>
 8006cca:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006cce:	428b      	cmp	r3, r1
 8006cd0:	bf86      	itte	hi
 8006cd2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006d6c <_strtod_l+0x5a4>
 8006cd6:	f04f 3aff 	movhi.w	sl, #4294967295
 8006cda:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006cde:	2300      	movs	r3, #0
 8006ce0:	9304      	str	r3, [sp, #16]
 8006ce2:	e077      	b.n	8006dd4 <_strtod_l+0x60c>
 8006ce4:	f018 0f01 	tst.w	r8, #1
 8006ce8:	d006      	beq.n	8006cf8 <_strtod_l+0x530>
 8006cea:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f7f9 fcf9 	bl	80006e8 <__aeabi_dmul>
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	3501      	adds	r5, #1
 8006cfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006cfe:	e7cc      	b.n	8006c9a <_strtod_l+0x4d2>
 8006d00:	d0ed      	beq.n	8006cde <_strtod_l+0x516>
 8006d02:	f1c8 0800 	rsb	r8, r8, #0
 8006d06:	f018 020f 	ands.w	r2, r8, #15
 8006d0a:	d00a      	beq.n	8006d22 <_strtod_l+0x55a>
 8006d0c:	4b12      	ldr	r3, [pc, #72]	; (8006d58 <_strtod_l+0x590>)
 8006d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d12:	4650      	mov	r0, sl
 8006d14:	4659      	mov	r1, fp
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fe0f 	bl	800093c <__aeabi_ddiv>
 8006d1e:	4682      	mov	sl, r0
 8006d20:	468b      	mov	fp, r1
 8006d22:	ea5f 1828 	movs.w	r8, r8, asr #4
 8006d26:	d0da      	beq.n	8006cde <_strtod_l+0x516>
 8006d28:	f1b8 0f1f 	cmp.w	r8, #31
 8006d2c:	dd20      	ble.n	8006d70 <_strtod_l+0x5a8>
 8006d2e:	2400      	movs	r4, #0
 8006d30:	46a0      	mov	r8, r4
 8006d32:	9407      	str	r4, [sp, #28]
 8006d34:	9405      	str	r4, [sp, #20]
 8006d36:	2322      	movs	r3, #34	; 0x22
 8006d38:	f04f 0a00 	mov.w	sl, #0
 8006d3c:	f04f 0b00 	mov.w	fp, #0
 8006d40:	f8c9 3000 	str.w	r3, [r9]
 8006d44:	e765      	b.n	8006c12 <_strtod_l+0x44a>
 8006d46:	bf00      	nop
 8006d48:	08009841 	.word	0x08009841
 8006d4c:	080098cb 	.word	0x080098cb
 8006d50:	08009849 	.word	0x08009849
 8006d54:	0800988c 	.word	0x0800988c
 8006d58:	08009908 	.word	0x08009908
 8006d5c:	080098e0 	.word	0x080098e0
 8006d60:	7ff00000 	.word	0x7ff00000
 8006d64:	7ca00000 	.word	0x7ca00000
 8006d68:	fff80000 	.word	0xfff80000
 8006d6c:	7fefffff 	.word	0x7fefffff
 8006d70:	f018 0310 	ands.w	r3, r8, #16
 8006d74:	bf18      	it	ne
 8006d76:	236a      	movne	r3, #106	; 0x6a
 8006d78:	4da0      	ldr	r5, [pc, #640]	; (8006ffc <_strtod_l+0x834>)
 8006d7a:	9304      	str	r3, [sp, #16]
 8006d7c:	4650      	mov	r0, sl
 8006d7e:	4659      	mov	r1, fp
 8006d80:	2300      	movs	r3, #0
 8006d82:	f1b8 0f00 	cmp.w	r8, #0
 8006d86:	f300 810a 	bgt.w	8006f9e <_strtod_l+0x7d6>
 8006d8a:	b10b      	cbz	r3, 8006d90 <_strtod_l+0x5c8>
 8006d8c:	4682      	mov	sl, r0
 8006d8e:	468b      	mov	fp, r1
 8006d90:	9b04      	ldr	r3, [sp, #16]
 8006d92:	b1bb      	cbz	r3, 8006dc4 <_strtod_l+0x5fc>
 8006d94:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006d98:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	4659      	mov	r1, fp
 8006da0:	dd10      	ble.n	8006dc4 <_strtod_l+0x5fc>
 8006da2:	2b1f      	cmp	r3, #31
 8006da4:	f340 8107 	ble.w	8006fb6 <_strtod_l+0x7ee>
 8006da8:	2b34      	cmp	r3, #52	; 0x34
 8006daa:	bfde      	ittt	le
 8006dac:	3b20      	suble	r3, #32
 8006dae:	f04f 32ff 	movle.w	r2, #4294967295
 8006db2:	fa02 f303 	lslle.w	r3, r2, r3
 8006db6:	f04f 0a00 	mov.w	sl, #0
 8006dba:	bfcc      	ite	gt
 8006dbc:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8006dc0:	ea03 0b01 	andle.w	fp, r3, r1
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	4650      	mov	r0, sl
 8006dca:	4659      	mov	r1, fp
 8006dcc:	f7f9 fef4 	bl	8000bb8 <__aeabi_dcmpeq>
 8006dd0:	2800      	cmp	r0, #0
 8006dd2:	d1ac      	bne.n	8006d2e <_strtod_l+0x566>
 8006dd4:	9b07      	ldr	r3, [sp, #28]
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	9a05      	ldr	r2, [sp, #20]
 8006dda:	9908      	ldr	r1, [sp, #32]
 8006ddc:	4623      	mov	r3, r4
 8006dde:	4648      	mov	r0, r9
 8006de0:	f001 fda4 	bl	800892c <__s2b>
 8006de4:	9007      	str	r0, [sp, #28]
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f43f af08 	beq.w	8006bfc <_strtod_l+0x434>
 8006dec:	9a06      	ldr	r2, [sp, #24]
 8006dee:	9b06      	ldr	r3, [sp, #24]
 8006df0:	2a00      	cmp	r2, #0
 8006df2:	f1c3 0300 	rsb	r3, r3, #0
 8006df6:	bfa8      	it	ge
 8006df8:	2300      	movge	r3, #0
 8006dfa:	930e      	str	r3, [sp, #56]	; 0x38
 8006dfc:	2400      	movs	r4, #0
 8006dfe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e02:	9316      	str	r3, [sp, #88]	; 0x58
 8006e04:	46a0      	mov	r8, r4
 8006e06:	9b07      	ldr	r3, [sp, #28]
 8006e08:	4648      	mov	r0, r9
 8006e0a:	6859      	ldr	r1, [r3, #4]
 8006e0c:	f001 fd08 	bl	8008820 <_Balloc>
 8006e10:	9005      	str	r0, [sp, #20]
 8006e12:	2800      	cmp	r0, #0
 8006e14:	f43f aef6 	beq.w	8006c04 <_strtod_l+0x43c>
 8006e18:	9b07      	ldr	r3, [sp, #28]
 8006e1a:	691a      	ldr	r2, [r3, #16]
 8006e1c:	3202      	adds	r2, #2
 8006e1e:	f103 010c 	add.w	r1, r3, #12
 8006e22:	0092      	lsls	r2, r2, #2
 8006e24:	300c      	adds	r0, #12
 8006e26:	f7fe fe39 	bl	8005a9c <memcpy>
 8006e2a:	aa1e      	add	r2, sp, #120	; 0x78
 8006e2c:	a91d      	add	r1, sp, #116	; 0x74
 8006e2e:	ec4b ab10 	vmov	d0, sl, fp
 8006e32:	4648      	mov	r0, r9
 8006e34:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8006e38:	f002 f834 	bl	8008ea4 <__d2b>
 8006e3c:	901c      	str	r0, [sp, #112]	; 0x70
 8006e3e:	2800      	cmp	r0, #0
 8006e40:	f43f aee0 	beq.w	8006c04 <_strtod_l+0x43c>
 8006e44:	2101      	movs	r1, #1
 8006e46:	4648      	mov	r0, r9
 8006e48:	f001 fdfc 	bl	8008a44 <__i2b>
 8006e4c:	4680      	mov	r8, r0
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f43f aed8 	beq.w	8006c04 <_strtod_l+0x43c>
 8006e54:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8006e56:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006e58:	2e00      	cmp	r6, #0
 8006e5a:	bfab      	itete	ge
 8006e5c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8006e5e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8006e60:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 8006e62:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 8006e64:	bfac      	ite	ge
 8006e66:	18f7      	addge	r7, r6, r3
 8006e68:	1b9d      	sublt	r5, r3, r6
 8006e6a:	9b04      	ldr	r3, [sp, #16]
 8006e6c:	1af6      	subs	r6, r6, r3
 8006e6e:	4416      	add	r6, r2
 8006e70:	4b63      	ldr	r3, [pc, #396]	; (8007000 <_strtod_l+0x838>)
 8006e72:	3e01      	subs	r6, #1
 8006e74:	429e      	cmp	r6, r3
 8006e76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e7a:	f280 80af 	bge.w	8006fdc <_strtod_l+0x814>
 8006e7e:	1b9b      	subs	r3, r3, r6
 8006e80:	2b1f      	cmp	r3, #31
 8006e82:	eba2 0203 	sub.w	r2, r2, r3
 8006e86:	f04f 0101 	mov.w	r1, #1
 8006e8a:	f300 809b 	bgt.w	8006fc4 <_strtod_l+0x7fc>
 8006e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e92:	930f      	str	r3, [sp, #60]	; 0x3c
 8006e94:	2300      	movs	r3, #0
 8006e96:	930a      	str	r3, [sp, #40]	; 0x28
 8006e98:	18be      	adds	r6, r7, r2
 8006e9a:	9b04      	ldr	r3, [sp, #16]
 8006e9c:	42b7      	cmp	r7, r6
 8006e9e:	4415      	add	r5, r2
 8006ea0:	441d      	add	r5, r3
 8006ea2:	463b      	mov	r3, r7
 8006ea4:	bfa8      	it	ge
 8006ea6:	4633      	movge	r3, r6
 8006ea8:	42ab      	cmp	r3, r5
 8006eaa:	bfa8      	it	ge
 8006eac:	462b      	movge	r3, r5
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bfc2      	ittt	gt
 8006eb2:	1af6      	subgt	r6, r6, r3
 8006eb4:	1aed      	subgt	r5, r5, r3
 8006eb6:	1aff      	subgt	r7, r7, r3
 8006eb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006eba:	b1bb      	cbz	r3, 8006eec <_strtod_l+0x724>
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	4648      	mov	r0, r9
 8006ec2:	f001 fe5f 	bl	8008b84 <__pow5mult>
 8006ec6:	4680      	mov	r8, r0
 8006ec8:	2800      	cmp	r0, #0
 8006eca:	f43f ae9b 	beq.w	8006c04 <_strtod_l+0x43c>
 8006ece:	4601      	mov	r1, r0
 8006ed0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006ed2:	4648      	mov	r0, r9
 8006ed4:	f001 fdbf 	bl	8008a56 <__multiply>
 8006ed8:	900c      	str	r0, [sp, #48]	; 0x30
 8006eda:	2800      	cmp	r0, #0
 8006edc:	f43f ae92 	beq.w	8006c04 <_strtod_l+0x43c>
 8006ee0:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006ee2:	4648      	mov	r0, r9
 8006ee4:	f001 fcd0 	bl	8008888 <_Bfree>
 8006ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eea:	931c      	str	r3, [sp, #112]	; 0x70
 8006eec:	2e00      	cmp	r6, #0
 8006eee:	dc7a      	bgt.n	8006fe6 <_strtod_l+0x81e>
 8006ef0:	9b06      	ldr	r3, [sp, #24]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	dd08      	ble.n	8006f08 <_strtod_l+0x740>
 8006ef6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ef8:	9905      	ldr	r1, [sp, #20]
 8006efa:	4648      	mov	r0, r9
 8006efc:	f001 fe42 	bl	8008b84 <__pow5mult>
 8006f00:	9005      	str	r0, [sp, #20]
 8006f02:	2800      	cmp	r0, #0
 8006f04:	f43f ae7e 	beq.w	8006c04 <_strtod_l+0x43c>
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	dd08      	ble.n	8006f1e <_strtod_l+0x756>
 8006f0c:	462a      	mov	r2, r5
 8006f0e:	9905      	ldr	r1, [sp, #20]
 8006f10:	4648      	mov	r0, r9
 8006f12:	f001 fe85 	bl	8008c20 <__lshift>
 8006f16:	9005      	str	r0, [sp, #20]
 8006f18:	2800      	cmp	r0, #0
 8006f1a:	f43f ae73 	beq.w	8006c04 <_strtod_l+0x43c>
 8006f1e:	2f00      	cmp	r7, #0
 8006f20:	dd08      	ble.n	8006f34 <_strtod_l+0x76c>
 8006f22:	4641      	mov	r1, r8
 8006f24:	463a      	mov	r2, r7
 8006f26:	4648      	mov	r0, r9
 8006f28:	f001 fe7a 	bl	8008c20 <__lshift>
 8006f2c:	4680      	mov	r8, r0
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f43f ae68 	beq.w	8006c04 <_strtod_l+0x43c>
 8006f34:	9a05      	ldr	r2, [sp, #20]
 8006f36:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006f38:	4648      	mov	r0, r9
 8006f3a:	f001 fedf 	bl	8008cfc <__mdiff>
 8006f3e:	4604      	mov	r4, r0
 8006f40:	2800      	cmp	r0, #0
 8006f42:	f43f ae5f 	beq.w	8006c04 <_strtod_l+0x43c>
 8006f46:	68c3      	ldr	r3, [r0, #12]
 8006f48:	930c      	str	r3, [sp, #48]	; 0x30
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60c3      	str	r3, [r0, #12]
 8006f4e:	4641      	mov	r1, r8
 8006f50:	f001 feba 	bl	8008cc8 <__mcmp>
 8006f54:	2800      	cmp	r0, #0
 8006f56:	da55      	bge.n	8007004 <_strtod_l+0x83c>
 8006f58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f5a:	b9e3      	cbnz	r3, 8006f96 <_strtod_l+0x7ce>
 8006f5c:	f1ba 0f00 	cmp.w	sl, #0
 8006f60:	d119      	bne.n	8006f96 <_strtod_l+0x7ce>
 8006f62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f66:	b9b3      	cbnz	r3, 8006f96 <_strtod_l+0x7ce>
 8006f68:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006f6c:	0d1b      	lsrs	r3, r3, #20
 8006f6e:	051b      	lsls	r3, r3, #20
 8006f70:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f74:	d90f      	bls.n	8006f96 <_strtod_l+0x7ce>
 8006f76:	6963      	ldr	r3, [r4, #20]
 8006f78:	b913      	cbnz	r3, 8006f80 <_strtod_l+0x7b8>
 8006f7a:	6923      	ldr	r3, [r4, #16]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	dd0a      	ble.n	8006f96 <_strtod_l+0x7ce>
 8006f80:	4621      	mov	r1, r4
 8006f82:	2201      	movs	r2, #1
 8006f84:	4648      	mov	r0, r9
 8006f86:	f001 fe4b 	bl	8008c20 <__lshift>
 8006f8a:	4641      	mov	r1, r8
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	f001 fe9b 	bl	8008cc8 <__mcmp>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	dc67      	bgt.n	8007066 <_strtod_l+0x89e>
 8006f96:	9b04      	ldr	r3, [sp, #16]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d171      	bne.n	8007080 <_strtod_l+0x8b8>
 8006f9c:	e63d      	b.n	8006c1a <_strtod_l+0x452>
 8006f9e:	f018 0f01 	tst.w	r8, #1
 8006fa2:	d004      	beq.n	8006fae <_strtod_l+0x7e6>
 8006fa4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fa8:	f7f9 fb9e 	bl	80006e8 <__aeabi_dmul>
 8006fac:	2301      	movs	r3, #1
 8006fae:	ea4f 0868 	mov.w	r8, r8, asr #1
 8006fb2:	3508      	adds	r5, #8
 8006fb4:	e6e5      	b.n	8006d82 <_strtod_l+0x5ba>
 8006fb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006fba:	fa02 f303 	lsl.w	r3, r2, r3
 8006fbe:	ea03 0a0a 	and.w	sl, r3, sl
 8006fc2:	e6ff      	b.n	8006dc4 <_strtod_l+0x5fc>
 8006fc4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006fc8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006fcc:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006fd0:	36e2      	adds	r6, #226	; 0xe2
 8006fd2:	fa01 f306 	lsl.w	r3, r1, r6
 8006fd6:	930a      	str	r3, [sp, #40]	; 0x28
 8006fd8:	910f      	str	r1, [sp, #60]	; 0x3c
 8006fda:	e75d      	b.n	8006e98 <_strtod_l+0x6d0>
 8006fdc:	2300      	movs	r3, #0
 8006fde:	930a      	str	r3, [sp, #40]	; 0x28
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	930f      	str	r3, [sp, #60]	; 0x3c
 8006fe4:	e758      	b.n	8006e98 <_strtod_l+0x6d0>
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	991c      	ldr	r1, [sp, #112]	; 0x70
 8006fea:	4648      	mov	r0, r9
 8006fec:	f001 fe18 	bl	8008c20 <__lshift>
 8006ff0:	901c      	str	r0, [sp, #112]	; 0x70
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	f47f af7c 	bne.w	8006ef0 <_strtod_l+0x728>
 8006ff8:	e604      	b.n	8006c04 <_strtod_l+0x43c>
 8006ffa:	bf00      	nop
 8006ffc:	080098a0 	.word	0x080098a0
 8007000:	fffffc02 	.word	0xfffffc02
 8007004:	465d      	mov	r5, fp
 8007006:	f040 8086 	bne.w	8007116 <_strtod_l+0x94e>
 800700a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800700c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007010:	b32a      	cbz	r2, 800705e <_strtod_l+0x896>
 8007012:	4aaf      	ldr	r2, [pc, #700]	; (80072d0 <_strtod_l+0xb08>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d153      	bne.n	80070c0 <_strtod_l+0x8f8>
 8007018:	9b04      	ldr	r3, [sp, #16]
 800701a:	4650      	mov	r0, sl
 800701c:	b1d3      	cbz	r3, 8007054 <_strtod_l+0x88c>
 800701e:	4aad      	ldr	r2, [pc, #692]	; (80072d4 <_strtod_l+0xb0c>)
 8007020:	402a      	ands	r2, r5
 8007022:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8007026:	f04f 31ff 	mov.w	r1, #4294967295
 800702a:	d816      	bhi.n	800705a <_strtod_l+0x892>
 800702c:	0d12      	lsrs	r2, r2, #20
 800702e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007032:	fa01 f303 	lsl.w	r3, r1, r3
 8007036:	4298      	cmp	r0, r3
 8007038:	d142      	bne.n	80070c0 <_strtod_l+0x8f8>
 800703a:	4ba7      	ldr	r3, [pc, #668]	; (80072d8 <_strtod_l+0xb10>)
 800703c:	429d      	cmp	r5, r3
 800703e:	d102      	bne.n	8007046 <_strtod_l+0x87e>
 8007040:	3001      	adds	r0, #1
 8007042:	f43f addf 	beq.w	8006c04 <_strtod_l+0x43c>
 8007046:	4ba3      	ldr	r3, [pc, #652]	; (80072d4 <_strtod_l+0xb0c>)
 8007048:	402b      	ands	r3, r5
 800704a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800704e:	f04f 0a00 	mov.w	sl, #0
 8007052:	e7a0      	b.n	8006f96 <_strtod_l+0x7ce>
 8007054:	f04f 33ff 	mov.w	r3, #4294967295
 8007058:	e7ed      	b.n	8007036 <_strtod_l+0x86e>
 800705a:	460b      	mov	r3, r1
 800705c:	e7eb      	b.n	8007036 <_strtod_l+0x86e>
 800705e:	bb7b      	cbnz	r3, 80070c0 <_strtod_l+0x8f8>
 8007060:	f1ba 0f00 	cmp.w	sl, #0
 8007064:	d12c      	bne.n	80070c0 <_strtod_l+0x8f8>
 8007066:	9904      	ldr	r1, [sp, #16]
 8007068:	4a9a      	ldr	r2, [pc, #616]	; (80072d4 <_strtod_l+0xb0c>)
 800706a:	465b      	mov	r3, fp
 800706c:	b1f1      	cbz	r1, 80070ac <_strtod_l+0x8e4>
 800706e:	ea02 010b 	and.w	r1, r2, fp
 8007072:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007076:	dc19      	bgt.n	80070ac <_strtod_l+0x8e4>
 8007078:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800707c:	f77f ae5b 	ble.w	8006d36 <_strtod_l+0x56e>
 8007080:	4a96      	ldr	r2, [pc, #600]	; (80072dc <_strtod_l+0xb14>)
 8007082:	2300      	movs	r3, #0
 8007084:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8007088:	4650      	mov	r0, sl
 800708a:	4659      	mov	r1, fp
 800708c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8007090:	f7f9 fb2a 	bl	80006e8 <__aeabi_dmul>
 8007094:	4682      	mov	sl, r0
 8007096:	468b      	mov	fp, r1
 8007098:	2900      	cmp	r1, #0
 800709a:	f47f adbe 	bne.w	8006c1a <_strtod_l+0x452>
 800709e:	2800      	cmp	r0, #0
 80070a0:	f47f adbb 	bne.w	8006c1a <_strtod_l+0x452>
 80070a4:	2322      	movs	r3, #34	; 0x22
 80070a6:	f8c9 3000 	str.w	r3, [r9]
 80070aa:	e5b6      	b.n	8006c1a <_strtod_l+0x452>
 80070ac:	4013      	ands	r3, r2
 80070ae:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80070b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80070b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80070ba:	f04f 3aff 	mov.w	sl, #4294967295
 80070be:	e76a      	b.n	8006f96 <_strtod_l+0x7ce>
 80070c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80070c2:	b193      	cbz	r3, 80070ea <_strtod_l+0x922>
 80070c4:	422b      	tst	r3, r5
 80070c6:	f43f af66 	beq.w	8006f96 <_strtod_l+0x7ce>
 80070ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070cc:	9a04      	ldr	r2, [sp, #16]
 80070ce:	4650      	mov	r0, sl
 80070d0:	4659      	mov	r1, fp
 80070d2:	b173      	cbz	r3, 80070f2 <_strtod_l+0x92a>
 80070d4:	f7ff fb5a 	bl	800678c <sulp>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070e0:	f7f9 f94c 	bl	800037c <__adddf3>
 80070e4:	4682      	mov	sl, r0
 80070e6:	468b      	mov	fp, r1
 80070e8:	e755      	b.n	8006f96 <_strtod_l+0x7ce>
 80070ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80070ec:	ea13 0f0a 	tst.w	r3, sl
 80070f0:	e7e9      	b.n	80070c6 <_strtod_l+0x8fe>
 80070f2:	f7ff fb4b 	bl	800678c <sulp>
 80070f6:	4602      	mov	r2, r0
 80070f8:	460b      	mov	r3, r1
 80070fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80070fe:	f7f9 f93b 	bl	8000378 <__aeabi_dsub>
 8007102:	2200      	movs	r2, #0
 8007104:	2300      	movs	r3, #0
 8007106:	4682      	mov	sl, r0
 8007108:	468b      	mov	fp, r1
 800710a:	f7f9 fd55 	bl	8000bb8 <__aeabi_dcmpeq>
 800710e:	2800      	cmp	r0, #0
 8007110:	f47f ae11 	bne.w	8006d36 <_strtod_l+0x56e>
 8007114:	e73f      	b.n	8006f96 <_strtod_l+0x7ce>
 8007116:	4641      	mov	r1, r8
 8007118:	4620      	mov	r0, r4
 800711a:	f001 ff12 	bl	8008f42 <__ratio>
 800711e:	ec57 6b10 	vmov	r6, r7, d0
 8007122:	2200      	movs	r2, #0
 8007124:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007128:	ee10 0a10 	vmov	r0, s0
 800712c:	4639      	mov	r1, r7
 800712e:	f7f9 fd57 	bl	8000be0 <__aeabi_dcmple>
 8007132:	2800      	cmp	r0, #0
 8007134:	d077      	beq.n	8007226 <_strtod_l+0xa5e>
 8007136:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007138:	2b00      	cmp	r3, #0
 800713a:	d04a      	beq.n	80071d2 <_strtod_l+0xa0a>
 800713c:	4b68      	ldr	r3, [pc, #416]	; (80072e0 <_strtod_l+0xb18>)
 800713e:	2200      	movs	r2, #0
 8007140:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007144:	4f66      	ldr	r7, [pc, #408]	; (80072e0 <_strtod_l+0xb18>)
 8007146:	2600      	movs	r6, #0
 8007148:	4b62      	ldr	r3, [pc, #392]	; (80072d4 <_strtod_l+0xb0c>)
 800714a:	402b      	ands	r3, r5
 800714c:	930f      	str	r3, [sp, #60]	; 0x3c
 800714e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007150:	4b64      	ldr	r3, [pc, #400]	; (80072e4 <_strtod_l+0xb1c>)
 8007152:	429a      	cmp	r2, r3
 8007154:	f040 80ce 	bne.w	80072f4 <_strtod_l+0xb2c>
 8007158:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800715c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007160:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 8007164:	ec4b ab10 	vmov	d0, sl, fp
 8007168:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800716c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007170:	f001 fe22 	bl	8008db8 <__ulp>
 8007174:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007178:	ec53 2b10 	vmov	r2, r3, d0
 800717c:	f7f9 fab4 	bl	80006e8 <__aeabi_dmul>
 8007180:	4652      	mov	r2, sl
 8007182:	465b      	mov	r3, fp
 8007184:	f7f9 f8fa 	bl	800037c <__adddf3>
 8007188:	460b      	mov	r3, r1
 800718a:	4952      	ldr	r1, [pc, #328]	; (80072d4 <_strtod_l+0xb0c>)
 800718c:	4a56      	ldr	r2, [pc, #344]	; (80072e8 <_strtod_l+0xb20>)
 800718e:	4019      	ands	r1, r3
 8007190:	4291      	cmp	r1, r2
 8007192:	4682      	mov	sl, r0
 8007194:	d95b      	bls.n	800724e <_strtod_l+0xa86>
 8007196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007198:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800719c:	4293      	cmp	r3, r2
 800719e:	d103      	bne.n	80071a8 <_strtod_l+0x9e0>
 80071a0:	9b08      	ldr	r3, [sp, #32]
 80071a2:	3301      	adds	r3, #1
 80071a4:	f43f ad2e 	beq.w	8006c04 <_strtod_l+0x43c>
 80071a8:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80072d8 <_strtod_l+0xb10>
 80071ac:	f04f 3aff 	mov.w	sl, #4294967295
 80071b0:	991c      	ldr	r1, [sp, #112]	; 0x70
 80071b2:	4648      	mov	r0, r9
 80071b4:	f001 fb68 	bl	8008888 <_Bfree>
 80071b8:	9905      	ldr	r1, [sp, #20]
 80071ba:	4648      	mov	r0, r9
 80071bc:	f001 fb64 	bl	8008888 <_Bfree>
 80071c0:	4641      	mov	r1, r8
 80071c2:	4648      	mov	r0, r9
 80071c4:	f001 fb60 	bl	8008888 <_Bfree>
 80071c8:	4621      	mov	r1, r4
 80071ca:	4648      	mov	r0, r9
 80071cc:	f001 fb5c 	bl	8008888 <_Bfree>
 80071d0:	e619      	b.n	8006e06 <_strtod_l+0x63e>
 80071d2:	f1ba 0f00 	cmp.w	sl, #0
 80071d6:	d11a      	bne.n	800720e <_strtod_l+0xa46>
 80071d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80071dc:	b9eb      	cbnz	r3, 800721a <_strtod_l+0xa52>
 80071de:	2200      	movs	r2, #0
 80071e0:	4b3f      	ldr	r3, [pc, #252]	; (80072e0 <_strtod_l+0xb18>)
 80071e2:	4630      	mov	r0, r6
 80071e4:	4639      	mov	r1, r7
 80071e6:	f7f9 fcf1 	bl	8000bcc <__aeabi_dcmplt>
 80071ea:	b9c8      	cbnz	r0, 8007220 <_strtod_l+0xa58>
 80071ec:	4630      	mov	r0, r6
 80071ee:	4639      	mov	r1, r7
 80071f0:	2200      	movs	r2, #0
 80071f2:	4b3e      	ldr	r3, [pc, #248]	; (80072ec <_strtod_l+0xb24>)
 80071f4:	f7f9 fa78 	bl	80006e8 <__aeabi_dmul>
 80071f8:	4606      	mov	r6, r0
 80071fa:	460f      	mov	r7, r1
 80071fc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007200:	9618      	str	r6, [sp, #96]	; 0x60
 8007202:	9319      	str	r3, [sp, #100]	; 0x64
 8007204:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007208:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800720c:	e79c      	b.n	8007148 <_strtod_l+0x980>
 800720e:	f1ba 0f01 	cmp.w	sl, #1
 8007212:	d102      	bne.n	800721a <_strtod_l+0xa52>
 8007214:	2d00      	cmp	r5, #0
 8007216:	f43f ad8e 	beq.w	8006d36 <_strtod_l+0x56e>
 800721a:	2200      	movs	r2, #0
 800721c:	4b34      	ldr	r3, [pc, #208]	; (80072f0 <_strtod_l+0xb28>)
 800721e:	e78f      	b.n	8007140 <_strtod_l+0x978>
 8007220:	2600      	movs	r6, #0
 8007222:	4f32      	ldr	r7, [pc, #200]	; (80072ec <_strtod_l+0xb24>)
 8007224:	e7ea      	b.n	80071fc <_strtod_l+0xa34>
 8007226:	4b31      	ldr	r3, [pc, #196]	; (80072ec <_strtod_l+0xb24>)
 8007228:	4630      	mov	r0, r6
 800722a:	4639      	mov	r1, r7
 800722c:	2200      	movs	r2, #0
 800722e:	f7f9 fa5b 	bl	80006e8 <__aeabi_dmul>
 8007232:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007234:	4606      	mov	r6, r0
 8007236:	460f      	mov	r7, r1
 8007238:	b933      	cbnz	r3, 8007248 <_strtod_l+0xa80>
 800723a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800723e:	9010      	str	r0, [sp, #64]	; 0x40
 8007240:	9311      	str	r3, [sp, #68]	; 0x44
 8007242:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007246:	e7df      	b.n	8007208 <_strtod_l+0xa40>
 8007248:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800724c:	e7f9      	b.n	8007242 <_strtod_l+0xa7a>
 800724e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1ab      	bne.n	80071b0 <_strtod_l+0x9e8>
 8007258:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800725c:	0d1b      	lsrs	r3, r3, #20
 800725e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007260:	051b      	lsls	r3, r3, #20
 8007262:	429a      	cmp	r2, r3
 8007264:	465d      	mov	r5, fp
 8007266:	d1a3      	bne.n	80071b0 <_strtod_l+0x9e8>
 8007268:	4639      	mov	r1, r7
 800726a:	4630      	mov	r0, r6
 800726c:	f7f9 fcec 	bl	8000c48 <__aeabi_d2iz>
 8007270:	f7f9 f9d0 	bl	8000614 <__aeabi_i2d>
 8007274:	460b      	mov	r3, r1
 8007276:	4602      	mov	r2, r0
 8007278:	4639      	mov	r1, r7
 800727a:	4630      	mov	r0, r6
 800727c:	f7f9 f87c 	bl	8000378 <__aeabi_dsub>
 8007280:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007282:	4606      	mov	r6, r0
 8007284:	460f      	mov	r7, r1
 8007286:	b933      	cbnz	r3, 8007296 <_strtod_l+0xace>
 8007288:	f1ba 0f00 	cmp.w	sl, #0
 800728c:	d103      	bne.n	8007296 <_strtod_l+0xace>
 800728e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007292:	2d00      	cmp	r5, #0
 8007294:	d06d      	beq.n	8007372 <_strtod_l+0xbaa>
 8007296:	a30a      	add	r3, pc, #40	; (adr r3, 80072c0 <_strtod_l+0xaf8>)
 8007298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729c:	4630      	mov	r0, r6
 800729e:	4639      	mov	r1, r7
 80072a0:	f7f9 fc94 	bl	8000bcc <__aeabi_dcmplt>
 80072a4:	2800      	cmp	r0, #0
 80072a6:	f47f acb8 	bne.w	8006c1a <_strtod_l+0x452>
 80072aa:	a307      	add	r3, pc, #28	; (adr r3, 80072c8 <_strtod_l+0xb00>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	4630      	mov	r0, r6
 80072b2:	4639      	mov	r1, r7
 80072b4:	f7f9 fca8 	bl	8000c08 <__aeabi_dcmpgt>
 80072b8:	2800      	cmp	r0, #0
 80072ba:	f43f af79 	beq.w	80071b0 <_strtod_l+0x9e8>
 80072be:	e4ac      	b.n	8006c1a <_strtod_l+0x452>
 80072c0:	94a03595 	.word	0x94a03595
 80072c4:	3fdfffff 	.word	0x3fdfffff
 80072c8:	35afe535 	.word	0x35afe535
 80072cc:	3fe00000 	.word	0x3fe00000
 80072d0:	000fffff 	.word	0x000fffff
 80072d4:	7ff00000 	.word	0x7ff00000
 80072d8:	7fefffff 	.word	0x7fefffff
 80072dc:	39500000 	.word	0x39500000
 80072e0:	3ff00000 	.word	0x3ff00000
 80072e4:	7fe00000 	.word	0x7fe00000
 80072e8:	7c9fffff 	.word	0x7c9fffff
 80072ec:	3fe00000 	.word	0x3fe00000
 80072f0:	bff00000 	.word	0xbff00000
 80072f4:	9b04      	ldr	r3, [sp, #16]
 80072f6:	b333      	cbz	r3, 8007346 <_strtod_l+0xb7e>
 80072f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072fa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072fe:	d822      	bhi.n	8007346 <_strtod_l+0xb7e>
 8007300:	a327      	add	r3, pc, #156	; (adr r3, 80073a0 <_strtod_l+0xbd8>)
 8007302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007306:	4630      	mov	r0, r6
 8007308:	4639      	mov	r1, r7
 800730a:	f7f9 fc69 	bl	8000be0 <__aeabi_dcmple>
 800730e:	b1a0      	cbz	r0, 800733a <_strtod_l+0xb72>
 8007310:	4639      	mov	r1, r7
 8007312:	4630      	mov	r0, r6
 8007314:	f7f9 fcc0 	bl	8000c98 <__aeabi_d2uiz>
 8007318:	2800      	cmp	r0, #0
 800731a:	bf08      	it	eq
 800731c:	2001      	moveq	r0, #1
 800731e:	f7f9 f969 	bl	80005f4 <__aeabi_ui2d>
 8007322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007324:	4606      	mov	r6, r0
 8007326:	460f      	mov	r7, r1
 8007328:	bb03      	cbnz	r3, 800736c <_strtod_l+0xba4>
 800732a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800732e:	9012      	str	r0, [sp, #72]	; 0x48
 8007330:	9313      	str	r3, [sp, #76]	; 0x4c
 8007332:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007336:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800733a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800733c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800733e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007342:	1a9b      	subs	r3, r3, r2
 8007344:	930b      	str	r3, [sp, #44]	; 0x2c
 8007346:	ed9d 0b08 	vldr	d0, [sp, #32]
 800734a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800734e:	f001 fd33 	bl	8008db8 <__ulp>
 8007352:	4650      	mov	r0, sl
 8007354:	ec53 2b10 	vmov	r2, r3, d0
 8007358:	4659      	mov	r1, fp
 800735a:	f7f9 f9c5 	bl	80006e8 <__aeabi_dmul>
 800735e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007362:	f7f9 f80b 	bl	800037c <__adddf3>
 8007366:	4682      	mov	sl, r0
 8007368:	468b      	mov	fp, r1
 800736a:	e772      	b.n	8007252 <_strtod_l+0xa8a>
 800736c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007370:	e7df      	b.n	8007332 <_strtod_l+0xb6a>
 8007372:	a30d      	add	r3, pc, #52	; (adr r3, 80073a8 <_strtod_l+0xbe0>)
 8007374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007378:	f7f9 fc28 	bl	8000bcc <__aeabi_dcmplt>
 800737c:	e79c      	b.n	80072b8 <_strtod_l+0xaf0>
 800737e:	2300      	movs	r3, #0
 8007380:	930d      	str	r3, [sp, #52]	; 0x34
 8007382:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007386:	6013      	str	r3, [r2, #0]
 8007388:	f7ff ba61 	b.w	800684e <_strtod_l+0x86>
 800738c:	2b65      	cmp	r3, #101	; 0x65
 800738e:	f04f 0200 	mov.w	r2, #0
 8007392:	f43f ab4e 	beq.w	8006a32 <_strtod_l+0x26a>
 8007396:	2101      	movs	r1, #1
 8007398:	4614      	mov	r4, r2
 800739a:	9104      	str	r1, [sp, #16]
 800739c:	f7ff bacb 	b.w	8006936 <_strtod_l+0x16e>
 80073a0:	ffc00000 	.word	0xffc00000
 80073a4:	41dfffff 	.word	0x41dfffff
 80073a8:	94a03595 	.word	0x94a03595
 80073ac:	3fcfffff 	.word	0x3fcfffff

080073b0 <_strtod_r>:
 80073b0:	4b05      	ldr	r3, [pc, #20]	; (80073c8 <_strtod_r+0x18>)
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	b410      	push	{r4}
 80073b6:	6a1b      	ldr	r3, [r3, #32]
 80073b8:	4c04      	ldr	r4, [pc, #16]	; (80073cc <_strtod_r+0x1c>)
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	bf08      	it	eq
 80073be:	4623      	moveq	r3, r4
 80073c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c4:	f7ff ba00 	b.w	80067c8 <_strtod_l>
 80073c8:	2000000c 	.word	0x2000000c
 80073cc:	20000070 	.word	0x20000070

080073d0 <_strtol_l.isra.0>:
 80073d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073d4:	4680      	mov	r8, r0
 80073d6:	4689      	mov	r9, r1
 80073d8:	4692      	mov	sl, r2
 80073da:	461e      	mov	r6, r3
 80073dc:	460f      	mov	r7, r1
 80073de:	463d      	mov	r5, r7
 80073e0:	9808      	ldr	r0, [sp, #32]
 80073e2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80073e6:	f001 f9ed 	bl	80087c4 <__locale_ctype_ptr_l>
 80073ea:	4420      	add	r0, r4
 80073ec:	7843      	ldrb	r3, [r0, #1]
 80073ee:	f013 0308 	ands.w	r3, r3, #8
 80073f2:	d132      	bne.n	800745a <_strtol_l.isra.0+0x8a>
 80073f4:	2c2d      	cmp	r4, #45	; 0x2d
 80073f6:	d132      	bne.n	800745e <_strtol_l.isra.0+0x8e>
 80073f8:	787c      	ldrb	r4, [r7, #1]
 80073fa:	1cbd      	adds	r5, r7, #2
 80073fc:	2201      	movs	r2, #1
 80073fe:	2e00      	cmp	r6, #0
 8007400:	d05d      	beq.n	80074be <_strtol_l.isra.0+0xee>
 8007402:	2e10      	cmp	r6, #16
 8007404:	d109      	bne.n	800741a <_strtol_l.isra.0+0x4a>
 8007406:	2c30      	cmp	r4, #48	; 0x30
 8007408:	d107      	bne.n	800741a <_strtol_l.isra.0+0x4a>
 800740a:	782b      	ldrb	r3, [r5, #0]
 800740c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007410:	2b58      	cmp	r3, #88	; 0x58
 8007412:	d14f      	bne.n	80074b4 <_strtol_l.isra.0+0xe4>
 8007414:	786c      	ldrb	r4, [r5, #1]
 8007416:	2610      	movs	r6, #16
 8007418:	3502      	adds	r5, #2
 800741a:	2a00      	cmp	r2, #0
 800741c:	bf14      	ite	ne
 800741e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007422:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007426:	2700      	movs	r7, #0
 8007428:	fbb1 fcf6 	udiv	ip, r1, r6
 800742c:	4638      	mov	r0, r7
 800742e:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007432:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007436:	2b09      	cmp	r3, #9
 8007438:	d817      	bhi.n	800746a <_strtol_l.isra.0+0x9a>
 800743a:	461c      	mov	r4, r3
 800743c:	42a6      	cmp	r6, r4
 800743e:	dd23      	ble.n	8007488 <_strtol_l.isra.0+0xb8>
 8007440:	1c7b      	adds	r3, r7, #1
 8007442:	d007      	beq.n	8007454 <_strtol_l.isra.0+0x84>
 8007444:	4584      	cmp	ip, r0
 8007446:	d31c      	bcc.n	8007482 <_strtol_l.isra.0+0xb2>
 8007448:	d101      	bne.n	800744e <_strtol_l.isra.0+0x7e>
 800744a:	45a6      	cmp	lr, r4
 800744c:	db19      	blt.n	8007482 <_strtol_l.isra.0+0xb2>
 800744e:	fb00 4006 	mla	r0, r0, r6, r4
 8007452:	2701      	movs	r7, #1
 8007454:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007458:	e7eb      	b.n	8007432 <_strtol_l.isra.0+0x62>
 800745a:	462f      	mov	r7, r5
 800745c:	e7bf      	b.n	80073de <_strtol_l.isra.0+0xe>
 800745e:	2c2b      	cmp	r4, #43	; 0x2b
 8007460:	bf04      	itt	eq
 8007462:	1cbd      	addeq	r5, r7, #2
 8007464:	787c      	ldrbeq	r4, [r7, #1]
 8007466:	461a      	mov	r2, r3
 8007468:	e7c9      	b.n	80073fe <_strtol_l.isra.0+0x2e>
 800746a:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800746e:	2b19      	cmp	r3, #25
 8007470:	d801      	bhi.n	8007476 <_strtol_l.isra.0+0xa6>
 8007472:	3c37      	subs	r4, #55	; 0x37
 8007474:	e7e2      	b.n	800743c <_strtol_l.isra.0+0x6c>
 8007476:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800747a:	2b19      	cmp	r3, #25
 800747c:	d804      	bhi.n	8007488 <_strtol_l.isra.0+0xb8>
 800747e:	3c57      	subs	r4, #87	; 0x57
 8007480:	e7dc      	b.n	800743c <_strtol_l.isra.0+0x6c>
 8007482:	f04f 37ff 	mov.w	r7, #4294967295
 8007486:	e7e5      	b.n	8007454 <_strtol_l.isra.0+0x84>
 8007488:	1c7b      	adds	r3, r7, #1
 800748a:	d108      	bne.n	800749e <_strtol_l.isra.0+0xce>
 800748c:	2322      	movs	r3, #34	; 0x22
 800748e:	f8c8 3000 	str.w	r3, [r8]
 8007492:	4608      	mov	r0, r1
 8007494:	f1ba 0f00 	cmp.w	sl, #0
 8007498:	d107      	bne.n	80074aa <_strtol_l.isra.0+0xda>
 800749a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800749e:	b102      	cbz	r2, 80074a2 <_strtol_l.isra.0+0xd2>
 80074a0:	4240      	negs	r0, r0
 80074a2:	f1ba 0f00 	cmp.w	sl, #0
 80074a6:	d0f8      	beq.n	800749a <_strtol_l.isra.0+0xca>
 80074a8:	b10f      	cbz	r7, 80074ae <_strtol_l.isra.0+0xde>
 80074aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80074ae:	f8ca 9000 	str.w	r9, [sl]
 80074b2:	e7f2      	b.n	800749a <_strtol_l.isra.0+0xca>
 80074b4:	2430      	movs	r4, #48	; 0x30
 80074b6:	2e00      	cmp	r6, #0
 80074b8:	d1af      	bne.n	800741a <_strtol_l.isra.0+0x4a>
 80074ba:	2608      	movs	r6, #8
 80074bc:	e7ad      	b.n	800741a <_strtol_l.isra.0+0x4a>
 80074be:	2c30      	cmp	r4, #48	; 0x30
 80074c0:	d0a3      	beq.n	800740a <_strtol_l.isra.0+0x3a>
 80074c2:	260a      	movs	r6, #10
 80074c4:	e7a9      	b.n	800741a <_strtol_l.isra.0+0x4a>
	...

080074c8 <_strtol_r>:
 80074c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80074ca:	4c06      	ldr	r4, [pc, #24]	; (80074e4 <_strtol_r+0x1c>)
 80074cc:	4d06      	ldr	r5, [pc, #24]	; (80074e8 <_strtol_r+0x20>)
 80074ce:	6824      	ldr	r4, [r4, #0]
 80074d0:	6a24      	ldr	r4, [r4, #32]
 80074d2:	2c00      	cmp	r4, #0
 80074d4:	bf08      	it	eq
 80074d6:	462c      	moveq	r4, r5
 80074d8:	9400      	str	r4, [sp, #0]
 80074da:	f7ff ff79 	bl	80073d0 <_strtol_l.isra.0>
 80074de:	b003      	add	sp, #12
 80074e0:	bd30      	pop	{r4, r5, pc}
 80074e2:	bf00      	nop
 80074e4:	2000000c 	.word	0x2000000c
 80074e8:	20000070 	.word	0x20000070

080074ec <quorem>:
 80074ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f0:	6903      	ldr	r3, [r0, #16]
 80074f2:	690c      	ldr	r4, [r1, #16]
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	4680      	mov	r8, r0
 80074f8:	f2c0 8082 	blt.w	8007600 <quorem+0x114>
 80074fc:	3c01      	subs	r4, #1
 80074fe:	f101 0714 	add.w	r7, r1, #20
 8007502:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007506:	f100 0614 	add.w	r6, r0, #20
 800750a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800750e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007512:	eb06 030c 	add.w	r3, r6, ip
 8007516:	3501      	adds	r5, #1
 8007518:	eb07 090c 	add.w	r9, r7, ip
 800751c:	9301      	str	r3, [sp, #4]
 800751e:	fbb0 f5f5 	udiv	r5, r0, r5
 8007522:	b395      	cbz	r5, 800758a <quorem+0x9e>
 8007524:	f04f 0a00 	mov.w	sl, #0
 8007528:	4638      	mov	r0, r7
 800752a:	46b6      	mov	lr, r6
 800752c:	46d3      	mov	fp, sl
 800752e:	f850 2b04 	ldr.w	r2, [r0], #4
 8007532:	b293      	uxth	r3, r2
 8007534:	fb05 a303 	mla	r3, r5, r3, sl
 8007538:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800753c:	b29b      	uxth	r3, r3
 800753e:	ebab 0303 	sub.w	r3, fp, r3
 8007542:	0c12      	lsrs	r2, r2, #16
 8007544:	f8de b000 	ldr.w	fp, [lr]
 8007548:	fb05 a202 	mla	r2, r5, r2, sl
 800754c:	fa13 f38b 	uxtah	r3, r3, fp
 8007550:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007554:	fa1f fb82 	uxth.w	fp, r2
 8007558:	f8de 2000 	ldr.w	r2, [lr]
 800755c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007560:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007564:	b29b      	uxth	r3, r3
 8007566:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800756a:	4581      	cmp	r9, r0
 800756c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007570:	f84e 3b04 	str.w	r3, [lr], #4
 8007574:	d2db      	bcs.n	800752e <quorem+0x42>
 8007576:	f856 300c 	ldr.w	r3, [r6, ip]
 800757a:	b933      	cbnz	r3, 800758a <quorem+0x9e>
 800757c:	9b01      	ldr	r3, [sp, #4]
 800757e:	3b04      	subs	r3, #4
 8007580:	429e      	cmp	r6, r3
 8007582:	461a      	mov	r2, r3
 8007584:	d330      	bcc.n	80075e8 <quorem+0xfc>
 8007586:	f8c8 4010 	str.w	r4, [r8, #16]
 800758a:	4640      	mov	r0, r8
 800758c:	f001 fb9c 	bl	8008cc8 <__mcmp>
 8007590:	2800      	cmp	r0, #0
 8007592:	db25      	blt.n	80075e0 <quorem+0xf4>
 8007594:	3501      	adds	r5, #1
 8007596:	4630      	mov	r0, r6
 8007598:	f04f 0c00 	mov.w	ip, #0
 800759c:	f857 2b04 	ldr.w	r2, [r7], #4
 80075a0:	f8d0 e000 	ldr.w	lr, [r0]
 80075a4:	b293      	uxth	r3, r2
 80075a6:	ebac 0303 	sub.w	r3, ip, r3
 80075aa:	0c12      	lsrs	r2, r2, #16
 80075ac:	fa13 f38e 	uxtah	r3, r3, lr
 80075b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80075b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075b8:	b29b      	uxth	r3, r3
 80075ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075be:	45b9      	cmp	r9, r7
 80075c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075c4:	f840 3b04 	str.w	r3, [r0], #4
 80075c8:	d2e8      	bcs.n	800759c <quorem+0xb0>
 80075ca:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80075ce:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80075d2:	b92a      	cbnz	r2, 80075e0 <quorem+0xf4>
 80075d4:	3b04      	subs	r3, #4
 80075d6:	429e      	cmp	r6, r3
 80075d8:	461a      	mov	r2, r3
 80075da:	d30b      	bcc.n	80075f4 <quorem+0x108>
 80075dc:	f8c8 4010 	str.w	r4, [r8, #16]
 80075e0:	4628      	mov	r0, r5
 80075e2:	b003      	add	sp, #12
 80075e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e8:	6812      	ldr	r2, [r2, #0]
 80075ea:	3b04      	subs	r3, #4
 80075ec:	2a00      	cmp	r2, #0
 80075ee:	d1ca      	bne.n	8007586 <quorem+0x9a>
 80075f0:	3c01      	subs	r4, #1
 80075f2:	e7c5      	b.n	8007580 <quorem+0x94>
 80075f4:	6812      	ldr	r2, [r2, #0]
 80075f6:	3b04      	subs	r3, #4
 80075f8:	2a00      	cmp	r2, #0
 80075fa:	d1ef      	bne.n	80075dc <quorem+0xf0>
 80075fc:	3c01      	subs	r4, #1
 80075fe:	e7ea      	b.n	80075d6 <quorem+0xea>
 8007600:	2000      	movs	r0, #0
 8007602:	e7ee      	b.n	80075e2 <quorem+0xf6>
 8007604:	0000      	movs	r0, r0
	...

08007608 <_dtoa_r>:
 8007608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800760c:	ec57 6b10 	vmov	r6, r7, d0
 8007610:	b097      	sub	sp, #92	; 0x5c
 8007612:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007614:	9106      	str	r1, [sp, #24]
 8007616:	4604      	mov	r4, r0
 8007618:	920b      	str	r2, [sp, #44]	; 0x2c
 800761a:	9312      	str	r3, [sp, #72]	; 0x48
 800761c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007620:	e9cd 6700 	strd	r6, r7, [sp]
 8007624:	b93d      	cbnz	r5, 8007636 <_dtoa_r+0x2e>
 8007626:	2010      	movs	r0, #16
 8007628:	f001 f8e0 	bl	80087ec <malloc>
 800762c:	6260      	str	r0, [r4, #36]	; 0x24
 800762e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007632:	6005      	str	r5, [r0, #0]
 8007634:	60c5      	str	r5, [r0, #12]
 8007636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007638:	6819      	ldr	r1, [r3, #0]
 800763a:	b151      	cbz	r1, 8007652 <_dtoa_r+0x4a>
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	604a      	str	r2, [r1, #4]
 8007640:	2301      	movs	r3, #1
 8007642:	4093      	lsls	r3, r2
 8007644:	608b      	str	r3, [r1, #8]
 8007646:	4620      	mov	r0, r4
 8007648:	f001 f91e 	bl	8008888 <_Bfree>
 800764c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800764e:	2200      	movs	r2, #0
 8007650:	601a      	str	r2, [r3, #0]
 8007652:	1e3b      	subs	r3, r7, #0
 8007654:	bfbb      	ittet	lt
 8007656:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800765a:	9301      	strlt	r3, [sp, #4]
 800765c:	2300      	movge	r3, #0
 800765e:	2201      	movlt	r2, #1
 8007660:	bfac      	ite	ge
 8007662:	f8c8 3000 	strge.w	r3, [r8]
 8007666:	f8c8 2000 	strlt.w	r2, [r8]
 800766a:	4baf      	ldr	r3, [pc, #700]	; (8007928 <_dtoa_r+0x320>)
 800766c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007670:	ea33 0308 	bics.w	r3, r3, r8
 8007674:	d114      	bne.n	80076a0 <_dtoa_r+0x98>
 8007676:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007678:	f242 730f 	movw	r3, #9999	; 0x270f
 800767c:	6013      	str	r3, [r2, #0]
 800767e:	9b00      	ldr	r3, [sp, #0]
 8007680:	b923      	cbnz	r3, 800768c <_dtoa_r+0x84>
 8007682:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007686:	2800      	cmp	r0, #0
 8007688:	f000 8542 	beq.w	8008110 <_dtoa_r+0xb08>
 800768c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800768e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800793c <_dtoa_r+0x334>
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8544 	beq.w	8008120 <_dtoa_r+0xb18>
 8007698:	f10b 0303 	add.w	r3, fp, #3
 800769c:	f000 bd3e 	b.w	800811c <_dtoa_r+0xb14>
 80076a0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80076a4:	2200      	movs	r2, #0
 80076a6:	2300      	movs	r3, #0
 80076a8:	4630      	mov	r0, r6
 80076aa:	4639      	mov	r1, r7
 80076ac:	f7f9 fa84 	bl	8000bb8 <__aeabi_dcmpeq>
 80076b0:	4681      	mov	r9, r0
 80076b2:	b168      	cbz	r0, 80076d0 <_dtoa_r+0xc8>
 80076b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80076b6:	2301      	movs	r3, #1
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80076bc:	2b00      	cmp	r3, #0
 80076be:	f000 8524 	beq.w	800810a <_dtoa_r+0xb02>
 80076c2:	4b9a      	ldr	r3, [pc, #616]	; (800792c <_dtoa_r+0x324>)
 80076c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80076c6:	f103 3bff 	add.w	fp, r3, #4294967295
 80076ca:	6013      	str	r3, [r2, #0]
 80076cc:	f000 bd28 	b.w	8008120 <_dtoa_r+0xb18>
 80076d0:	aa14      	add	r2, sp, #80	; 0x50
 80076d2:	a915      	add	r1, sp, #84	; 0x54
 80076d4:	ec47 6b10 	vmov	d0, r6, r7
 80076d8:	4620      	mov	r0, r4
 80076da:	f001 fbe3 	bl	8008ea4 <__d2b>
 80076de:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80076e2:	9004      	str	r0, [sp, #16]
 80076e4:	2d00      	cmp	r5, #0
 80076e6:	d07c      	beq.n	80077e2 <_dtoa_r+0x1da>
 80076e8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076ec:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80076f0:	46b2      	mov	sl, r6
 80076f2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80076f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076fa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80076fe:	2200      	movs	r2, #0
 8007700:	4b8b      	ldr	r3, [pc, #556]	; (8007930 <_dtoa_r+0x328>)
 8007702:	4650      	mov	r0, sl
 8007704:	4659      	mov	r1, fp
 8007706:	f7f8 fe37 	bl	8000378 <__aeabi_dsub>
 800770a:	a381      	add	r3, pc, #516	; (adr r3, 8007910 <_dtoa_r+0x308>)
 800770c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007710:	f7f8 ffea 	bl	80006e8 <__aeabi_dmul>
 8007714:	a380      	add	r3, pc, #512	; (adr r3, 8007918 <_dtoa_r+0x310>)
 8007716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771a:	f7f8 fe2f 	bl	800037c <__adddf3>
 800771e:	4606      	mov	r6, r0
 8007720:	4628      	mov	r0, r5
 8007722:	460f      	mov	r7, r1
 8007724:	f7f8 ff76 	bl	8000614 <__aeabi_i2d>
 8007728:	a37d      	add	r3, pc, #500	; (adr r3, 8007920 <_dtoa_r+0x318>)
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f7f8 ffdb 	bl	80006e8 <__aeabi_dmul>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4630      	mov	r0, r6
 8007738:	4639      	mov	r1, r7
 800773a:	f7f8 fe1f 	bl	800037c <__adddf3>
 800773e:	4606      	mov	r6, r0
 8007740:	460f      	mov	r7, r1
 8007742:	f7f9 fa81 	bl	8000c48 <__aeabi_d2iz>
 8007746:	2200      	movs	r2, #0
 8007748:	4682      	mov	sl, r0
 800774a:	2300      	movs	r3, #0
 800774c:	4630      	mov	r0, r6
 800774e:	4639      	mov	r1, r7
 8007750:	f7f9 fa3c 	bl	8000bcc <__aeabi_dcmplt>
 8007754:	b148      	cbz	r0, 800776a <_dtoa_r+0x162>
 8007756:	4650      	mov	r0, sl
 8007758:	f7f8 ff5c 	bl	8000614 <__aeabi_i2d>
 800775c:	4632      	mov	r2, r6
 800775e:	463b      	mov	r3, r7
 8007760:	f7f9 fa2a 	bl	8000bb8 <__aeabi_dcmpeq>
 8007764:	b908      	cbnz	r0, 800776a <_dtoa_r+0x162>
 8007766:	f10a 3aff 	add.w	sl, sl, #4294967295
 800776a:	f1ba 0f16 	cmp.w	sl, #22
 800776e:	d859      	bhi.n	8007824 <_dtoa_r+0x21c>
 8007770:	4970      	ldr	r1, [pc, #448]	; (8007934 <_dtoa_r+0x32c>)
 8007772:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007776:	e9dd 2300 	ldrd	r2, r3, [sp]
 800777a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800777e:	f7f9 fa43 	bl	8000c08 <__aeabi_dcmpgt>
 8007782:	2800      	cmp	r0, #0
 8007784:	d050      	beq.n	8007828 <_dtoa_r+0x220>
 8007786:	f10a 3aff 	add.w	sl, sl, #4294967295
 800778a:	2300      	movs	r3, #0
 800778c:	930f      	str	r3, [sp, #60]	; 0x3c
 800778e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007790:	1b5d      	subs	r5, r3, r5
 8007792:	f1b5 0801 	subs.w	r8, r5, #1
 8007796:	bf49      	itett	mi
 8007798:	f1c5 0301 	rsbmi	r3, r5, #1
 800779c:	2300      	movpl	r3, #0
 800779e:	9305      	strmi	r3, [sp, #20]
 80077a0:	f04f 0800 	movmi.w	r8, #0
 80077a4:	bf58      	it	pl
 80077a6:	9305      	strpl	r3, [sp, #20]
 80077a8:	f1ba 0f00 	cmp.w	sl, #0
 80077ac:	db3e      	blt.n	800782c <_dtoa_r+0x224>
 80077ae:	2300      	movs	r3, #0
 80077b0:	44d0      	add	r8, sl
 80077b2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80077b6:	9307      	str	r3, [sp, #28]
 80077b8:	9b06      	ldr	r3, [sp, #24]
 80077ba:	2b09      	cmp	r3, #9
 80077bc:	f200 8090 	bhi.w	80078e0 <_dtoa_r+0x2d8>
 80077c0:	2b05      	cmp	r3, #5
 80077c2:	bfc4      	itt	gt
 80077c4:	3b04      	subgt	r3, #4
 80077c6:	9306      	strgt	r3, [sp, #24]
 80077c8:	9b06      	ldr	r3, [sp, #24]
 80077ca:	f1a3 0302 	sub.w	r3, r3, #2
 80077ce:	bfcc      	ite	gt
 80077d0:	2500      	movgt	r5, #0
 80077d2:	2501      	movle	r5, #1
 80077d4:	2b03      	cmp	r3, #3
 80077d6:	f200 808f 	bhi.w	80078f8 <_dtoa_r+0x2f0>
 80077da:	e8df f003 	tbb	[pc, r3]
 80077de:	7f7d      	.short	0x7f7d
 80077e0:	7131      	.short	0x7131
 80077e2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80077e6:	441d      	add	r5, r3
 80077e8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80077ec:	2820      	cmp	r0, #32
 80077ee:	dd13      	ble.n	8007818 <_dtoa_r+0x210>
 80077f0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80077f4:	9b00      	ldr	r3, [sp, #0]
 80077f6:	fa08 f800 	lsl.w	r8, r8, r0
 80077fa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80077fe:	fa23 f000 	lsr.w	r0, r3, r0
 8007802:	ea48 0000 	orr.w	r0, r8, r0
 8007806:	f7f8 fef5 	bl	80005f4 <__aeabi_ui2d>
 800780a:	2301      	movs	r3, #1
 800780c:	4682      	mov	sl, r0
 800780e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8007812:	3d01      	subs	r5, #1
 8007814:	9313      	str	r3, [sp, #76]	; 0x4c
 8007816:	e772      	b.n	80076fe <_dtoa_r+0xf6>
 8007818:	9b00      	ldr	r3, [sp, #0]
 800781a:	f1c0 0020 	rsb	r0, r0, #32
 800781e:	fa03 f000 	lsl.w	r0, r3, r0
 8007822:	e7f0      	b.n	8007806 <_dtoa_r+0x1fe>
 8007824:	2301      	movs	r3, #1
 8007826:	e7b1      	b.n	800778c <_dtoa_r+0x184>
 8007828:	900f      	str	r0, [sp, #60]	; 0x3c
 800782a:	e7b0      	b.n	800778e <_dtoa_r+0x186>
 800782c:	9b05      	ldr	r3, [sp, #20]
 800782e:	eba3 030a 	sub.w	r3, r3, sl
 8007832:	9305      	str	r3, [sp, #20]
 8007834:	f1ca 0300 	rsb	r3, sl, #0
 8007838:	9307      	str	r3, [sp, #28]
 800783a:	2300      	movs	r3, #0
 800783c:	930e      	str	r3, [sp, #56]	; 0x38
 800783e:	e7bb      	b.n	80077b8 <_dtoa_r+0x1b0>
 8007840:	2301      	movs	r3, #1
 8007842:	930a      	str	r3, [sp, #40]	; 0x28
 8007844:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007846:	2b00      	cmp	r3, #0
 8007848:	dd59      	ble.n	80078fe <_dtoa_r+0x2f6>
 800784a:	9302      	str	r3, [sp, #8]
 800784c:	4699      	mov	r9, r3
 800784e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007850:	2200      	movs	r2, #0
 8007852:	6072      	str	r2, [r6, #4]
 8007854:	2204      	movs	r2, #4
 8007856:	f102 0014 	add.w	r0, r2, #20
 800785a:	4298      	cmp	r0, r3
 800785c:	6871      	ldr	r1, [r6, #4]
 800785e:	d953      	bls.n	8007908 <_dtoa_r+0x300>
 8007860:	4620      	mov	r0, r4
 8007862:	f000 ffdd 	bl	8008820 <_Balloc>
 8007866:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007868:	6030      	str	r0, [r6, #0]
 800786a:	f1b9 0f0e 	cmp.w	r9, #14
 800786e:	f8d3 b000 	ldr.w	fp, [r3]
 8007872:	f200 80e6 	bhi.w	8007a42 <_dtoa_r+0x43a>
 8007876:	2d00      	cmp	r5, #0
 8007878:	f000 80e3 	beq.w	8007a42 <_dtoa_r+0x43a>
 800787c:	ed9d 7b00 	vldr	d7, [sp]
 8007880:	f1ba 0f00 	cmp.w	sl, #0
 8007884:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8007888:	dd74      	ble.n	8007974 <_dtoa_r+0x36c>
 800788a:	4a2a      	ldr	r2, [pc, #168]	; (8007934 <_dtoa_r+0x32c>)
 800788c:	f00a 030f 	and.w	r3, sl, #15
 8007890:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007894:	ed93 7b00 	vldr	d7, [r3]
 8007898:	ea4f 162a 	mov.w	r6, sl, asr #4
 800789c:	06f0      	lsls	r0, r6, #27
 800789e:	ed8d 7b08 	vstr	d7, [sp, #32]
 80078a2:	d565      	bpl.n	8007970 <_dtoa_r+0x368>
 80078a4:	4b24      	ldr	r3, [pc, #144]	; (8007938 <_dtoa_r+0x330>)
 80078a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80078aa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80078ae:	f7f9 f845 	bl	800093c <__aeabi_ddiv>
 80078b2:	e9cd 0100 	strd	r0, r1, [sp]
 80078b6:	f006 060f 	and.w	r6, r6, #15
 80078ba:	2503      	movs	r5, #3
 80078bc:	4f1e      	ldr	r7, [pc, #120]	; (8007938 <_dtoa_r+0x330>)
 80078be:	e04c      	b.n	800795a <_dtoa_r+0x352>
 80078c0:	2301      	movs	r3, #1
 80078c2:	930a      	str	r3, [sp, #40]	; 0x28
 80078c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80078c6:	4453      	add	r3, sl
 80078c8:	f103 0901 	add.w	r9, r3, #1
 80078cc:	9302      	str	r3, [sp, #8]
 80078ce:	464b      	mov	r3, r9
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	bfb8      	it	lt
 80078d4:	2301      	movlt	r3, #1
 80078d6:	e7ba      	b.n	800784e <_dtoa_r+0x246>
 80078d8:	2300      	movs	r3, #0
 80078da:	e7b2      	b.n	8007842 <_dtoa_r+0x23a>
 80078dc:	2300      	movs	r3, #0
 80078de:	e7f0      	b.n	80078c2 <_dtoa_r+0x2ba>
 80078e0:	2501      	movs	r5, #1
 80078e2:	2300      	movs	r3, #0
 80078e4:	9306      	str	r3, [sp, #24]
 80078e6:	950a      	str	r5, [sp, #40]	; 0x28
 80078e8:	f04f 33ff 	mov.w	r3, #4294967295
 80078ec:	9302      	str	r3, [sp, #8]
 80078ee:	4699      	mov	r9, r3
 80078f0:	2200      	movs	r2, #0
 80078f2:	2312      	movs	r3, #18
 80078f4:	920b      	str	r2, [sp, #44]	; 0x2c
 80078f6:	e7aa      	b.n	800784e <_dtoa_r+0x246>
 80078f8:	2301      	movs	r3, #1
 80078fa:	930a      	str	r3, [sp, #40]	; 0x28
 80078fc:	e7f4      	b.n	80078e8 <_dtoa_r+0x2e0>
 80078fe:	2301      	movs	r3, #1
 8007900:	9302      	str	r3, [sp, #8]
 8007902:	4699      	mov	r9, r3
 8007904:	461a      	mov	r2, r3
 8007906:	e7f5      	b.n	80078f4 <_dtoa_r+0x2ec>
 8007908:	3101      	adds	r1, #1
 800790a:	6071      	str	r1, [r6, #4]
 800790c:	0052      	lsls	r2, r2, #1
 800790e:	e7a2      	b.n	8007856 <_dtoa_r+0x24e>
 8007910:	636f4361 	.word	0x636f4361
 8007914:	3fd287a7 	.word	0x3fd287a7
 8007918:	8b60c8b3 	.word	0x8b60c8b3
 800791c:	3fc68a28 	.word	0x3fc68a28
 8007920:	509f79fb 	.word	0x509f79fb
 8007924:	3fd34413 	.word	0x3fd34413
 8007928:	7ff00000 	.word	0x7ff00000
 800792c:	0800984d 	.word	0x0800984d
 8007930:	3ff80000 	.word	0x3ff80000
 8007934:	08009908 	.word	0x08009908
 8007938:	080098e0 	.word	0x080098e0
 800793c:	080098d1 	.word	0x080098d1
 8007940:	07f1      	lsls	r1, r6, #31
 8007942:	d508      	bpl.n	8007956 <_dtoa_r+0x34e>
 8007944:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794c:	f7f8 fecc 	bl	80006e8 <__aeabi_dmul>
 8007950:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007954:	3501      	adds	r5, #1
 8007956:	1076      	asrs	r6, r6, #1
 8007958:	3708      	adds	r7, #8
 800795a:	2e00      	cmp	r6, #0
 800795c:	d1f0      	bne.n	8007940 <_dtoa_r+0x338>
 800795e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007962:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007966:	f7f8 ffe9 	bl	800093c <__aeabi_ddiv>
 800796a:	e9cd 0100 	strd	r0, r1, [sp]
 800796e:	e01a      	b.n	80079a6 <_dtoa_r+0x39e>
 8007970:	2502      	movs	r5, #2
 8007972:	e7a3      	b.n	80078bc <_dtoa_r+0x2b4>
 8007974:	f000 80a0 	beq.w	8007ab8 <_dtoa_r+0x4b0>
 8007978:	f1ca 0600 	rsb	r6, sl, #0
 800797c:	4b9f      	ldr	r3, [pc, #636]	; (8007bfc <_dtoa_r+0x5f4>)
 800797e:	4fa0      	ldr	r7, [pc, #640]	; (8007c00 <_dtoa_r+0x5f8>)
 8007980:	f006 020f 	and.w	r2, r6, #15
 8007984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007990:	f7f8 feaa 	bl	80006e8 <__aeabi_dmul>
 8007994:	e9cd 0100 	strd	r0, r1, [sp]
 8007998:	1136      	asrs	r6, r6, #4
 800799a:	2300      	movs	r3, #0
 800799c:	2502      	movs	r5, #2
 800799e:	2e00      	cmp	r6, #0
 80079a0:	d17f      	bne.n	8007aa2 <_dtoa_r+0x49a>
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d1e1      	bne.n	800796a <_dtoa_r+0x362>
 80079a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8087 	beq.w	8007abc <_dtoa_r+0x4b4>
 80079ae:	e9dd 6700 	ldrd	r6, r7, [sp]
 80079b2:	2200      	movs	r2, #0
 80079b4:	4b93      	ldr	r3, [pc, #588]	; (8007c04 <_dtoa_r+0x5fc>)
 80079b6:	4630      	mov	r0, r6
 80079b8:	4639      	mov	r1, r7
 80079ba:	f7f9 f907 	bl	8000bcc <__aeabi_dcmplt>
 80079be:	2800      	cmp	r0, #0
 80079c0:	d07c      	beq.n	8007abc <_dtoa_r+0x4b4>
 80079c2:	f1b9 0f00 	cmp.w	r9, #0
 80079c6:	d079      	beq.n	8007abc <_dtoa_r+0x4b4>
 80079c8:	9b02      	ldr	r3, [sp, #8]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	dd35      	ble.n	8007a3a <_dtoa_r+0x432>
 80079ce:	f10a 33ff 	add.w	r3, sl, #4294967295
 80079d2:	9308      	str	r3, [sp, #32]
 80079d4:	4639      	mov	r1, r7
 80079d6:	2200      	movs	r2, #0
 80079d8:	4b8b      	ldr	r3, [pc, #556]	; (8007c08 <_dtoa_r+0x600>)
 80079da:	4630      	mov	r0, r6
 80079dc:	f7f8 fe84 	bl	80006e8 <__aeabi_dmul>
 80079e0:	e9cd 0100 	strd	r0, r1, [sp]
 80079e4:	9f02      	ldr	r7, [sp, #8]
 80079e6:	3501      	adds	r5, #1
 80079e8:	4628      	mov	r0, r5
 80079ea:	f7f8 fe13 	bl	8000614 <__aeabi_i2d>
 80079ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079f2:	f7f8 fe79 	bl	80006e8 <__aeabi_dmul>
 80079f6:	2200      	movs	r2, #0
 80079f8:	4b84      	ldr	r3, [pc, #528]	; (8007c0c <_dtoa_r+0x604>)
 80079fa:	f7f8 fcbf 	bl	800037c <__adddf3>
 80079fe:	4605      	mov	r5, r0
 8007a00:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8007a04:	2f00      	cmp	r7, #0
 8007a06:	d15d      	bne.n	8007ac4 <_dtoa_r+0x4bc>
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4b81      	ldr	r3, [pc, #516]	; (8007c10 <_dtoa_r+0x608>)
 8007a0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a10:	f7f8 fcb2 	bl	8000378 <__aeabi_dsub>
 8007a14:	462a      	mov	r2, r5
 8007a16:	4633      	mov	r3, r6
 8007a18:	e9cd 0100 	strd	r0, r1, [sp]
 8007a1c:	f7f9 f8f4 	bl	8000c08 <__aeabi_dcmpgt>
 8007a20:	2800      	cmp	r0, #0
 8007a22:	f040 8288 	bne.w	8007f36 <_dtoa_r+0x92e>
 8007a26:	462a      	mov	r2, r5
 8007a28:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007a2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a30:	f7f9 f8cc 	bl	8000bcc <__aeabi_dcmplt>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	f040 827c 	bne.w	8007f32 <_dtoa_r+0x92a>
 8007a3a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a3e:	e9cd 2300 	strd	r2, r3, [sp]
 8007a42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f2c0 8150 	blt.w	8007cea <_dtoa_r+0x6e2>
 8007a4a:	f1ba 0f0e 	cmp.w	sl, #14
 8007a4e:	f300 814c 	bgt.w	8007cea <_dtoa_r+0x6e2>
 8007a52:	4b6a      	ldr	r3, [pc, #424]	; (8007bfc <_dtoa_r+0x5f4>)
 8007a54:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a58:	ed93 7b00 	vldr	d7, [r3]
 8007a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a64:	f280 80d8 	bge.w	8007c18 <_dtoa_r+0x610>
 8007a68:	f1b9 0f00 	cmp.w	r9, #0
 8007a6c:	f300 80d4 	bgt.w	8007c18 <_dtoa_r+0x610>
 8007a70:	f040 825e 	bne.w	8007f30 <_dtoa_r+0x928>
 8007a74:	2200      	movs	r2, #0
 8007a76:	4b66      	ldr	r3, [pc, #408]	; (8007c10 <_dtoa_r+0x608>)
 8007a78:	ec51 0b17 	vmov	r0, r1, d7
 8007a7c:	f7f8 fe34 	bl	80006e8 <__aeabi_dmul>
 8007a80:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a84:	f7f9 f8b6 	bl	8000bf4 <__aeabi_dcmpge>
 8007a88:	464f      	mov	r7, r9
 8007a8a:	464e      	mov	r6, r9
 8007a8c:	2800      	cmp	r0, #0
 8007a8e:	f040 8234 	bne.w	8007efa <_dtoa_r+0x8f2>
 8007a92:	2331      	movs	r3, #49	; 0x31
 8007a94:	f10b 0501 	add.w	r5, fp, #1
 8007a98:	f88b 3000 	strb.w	r3, [fp]
 8007a9c:	f10a 0a01 	add.w	sl, sl, #1
 8007aa0:	e22f      	b.n	8007f02 <_dtoa_r+0x8fa>
 8007aa2:	07f2      	lsls	r2, r6, #31
 8007aa4:	d505      	bpl.n	8007ab2 <_dtoa_r+0x4aa>
 8007aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007aaa:	f7f8 fe1d 	bl	80006e8 <__aeabi_dmul>
 8007aae:	3501      	adds	r5, #1
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	1076      	asrs	r6, r6, #1
 8007ab4:	3708      	adds	r7, #8
 8007ab6:	e772      	b.n	800799e <_dtoa_r+0x396>
 8007ab8:	2502      	movs	r5, #2
 8007aba:	e774      	b.n	80079a6 <_dtoa_r+0x39e>
 8007abc:	f8cd a020 	str.w	sl, [sp, #32]
 8007ac0:	464f      	mov	r7, r9
 8007ac2:	e791      	b.n	80079e8 <_dtoa_r+0x3e0>
 8007ac4:	4b4d      	ldr	r3, [pc, #308]	; (8007bfc <_dtoa_r+0x5f4>)
 8007ac6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007aca:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007ace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d047      	beq.n	8007b64 <_dtoa_r+0x55c>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	2000      	movs	r0, #0
 8007ada:	494e      	ldr	r1, [pc, #312]	; (8007c14 <_dtoa_r+0x60c>)
 8007adc:	f7f8 ff2e 	bl	800093c <__aeabi_ddiv>
 8007ae0:	462a      	mov	r2, r5
 8007ae2:	4633      	mov	r3, r6
 8007ae4:	f7f8 fc48 	bl	8000378 <__aeabi_dsub>
 8007ae8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007aec:	465d      	mov	r5, fp
 8007aee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007af2:	f7f9 f8a9 	bl	8000c48 <__aeabi_d2iz>
 8007af6:	4606      	mov	r6, r0
 8007af8:	f7f8 fd8c 	bl	8000614 <__aeabi_i2d>
 8007afc:	4602      	mov	r2, r0
 8007afe:	460b      	mov	r3, r1
 8007b00:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b04:	f7f8 fc38 	bl	8000378 <__aeabi_dsub>
 8007b08:	3630      	adds	r6, #48	; 0x30
 8007b0a:	f805 6b01 	strb.w	r6, [r5], #1
 8007b0e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b12:	e9cd 0100 	strd	r0, r1, [sp]
 8007b16:	f7f9 f859 	bl	8000bcc <__aeabi_dcmplt>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	d163      	bne.n	8007be6 <_dtoa_r+0x5de>
 8007b1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007b22:	2000      	movs	r0, #0
 8007b24:	4937      	ldr	r1, [pc, #220]	; (8007c04 <_dtoa_r+0x5fc>)
 8007b26:	f7f8 fc27 	bl	8000378 <__aeabi_dsub>
 8007b2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b2e:	f7f9 f84d 	bl	8000bcc <__aeabi_dcmplt>
 8007b32:	2800      	cmp	r0, #0
 8007b34:	f040 80b7 	bne.w	8007ca6 <_dtoa_r+0x69e>
 8007b38:	eba5 030b 	sub.w	r3, r5, fp
 8007b3c:	429f      	cmp	r7, r3
 8007b3e:	f77f af7c 	ble.w	8007a3a <_dtoa_r+0x432>
 8007b42:	2200      	movs	r2, #0
 8007b44:	4b30      	ldr	r3, [pc, #192]	; (8007c08 <_dtoa_r+0x600>)
 8007b46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b4a:	f7f8 fdcd 	bl	80006e8 <__aeabi_dmul>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b54:	4b2c      	ldr	r3, [pc, #176]	; (8007c08 <_dtoa_r+0x600>)
 8007b56:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b5a:	f7f8 fdc5 	bl	80006e8 <__aeabi_dmul>
 8007b5e:	e9cd 0100 	strd	r0, r1, [sp]
 8007b62:	e7c4      	b.n	8007aee <_dtoa_r+0x4e6>
 8007b64:	462a      	mov	r2, r5
 8007b66:	4633      	mov	r3, r6
 8007b68:	f7f8 fdbe 	bl	80006e8 <__aeabi_dmul>
 8007b6c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b70:	eb0b 0507 	add.w	r5, fp, r7
 8007b74:	465e      	mov	r6, fp
 8007b76:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b7a:	f7f9 f865 	bl	8000c48 <__aeabi_d2iz>
 8007b7e:	4607      	mov	r7, r0
 8007b80:	f7f8 fd48 	bl	8000614 <__aeabi_i2d>
 8007b84:	3730      	adds	r7, #48	; 0x30
 8007b86:	4602      	mov	r2, r0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b8e:	f7f8 fbf3 	bl	8000378 <__aeabi_dsub>
 8007b92:	f806 7b01 	strb.w	r7, [r6], #1
 8007b96:	42ae      	cmp	r6, r5
 8007b98:	e9cd 0100 	strd	r0, r1, [sp]
 8007b9c:	f04f 0200 	mov.w	r2, #0
 8007ba0:	d126      	bne.n	8007bf0 <_dtoa_r+0x5e8>
 8007ba2:	4b1c      	ldr	r3, [pc, #112]	; (8007c14 <_dtoa_r+0x60c>)
 8007ba4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ba8:	f7f8 fbe8 	bl	800037c <__adddf3>
 8007bac:	4602      	mov	r2, r0
 8007bae:	460b      	mov	r3, r1
 8007bb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bb4:	f7f9 f828 	bl	8000c08 <__aeabi_dcmpgt>
 8007bb8:	2800      	cmp	r0, #0
 8007bba:	d174      	bne.n	8007ca6 <_dtoa_r+0x69e>
 8007bbc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	4914      	ldr	r1, [pc, #80]	; (8007c14 <_dtoa_r+0x60c>)
 8007bc4:	f7f8 fbd8 	bl	8000378 <__aeabi_dsub>
 8007bc8:	4602      	mov	r2, r0
 8007bca:	460b      	mov	r3, r1
 8007bcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bd0:	f7f8 fffc 	bl	8000bcc <__aeabi_dcmplt>
 8007bd4:	2800      	cmp	r0, #0
 8007bd6:	f43f af30 	beq.w	8007a3a <_dtoa_r+0x432>
 8007bda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bde:	2b30      	cmp	r3, #48	; 0x30
 8007be0:	f105 32ff 	add.w	r2, r5, #4294967295
 8007be4:	d002      	beq.n	8007bec <_dtoa_r+0x5e4>
 8007be6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007bea:	e04a      	b.n	8007c82 <_dtoa_r+0x67a>
 8007bec:	4615      	mov	r5, r2
 8007bee:	e7f4      	b.n	8007bda <_dtoa_r+0x5d2>
 8007bf0:	4b05      	ldr	r3, [pc, #20]	; (8007c08 <_dtoa_r+0x600>)
 8007bf2:	f7f8 fd79 	bl	80006e8 <__aeabi_dmul>
 8007bf6:	e9cd 0100 	strd	r0, r1, [sp]
 8007bfa:	e7bc      	b.n	8007b76 <_dtoa_r+0x56e>
 8007bfc:	08009908 	.word	0x08009908
 8007c00:	080098e0 	.word	0x080098e0
 8007c04:	3ff00000 	.word	0x3ff00000
 8007c08:	40240000 	.word	0x40240000
 8007c0c:	401c0000 	.word	0x401c0000
 8007c10:	40140000 	.word	0x40140000
 8007c14:	3fe00000 	.word	0x3fe00000
 8007c18:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007c1c:	465d      	mov	r5, fp
 8007c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c22:	4630      	mov	r0, r6
 8007c24:	4639      	mov	r1, r7
 8007c26:	f7f8 fe89 	bl	800093c <__aeabi_ddiv>
 8007c2a:	f7f9 f80d 	bl	8000c48 <__aeabi_d2iz>
 8007c2e:	4680      	mov	r8, r0
 8007c30:	f7f8 fcf0 	bl	8000614 <__aeabi_i2d>
 8007c34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c38:	f7f8 fd56 	bl	80006e8 <__aeabi_dmul>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	460b      	mov	r3, r1
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007c48:	f7f8 fb96 	bl	8000378 <__aeabi_dsub>
 8007c4c:	f805 6b01 	strb.w	r6, [r5], #1
 8007c50:	eba5 060b 	sub.w	r6, r5, fp
 8007c54:	45b1      	cmp	r9, r6
 8007c56:	4602      	mov	r2, r0
 8007c58:	460b      	mov	r3, r1
 8007c5a:	d139      	bne.n	8007cd0 <_dtoa_r+0x6c8>
 8007c5c:	f7f8 fb8e 	bl	800037c <__adddf3>
 8007c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c64:	4606      	mov	r6, r0
 8007c66:	460f      	mov	r7, r1
 8007c68:	f7f8 ffce 	bl	8000c08 <__aeabi_dcmpgt>
 8007c6c:	b9c8      	cbnz	r0, 8007ca2 <_dtoa_r+0x69a>
 8007c6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c72:	4630      	mov	r0, r6
 8007c74:	4639      	mov	r1, r7
 8007c76:	f7f8 ff9f 	bl	8000bb8 <__aeabi_dcmpeq>
 8007c7a:	b110      	cbz	r0, 8007c82 <_dtoa_r+0x67a>
 8007c7c:	f018 0f01 	tst.w	r8, #1
 8007c80:	d10f      	bne.n	8007ca2 <_dtoa_r+0x69a>
 8007c82:	9904      	ldr	r1, [sp, #16]
 8007c84:	4620      	mov	r0, r4
 8007c86:	f000 fdff 	bl	8008888 <_Bfree>
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c8e:	702b      	strb	r3, [r5, #0]
 8007c90:	f10a 0301 	add.w	r3, sl, #1
 8007c94:	6013      	str	r3, [r2, #0]
 8007c96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 8241 	beq.w	8008120 <_dtoa_r+0xb18>
 8007c9e:	601d      	str	r5, [r3, #0]
 8007ca0:	e23e      	b.n	8008120 <_dtoa_r+0xb18>
 8007ca2:	f8cd a020 	str.w	sl, [sp, #32]
 8007ca6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007caa:	2a39      	cmp	r2, #57	; 0x39
 8007cac:	f105 33ff 	add.w	r3, r5, #4294967295
 8007cb0:	d108      	bne.n	8007cc4 <_dtoa_r+0x6bc>
 8007cb2:	459b      	cmp	fp, r3
 8007cb4:	d10a      	bne.n	8007ccc <_dtoa_r+0x6c4>
 8007cb6:	9b08      	ldr	r3, [sp, #32]
 8007cb8:	3301      	adds	r3, #1
 8007cba:	9308      	str	r3, [sp, #32]
 8007cbc:	2330      	movs	r3, #48	; 0x30
 8007cbe:	f88b 3000 	strb.w	r3, [fp]
 8007cc2:	465b      	mov	r3, fp
 8007cc4:	781a      	ldrb	r2, [r3, #0]
 8007cc6:	3201      	adds	r2, #1
 8007cc8:	701a      	strb	r2, [r3, #0]
 8007cca:	e78c      	b.n	8007be6 <_dtoa_r+0x5de>
 8007ccc:	461d      	mov	r5, r3
 8007cce:	e7ea      	b.n	8007ca6 <_dtoa_r+0x69e>
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	4b9b      	ldr	r3, [pc, #620]	; (8007f40 <_dtoa_r+0x938>)
 8007cd4:	f7f8 fd08 	bl	80006e8 <__aeabi_dmul>
 8007cd8:	2200      	movs	r2, #0
 8007cda:	2300      	movs	r3, #0
 8007cdc:	4606      	mov	r6, r0
 8007cde:	460f      	mov	r7, r1
 8007ce0:	f7f8 ff6a 	bl	8000bb8 <__aeabi_dcmpeq>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d09a      	beq.n	8007c1e <_dtoa_r+0x616>
 8007ce8:	e7cb      	b.n	8007c82 <_dtoa_r+0x67a>
 8007cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cec:	2a00      	cmp	r2, #0
 8007cee:	f000 808b 	beq.w	8007e08 <_dtoa_r+0x800>
 8007cf2:	9a06      	ldr	r2, [sp, #24]
 8007cf4:	2a01      	cmp	r2, #1
 8007cf6:	dc6e      	bgt.n	8007dd6 <_dtoa_r+0x7ce>
 8007cf8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cfa:	2a00      	cmp	r2, #0
 8007cfc:	d067      	beq.n	8007dce <_dtoa_r+0x7c6>
 8007cfe:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007d02:	9f07      	ldr	r7, [sp, #28]
 8007d04:	9d05      	ldr	r5, [sp, #20]
 8007d06:	9a05      	ldr	r2, [sp, #20]
 8007d08:	2101      	movs	r1, #1
 8007d0a:	441a      	add	r2, r3
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	9205      	str	r2, [sp, #20]
 8007d10:	4498      	add	r8, r3
 8007d12:	f000 fe97 	bl	8008a44 <__i2b>
 8007d16:	4606      	mov	r6, r0
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	dd0c      	ble.n	8007d36 <_dtoa_r+0x72e>
 8007d1c:	f1b8 0f00 	cmp.w	r8, #0
 8007d20:	dd09      	ble.n	8007d36 <_dtoa_r+0x72e>
 8007d22:	4545      	cmp	r5, r8
 8007d24:	9a05      	ldr	r2, [sp, #20]
 8007d26:	462b      	mov	r3, r5
 8007d28:	bfa8      	it	ge
 8007d2a:	4643      	movge	r3, r8
 8007d2c:	1ad2      	subs	r2, r2, r3
 8007d2e:	9205      	str	r2, [sp, #20]
 8007d30:	1aed      	subs	r5, r5, r3
 8007d32:	eba8 0803 	sub.w	r8, r8, r3
 8007d36:	9b07      	ldr	r3, [sp, #28]
 8007d38:	b1eb      	cbz	r3, 8007d76 <_dtoa_r+0x76e>
 8007d3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d067      	beq.n	8007e10 <_dtoa_r+0x808>
 8007d40:	b18f      	cbz	r7, 8007d66 <_dtoa_r+0x75e>
 8007d42:	4631      	mov	r1, r6
 8007d44:	463a      	mov	r2, r7
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 ff1c 	bl	8008b84 <__pow5mult>
 8007d4c:	9a04      	ldr	r2, [sp, #16]
 8007d4e:	4601      	mov	r1, r0
 8007d50:	4606      	mov	r6, r0
 8007d52:	4620      	mov	r0, r4
 8007d54:	f000 fe7f 	bl	8008a56 <__multiply>
 8007d58:	9904      	ldr	r1, [sp, #16]
 8007d5a:	9008      	str	r0, [sp, #32]
 8007d5c:	4620      	mov	r0, r4
 8007d5e:	f000 fd93 	bl	8008888 <_Bfree>
 8007d62:	9b08      	ldr	r3, [sp, #32]
 8007d64:	9304      	str	r3, [sp, #16]
 8007d66:	9b07      	ldr	r3, [sp, #28]
 8007d68:	1bda      	subs	r2, r3, r7
 8007d6a:	d004      	beq.n	8007d76 <_dtoa_r+0x76e>
 8007d6c:	9904      	ldr	r1, [sp, #16]
 8007d6e:	4620      	mov	r0, r4
 8007d70:	f000 ff08 	bl	8008b84 <__pow5mult>
 8007d74:	9004      	str	r0, [sp, #16]
 8007d76:	2101      	movs	r1, #1
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f000 fe63 	bl	8008a44 <__i2b>
 8007d7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d80:	4607      	mov	r7, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	f000 81d0 	beq.w	8008128 <_dtoa_r+0xb20>
 8007d88:	461a      	mov	r2, r3
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	4620      	mov	r0, r4
 8007d8e:	f000 fef9 	bl	8008b84 <__pow5mult>
 8007d92:	9b06      	ldr	r3, [sp, #24]
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	4607      	mov	r7, r0
 8007d98:	dc40      	bgt.n	8007e1c <_dtoa_r+0x814>
 8007d9a:	9b00      	ldr	r3, [sp, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d139      	bne.n	8007e14 <_dtoa_r+0x80c>
 8007da0:	9b01      	ldr	r3, [sp, #4]
 8007da2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d136      	bne.n	8007e18 <_dtoa_r+0x810>
 8007daa:	9b01      	ldr	r3, [sp, #4]
 8007dac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007db0:	0d1b      	lsrs	r3, r3, #20
 8007db2:	051b      	lsls	r3, r3, #20
 8007db4:	b12b      	cbz	r3, 8007dc2 <_dtoa_r+0x7ba>
 8007db6:	9b05      	ldr	r3, [sp, #20]
 8007db8:	3301      	adds	r3, #1
 8007dba:	9305      	str	r3, [sp, #20]
 8007dbc:	f108 0801 	add.w	r8, r8, #1
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	9307      	str	r3, [sp, #28]
 8007dc4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d12a      	bne.n	8007e20 <_dtoa_r+0x818>
 8007dca:	2001      	movs	r0, #1
 8007dcc:	e030      	b.n	8007e30 <_dtoa_r+0x828>
 8007dce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007dd0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007dd4:	e795      	b.n	8007d02 <_dtoa_r+0x6fa>
 8007dd6:	9b07      	ldr	r3, [sp, #28]
 8007dd8:	f109 37ff 	add.w	r7, r9, #4294967295
 8007ddc:	42bb      	cmp	r3, r7
 8007dde:	bfbf      	itttt	lt
 8007de0:	9b07      	ldrlt	r3, [sp, #28]
 8007de2:	9707      	strlt	r7, [sp, #28]
 8007de4:	1afa      	sublt	r2, r7, r3
 8007de6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007de8:	bfbb      	ittet	lt
 8007dea:	189b      	addlt	r3, r3, r2
 8007dec:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007dee:	1bdf      	subge	r7, r3, r7
 8007df0:	2700      	movlt	r7, #0
 8007df2:	f1b9 0f00 	cmp.w	r9, #0
 8007df6:	bfb5      	itete	lt
 8007df8:	9b05      	ldrlt	r3, [sp, #20]
 8007dfa:	9d05      	ldrge	r5, [sp, #20]
 8007dfc:	eba3 0509 	sublt.w	r5, r3, r9
 8007e00:	464b      	movge	r3, r9
 8007e02:	bfb8      	it	lt
 8007e04:	2300      	movlt	r3, #0
 8007e06:	e77e      	b.n	8007d06 <_dtoa_r+0x6fe>
 8007e08:	9f07      	ldr	r7, [sp, #28]
 8007e0a:	9d05      	ldr	r5, [sp, #20]
 8007e0c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007e0e:	e783      	b.n	8007d18 <_dtoa_r+0x710>
 8007e10:	9a07      	ldr	r2, [sp, #28]
 8007e12:	e7ab      	b.n	8007d6c <_dtoa_r+0x764>
 8007e14:	2300      	movs	r3, #0
 8007e16:	e7d4      	b.n	8007dc2 <_dtoa_r+0x7ba>
 8007e18:	9b00      	ldr	r3, [sp, #0]
 8007e1a:	e7d2      	b.n	8007dc2 <_dtoa_r+0x7ba>
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	9307      	str	r3, [sp, #28]
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007e26:	6918      	ldr	r0, [r3, #16]
 8007e28:	f000 fdbe 	bl	80089a8 <__hi0bits>
 8007e2c:	f1c0 0020 	rsb	r0, r0, #32
 8007e30:	4440      	add	r0, r8
 8007e32:	f010 001f 	ands.w	r0, r0, #31
 8007e36:	d047      	beq.n	8007ec8 <_dtoa_r+0x8c0>
 8007e38:	f1c0 0320 	rsb	r3, r0, #32
 8007e3c:	2b04      	cmp	r3, #4
 8007e3e:	dd3b      	ble.n	8007eb8 <_dtoa_r+0x8b0>
 8007e40:	9b05      	ldr	r3, [sp, #20]
 8007e42:	f1c0 001c 	rsb	r0, r0, #28
 8007e46:	4403      	add	r3, r0
 8007e48:	9305      	str	r3, [sp, #20]
 8007e4a:	4405      	add	r5, r0
 8007e4c:	4480      	add	r8, r0
 8007e4e:	9b05      	ldr	r3, [sp, #20]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	dd05      	ble.n	8007e60 <_dtoa_r+0x858>
 8007e54:	461a      	mov	r2, r3
 8007e56:	9904      	ldr	r1, [sp, #16]
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f000 fee1 	bl	8008c20 <__lshift>
 8007e5e:	9004      	str	r0, [sp, #16]
 8007e60:	f1b8 0f00 	cmp.w	r8, #0
 8007e64:	dd05      	ble.n	8007e72 <_dtoa_r+0x86a>
 8007e66:	4639      	mov	r1, r7
 8007e68:	4642      	mov	r2, r8
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fed8 	bl	8008c20 <__lshift>
 8007e70:	4607      	mov	r7, r0
 8007e72:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e74:	b353      	cbz	r3, 8007ecc <_dtoa_r+0x8c4>
 8007e76:	4639      	mov	r1, r7
 8007e78:	9804      	ldr	r0, [sp, #16]
 8007e7a:	f000 ff25 	bl	8008cc8 <__mcmp>
 8007e7e:	2800      	cmp	r0, #0
 8007e80:	da24      	bge.n	8007ecc <_dtoa_r+0x8c4>
 8007e82:	2300      	movs	r3, #0
 8007e84:	220a      	movs	r2, #10
 8007e86:	9904      	ldr	r1, [sp, #16]
 8007e88:	4620      	mov	r0, r4
 8007e8a:	f000 fd14 	bl	80088b6 <__multadd>
 8007e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e90:	9004      	str	r0, [sp, #16]
 8007e92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f000 814d 	beq.w	8008136 <_dtoa_r+0xb2e>
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	4631      	mov	r1, r6
 8007ea0:	220a      	movs	r2, #10
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f000 fd07 	bl	80088b6 <__multadd>
 8007ea8:	9b02      	ldr	r3, [sp, #8]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	4606      	mov	r6, r0
 8007eae:	dc4f      	bgt.n	8007f50 <_dtoa_r+0x948>
 8007eb0:	9b06      	ldr	r3, [sp, #24]
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	dd4c      	ble.n	8007f50 <_dtoa_r+0x948>
 8007eb6:	e011      	b.n	8007edc <_dtoa_r+0x8d4>
 8007eb8:	d0c9      	beq.n	8007e4e <_dtoa_r+0x846>
 8007eba:	9a05      	ldr	r2, [sp, #20]
 8007ebc:	331c      	adds	r3, #28
 8007ebe:	441a      	add	r2, r3
 8007ec0:	9205      	str	r2, [sp, #20]
 8007ec2:	441d      	add	r5, r3
 8007ec4:	4498      	add	r8, r3
 8007ec6:	e7c2      	b.n	8007e4e <_dtoa_r+0x846>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	e7f6      	b.n	8007eba <_dtoa_r+0x8b2>
 8007ecc:	f1b9 0f00 	cmp.w	r9, #0
 8007ed0:	dc38      	bgt.n	8007f44 <_dtoa_r+0x93c>
 8007ed2:	9b06      	ldr	r3, [sp, #24]
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	dd35      	ble.n	8007f44 <_dtoa_r+0x93c>
 8007ed8:	f8cd 9008 	str.w	r9, [sp, #8]
 8007edc:	9b02      	ldr	r3, [sp, #8]
 8007ede:	b963      	cbnz	r3, 8007efa <_dtoa_r+0x8f2>
 8007ee0:	4639      	mov	r1, r7
 8007ee2:	2205      	movs	r2, #5
 8007ee4:	4620      	mov	r0, r4
 8007ee6:	f000 fce6 	bl	80088b6 <__multadd>
 8007eea:	4601      	mov	r1, r0
 8007eec:	4607      	mov	r7, r0
 8007eee:	9804      	ldr	r0, [sp, #16]
 8007ef0:	f000 feea 	bl	8008cc8 <__mcmp>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	f73f adcc 	bgt.w	8007a92 <_dtoa_r+0x48a>
 8007efa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007efc:	465d      	mov	r5, fp
 8007efe:	ea6f 0a03 	mvn.w	sl, r3
 8007f02:	f04f 0900 	mov.w	r9, #0
 8007f06:	4639      	mov	r1, r7
 8007f08:	4620      	mov	r0, r4
 8007f0a:	f000 fcbd 	bl	8008888 <_Bfree>
 8007f0e:	2e00      	cmp	r6, #0
 8007f10:	f43f aeb7 	beq.w	8007c82 <_dtoa_r+0x67a>
 8007f14:	f1b9 0f00 	cmp.w	r9, #0
 8007f18:	d005      	beq.n	8007f26 <_dtoa_r+0x91e>
 8007f1a:	45b1      	cmp	r9, r6
 8007f1c:	d003      	beq.n	8007f26 <_dtoa_r+0x91e>
 8007f1e:	4649      	mov	r1, r9
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fcb1 	bl	8008888 <_Bfree>
 8007f26:	4631      	mov	r1, r6
 8007f28:	4620      	mov	r0, r4
 8007f2a:	f000 fcad 	bl	8008888 <_Bfree>
 8007f2e:	e6a8      	b.n	8007c82 <_dtoa_r+0x67a>
 8007f30:	2700      	movs	r7, #0
 8007f32:	463e      	mov	r6, r7
 8007f34:	e7e1      	b.n	8007efa <_dtoa_r+0x8f2>
 8007f36:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f3a:	463e      	mov	r6, r7
 8007f3c:	e5a9      	b.n	8007a92 <_dtoa_r+0x48a>
 8007f3e:	bf00      	nop
 8007f40:	40240000 	.word	0x40240000
 8007f44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f46:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 80fa 	beq.w	8008144 <_dtoa_r+0xb3c>
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	dd05      	ble.n	8007f60 <_dtoa_r+0x958>
 8007f54:	4631      	mov	r1, r6
 8007f56:	462a      	mov	r2, r5
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fe61 	bl	8008c20 <__lshift>
 8007f5e:	4606      	mov	r6, r0
 8007f60:	9b07      	ldr	r3, [sp, #28]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d04c      	beq.n	8008000 <_dtoa_r+0x9f8>
 8007f66:	6871      	ldr	r1, [r6, #4]
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 fc59 	bl	8008820 <_Balloc>
 8007f6e:	6932      	ldr	r2, [r6, #16]
 8007f70:	3202      	adds	r2, #2
 8007f72:	4605      	mov	r5, r0
 8007f74:	0092      	lsls	r2, r2, #2
 8007f76:	f106 010c 	add.w	r1, r6, #12
 8007f7a:	300c      	adds	r0, #12
 8007f7c:	f7fd fd8e 	bl	8005a9c <memcpy>
 8007f80:	2201      	movs	r2, #1
 8007f82:	4629      	mov	r1, r5
 8007f84:	4620      	mov	r0, r4
 8007f86:	f000 fe4b 	bl	8008c20 <__lshift>
 8007f8a:	9b00      	ldr	r3, [sp, #0]
 8007f8c:	f8cd b014 	str.w	fp, [sp, #20]
 8007f90:	f003 0301 	and.w	r3, r3, #1
 8007f94:	46b1      	mov	r9, r6
 8007f96:	9307      	str	r3, [sp, #28]
 8007f98:	4606      	mov	r6, r0
 8007f9a:	4639      	mov	r1, r7
 8007f9c:	9804      	ldr	r0, [sp, #16]
 8007f9e:	f7ff faa5 	bl	80074ec <quorem>
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	4605      	mov	r5, r0
 8007fa6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007faa:	9804      	ldr	r0, [sp, #16]
 8007fac:	f000 fe8c 	bl	8008cc8 <__mcmp>
 8007fb0:	4632      	mov	r2, r6
 8007fb2:	9000      	str	r0, [sp, #0]
 8007fb4:	4639      	mov	r1, r7
 8007fb6:	4620      	mov	r0, r4
 8007fb8:	f000 fea0 	bl	8008cfc <__mdiff>
 8007fbc:	68c3      	ldr	r3, [r0, #12]
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	bb03      	cbnz	r3, 8008004 <_dtoa_r+0x9fc>
 8007fc2:	4601      	mov	r1, r0
 8007fc4:	9008      	str	r0, [sp, #32]
 8007fc6:	9804      	ldr	r0, [sp, #16]
 8007fc8:	f000 fe7e 	bl	8008cc8 <__mcmp>
 8007fcc:	9a08      	ldr	r2, [sp, #32]
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4611      	mov	r1, r2
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	9308      	str	r3, [sp, #32]
 8007fd6:	f000 fc57 	bl	8008888 <_Bfree>
 8007fda:	9b08      	ldr	r3, [sp, #32]
 8007fdc:	b9a3      	cbnz	r3, 8008008 <_dtoa_r+0xa00>
 8007fde:	9a06      	ldr	r2, [sp, #24]
 8007fe0:	b992      	cbnz	r2, 8008008 <_dtoa_r+0xa00>
 8007fe2:	9a07      	ldr	r2, [sp, #28]
 8007fe4:	b982      	cbnz	r2, 8008008 <_dtoa_r+0xa00>
 8007fe6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007fea:	d029      	beq.n	8008040 <_dtoa_r+0xa38>
 8007fec:	9b00      	ldr	r3, [sp, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	dd01      	ble.n	8007ff6 <_dtoa_r+0x9ee>
 8007ff2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007ff6:	9b05      	ldr	r3, [sp, #20]
 8007ff8:	1c5d      	adds	r5, r3, #1
 8007ffa:	f883 8000 	strb.w	r8, [r3]
 8007ffe:	e782      	b.n	8007f06 <_dtoa_r+0x8fe>
 8008000:	4630      	mov	r0, r6
 8008002:	e7c2      	b.n	8007f8a <_dtoa_r+0x982>
 8008004:	2301      	movs	r3, #1
 8008006:	e7e3      	b.n	8007fd0 <_dtoa_r+0x9c8>
 8008008:	9a00      	ldr	r2, [sp, #0]
 800800a:	2a00      	cmp	r2, #0
 800800c:	db04      	blt.n	8008018 <_dtoa_r+0xa10>
 800800e:	d125      	bne.n	800805c <_dtoa_r+0xa54>
 8008010:	9a06      	ldr	r2, [sp, #24]
 8008012:	bb1a      	cbnz	r2, 800805c <_dtoa_r+0xa54>
 8008014:	9a07      	ldr	r2, [sp, #28]
 8008016:	bb0a      	cbnz	r2, 800805c <_dtoa_r+0xa54>
 8008018:	2b00      	cmp	r3, #0
 800801a:	ddec      	ble.n	8007ff6 <_dtoa_r+0x9ee>
 800801c:	2201      	movs	r2, #1
 800801e:	9904      	ldr	r1, [sp, #16]
 8008020:	4620      	mov	r0, r4
 8008022:	f000 fdfd 	bl	8008c20 <__lshift>
 8008026:	4639      	mov	r1, r7
 8008028:	9004      	str	r0, [sp, #16]
 800802a:	f000 fe4d 	bl	8008cc8 <__mcmp>
 800802e:	2800      	cmp	r0, #0
 8008030:	dc03      	bgt.n	800803a <_dtoa_r+0xa32>
 8008032:	d1e0      	bne.n	8007ff6 <_dtoa_r+0x9ee>
 8008034:	f018 0f01 	tst.w	r8, #1
 8008038:	d0dd      	beq.n	8007ff6 <_dtoa_r+0x9ee>
 800803a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800803e:	d1d8      	bne.n	8007ff2 <_dtoa_r+0x9ea>
 8008040:	9b05      	ldr	r3, [sp, #20]
 8008042:	9a05      	ldr	r2, [sp, #20]
 8008044:	1c5d      	adds	r5, r3, #1
 8008046:	2339      	movs	r3, #57	; 0x39
 8008048:	7013      	strb	r3, [r2, #0]
 800804a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800804e:	2b39      	cmp	r3, #57	; 0x39
 8008050:	f105 32ff 	add.w	r2, r5, #4294967295
 8008054:	d04f      	beq.n	80080f6 <_dtoa_r+0xaee>
 8008056:	3301      	adds	r3, #1
 8008058:	7013      	strb	r3, [r2, #0]
 800805a:	e754      	b.n	8007f06 <_dtoa_r+0x8fe>
 800805c:	9a05      	ldr	r2, [sp, #20]
 800805e:	2b00      	cmp	r3, #0
 8008060:	f102 0501 	add.w	r5, r2, #1
 8008064:	dd06      	ble.n	8008074 <_dtoa_r+0xa6c>
 8008066:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800806a:	d0e9      	beq.n	8008040 <_dtoa_r+0xa38>
 800806c:	f108 0801 	add.w	r8, r8, #1
 8008070:	9b05      	ldr	r3, [sp, #20]
 8008072:	e7c2      	b.n	8007ffa <_dtoa_r+0x9f2>
 8008074:	9a02      	ldr	r2, [sp, #8]
 8008076:	f805 8c01 	strb.w	r8, [r5, #-1]
 800807a:	eba5 030b 	sub.w	r3, r5, fp
 800807e:	4293      	cmp	r3, r2
 8008080:	d021      	beq.n	80080c6 <_dtoa_r+0xabe>
 8008082:	2300      	movs	r3, #0
 8008084:	220a      	movs	r2, #10
 8008086:	9904      	ldr	r1, [sp, #16]
 8008088:	4620      	mov	r0, r4
 800808a:	f000 fc14 	bl	80088b6 <__multadd>
 800808e:	45b1      	cmp	r9, r6
 8008090:	9004      	str	r0, [sp, #16]
 8008092:	f04f 0300 	mov.w	r3, #0
 8008096:	f04f 020a 	mov.w	r2, #10
 800809a:	4649      	mov	r1, r9
 800809c:	4620      	mov	r0, r4
 800809e:	d105      	bne.n	80080ac <_dtoa_r+0xaa4>
 80080a0:	f000 fc09 	bl	80088b6 <__multadd>
 80080a4:	4681      	mov	r9, r0
 80080a6:	4606      	mov	r6, r0
 80080a8:	9505      	str	r5, [sp, #20]
 80080aa:	e776      	b.n	8007f9a <_dtoa_r+0x992>
 80080ac:	f000 fc03 	bl	80088b6 <__multadd>
 80080b0:	4631      	mov	r1, r6
 80080b2:	4681      	mov	r9, r0
 80080b4:	2300      	movs	r3, #0
 80080b6:	220a      	movs	r2, #10
 80080b8:	4620      	mov	r0, r4
 80080ba:	f000 fbfc 	bl	80088b6 <__multadd>
 80080be:	4606      	mov	r6, r0
 80080c0:	e7f2      	b.n	80080a8 <_dtoa_r+0xaa0>
 80080c2:	f04f 0900 	mov.w	r9, #0
 80080c6:	2201      	movs	r2, #1
 80080c8:	9904      	ldr	r1, [sp, #16]
 80080ca:	4620      	mov	r0, r4
 80080cc:	f000 fda8 	bl	8008c20 <__lshift>
 80080d0:	4639      	mov	r1, r7
 80080d2:	9004      	str	r0, [sp, #16]
 80080d4:	f000 fdf8 	bl	8008cc8 <__mcmp>
 80080d8:	2800      	cmp	r0, #0
 80080da:	dcb6      	bgt.n	800804a <_dtoa_r+0xa42>
 80080dc:	d102      	bne.n	80080e4 <_dtoa_r+0xadc>
 80080de:	f018 0f01 	tst.w	r8, #1
 80080e2:	d1b2      	bne.n	800804a <_dtoa_r+0xa42>
 80080e4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080e8:	2b30      	cmp	r3, #48	; 0x30
 80080ea:	f105 32ff 	add.w	r2, r5, #4294967295
 80080ee:	f47f af0a 	bne.w	8007f06 <_dtoa_r+0x8fe>
 80080f2:	4615      	mov	r5, r2
 80080f4:	e7f6      	b.n	80080e4 <_dtoa_r+0xadc>
 80080f6:	4593      	cmp	fp, r2
 80080f8:	d105      	bne.n	8008106 <_dtoa_r+0xafe>
 80080fa:	2331      	movs	r3, #49	; 0x31
 80080fc:	f10a 0a01 	add.w	sl, sl, #1
 8008100:	f88b 3000 	strb.w	r3, [fp]
 8008104:	e6ff      	b.n	8007f06 <_dtoa_r+0x8fe>
 8008106:	4615      	mov	r5, r2
 8008108:	e79f      	b.n	800804a <_dtoa_r+0xa42>
 800810a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008170 <_dtoa_r+0xb68>
 800810e:	e007      	b.n	8008120 <_dtoa_r+0xb18>
 8008110:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008112:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008174 <_dtoa_r+0xb6c>
 8008116:	b11b      	cbz	r3, 8008120 <_dtoa_r+0xb18>
 8008118:	f10b 0308 	add.w	r3, fp, #8
 800811c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	4658      	mov	r0, fp
 8008122:	b017      	add	sp, #92	; 0x5c
 8008124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008128:	9b06      	ldr	r3, [sp, #24]
 800812a:	2b01      	cmp	r3, #1
 800812c:	f77f ae35 	ble.w	8007d9a <_dtoa_r+0x792>
 8008130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008132:	9307      	str	r3, [sp, #28]
 8008134:	e649      	b.n	8007dca <_dtoa_r+0x7c2>
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	2b00      	cmp	r3, #0
 800813a:	dc03      	bgt.n	8008144 <_dtoa_r+0xb3c>
 800813c:	9b06      	ldr	r3, [sp, #24]
 800813e:	2b02      	cmp	r3, #2
 8008140:	f73f aecc 	bgt.w	8007edc <_dtoa_r+0x8d4>
 8008144:	465d      	mov	r5, fp
 8008146:	4639      	mov	r1, r7
 8008148:	9804      	ldr	r0, [sp, #16]
 800814a:	f7ff f9cf 	bl	80074ec <quorem>
 800814e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008152:	f805 8b01 	strb.w	r8, [r5], #1
 8008156:	9a02      	ldr	r2, [sp, #8]
 8008158:	eba5 030b 	sub.w	r3, r5, fp
 800815c:	429a      	cmp	r2, r3
 800815e:	ddb0      	ble.n	80080c2 <_dtoa_r+0xaba>
 8008160:	2300      	movs	r3, #0
 8008162:	220a      	movs	r2, #10
 8008164:	9904      	ldr	r1, [sp, #16]
 8008166:	4620      	mov	r0, r4
 8008168:	f000 fba5 	bl	80088b6 <__multadd>
 800816c:	9004      	str	r0, [sp, #16]
 800816e:	e7ea      	b.n	8008146 <_dtoa_r+0xb3e>
 8008170:	0800984c 	.word	0x0800984c
 8008174:	080098c8 	.word	0x080098c8

08008178 <rshift>:
 8008178:	b5f0      	push	{r4, r5, r6, r7, lr}
 800817a:	6906      	ldr	r6, [r0, #16]
 800817c:	114b      	asrs	r3, r1, #5
 800817e:	429e      	cmp	r6, r3
 8008180:	f100 0414 	add.w	r4, r0, #20
 8008184:	dd30      	ble.n	80081e8 <rshift+0x70>
 8008186:	f011 011f 	ands.w	r1, r1, #31
 800818a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800818e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008192:	d108      	bne.n	80081a6 <rshift+0x2e>
 8008194:	4621      	mov	r1, r4
 8008196:	42b2      	cmp	r2, r6
 8008198:	460b      	mov	r3, r1
 800819a:	d211      	bcs.n	80081c0 <rshift+0x48>
 800819c:	f852 3b04 	ldr.w	r3, [r2], #4
 80081a0:	f841 3b04 	str.w	r3, [r1], #4
 80081a4:	e7f7      	b.n	8008196 <rshift+0x1e>
 80081a6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80081aa:	f1c1 0c20 	rsb	ip, r1, #32
 80081ae:	40cd      	lsrs	r5, r1
 80081b0:	3204      	adds	r2, #4
 80081b2:	4623      	mov	r3, r4
 80081b4:	42b2      	cmp	r2, r6
 80081b6:	4617      	mov	r7, r2
 80081b8:	d30c      	bcc.n	80081d4 <rshift+0x5c>
 80081ba:	601d      	str	r5, [r3, #0]
 80081bc:	b105      	cbz	r5, 80081c0 <rshift+0x48>
 80081be:	3304      	adds	r3, #4
 80081c0:	1b1a      	subs	r2, r3, r4
 80081c2:	42a3      	cmp	r3, r4
 80081c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80081c8:	bf08      	it	eq
 80081ca:	2300      	moveq	r3, #0
 80081cc:	6102      	str	r2, [r0, #16]
 80081ce:	bf08      	it	eq
 80081d0:	6143      	streq	r3, [r0, #20]
 80081d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081d4:	683f      	ldr	r7, [r7, #0]
 80081d6:	fa07 f70c 	lsl.w	r7, r7, ip
 80081da:	433d      	orrs	r5, r7
 80081dc:	f843 5b04 	str.w	r5, [r3], #4
 80081e0:	f852 5b04 	ldr.w	r5, [r2], #4
 80081e4:	40cd      	lsrs	r5, r1
 80081e6:	e7e5      	b.n	80081b4 <rshift+0x3c>
 80081e8:	4623      	mov	r3, r4
 80081ea:	e7e9      	b.n	80081c0 <rshift+0x48>

080081ec <__hexdig_fun>:
 80081ec:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80081f0:	2b09      	cmp	r3, #9
 80081f2:	d802      	bhi.n	80081fa <__hexdig_fun+0xe>
 80081f4:	3820      	subs	r0, #32
 80081f6:	b2c0      	uxtb	r0, r0
 80081f8:	4770      	bx	lr
 80081fa:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80081fe:	2b05      	cmp	r3, #5
 8008200:	d801      	bhi.n	8008206 <__hexdig_fun+0x1a>
 8008202:	3847      	subs	r0, #71	; 0x47
 8008204:	e7f7      	b.n	80081f6 <__hexdig_fun+0xa>
 8008206:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800820a:	2b05      	cmp	r3, #5
 800820c:	d801      	bhi.n	8008212 <__hexdig_fun+0x26>
 800820e:	3827      	subs	r0, #39	; 0x27
 8008210:	e7f1      	b.n	80081f6 <__hexdig_fun+0xa>
 8008212:	2000      	movs	r0, #0
 8008214:	4770      	bx	lr

08008216 <__gethex>:
 8008216:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	b08b      	sub	sp, #44	; 0x2c
 800821c:	468a      	mov	sl, r1
 800821e:	9002      	str	r0, [sp, #8]
 8008220:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008222:	9306      	str	r3, [sp, #24]
 8008224:	4690      	mov	r8, r2
 8008226:	f000 fad0 	bl	80087ca <__localeconv_l>
 800822a:	6803      	ldr	r3, [r0, #0]
 800822c:	9303      	str	r3, [sp, #12]
 800822e:	4618      	mov	r0, r3
 8008230:	f7f8 f841 	bl	80002b6 <strlen>
 8008234:	9b03      	ldr	r3, [sp, #12]
 8008236:	9001      	str	r0, [sp, #4]
 8008238:	4403      	add	r3, r0
 800823a:	f04f 0b00 	mov.w	fp, #0
 800823e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008242:	9307      	str	r3, [sp, #28]
 8008244:	f8da 3000 	ldr.w	r3, [sl]
 8008248:	3302      	adds	r3, #2
 800824a:	461f      	mov	r7, r3
 800824c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008250:	2830      	cmp	r0, #48	; 0x30
 8008252:	d06c      	beq.n	800832e <__gethex+0x118>
 8008254:	f7ff ffca 	bl	80081ec <__hexdig_fun>
 8008258:	4604      	mov	r4, r0
 800825a:	2800      	cmp	r0, #0
 800825c:	d16a      	bne.n	8008334 <__gethex+0x11e>
 800825e:	9a01      	ldr	r2, [sp, #4]
 8008260:	9903      	ldr	r1, [sp, #12]
 8008262:	4638      	mov	r0, r7
 8008264:	f001 f8f4 	bl	8009450 <strncmp>
 8008268:	2800      	cmp	r0, #0
 800826a:	d166      	bne.n	800833a <__gethex+0x124>
 800826c:	9b01      	ldr	r3, [sp, #4]
 800826e:	5cf8      	ldrb	r0, [r7, r3]
 8008270:	18fe      	adds	r6, r7, r3
 8008272:	f7ff ffbb 	bl	80081ec <__hexdig_fun>
 8008276:	2800      	cmp	r0, #0
 8008278:	d062      	beq.n	8008340 <__gethex+0x12a>
 800827a:	4633      	mov	r3, r6
 800827c:	7818      	ldrb	r0, [r3, #0]
 800827e:	2830      	cmp	r0, #48	; 0x30
 8008280:	461f      	mov	r7, r3
 8008282:	f103 0301 	add.w	r3, r3, #1
 8008286:	d0f9      	beq.n	800827c <__gethex+0x66>
 8008288:	f7ff ffb0 	bl	80081ec <__hexdig_fun>
 800828c:	fab0 f580 	clz	r5, r0
 8008290:	096d      	lsrs	r5, r5, #5
 8008292:	4634      	mov	r4, r6
 8008294:	f04f 0b01 	mov.w	fp, #1
 8008298:	463a      	mov	r2, r7
 800829a:	4616      	mov	r6, r2
 800829c:	3201      	adds	r2, #1
 800829e:	7830      	ldrb	r0, [r6, #0]
 80082a0:	f7ff ffa4 	bl	80081ec <__hexdig_fun>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	d1f8      	bne.n	800829a <__gethex+0x84>
 80082a8:	9a01      	ldr	r2, [sp, #4]
 80082aa:	9903      	ldr	r1, [sp, #12]
 80082ac:	4630      	mov	r0, r6
 80082ae:	f001 f8cf 	bl	8009450 <strncmp>
 80082b2:	b950      	cbnz	r0, 80082ca <__gethex+0xb4>
 80082b4:	b954      	cbnz	r4, 80082cc <__gethex+0xb6>
 80082b6:	9b01      	ldr	r3, [sp, #4]
 80082b8:	18f4      	adds	r4, r6, r3
 80082ba:	4622      	mov	r2, r4
 80082bc:	4616      	mov	r6, r2
 80082be:	3201      	adds	r2, #1
 80082c0:	7830      	ldrb	r0, [r6, #0]
 80082c2:	f7ff ff93 	bl	80081ec <__hexdig_fun>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d1f8      	bne.n	80082bc <__gethex+0xa6>
 80082ca:	b10c      	cbz	r4, 80082d0 <__gethex+0xba>
 80082cc:	1ba4      	subs	r4, r4, r6
 80082ce:	00a4      	lsls	r4, r4, #2
 80082d0:	7833      	ldrb	r3, [r6, #0]
 80082d2:	2b50      	cmp	r3, #80	; 0x50
 80082d4:	d001      	beq.n	80082da <__gethex+0xc4>
 80082d6:	2b70      	cmp	r3, #112	; 0x70
 80082d8:	d140      	bne.n	800835c <__gethex+0x146>
 80082da:	7873      	ldrb	r3, [r6, #1]
 80082dc:	2b2b      	cmp	r3, #43	; 0x2b
 80082de:	d031      	beq.n	8008344 <__gethex+0x12e>
 80082e0:	2b2d      	cmp	r3, #45	; 0x2d
 80082e2:	d033      	beq.n	800834c <__gethex+0x136>
 80082e4:	1c71      	adds	r1, r6, #1
 80082e6:	f04f 0900 	mov.w	r9, #0
 80082ea:	7808      	ldrb	r0, [r1, #0]
 80082ec:	f7ff ff7e 	bl	80081ec <__hexdig_fun>
 80082f0:	1e43      	subs	r3, r0, #1
 80082f2:	b2db      	uxtb	r3, r3
 80082f4:	2b18      	cmp	r3, #24
 80082f6:	d831      	bhi.n	800835c <__gethex+0x146>
 80082f8:	f1a0 0210 	sub.w	r2, r0, #16
 80082fc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008300:	f7ff ff74 	bl	80081ec <__hexdig_fun>
 8008304:	1e43      	subs	r3, r0, #1
 8008306:	b2db      	uxtb	r3, r3
 8008308:	2b18      	cmp	r3, #24
 800830a:	d922      	bls.n	8008352 <__gethex+0x13c>
 800830c:	f1b9 0f00 	cmp.w	r9, #0
 8008310:	d000      	beq.n	8008314 <__gethex+0xfe>
 8008312:	4252      	negs	r2, r2
 8008314:	4414      	add	r4, r2
 8008316:	f8ca 1000 	str.w	r1, [sl]
 800831a:	b30d      	cbz	r5, 8008360 <__gethex+0x14a>
 800831c:	f1bb 0f00 	cmp.w	fp, #0
 8008320:	bf0c      	ite	eq
 8008322:	2706      	moveq	r7, #6
 8008324:	2700      	movne	r7, #0
 8008326:	4638      	mov	r0, r7
 8008328:	b00b      	add	sp, #44	; 0x2c
 800832a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800832e:	f10b 0b01 	add.w	fp, fp, #1
 8008332:	e78a      	b.n	800824a <__gethex+0x34>
 8008334:	2500      	movs	r5, #0
 8008336:	462c      	mov	r4, r5
 8008338:	e7ae      	b.n	8008298 <__gethex+0x82>
 800833a:	463e      	mov	r6, r7
 800833c:	2501      	movs	r5, #1
 800833e:	e7c7      	b.n	80082d0 <__gethex+0xba>
 8008340:	4604      	mov	r4, r0
 8008342:	e7fb      	b.n	800833c <__gethex+0x126>
 8008344:	f04f 0900 	mov.w	r9, #0
 8008348:	1cb1      	adds	r1, r6, #2
 800834a:	e7ce      	b.n	80082ea <__gethex+0xd4>
 800834c:	f04f 0901 	mov.w	r9, #1
 8008350:	e7fa      	b.n	8008348 <__gethex+0x132>
 8008352:	230a      	movs	r3, #10
 8008354:	fb03 0202 	mla	r2, r3, r2, r0
 8008358:	3a10      	subs	r2, #16
 800835a:	e7cf      	b.n	80082fc <__gethex+0xe6>
 800835c:	4631      	mov	r1, r6
 800835e:	e7da      	b.n	8008316 <__gethex+0x100>
 8008360:	1bf3      	subs	r3, r6, r7
 8008362:	3b01      	subs	r3, #1
 8008364:	4629      	mov	r1, r5
 8008366:	2b07      	cmp	r3, #7
 8008368:	dc49      	bgt.n	80083fe <__gethex+0x1e8>
 800836a:	9802      	ldr	r0, [sp, #8]
 800836c:	f000 fa58 	bl	8008820 <_Balloc>
 8008370:	9b01      	ldr	r3, [sp, #4]
 8008372:	f100 0914 	add.w	r9, r0, #20
 8008376:	f04f 0b00 	mov.w	fp, #0
 800837a:	f1c3 0301 	rsb	r3, r3, #1
 800837e:	4605      	mov	r5, r0
 8008380:	f8cd 9010 	str.w	r9, [sp, #16]
 8008384:	46da      	mov	sl, fp
 8008386:	9308      	str	r3, [sp, #32]
 8008388:	42b7      	cmp	r7, r6
 800838a:	d33b      	bcc.n	8008404 <__gethex+0x1ee>
 800838c:	9804      	ldr	r0, [sp, #16]
 800838e:	f840 ab04 	str.w	sl, [r0], #4
 8008392:	eba0 0009 	sub.w	r0, r0, r9
 8008396:	1080      	asrs	r0, r0, #2
 8008398:	6128      	str	r0, [r5, #16]
 800839a:	0147      	lsls	r7, r0, #5
 800839c:	4650      	mov	r0, sl
 800839e:	f000 fb03 	bl	80089a8 <__hi0bits>
 80083a2:	f8d8 6000 	ldr.w	r6, [r8]
 80083a6:	1a3f      	subs	r7, r7, r0
 80083a8:	42b7      	cmp	r7, r6
 80083aa:	dd64      	ble.n	8008476 <__gethex+0x260>
 80083ac:	1bbf      	subs	r7, r7, r6
 80083ae:	4639      	mov	r1, r7
 80083b0:	4628      	mov	r0, r5
 80083b2:	f000 fe13 	bl	8008fdc <__any_on>
 80083b6:	4682      	mov	sl, r0
 80083b8:	b178      	cbz	r0, 80083da <__gethex+0x1c4>
 80083ba:	1e7b      	subs	r3, r7, #1
 80083bc:	1159      	asrs	r1, r3, #5
 80083be:	f003 021f 	and.w	r2, r3, #31
 80083c2:	f04f 0a01 	mov.w	sl, #1
 80083c6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80083ca:	fa0a f202 	lsl.w	r2, sl, r2
 80083ce:	420a      	tst	r2, r1
 80083d0:	d003      	beq.n	80083da <__gethex+0x1c4>
 80083d2:	4553      	cmp	r3, sl
 80083d4:	dc46      	bgt.n	8008464 <__gethex+0x24e>
 80083d6:	f04f 0a02 	mov.w	sl, #2
 80083da:	4639      	mov	r1, r7
 80083dc:	4628      	mov	r0, r5
 80083de:	f7ff fecb 	bl	8008178 <rshift>
 80083e2:	443c      	add	r4, r7
 80083e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	da52      	bge.n	8008492 <__gethex+0x27c>
 80083ec:	4629      	mov	r1, r5
 80083ee:	9802      	ldr	r0, [sp, #8]
 80083f0:	f000 fa4a 	bl	8008888 <_Bfree>
 80083f4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80083f6:	2300      	movs	r3, #0
 80083f8:	6013      	str	r3, [r2, #0]
 80083fa:	27a3      	movs	r7, #163	; 0xa3
 80083fc:	e793      	b.n	8008326 <__gethex+0x110>
 80083fe:	3101      	adds	r1, #1
 8008400:	105b      	asrs	r3, r3, #1
 8008402:	e7b0      	b.n	8008366 <__gethex+0x150>
 8008404:	1e73      	subs	r3, r6, #1
 8008406:	9305      	str	r3, [sp, #20]
 8008408:	9a07      	ldr	r2, [sp, #28]
 800840a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800840e:	4293      	cmp	r3, r2
 8008410:	d018      	beq.n	8008444 <__gethex+0x22e>
 8008412:	f1bb 0f20 	cmp.w	fp, #32
 8008416:	d107      	bne.n	8008428 <__gethex+0x212>
 8008418:	9b04      	ldr	r3, [sp, #16]
 800841a:	f8c3 a000 	str.w	sl, [r3]
 800841e:	3304      	adds	r3, #4
 8008420:	f04f 0a00 	mov.w	sl, #0
 8008424:	9304      	str	r3, [sp, #16]
 8008426:	46d3      	mov	fp, sl
 8008428:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800842c:	f7ff fede 	bl	80081ec <__hexdig_fun>
 8008430:	f000 000f 	and.w	r0, r0, #15
 8008434:	fa00 f00b 	lsl.w	r0, r0, fp
 8008438:	ea4a 0a00 	orr.w	sl, sl, r0
 800843c:	f10b 0b04 	add.w	fp, fp, #4
 8008440:	9b05      	ldr	r3, [sp, #20]
 8008442:	e00d      	b.n	8008460 <__gethex+0x24a>
 8008444:	9b05      	ldr	r3, [sp, #20]
 8008446:	9a08      	ldr	r2, [sp, #32]
 8008448:	4413      	add	r3, r2
 800844a:	42bb      	cmp	r3, r7
 800844c:	d3e1      	bcc.n	8008412 <__gethex+0x1fc>
 800844e:	4618      	mov	r0, r3
 8008450:	9a01      	ldr	r2, [sp, #4]
 8008452:	9903      	ldr	r1, [sp, #12]
 8008454:	9309      	str	r3, [sp, #36]	; 0x24
 8008456:	f000 fffb 	bl	8009450 <strncmp>
 800845a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845c:	2800      	cmp	r0, #0
 800845e:	d1d8      	bne.n	8008412 <__gethex+0x1fc>
 8008460:	461e      	mov	r6, r3
 8008462:	e791      	b.n	8008388 <__gethex+0x172>
 8008464:	1eb9      	subs	r1, r7, #2
 8008466:	4628      	mov	r0, r5
 8008468:	f000 fdb8 	bl	8008fdc <__any_on>
 800846c:	2800      	cmp	r0, #0
 800846e:	d0b2      	beq.n	80083d6 <__gethex+0x1c0>
 8008470:	f04f 0a03 	mov.w	sl, #3
 8008474:	e7b1      	b.n	80083da <__gethex+0x1c4>
 8008476:	da09      	bge.n	800848c <__gethex+0x276>
 8008478:	1bf7      	subs	r7, r6, r7
 800847a:	4629      	mov	r1, r5
 800847c:	463a      	mov	r2, r7
 800847e:	9802      	ldr	r0, [sp, #8]
 8008480:	f000 fbce 	bl	8008c20 <__lshift>
 8008484:	1be4      	subs	r4, r4, r7
 8008486:	4605      	mov	r5, r0
 8008488:	f100 0914 	add.w	r9, r0, #20
 800848c:	f04f 0a00 	mov.w	sl, #0
 8008490:	e7a8      	b.n	80083e4 <__gethex+0x1ce>
 8008492:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008496:	42a0      	cmp	r0, r4
 8008498:	dd6a      	ble.n	8008570 <__gethex+0x35a>
 800849a:	1b04      	subs	r4, r0, r4
 800849c:	42a6      	cmp	r6, r4
 800849e:	dc2e      	bgt.n	80084fe <__gethex+0x2e8>
 80084a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80084a4:	2b02      	cmp	r3, #2
 80084a6:	d022      	beq.n	80084ee <__gethex+0x2d8>
 80084a8:	2b03      	cmp	r3, #3
 80084aa:	d024      	beq.n	80084f6 <__gethex+0x2e0>
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d115      	bne.n	80084dc <__gethex+0x2c6>
 80084b0:	42a6      	cmp	r6, r4
 80084b2:	d113      	bne.n	80084dc <__gethex+0x2c6>
 80084b4:	2e01      	cmp	r6, #1
 80084b6:	dc0b      	bgt.n	80084d0 <__gethex+0x2ba>
 80084b8:	9a06      	ldr	r2, [sp, #24]
 80084ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	2301      	movs	r3, #1
 80084c2:	612b      	str	r3, [r5, #16]
 80084c4:	f8c9 3000 	str.w	r3, [r9]
 80084c8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80084ca:	2762      	movs	r7, #98	; 0x62
 80084cc:	601d      	str	r5, [r3, #0]
 80084ce:	e72a      	b.n	8008326 <__gethex+0x110>
 80084d0:	1e71      	subs	r1, r6, #1
 80084d2:	4628      	mov	r0, r5
 80084d4:	f000 fd82 	bl	8008fdc <__any_on>
 80084d8:	2800      	cmp	r0, #0
 80084da:	d1ed      	bne.n	80084b8 <__gethex+0x2a2>
 80084dc:	4629      	mov	r1, r5
 80084de:	9802      	ldr	r0, [sp, #8]
 80084e0:	f000 f9d2 	bl	8008888 <_Bfree>
 80084e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80084e6:	2300      	movs	r3, #0
 80084e8:	6013      	str	r3, [r2, #0]
 80084ea:	2750      	movs	r7, #80	; 0x50
 80084ec:	e71b      	b.n	8008326 <__gethex+0x110>
 80084ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d0e1      	beq.n	80084b8 <__gethex+0x2a2>
 80084f4:	e7f2      	b.n	80084dc <__gethex+0x2c6>
 80084f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d1dd      	bne.n	80084b8 <__gethex+0x2a2>
 80084fc:	e7ee      	b.n	80084dc <__gethex+0x2c6>
 80084fe:	1e67      	subs	r7, r4, #1
 8008500:	f1ba 0f00 	cmp.w	sl, #0
 8008504:	d131      	bne.n	800856a <__gethex+0x354>
 8008506:	b127      	cbz	r7, 8008512 <__gethex+0x2fc>
 8008508:	4639      	mov	r1, r7
 800850a:	4628      	mov	r0, r5
 800850c:	f000 fd66 	bl	8008fdc <__any_on>
 8008510:	4682      	mov	sl, r0
 8008512:	117a      	asrs	r2, r7, #5
 8008514:	2301      	movs	r3, #1
 8008516:	f007 071f 	and.w	r7, r7, #31
 800851a:	fa03 f707 	lsl.w	r7, r3, r7
 800851e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008522:	4621      	mov	r1, r4
 8008524:	421f      	tst	r7, r3
 8008526:	4628      	mov	r0, r5
 8008528:	bf18      	it	ne
 800852a:	f04a 0a02 	orrne.w	sl, sl, #2
 800852e:	1b36      	subs	r6, r6, r4
 8008530:	f7ff fe22 	bl	8008178 <rshift>
 8008534:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008538:	2702      	movs	r7, #2
 800853a:	f1ba 0f00 	cmp.w	sl, #0
 800853e:	d048      	beq.n	80085d2 <__gethex+0x3bc>
 8008540:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008544:	2b02      	cmp	r3, #2
 8008546:	d015      	beq.n	8008574 <__gethex+0x35e>
 8008548:	2b03      	cmp	r3, #3
 800854a:	d017      	beq.n	800857c <__gethex+0x366>
 800854c:	2b01      	cmp	r3, #1
 800854e:	d109      	bne.n	8008564 <__gethex+0x34e>
 8008550:	f01a 0f02 	tst.w	sl, #2
 8008554:	d006      	beq.n	8008564 <__gethex+0x34e>
 8008556:	f8d9 3000 	ldr.w	r3, [r9]
 800855a:	ea4a 0a03 	orr.w	sl, sl, r3
 800855e:	f01a 0f01 	tst.w	sl, #1
 8008562:	d10e      	bne.n	8008582 <__gethex+0x36c>
 8008564:	f047 0710 	orr.w	r7, r7, #16
 8008568:	e033      	b.n	80085d2 <__gethex+0x3bc>
 800856a:	f04f 0a01 	mov.w	sl, #1
 800856e:	e7d0      	b.n	8008512 <__gethex+0x2fc>
 8008570:	2701      	movs	r7, #1
 8008572:	e7e2      	b.n	800853a <__gethex+0x324>
 8008574:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008576:	f1c3 0301 	rsb	r3, r3, #1
 800857a:	9315      	str	r3, [sp, #84]	; 0x54
 800857c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800857e:	2b00      	cmp	r3, #0
 8008580:	d0f0      	beq.n	8008564 <__gethex+0x34e>
 8008582:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008586:	f105 0314 	add.w	r3, r5, #20
 800858a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800858e:	eb03 010a 	add.w	r1, r3, sl
 8008592:	f04f 0c00 	mov.w	ip, #0
 8008596:	4618      	mov	r0, r3
 8008598:	f853 2b04 	ldr.w	r2, [r3], #4
 800859c:	f1b2 3fff 	cmp.w	r2, #4294967295
 80085a0:	d01c      	beq.n	80085dc <__gethex+0x3c6>
 80085a2:	3201      	adds	r2, #1
 80085a4:	6002      	str	r2, [r0, #0]
 80085a6:	2f02      	cmp	r7, #2
 80085a8:	f105 0314 	add.w	r3, r5, #20
 80085ac:	d138      	bne.n	8008620 <__gethex+0x40a>
 80085ae:	f8d8 2000 	ldr.w	r2, [r8]
 80085b2:	3a01      	subs	r2, #1
 80085b4:	42b2      	cmp	r2, r6
 80085b6:	d10a      	bne.n	80085ce <__gethex+0x3b8>
 80085b8:	1171      	asrs	r1, r6, #5
 80085ba:	2201      	movs	r2, #1
 80085bc:	f006 061f 	and.w	r6, r6, #31
 80085c0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80085c4:	fa02 f606 	lsl.w	r6, r2, r6
 80085c8:	421e      	tst	r6, r3
 80085ca:	bf18      	it	ne
 80085cc:	4617      	movne	r7, r2
 80085ce:	f047 0720 	orr.w	r7, r7, #32
 80085d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085d4:	601d      	str	r5, [r3, #0]
 80085d6:	9b06      	ldr	r3, [sp, #24]
 80085d8:	601c      	str	r4, [r3, #0]
 80085da:	e6a4      	b.n	8008326 <__gethex+0x110>
 80085dc:	4299      	cmp	r1, r3
 80085de:	f843 cc04 	str.w	ip, [r3, #-4]
 80085e2:	d8d8      	bhi.n	8008596 <__gethex+0x380>
 80085e4:	68ab      	ldr	r3, [r5, #8]
 80085e6:	4599      	cmp	r9, r3
 80085e8:	db12      	blt.n	8008610 <__gethex+0x3fa>
 80085ea:	6869      	ldr	r1, [r5, #4]
 80085ec:	9802      	ldr	r0, [sp, #8]
 80085ee:	3101      	adds	r1, #1
 80085f0:	f000 f916 	bl	8008820 <_Balloc>
 80085f4:	692a      	ldr	r2, [r5, #16]
 80085f6:	3202      	adds	r2, #2
 80085f8:	f105 010c 	add.w	r1, r5, #12
 80085fc:	4683      	mov	fp, r0
 80085fe:	0092      	lsls	r2, r2, #2
 8008600:	300c      	adds	r0, #12
 8008602:	f7fd fa4b 	bl	8005a9c <memcpy>
 8008606:	4629      	mov	r1, r5
 8008608:	9802      	ldr	r0, [sp, #8]
 800860a:	f000 f93d 	bl	8008888 <_Bfree>
 800860e:	465d      	mov	r5, fp
 8008610:	692b      	ldr	r3, [r5, #16]
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008618:	612a      	str	r2, [r5, #16]
 800861a:	2201      	movs	r2, #1
 800861c:	615a      	str	r2, [r3, #20]
 800861e:	e7c2      	b.n	80085a6 <__gethex+0x390>
 8008620:	692a      	ldr	r2, [r5, #16]
 8008622:	454a      	cmp	r2, r9
 8008624:	dd0b      	ble.n	800863e <__gethex+0x428>
 8008626:	2101      	movs	r1, #1
 8008628:	4628      	mov	r0, r5
 800862a:	f7ff fda5 	bl	8008178 <rshift>
 800862e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008632:	3401      	adds	r4, #1
 8008634:	42a3      	cmp	r3, r4
 8008636:	f6ff aed9 	blt.w	80083ec <__gethex+0x1d6>
 800863a:	2701      	movs	r7, #1
 800863c:	e7c7      	b.n	80085ce <__gethex+0x3b8>
 800863e:	f016 061f 	ands.w	r6, r6, #31
 8008642:	d0fa      	beq.n	800863a <__gethex+0x424>
 8008644:	449a      	add	sl, r3
 8008646:	f1c6 0620 	rsb	r6, r6, #32
 800864a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800864e:	f000 f9ab 	bl	80089a8 <__hi0bits>
 8008652:	42b0      	cmp	r0, r6
 8008654:	dbe7      	blt.n	8008626 <__gethex+0x410>
 8008656:	e7f0      	b.n	800863a <__gethex+0x424>

08008658 <L_shift>:
 8008658:	f1c2 0208 	rsb	r2, r2, #8
 800865c:	0092      	lsls	r2, r2, #2
 800865e:	b570      	push	{r4, r5, r6, lr}
 8008660:	f1c2 0620 	rsb	r6, r2, #32
 8008664:	6843      	ldr	r3, [r0, #4]
 8008666:	6804      	ldr	r4, [r0, #0]
 8008668:	fa03 f506 	lsl.w	r5, r3, r6
 800866c:	432c      	orrs	r4, r5
 800866e:	40d3      	lsrs	r3, r2
 8008670:	6004      	str	r4, [r0, #0]
 8008672:	f840 3f04 	str.w	r3, [r0, #4]!
 8008676:	4288      	cmp	r0, r1
 8008678:	d3f4      	bcc.n	8008664 <L_shift+0xc>
 800867a:	bd70      	pop	{r4, r5, r6, pc}

0800867c <__match>:
 800867c:	b530      	push	{r4, r5, lr}
 800867e:	6803      	ldr	r3, [r0, #0]
 8008680:	3301      	adds	r3, #1
 8008682:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008686:	b914      	cbnz	r4, 800868e <__match+0x12>
 8008688:	6003      	str	r3, [r0, #0]
 800868a:	2001      	movs	r0, #1
 800868c:	bd30      	pop	{r4, r5, pc}
 800868e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008692:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008696:	2d19      	cmp	r5, #25
 8008698:	bf98      	it	ls
 800869a:	3220      	addls	r2, #32
 800869c:	42a2      	cmp	r2, r4
 800869e:	d0f0      	beq.n	8008682 <__match+0x6>
 80086a0:	2000      	movs	r0, #0
 80086a2:	e7f3      	b.n	800868c <__match+0x10>

080086a4 <__hexnan>:
 80086a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086a8:	680b      	ldr	r3, [r1, #0]
 80086aa:	6801      	ldr	r1, [r0, #0]
 80086ac:	115f      	asrs	r7, r3, #5
 80086ae:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80086b2:	f013 031f 	ands.w	r3, r3, #31
 80086b6:	b087      	sub	sp, #28
 80086b8:	bf18      	it	ne
 80086ba:	3704      	addne	r7, #4
 80086bc:	2500      	movs	r5, #0
 80086be:	1f3e      	subs	r6, r7, #4
 80086c0:	4682      	mov	sl, r0
 80086c2:	4690      	mov	r8, r2
 80086c4:	9301      	str	r3, [sp, #4]
 80086c6:	f847 5c04 	str.w	r5, [r7, #-4]
 80086ca:	46b1      	mov	r9, r6
 80086cc:	4634      	mov	r4, r6
 80086ce:	9502      	str	r5, [sp, #8]
 80086d0:	46ab      	mov	fp, r5
 80086d2:	784a      	ldrb	r2, [r1, #1]
 80086d4:	1c4b      	adds	r3, r1, #1
 80086d6:	9303      	str	r3, [sp, #12]
 80086d8:	b342      	cbz	r2, 800872c <__hexnan+0x88>
 80086da:	4610      	mov	r0, r2
 80086dc:	9105      	str	r1, [sp, #20]
 80086de:	9204      	str	r2, [sp, #16]
 80086e0:	f7ff fd84 	bl	80081ec <__hexdig_fun>
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d143      	bne.n	8008770 <__hexnan+0xcc>
 80086e8:	9a04      	ldr	r2, [sp, #16]
 80086ea:	9905      	ldr	r1, [sp, #20]
 80086ec:	2a20      	cmp	r2, #32
 80086ee:	d818      	bhi.n	8008722 <__hexnan+0x7e>
 80086f0:	9b02      	ldr	r3, [sp, #8]
 80086f2:	459b      	cmp	fp, r3
 80086f4:	dd13      	ble.n	800871e <__hexnan+0x7a>
 80086f6:	454c      	cmp	r4, r9
 80086f8:	d206      	bcs.n	8008708 <__hexnan+0x64>
 80086fa:	2d07      	cmp	r5, #7
 80086fc:	dc04      	bgt.n	8008708 <__hexnan+0x64>
 80086fe:	462a      	mov	r2, r5
 8008700:	4649      	mov	r1, r9
 8008702:	4620      	mov	r0, r4
 8008704:	f7ff ffa8 	bl	8008658 <L_shift>
 8008708:	4544      	cmp	r4, r8
 800870a:	d944      	bls.n	8008796 <__hexnan+0xf2>
 800870c:	2300      	movs	r3, #0
 800870e:	f1a4 0904 	sub.w	r9, r4, #4
 8008712:	f844 3c04 	str.w	r3, [r4, #-4]
 8008716:	f8cd b008 	str.w	fp, [sp, #8]
 800871a:	464c      	mov	r4, r9
 800871c:	461d      	mov	r5, r3
 800871e:	9903      	ldr	r1, [sp, #12]
 8008720:	e7d7      	b.n	80086d2 <__hexnan+0x2e>
 8008722:	2a29      	cmp	r2, #41	; 0x29
 8008724:	d14a      	bne.n	80087bc <__hexnan+0x118>
 8008726:	3102      	adds	r1, #2
 8008728:	f8ca 1000 	str.w	r1, [sl]
 800872c:	f1bb 0f00 	cmp.w	fp, #0
 8008730:	d044      	beq.n	80087bc <__hexnan+0x118>
 8008732:	454c      	cmp	r4, r9
 8008734:	d206      	bcs.n	8008744 <__hexnan+0xa0>
 8008736:	2d07      	cmp	r5, #7
 8008738:	dc04      	bgt.n	8008744 <__hexnan+0xa0>
 800873a:	462a      	mov	r2, r5
 800873c:	4649      	mov	r1, r9
 800873e:	4620      	mov	r0, r4
 8008740:	f7ff ff8a 	bl	8008658 <L_shift>
 8008744:	4544      	cmp	r4, r8
 8008746:	d928      	bls.n	800879a <__hexnan+0xf6>
 8008748:	4643      	mov	r3, r8
 800874a:	f854 2b04 	ldr.w	r2, [r4], #4
 800874e:	f843 2b04 	str.w	r2, [r3], #4
 8008752:	42a6      	cmp	r6, r4
 8008754:	d2f9      	bcs.n	800874a <__hexnan+0xa6>
 8008756:	2200      	movs	r2, #0
 8008758:	f843 2b04 	str.w	r2, [r3], #4
 800875c:	429e      	cmp	r6, r3
 800875e:	d2fb      	bcs.n	8008758 <__hexnan+0xb4>
 8008760:	6833      	ldr	r3, [r6, #0]
 8008762:	b91b      	cbnz	r3, 800876c <__hexnan+0xc8>
 8008764:	4546      	cmp	r6, r8
 8008766:	d127      	bne.n	80087b8 <__hexnan+0x114>
 8008768:	2301      	movs	r3, #1
 800876a:	6033      	str	r3, [r6, #0]
 800876c:	2005      	movs	r0, #5
 800876e:	e026      	b.n	80087be <__hexnan+0x11a>
 8008770:	3501      	adds	r5, #1
 8008772:	2d08      	cmp	r5, #8
 8008774:	f10b 0b01 	add.w	fp, fp, #1
 8008778:	dd06      	ble.n	8008788 <__hexnan+0xe4>
 800877a:	4544      	cmp	r4, r8
 800877c:	d9cf      	bls.n	800871e <__hexnan+0x7a>
 800877e:	2300      	movs	r3, #0
 8008780:	f844 3c04 	str.w	r3, [r4, #-4]
 8008784:	2501      	movs	r5, #1
 8008786:	3c04      	subs	r4, #4
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	f000 000f 	and.w	r0, r0, #15
 800878e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008792:	6020      	str	r0, [r4, #0]
 8008794:	e7c3      	b.n	800871e <__hexnan+0x7a>
 8008796:	2508      	movs	r5, #8
 8008798:	e7c1      	b.n	800871e <__hexnan+0x7a>
 800879a:	9b01      	ldr	r3, [sp, #4]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d0df      	beq.n	8008760 <__hexnan+0xbc>
 80087a0:	f04f 32ff 	mov.w	r2, #4294967295
 80087a4:	f1c3 0320 	rsb	r3, r3, #32
 80087a8:	fa22 f303 	lsr.w	r3, r2, r3
 80087ac:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80087b0:	401a      	ands	r2, r3
 80087b2:	f847 2c04 	str.w	r2, [r7, #-4]
 80087b6:	e7d3      	b.n	8008760 <__hexnan+0xbc>
 80087b8:	3e04      	subs	r6, #4
 80087ba:	e7d1      	b.n	8008760 <__hexnan+0xbc>
 80087bc:	2004      	movs	r0, #4
 80087be:	b007      	add	sp, #28
 80087c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080087c4 <__locale_ctype_ptr_l>:
 80087c4:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80087c8:	4770      	bx	lr

080087ca <__localeconv_l>:
 80087ca:	30f0      	adds	r0, #240	; 0xf0
 80087cc:	4770      	bx	lr
	...

080087d0 <_localeconv_r>:
 80087d0:	4b04      	ldr	r3, [pc, #16]	; (80087e4 <_localeconv_r+0x14>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6a18      	ldr	r0, [r3, #32]
 80087d6:	4b04      	ldr	r3, [pc, #16]	; (80087e8 <_localeconv_r+0x18>)
 80087d8:	2800      	cmp	r0, #0
 80087da:	bf08      	it	eq
 80087dc:	4618      	moveq	r0, r3
 80087de:	30f0      	adds	r0, #240	; 0xf0
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop
 80087e4:	2000000c 	.word	0x2000000c
 80087e8:	20000070 	.word	0x20000070

080087ec <malloc>:
 80087ec:	4b02      	ldr	r3, [pc, #8]	; (80087f8 <malloc+0xc>)
 80087ee:	4601      	mov	r1, r0
 80087f0:	6818      	ldr	r0, [r3, #0]
 80087f2:	f000 bc71 	b.w	80090d8 <_malloc_r>
 80087f6:	bf00      	nop
 80087f8:	2000000c 	.word	0x2000000c

080087fc <__ascii_mbtowc>:
 80087fc:	b082      	sub	sp, #8
 80087fe:	b901      	cbnz	r1, 8008802 <__ascii_mbtowc+0x6>
 8008800:	a901      	add	r1, sp, #4
 8008802:	b142      	cbz	r2, 8008816 <__ascii_mbtowc+0x1a>
 8008804:	b14b      	cbz	r3, 800881a <__ascii_mbtowc+0x1e>
 8008806:	7813      	ldrb	r3, [r2, #0]
 8008808:	600b      	str	r3, [r1, #0]
 800880a:	7812      	ldrb	r2, [r2, #0]
 800880c:	1c10      	adds	r0, r2, #0
 800880e:	bf18      	it	ne
 8008810:	2001      	movne	r0, #1
 8008812:	b002      	add	sp, #8
 8008814:	4770      	bx	lr
 8008816:	4610      	mov	r0, r2
 8008818:	e7fb      	b.n	8008812 <__ascii_mbtowc+0x16>
 800881a:	f06f 0001 	mvn.w	r0, #1
 800881e:	e7f8      	b.n	8008812 <__ascii_mbtowc+0x16>

08008820 <_Balloc>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008824:	4604      	mov	r4, r0
 8008826:	460e      	mov	r6, r1
 8008828:	b93d      	cbnz	r5, 800883a <_Balloc+0x1a>
 800882a:	2010      	movs	r0, #16
 800882c:	f7ff ffde 	bl	80087ec <malloc>
 8008830:	6260      	str	r0, [r4, #36]	; 0x24
 8008832:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008836:	6005      	str	r5, [r0, #0]
 8008838:	60c5      	str	r5, [r0, #12]
 800883a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800883c:	68eb      	ldr	r3, [r5, #12]
 800883e:	b183      	cbz	r3, 8008862 <_Balloc+0x42>
 8008840:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8008848:	b9b8      	cbnz	r0, 800887a <_Balloc+0x5a>
 800884a:	2101      	movs	r1, #1
 800884c:	fa01 f506 	lsl.w	r5, r1, r6
 8008850:	1d6a      	adds	r2, r5, #5
 8008852:	0092      	lsls	r2, r2, #2
 8008854:	4620      	mov	r0, r4
 8008856:	f000 fbe2 	bl	800901e <_calloc_r>
 800885a:	b160      	cbz	r0, 8008876 <_Balloc+0x56>
 800885c:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8008860:	e00e      	b.n	8008880 <_Balloc+0x60>
 8008862:	2221      	movs	r2, #33	; 0x21
 8008864:	2104      	movs	r1, #4
 8008866:	4620      	mov	r0, r4
 8008868:	f000 fbd9 	bl	800901e <_calloc_r>
 800886c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800886e:	60e8      	str	r0, [r5, #12]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	2b00      	cmp	r3, #0
 8008874:	d1e4      	bne.n	8008840 <_Balloc+0x20>
 8008876:	2000      	movs	r0, #0
 8008878:	bd70      	pop	{r4, r5, r6, pc}
 800887a:	6802      	ldr	r2, [r0, #0]
 800887c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8008880:	2300      	movs	r3, #0
 8008882:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008886:	e7f7      	b.n	8008878 <_Balloc+0x58>

08008888 <_Bfree>:
 8008888:	b570      	push	{r4, r5, r6, lr}
 800888a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800888c:	4606      	mov	r6, r0
 800888e:	460d      	mov	r5, r1
 8008890:	b93c      	cbnz	r4, 80088a2 <_Bfree+0x1a>
 8008892:	2010      	movs	r0, #16
 8008894:	f7ff ffaa 	bl	80087ec <malloc>
 8008898:	6270      	str	r0, [r6, #36]	; 0x24
 800889a:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800889e:	6004      	str	r4, [r0, #0]
 80088a0:	60c4      	str	r4, [r0, #12]
 80088a2:	b13d      	cbz	r5, 80088b4 <_Bfree+0x2c>
 80088a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80088a6:	686a      	ldr	r2, [r5, #4]
 80088a8:	68db      	ldr	r3, [r3, #12]
 80088aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80088ae:	6029      	str	r1, [r5, #0]
 80088b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80088b4:	bd70      	pop	{r4, r5, r6, pc}

080088b6 <__multadd>:
 80088b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088ba:	690d      	ldr	r5, [r1, #16]
 80088bc:	461f      	mov	r7, r3
 80088be:	4606      	mov	r6, r0
 80088c0:	460c      	mov	r4, r1
 80088c2:	f101 0c14 	add.w	ip, r1, #20
 80088c6:	2300      	movs	r3, #0
 80088c8:	f8dc 0000 	ldr.w	r0, [ip]
 80088cc:	b281      	uxth	r1, r0
 80088ce:	fb02 7101 	mla	r1, r2, r1, r7
 80088d2:	0c0f      	lsrs	r7, r1, #16
 80088d4:	0c00      	lsrs	r0, r0, #16
 80088d6:	fb02 7000 	mla	r0, r2, r0, r7
 80088da:	b289      	uxth	r1, r1
 80088dc:	3301      	adds	r3, #1
 80088de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80088e2:	429d      	cmp	r5, r3
 80088e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80088e8:	f84c 1b04 	str.w	r1, [ip], #4
 80088ec:	dcec      	bgt.n	80088c8 <__multadd+0x12>
 80088ee:	b1d7      	cbz	r7, 8008926 <__multadd+0x70>
 80088f0:	68a3      	ldr	r3, [r4, #8]
 80088f2:	42ab      	cmp	r3, r5
 80088f4:	dc12      	bgt.n	800891c <__multadd+0x66>
 80088f6:	6861      	ldr	r1, [r4, #4]
 80088f8:	4630      	mov	r0, r6
 80088fa:	3101      	adds	r1, #1
 80088fc:	f7ff ff90 	bl	8008820 <_Balloc>
 8008900:	6922      	ldr	r2, [r4, #16]
 8008902:	3202      	adds	r2, #2
 8008904:	f104 010c 	add.w	r1, r4, #12
 8008908:	4680      	mov	r8, r0
 800890a:	0092      	lsls	r2, r2, #2
 800890c:	300c      	adds	r0, #12
 800890e:	f7fd f8c5 	bl	8005a9c <memcpy>
 8008912:	4621      	mov	r1, r4
 8008914:	4630      	mov	r0, r6
 8008916:	f7ff ffb7 	bl	8008888 <_Bfree>
 800891a:	4644      	mov	r4, r8
 800891c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008920:	3501      	adds	r5, #1
 8008922:	615f      	str	r7, [r3, #20]
 8008924:	6125      	str	r5, [r4, #16]
 8008926:	4620      	mov	r0, r4
 8008928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800892c <__s2b>:
 800892c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008930:	460c      	mov	r4, r1
 8008932:	4615      	mov	r5, r2
 8008934:	461f      	mov	r7, r3
 8008936:	2209      	movs	r2, #9
 8008938:	3308      	adds	r3, #8
 800893a:	4606      	mov	r6, r0
 800893c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008940:	2100      	movs	r1, #0
 8008942:	2201      	movs	r2, #1
 8008944:	429a      	cmp	r2, r3
 8008946:	db20      	blt.n	800898a <__s2b+0x5e>
 8008948:	4630      	mov	r0, r6
 800894a:	f7ff ff69 	bl	8008820 <_Balloc>
 800894e:	9b08      	ldr	r3, [sp, #32]
 8008950:	6143      	str	r3, [r0, #20]
 8008952:	2d09      	cmp	r5, #9
 8008954:	f04f 0301 	mov.w	r3, #1
 8008958:	6103      	str	r3, [r0, #16]
 800895a:	dd19      	ble.n	8008990 <__s2b+0x64>
 800895c:	f104 0809 	add.w	r8, r4, #9
 8008960:	46c1      	mov	r9, r8
 8008962:	442c      	add	r4, r5
 8008964:	f819 3b01 	ldrb.w	r3, [r9], #1
 8008968:	4601      	mov	r1, r0
 800896a:	3b30      	subs	r3, #48	; 0x30
 800896c:	220a      	movs	r2, #10
 800896e:	4630      	mov	r0, r6
 8008970:	f7ff ffa1 	bl	80088b6 <__multadd>
 8008974:	45a1      	cmp	r9, r4
 8008976:	d1f5      	bne.n	8008964 <__s2b+0x38>
 8008978:	eb08 0405 	add.w	r4, r8, r5
 800897c:	3c08      	subs	r4, #8
 800897e:	1b2d      	subs	r5, r5, r4
 8008980:	1963      	adds	r3, r4, r5
 8008982:	42bb      	cmp	r3, r7
 8008984:	db07      	blt.n	8008996 <__s2b+0x6a>
 8008986:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800898a:	0052      	lsls	r2, r2, #1
 800898c:	3101      	adds	r1, #1
 800898e:	e7d9      	b.n	8008944 <__s2b+0x18>
 8008990:	340a      	adds	r4, #10
 8008992:	2509      	movs	r5, #9
 8008994:	e7f3      	b.n	800897e <__s2b+0x52>
 8008996:	f814 3b01 	ldrb.w	r3, [r4], #1
 800899a:	4601      	mov	r1, r0
 800899c:	3b30      	subs	r3, #48	; 0x30
 800899e:	220a      	movs	r2, #10
 80089a0:	4630      	mov	r0, r6
 80089a2:	f7ff ff88 	bl	80088b6 <__multadd>
 80089a6:	e7eb      	b.n	8008980 <__s2b+0x54>

080089a8 <__hi0bits>:
 80089a8:	0c02      	lsrs	r2, r0, #16
 80089aa:	0412      	lsls	r2, r2, #16
 80089ac:	4603      	mov	r3, r0
 80089ae:	b9b2      	cbnz	r2, 80089de <__hi0bits+0x36>
 80089b0:	0403      	lsls	r3, r0, #16
 80089b2:	2010      	movs	r0, #16
 80089b4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80089b8:	bf04      	itt	eq
 80089ba:	021b      	lsleq	r3, r3, #8
 80089bc:	3008      	addeq	r0, #8
 80089be:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80089c2:	bf04      	itt	eq
 80089c4:	011b      	lsleq	r3, r3, #4
 80089c6:	3004      	addeq	r0, #4
 80089c8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80089cc:	bf04      	itt	eq
 80089ce:	009b      	lsleq	r3, r3, #2
 80089d0:	3002      	addeq	r0, #2
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	db06      	blt.n	80089e4 <__hi0bits+0x3c>
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	d503      	bpl.n	80089e2 <__hi0bits+0x3a>
 80089da:	3001      	adds	r0, #1
 80089dc:	4770      	bx	lr
 80089de:	2000      	movs	r0, #0
 80089e0:	e7e8      	b.n	80089b4 <__hi0bits+0xc>
 80089e2:	2020      	movs	r0, #32
 80089e4:	4770      	bx	lr

080089e6 <__lo0bits>:
 80089e6:	6803      	ldr	r3, [r0, #0]
 80089e8:	f013 0207 	ands.w	r2, r3, #7
 80089ec:	4601      	mov	r1, r0
 80089ee:	d00b      	beq.n	8008a08 <__lo0bits+0x22>
 80089f0:	07da      	lsls	r2, r3, #31
 80089f2:	d423      	bmi.n	8008a3c <__lo0bits+0x56>
 80089f4:	0798      	lsls	r0, r3, #30
 80089f6:	bf49      	itett	mi
 80089f8:	085b      	lsrmi	r3, r3, #1
 80089fa:	089b      	lsrpl	r3, r3, #2
 80089fc:	2001      	movmi	r0, #1
 80089fe:	600b      	strmi	r3, [r1, #0]
 8008a00:	bf5c      	itt	pl
 8008a02:	600b      	strpl	r3, [r1, #0]
 8008a04:	2002      	movpl	r0, #2
 8008a06:	4770      	bx	lr
 8008a08:	b298      	uxth	r0, r3
 8008a0a:	b9a8      	cbnz	r0, 8008a38 <__lo0bits+0x52>
 8008a0c:	0c1b      	lsrs	r3, r3, #16
 8008a0e:	2010      	movs	r0, #16
 8008a10:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008a14:	bf04      	itt	eq
 8008a16:	0a1b      	lsreq	r3, r3, #8
 8008a18:	3008      	addeq	r0, #8
 8008a1a:	071a      	lsls	r2, r3, #28
 8008a1c:	bf04      	itt	eq
 8008a1e:	091b      	lsreq	r3, r3, #4
 8008a20:	3004      	addeq	r0, #4
 8008a22:	079a      	lsls	r2, r3, #30
 8008a24:	bf04      	itt	eq
 8008a26:	089b      	lsreq	r3, r3, #2
 8008a28:	3002      	addeq	r0, #2
 8008a2a:	07da      	lsls	r2, r3, #31
 8008a2c:	d402      	bmi.n	8008a34 <__lo0bits+0x4e>
 8008a2e:	085b      	lsrs	r3, r3, #1
 8008a30:	d006      	beq.n	8008a40 <__lo0bits+0x5a>
 8008a32:	3001      	adds	r0, #1
 8008a34:	600b      	str	r3, [r1, #0]
 8008a36:	4770      	bx	lr
 8008a38:	4610      	mov	r0, r2
 8008a3a:	e7e9      	b.n	8008a10 <__lo0bits+0x2a>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	4770      	bx	lr
 8008a40:	2020      	movs	r0, #32
 8008a42:	4770      	bx	lr

08008a44 <__i2b>:
 8008a44:	b510      	push	{r4, lr}
 8008a46:	460c      	mov	r4, r1
 8008a48:	2101      	movs	r1, #1
 8008a4a:	f7ff fee9 	bl	8008820 <_Balloc>
 8008a4e:	2201      	movs	r2, #1
 8008a50:	6144      	str	r4, [r0, #20]
 8008a52:	6102      	str	r2, [r0, #16]
 8008a54:	bd10      	pop	{r4, pc}

08008a56 <__multiply>:
 8008a56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	4614      	mov	r4, r2
 8008a5c:	690a      	ldr	r2, [r1, #16]
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	bfb8      	it	lt
 8008a64:	460b      	movlt	r3, r1
 8008a66:	4688      	mov	r8, r1
 8008a68:	bfbc      	itt	lt
 8008a6a:	46a0      	movlt	r8, r4
 8008a6c:	461c      	movlt	r4, r3
 8008a6e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008a72:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008a76:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008a7a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a7e:	eb07 0609 	add.w	r6, r7, r9
 8008a82:	42b3      	cmp	r3, r6
 8008a84:	bfb8      	it	lt
 8008a86:	3101      	addlt	r1, #1
 8008a88:	f7ff feca 	bl	8008820 <_Balloc>
 8008a8c:	f100 0514 	add.w	r5, r0, #20
 8008a90:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008a94:	462b      	mov	r3, r5
 8008a96:	2200      	movs	r2, #0
 8008a98:	4573      	cmp	r3, lr
 8008a9a:	d316      	bcc.n	8008aca <__multiply+0x74>
 8008a9c:	f104 0214 	add.w	r2, r4, #20
 8008aa0:	f108 0114 	add.w	r1, r8, #20
 8008aa4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008aa8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008aac:	9300      	str	r3, [sp, #0]
 8008aae:	9b00      	ldr	r3, [sp, #0]
 8008ab0:	9201      	str	r2, [sp, #4]
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d80c      	bhi.n	8008ad0 <__multiply+0x7a>
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	dd03      	ble.n	8008ac2 <__multiply+0x6c>
 8008aba:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d05d      	beq.n	8008b7e <__multiply+0x128>
 8008ac2:	6106      	str	r6, [r0, #16]
 8008ac4:	b003      	add	sp, #12
 8008ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aca:	f843 2b04 	str.w	r2, [r3], #4
 8008ace:	e7e3      	b.n	8008a98 <__multiply+0x42>
 8008ad0:	f8b2 b000 	ldrh.w	fp, [r2]
 8008ad4:	f1bb 0f00 	cmp.w	fp, #0
 8008ad8:	d023      	beq.n	8008b22 <__multiply+0xcc>
 8008ada:	4689      	mov	r9, r1
 8008adc:	46ac      	mov	ip, r5
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	f859 4b04 	ldr.w	r4, [r9], #4
 8008ae6:	f8dc a000 	ldr.w	sl, [ip]
 8008aea:	b2a3      	uxth	r3, r4
 8008aec:	fa1f fa8a 	uxth.w	sl, sl
 8008af0:	fb0b a303 	mla	r3, fp, r3, sl
 8008af4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008af8:	f8dc 4000 	ldr.w	r4, [ip]
 8008afc:	4443      	add	r3, r8
 8008afe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008b02:	fb0b 840a 	mla	r4, fp, sl, r8
 8008b06:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008b0a:	46e2      	mov	sl, ip
 8008b0c:	b29b      	uxth	r3, r3
 8008b0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008b12:	454f      	cmp	r7, r9
 8008b14:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008b18:	f84a 3b04 	str.w	r3, [sl], #4
 8008b1c:	d82b      	bhi.n	8008b76 <__multiply+0x120>
 8008b1e:	f8cc 8004 	str.w	r8, [ip, #4]
 8008b22:	9b01      	ldr	r3, [sp, #4]
 8008b24:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008b28:	3204      	adds	r2, #4
 8008b2a:	f1ba 0f00 	cmp.w	sl, #0
 8008b2e:	d020      	beq.n	8008b72 <__multiply+0x11c>
 8008b30:	682b      	ldr	r3, [r5, #0]
 8008b32:	4689      	mov	r9, r1
 8008b34:	46a8      	mov	r8, r5
 8008b36:	f04f 0b00 	mov.w	fp, #0
 8008b3a:	f8b9 c000 	ldrh.w	ip, [r9]
 8008b3e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008b42:	fb0a 440c 	mla	r4, sl, ip, r4
 8008b46:	445c      	add	r4, fp
 8008b48:	46c4      	mov	ip, r8
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008b50:	f84c 3b04 	str.w	r3, [ip], #4
 8008b54:	f859 3b04 	ldr.w	r3, [r9], #4
 8008b58:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008b5c:	0c1b      	lsrs	r3, r3, #16
 8008b5e:	fb0a b303 	mla	r3, sl, r3, fp
 8008b62:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008b66:	454f      	cmp	r7, r9
 8008b68:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008b6c:	d805      	bhi.n	8008b7a <__multiply+0x124>
 8008b6e:	f8c8 3004 	str.w	r3, [r8, #4]
 8008b72:	3504      	adds	r5, #4
 8008b74:	e79b      	b.n	8008aae <__multiply+0x58>
 8008b76:	46d4      	mov	ip, sl
 8008b78:	e7b3      	b.n	8008ae2 <__multiply+0x8c>
 8008b7a:	46e0      	mov	r8, ip
 8008b7c:	e7dd      	b.n	8008b3a <__multiply+0xe4>
 8008b7e:	3e01      	subs	r6, #1
 8008b80:	e799      	b.n	8008ab6 <__multiply+0x60>
	...

08008b84 <__pow5mult>:
 8008b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b88:	4615      	mov	r5, r2
 8008b8a:	f012 0203 	ands.w	r2, r2, #3
 8008b8e:	4606      	mov	r6, r0
 8008b90:	460f      	mov	r7, r1
 8008b92:	d007      	beq.n	8008ba4 <__pow5mult+0x20>
 8008b94:	3a01      	subs	r2, #1
 8008b96:	4c21      	ldr	r4, [pc, #132]	; (8008c1c <__pow5mult+0x98>)
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b9e:	f7ff fe8a 	bl	80088b6 <__multadd>
 8008ba2:	4607      	mov	r7, r0
 8008ba4:	10ad      	asrs	r5, r5, #2
 8008ba6:	d035      	beq.n	8008c14 <__pow5mult+0x90>
 8008ba8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008baa:	b93c      	cbnz	r4, 8008bbc <__pow5mult+0x38>
 8008bac:	2010      	movs	r0, #16
 8008bae:	f7ff fe1d 	bl	80087ec <malloc>
 8008bb2:	6270      	str	r0, [r6, #36]	; 0x24
 8008bb4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bb8:	6004      	str	r4, [r0, #0]
 8008bba:	60c4      	str	r4, [r0, #12]
 8008bbc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008bc0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bc4:	b94c      	cbnz	r4, 8008bda <__pow5mult+0x56>
 8008bc6:	f240 2171 	movw	r1, #625	; 0x271
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f7ff ff3a 	bl	8008a44 <__i2b>
 8008bd0:	2300      	movs	r3, #0
 8008bd2:	f8c8 0008 	str.w	r0, [r8, #8]
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	6003      	str	r3, [r0, #0]
 8008bda:	f04f 0800 	mov.w	r8, #0
 8008bde:	07eb      	lsls	r3, r5, #31
 8008be0:	d50a      	bpl.n	8008bf8 <__pow5mult+0x74>
 8008be2:	4639      	mov	r1, r7
 8008be4:	4622      	mov	r2, r4
 8008be6:	4630      	mov	r0, r6
 8008be8:	f7ff ff35 	bl	8008a56 <__multiply>
 8008bec:	4639      	mov	r1, r7
 8008bee:	4681      	mov	r9, r0
 8008bf0:	4630      	mov	r0, r6
 8008bf2:	f7ff fe49 	bl	8008888 <_Bfree>
 8008bf6:	464f      	mov	r7, r9
 8008bf8:	106d      	asrs	r5, r5, #1
 8008bfa:	d00b      	beq.n	8008c14 <__pow5mult+0x90>
 8008bfc:	6820      	ldr	r0, [r4, #0]
 8008bfe:	b938      	cbnz	r0, 8008c10 <__pow5mult+0x8c>
 8008c00:	4622      	mov	r2, r4
 8008c02:	4621      	mov	r1, r4
 8008c04:	4630      	mov	r0, r6
 8008c06:	f7ff ff26 	bl	8008a56 <__multiply>
 8008c0a:	6020      	str	r0, [r4, #0]
 8008c0c:	f8c0 8000 	str.w	r8, [r0]
 8008c10:	4604      	mov	r4, r0
 8008c12:	e7e4      	b.n	8008bde <__pow5mult+0x5a>
 8008c14:	4638      	mov	r0, r7
 8008c16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c1a:	bf00      	nop
 8008c1c:	080099d0 	.word	0x080099d0

08008c20 <__lshift>:
 8008c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c24:	460c      	mov	r4, r1
 8008c26:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c2a:	6923      	ldr	r3, [r4, #16]
 8008c2c:	6849      	ldr	r1, [r1, #4]
 8008c2e:	eb0a 0903 	add.w	r9, sl, r3
 8008c32:	68a3      	ldr	r3, [r4, #8]
 8008c34:	4607      	mov	r7, r0
 8008c36:	4616      	mov	r6, r2
 8008c38:	f109 0501 	add.w	r5, r9, #1
 8008c3c:	42ab      	cmp	r3, r5
 8008c3e:	db32      	blt.n	8008ca6 <__lshift+0x86>
 8008c40:	4638      	mov	r0, r7
 8008c42:	f7ff fded 	bl	8008820 <_Balloc>
 8008c46:	2300      	movs	r3, #0
 8008c48:	4680      	mov	r8, r0
 8008c4a:	f100 0114 	add.w	r1, r0, #20
 8008c4e:	461a      	mov	r2, r3
 8008c50:	4553      	cmp	r3, sl
 8008c52:	db2b      	blt.n	8008cac <__lshift+0x8c>
 8008c54:	6920      	ldr	r0, [r4, #16]
 8008c56:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c5a:	f104 0314 	add.w	r3, r4, #20
 8008c5e:	f016 021f 	ands.w	r2, r6, #31
 8008c62:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c66:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c6a:	d025      	beq.n	8008cb8 <__lshift+0x98>
 8008c6c:	f1c2 0e20 	rsb	lr, r2, #32
 8008c70:	2000      	movs	r0, #0
 8008c72:	681e      	ldr	r6, [r3, #0]
 8008c74:	468a      	mov	sl, r1
 8008c76:	4096      	lsls	r6, r2
 8008c78:	4330      	orrs	r0, r6
 8008c7a:	f84a 0b04 	str.w	r0, [sl], #4
 8008c7e:	f853 0b04 	ldr.w	r0, [r3], #4
 8008c82:	459c      	cmp	ip, r3
 8008c84:	fa20 f00e 	lsr.w	r0, r0, lr
 8008c88:	d814      	bhi.n	8008cb4 <__lshift+0x94>
 8008c8a:	6048      	str	r0, [r1, #4]
 8008c8c:	b108      	cbz	r0, 8008c92 <__lshift+0x72>
 8008c8e:	f109 0502 	add.w	r5, r9, #2
 8008c92:	3d01      	subs	r5, #1
 8008c94:	4638      	mov	r0, r7
 8008c96:	f8c8 5010 	str.w	r5, [r8, #16]
 8008c9a:	4621      	mov	r1, r4
 8008c9c:	f7ff fdf4 	bl	8008888 <_Bfree>
 8008ca0:	4640      	mov	r0, r8
 8008ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca6:	3101      	adds	r1, #1
 8008ca8:	005b      	lsls	r3, r3, #1
 8008caa:	e7c7      	b.n	8008c3c <__lshift+0x1c>
 8008cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	e7cd      	b.n	8008c50 <__lshift+0x30>
 8008cb4:	4651      	mov	r1, sl
 8008cb6:	e7dc      	b.n	8008c72 <__lshift+0x52>
 8008cb8:	3904      	subs	r1, #4
 8008cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cbe:	f841 2f04 	str.w	r2, [r1, #4]!
 8008cc2:	459c      	cmp	ip, r3
 8008cc4:	d8f9      	bhi.n	8008cba <__lshift+0x9a>
 8008cc6:	e7e4      	b.n	8008c92 <__lshift+0x72>

08008cc8 <__mcmp>:
 8008cc8:	6903      	ldr	r3, [r0, #16]
 8008cca:	690a      	ldr	r2, [r1, #16]
 8008ccc:	1a9b      	subs	r3, r3, r2
 8008cce:	b530      	push	{r4, r5, lr}
 8008cd0:	d10c      	bne.n	8008cec <__mcmp+0x24>
 8008cd2:	0092      	lsls	r2, r2, #2
 8008cd4:	3014      	adds	r0, #20
 8008cd6:	3114      	adds	r1, #20
 8008cd8:	1884      	adds	r4, r0, r2
 8008cda:	4411      	add	r1, r2
 8008cdc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008ce0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008ce4:	4295      	cmp	r5, r2
 8008ce6:	d003      	beq.n	8008cf0 <__mcmp+0x28>
 8008ce8:	d305      	bcc.n	8008cf6 <__mcmp+0x2e>
 8008cea:	2301      	movs	r3, #1
 8008cec:	4618      	mov	r0, r3
 8008cee:	bd30      	pop	{r4, r5, pc}
 8008cf0:	42a0      	cmp	r0, r4
 8008cf2:	d3f3      	bcc.n	8008cdc <__mcmp+0x14>
 8008cf4:	e7fa      	b.n	8008cec <__mcmp+0x24>
 8008cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cfa:	e7f7      	b.n	8008cec <__mcmp+0x24>

08008cfc <__mdiff>:
 8008cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d00:	460d      	mov	r5, r1
 8008d02:	4607      	mov	r7, r0
 8008d04:	4611      	mov	r1, r2
 8008d06:	4628      	mov	r0, r5
 8008d08:	4614      	mov	r4, r2
 8008d0a:	f7ff ffdd 	bl	8008cc8 <__mcmp>
 8008d0e:	1e06      	subs	r6, r0, #0
 8008d10:	d108      	bne.n	8008d24 <__mdiff+0x28>
 8008d12:	4631      	mov	r1, r6
 8008d14:	4638      	mov	r0, r7
 8008d16:	f7ff fd83 	bl	8008820 <_Balloc>
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d24:	bfa4      	itt	ge
 8008d26:	4623      	movge	r3, r4
 8008d28:	462c      	movge	r4, r5
 8008d2a:	4638      	mov	r0, r7
 8008d2c:	6861      	ldr	r1, [r4, #4]
 8008d2e:	bfa6      	itte	ge
 8008d30:	461d      	movge	r5, r3
 8008d32:	2600      	movge	r6, #0
 8008d34:	2601      	movlt	r6, #1
 8008d36:	f7ff fd73 	bl	8008820 <_Balloc>
 8008d3a:	692b      	ldr	r3, [r5, #16]
 8008d3c:	60c6      	str	r6, [r0, #12]
 8008d3e:	6926      	ldr	r6, [r4, #16]
 8008d40:	f105 0914 	add.w	r9, r5, #20
 8008d44:	f104 0214 	add.w	r2, r4, #20
 8008d48:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008d4c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008d50:	f100 0514 	add.w	r5, r0, #20
 8008d54:	f04f 0e00 	mov.w	lr, #0
 8008d58:	f852 ab04 	ldr.w	sl, [r2], #4
 8008d5c:	f859 4b04 	ldr.w	r4, [r9], #4
 8008d60:	fa1e f18a 	uxtah	r1, lr, sl
 8008d64:	b2a3      	uxth	r3, r4
 8008d66:	1ac9      	subs	r1, r1, r3
 8008d68:	0c23      	lsrs	r3, r4, #16
 8008d6a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008d6e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008d72:	b289      	uxth	r1, r1
 8008d74:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008d78:	45c8      	cmp	r8, r9
 8008d7a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008d7e:	4694      	mov	ip, r2
 8008d80:	f845 3b04 	str.w	r3, [r5], #4
 8008d84:	d8e8      	bhi.n	8008d58 <__mdiff+0x5c>
 8008d86:	45bc      	cmp	ip, r7
 8008d88:	d304      	bcc.n	8008d94 <__mdiff+0x98>
 8008d8a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008d8e:	b183      	cbz	r3, 8008db2 <__mdiff+0xb6>
 8008d90:	6106      	str	r6, [r0, #16]
 8008d92:	e7c5      	b.n	8008d20 <__mdiff+0x24>
 8008d94:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008d98:	fa1e f381 	uxtah	r3, lr, r1
 8008d9c:	141a      	asrs	r2, r3, #16
 8008d9e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008da2:	b29b      	uxth	r3, r3
 8008da4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008da8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008dac:	f845 3b04 	str.w	r3, [r5], #4
 8008db0:	e7e9      	b.n	8008d86 <__mdiff+0x8a>
 8008db2:	3e01      	subs	r6, #1
 8008db4:	e7e9      	b.n	8008d8a <__mdiff+0x8e>
	...

08008db8 <__ulp>:
 8008db8:	4b12      	ldr	r3, [pc, #72]	; (8008e04 <__ulp+0x4c>)
 8008dba:	ee10 2a90 	vmov	r2, s1
 8008dbe:	401a      	ands	r2, r3
 8008dc0:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	dd04      	ble.n	8008dd2 <__ulp+0x1a>
 8008dc8:	2000      	movs	r0, #0
 8008dca:	4619      	mov	r1, r3
 8008dcc:	ec41 0b10 	vmov	d0, r0, r1
 8008dd0:	4770      	bx	lr
 8008dd2:	425b      	negs	r3, r3
 8008dd4:	151b      	asrs	r3, r3, #20
 8008dd6:	2b13      	cmp	r3, #19
 8008dd8:	f04f 0000 	mov.w	r0, #0
 8008ddc:	f04f 0100 	mov.w	r1, #0
 8008de0:	dc04      	bgt.n	8008dec <__ulp+0x34>
 8008de2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008de6:	fa42 f103 	asr.w	r1, r2, r3
 8008dea:	e7ef      	b.n	8008dcc <__ulp+0x14>
 8008dec:	3b14      	subs	r3, #20
 8008dee:	2b1e      	cmp	r3, #30
 8008df0:	f04f 0201 	mov.w	r2, #1
 8008df4:	bfda      	itte	le
 8008df6:	f1c3 031f 	rsble	r3, r3, #31
 8008dfa:	fa02 f303 	lslle.w	r3, r2, r3
 8008dfe:	4613      	movgt	r3, r2
 8008e00:	4618      	mov	r0, r3
 8008e02:	e7e3      	b.n	8008dcc <__ulp+0x14>
 8008e04:	7ff00000 	.word	0x7ff00000

08008e08 <__b2d>:
 8008e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e0a:	6905      	ldr	r5, [r0, #16]
 8008e0c:	f100 0714 	add.w	r7, r0, #20
 8008e10:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008e14:	1f2e      	subs	r6, r5, #4
 8008e16:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f7ff fdc4 	bl	80089a8 <__hi0bits>
 8008e20:	f1c0 0320 	rsb	r3, r0, #32
 8008e24:	280a      	cmp	r0, #10
 8008e26:	600b      	str	r3, [r1, #0]
 8008e28:	f8df c074 	ldr.w	ip, [pc, #116]	; 8008ea0 <__b2d+0x98>
 8008e2c:	dc14      	bgt.n	8008e58 <__b2d+0x50>
 8008e2e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008e32:	fa24 f10e 	lsr.w	r1, r4, lr
 8008e36:	42b7      	cmp	r7, r6
 8008e38:	ea41 030c 	orr.w	r3, r1, ip
 8008e3c:	bf34      	ite	cc
 8008e3e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008e42:	2100      	movcs	r1, #0
 8008e44:	3015      	adds	r0, #21
 8008e46:	fa04 f000 	lsl.w	r0, r4, r0
 8008e4a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008e4e:	ea40 0201 	orr.w	r2, r0, r1
 8008e52:	ec43 2b10 	vmov	d0, r2, r3
 8008e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e58:	42b7      	cmp	r7, r6
 8008e5a:	bf3a      	itte	cc
 8008e5c:	f1a5 0608 	subcc.w	r6, r5, #8
 8008e60:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008e64:	2100      	movcs	r1, #0
 8008e66:	380b      	subs	r0, #11
 8008e68:	d015      	beq.n	8008e96 <__b2d+0x8e>
 8008e6a:	4084      	lsls	r4, r0
 8008e6c:	f1c0 0520 	rsb	r5, r0, #32
 8008e70:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8008e74:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8008e78:	42be      	cmp	r6, r7
 8008e7a:	fa21 fc05 	lsr.w	ip, r1, r5
 8008e7e:	ea44 030c 	orr.w	r3, r4, ip
 8008e82:	bf8c      	ite	hi
 8008e84:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008e88:	2400      	movls	r4, #0
 8008e8a:	fa01 f000 	lsl.w	r0, r1, r0
 8008e8e:	40ec      	lsrs	r4, r5
 8008e90:	ea40 0204 	orr.w	r2, r0, r4
 8008e94:	e7dd      	b.n	8008e52 <__b2d+0x4a>
 8008e96:	ea44 030c 	orr.w	r3, r4, ip
 8008e9a:	460a      	mov	r2, r1
 8008e9c:	e7d9      	b.n	8008e52 <__b2d+0x4a>
 8008e9e:	bf00      	nop
 8008ea0:	3ff00000 	.word	0x3ff00000

08008ea4 <__d2b>:
 8008ea4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008ea8:	460e      	mov	r6, r1
 8008eaa:	2101      	movs	r1, #1
 8008eac:	ec59 8b10 	vmov	r8, r9, d0
 8008eb0:	4615      	mov	r5, r2
 8008eb2:	f7ff fcb5 	bl	8008820 <_Balloc>
 8008eb6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008eba:	4607      	mov	r7, r0
 8008ebc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ec0:	bb34      	cbnz	r4, 8008f10 <__d2b+0x6c>
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	f1b8 0300 	subs.w	r3, r8, #0
 8008ec8:	d027      	beq.n	8008f1a <__d2b+0x76>
 8008eca:	a802      	add	r0, sp, #8
 8008ecc:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008ed0:	f7ff fd89 	bl	80089e6 <__lo0bits>
 8008ed4:	9900      	ldr	r1, [sp, #0]
 8008ed6:	b1f0      	cbz	r0, 8008f16 <__d2b+0x72>
 8008ed8:	9a01      	ldr	r2, [sp, #4]
 8008eda:	f1c0 0320 	rsb	r3, r0, #32
 8008ede:	fa02 f303 	lsl.w	r3, r2, r3
 8008ee2:	430b      	orrs	r3, r1
 8008ee4:	40c2      	lsrs	r2, r0
 8008ee6:	617b      	str	r3, [r7, #20]
 8008ee8:	9201      	str	r2, [sp, #4]
 8008eea:	9b01      	ldr	r3, [sp, #4]
 8008eec:	61bb      	str	r3, [r7, #24]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	bf14      	ite	ne
 8008ef2:	2102      	movne	r1, #2
 8008ef4:	2101      	moveq	r1, #1
 8008ef6:	6139      	str	r1, [r7, #16]
 8008ef8:	b1c4      	cbz	r4, 8008f2c <__d2b+0x88>
 8008efa:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008efe:	4404      	add	r4, r0
 8008f00:	6034      	str	r4, [r6, #0]
 8008f02:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008f06:	6028      	str	r0, [r5, #0]
 8008f08:	4638      	mov	r0, r7
 8008f0a:	b003      	add	sp, #12
 8008f0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008f10:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f14:	e7d5      	b.n	8008ec2 <__d2b+0x1e>
 8008f16:	6179      	str	r1, [r7, #20]
 8008f18:	e7e7      	b.n	8008eea <__d2b+0x46>
 8008f1a:	a801      	add	r0, sp, #4
 8008f1c:	f7ff fd63 	bl	80089e6 <__lo0bits>
 8008f20:	9b01      	ldr	r3, [sp, #4]
 8008f22:	617b      	str	r3, [r7, #20]
 8008f24:	2101      	movs	r1, #1
 8008f26:	6139      	str	r1, [r7, #16]
 8008f28:	3020      	adds	r0, #32
 8008f2a:	e7e5      	b.n	8008ef8 <__d2b+0x54>
 8008f2c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008f30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008f34:	6030      	str	r0, [r6, #0]
 8008f36:	6918      	ldr	r0, [r3, #16]
 8008f38:	f7ff fd36 	bl	80089a8 <__hi0bits>
 8008f3c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008f40:	e7e1      	b.n	8008f06 <__d2b+0x62>

08008f42 <__ratio>:
 8008f42:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f46:	4688      	mov	r8, r1
 8008f48:	4669      	mov	r1, sp
 8008f4a:	4681      	mov	r9, r0
 8008f4c:	f7ff ff5c 	bl	8008e08 <__b2d>
 8008f50:	a901      	add	r1, sp, #4
 8008f52:	4640      	mov	r0, r8
 8008f54:	ec57 6b10 	vmov	r6, r7, d0
 8008f58:	f7ff ff56 	bl	8008e08 <__b2d>
 8008f5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008f60:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008f64:	eba3 0c02 	sub.w	ip, r3, r2
 8008f68:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008f6c:	1a9b      	subs	r3, r3, r2
 8008f6e:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008f72:	ec5b ab10 	vmov	sl, fp, d0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	bfce      	itee	gt
 8008f7a:	463a      	movgt	r2, r7
 8008f7c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008f80:	465a      	movle	r2, fp
 8008f82:	4659      	mov	r1, fp
 8008f84:	463d      	mov	r5, r7
 8008f86:	bfd4      	ite	le
 8008f88:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8008f8c:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8008f90:	4630      	mov	r0, r6
 8008f92:	ee10 2a10 	vmov	r2, s0
 8008f96:	460b      	mov	r3, r1
 8008f98:	4629      	mov	r1, r5
 8008f9a:	f7f7 fccf 	bl	800093c <__aeabi_ddiv>
 8008f9e:	ec41 0b10 	vmov	d0, r0, r1
 8008fa2:	b003      	add	sp, #12
 8008fa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fa8 <__copybits>:
 8008fa8:	3901      	subs	r1, #1
 8008faa:	b510      	push	{r4, lr}
 8008fac:	1149      	asrs	r1, r1, #5
 8008fae:	6914      	ldr	r4, [r2, #16]
 8008fb0:	3101      	adds	r1, #1
 8008fb2:	f102 0314 	add.w	r3, r2, #20
 8008fb6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008fba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008fbe:	42a3      	cmp	r3, r4
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	d303      	bcc.n	8008fcc <__copybits+0x24>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	428a      	cmp	r2, r1
 8008fc8:	d305      	bcc.n	8008fd6 <__copybits+0x2e>
 8008fca:	bd10      	pop	{r4, pc}
 8008fcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fd0:	f840 2b04 	str.w	r2, [r0], #4
 8008fd4:	e7f3      	b.n	8008fbe <__copybits+0x16>
 8008fd6:	f842 3b04 	str.w	r3, [r2], #4
 8008fda:	e7f4      	b.n	8008fc6 <__copybits+0x1e>

08008fdc <__any_on>:
 8008fdc:	f100 0214 	add.w	r2, r0, #20
 8008fe0:	6900      	ldr	r0, [r0, #16]
 8008fe2:	114b      	asrs	r3, r1, #5
 8008fe4:	4298      	cmp	r0, r3
 8008fe6:	b510      	push	{r4, lr}
 8008fe8:	db11      	blt.n	800900e <__any_on+0x32>
 8008fea:	dd0a      	ble.n	8009002 <__any_on+0x26>
 8008fec:	f011 011f 	ands.w	r1, r1, #31
 8008ff0:	d007      	beq.n	8009002 <__any_on+0x26>
 8008ff2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ff6:	fa24 f001 	lsr.w	r0, r4, r1
 8008ffa:	fa00 f101 	lsl.w	r1, r0, r1
 8008ffe:	428c      	cmp	r4, r1
 8009000:	d10b      	bne.n	800901a <__any_on+0x3e>
 8009002:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009006:	4293      	cmp	r3, r2
 8009008:	d803      	bhi.n	8009012 <__any_on+0x36>
 800900a:	2000      	movs	r0, #0
 800900c:	bd10      	pop	{r4, pc}
 800900e:	4603      	mov	r3, r0
 8009010:	e7f7      	b.n	8009002 <__any_on+0x26>
 8009012:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009016:	2900      	cmp	r1, #0
 8009018:	d0f5      	beq.n	8009006 <__any_on+0x2a>
 800901a:	2001      	movs	r0, #1
 800901c:	e7f6      	b.n	800900c <__any_on+0x30>

0800901e <_calloc_r>:
 800901e:	b538      	push	{r3, r4, r5, lr}
 8009020:	fb02 f401 	mul.w	r4, r2, r1
 8009024:	4621      	mov	r1, r4
 8009026:	f000 f857 	bl	80090d8 <_malloc_r>
 800902a:	4605      	mov	r5, r0
 800902c:	b118      	cbz	r0, 8009036 <_calloc_r+0x18>
 800902e:	4622      	mov	r2, r4
 8009030:	2100      	movs	r1, #0
 8009032:	f7fc fd3e 	bl	8005ab2 <memset>
 8009036:	4628      	mov	r0, r5
 8009038:	bd38      	pop	{r3, r4, r5, pc}
	...

0800903c <_free_r>:
 800903c:	b538      	push	{r3, r4, r5, lr}
 800903e:	4605      	mov	r5, r0
 8009040:	2900      	cmp	r1, #0
 8009042:	d045      	beq.n	80090d0 <_free_r+0x94>
 8009044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009048:	1f0c      	subs	r4, r1, #4
 800904a:	2b00      	cmp	r3, #0
 800904c:	bfb8      	it	lt
 800904e:	18e4      	addlt	r4, r4, r3
 8009050:	f000 fa36 	bl	80094c0 <__malloc_lock>
 8009054:	4a1f      	ldr	r2, [pc, #124]	; (80090d4 <_free_r+0x98>)
 8009056:	6813      	ldr	r3, [r2, #0]
 8009058:	4610      	mov	r0, r2
 800905a:	b933      	cbnz	r3, 800906a <_free_r+0x2e>
 800905c:	6063      	str	r3, [r4, #4]
 800905e:	6014      	str	r4, [r2, #0]
 8009060:	4628      	mov	r0, r5
 8009062:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009066:	f000 ba2c 	b.w	80094c2 <__malloc_unlock>
 800906a:	42a3      	cmp	r3, r4
 800906c:	d90c      	bls.n	8009088 <_free_r+0x4c>
 800906e:	6821      	ldr	r1, [r4, #0]
 8009070:	1862      	adds	r2, r4, r1
 8009072:	4293      	cmp	r3, r2
 8009074:	bf04      	itt	eq
 8009076:	681a      	ldreq	r2, [r3, #0]
 8009078:	685b      	ldreq	r3, [r3, #4]
 800907a:	6063      	str	r3, [r4, #4]
 800907c:	bf04      	itt	eq
 800907e:	1852      	addeq	r2, r2, r1
 8009080:	6022      	streq	r2, [r4, #0]
 8009082:	6004      	str	r4, [r0, #0]
 8009084:	e7ec      	b.n	8009060 <_free_r+0x24>
 8009086:	4613      	mov	r3, r2
 8009088:	685a      	ldr	r2, [r3, #4]
 800908a:	b10a      	cbz	r2, 8009090 <_free_r+0x54>
 800908c:	42a2      	cmp	r2, r4
 800908e:	d9fa      	bls.n	8009086 <_free_r+0x4a>
 8009090:	6819      	ldr	r1, [r3, #0]
 8009092:	1858      	adds	r0, r3, r1
 8009094:	42a0      	cmp	r0, r4
 8009096:	d10b      	bne.n	80090b0 <_free_r+0x74>
 8009098:	6820      	ldr	r0, [r4, #0]
 800909a:	4401      	add	r1, r0
 800909c:	1858      	adds	r0, r3, r1
 800909e:	4282      	cmp	r2, r0
 80090a0:	6019      	str	r1, [r3, #0]
 80090a2:	d1dd      	bne.n	8009060 <_free_r+0x24>
 80090a4:	6810      	ldr	r0, [r2, #0]
 80090a6:	6852      	ldr	r2, [r2, #4]
 80090a8:	605a      	str	r2, [r3, #4]
 80090aa:	4401      	add	r1, r0
 80090ac:	6019      	str	r1, [r3, #0]
 80090ae:	e7d7      	b.n	8009060 <_free_r+0x24>
 80090b0:	d902      	bls.n	80090b8 <_free_r+0x7c>
 80090b2:	230c      	movs	r3, #12
 80090b4:	602b      	str	r3, [r5, #0]
 80090b6:	e7d3      	b.n	8009060 <_free_r+0x24>
 80090b8:	6820      	ldr	r0, [r4, #0]
 80090ba:	1821      	adds	r1, r4, r0
 80090bc:	428a      	cmp	r2, r1
 80090be:	bf04      	itt	eq
 80090c0:	6811      	ldreq	r1, [r2, #0]
 80090c2:	6852      	ldreq	r2, [r2, #4]
 80090c4:	6062      	str	r2, [r4, #4]
 80090c6:	bf04      	itt	eq
 80090c8:	1809      	addeq	r1, r1, r0
 80090ca:	6021      	streq	r1, [r4, #0]
 80090cc:	605c      	str	r4, [r3, #4]
 80090ce:	e7c7      	b.n	8009060 <_free_r+0x24>
 80090d0:	bd38      	pop	{r3, r4, r5, pc}
 80090d2:	bf00      	nop
 80090d4:	20000200 	.word	0x20000200

080090d8 <_malloc_r>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	1ccd      	adds	r5, r1, #3
 80090dc:	f025 0503 	bic.w	r5, r5, #3
 80090e0:	3508      	adds	r5, #8
 80090e2:	2d0c      	cmp	r5, #12
 80090e4:	bf38      	it	cc
 80090e6:	250c      	movcc	r5, #12
 80090e8:	2d00      	cmp	r5, #0
 80090ea:	4606      	mov	r6, r0
 80090ec:	db01      	blt.n	80090f2 <_malloc_r+0x1a>
 80090ee:	42a9      	cmp	r1, r5
 80090f0:	d903      	bls.n	80090fa <_malloc_r+0x22>
 80090f2:	230c      	movs	r3, #12
 80090f4:	6033      	str	r3, [r6, #0]
 80090f6:	2000      	movs	r0, #0
 80090f8:	bd70      	pop	{r4, r5, r6, pc}
 80090fa:	f000 f9e1 	bl	80094c0 <__malloc_lock>
 80090fe:	4a21      	ldr	r2, [pc, #132]	; (8009184 <_malloc_r+0xac>)
 8009100:	6814      	ldr	r4, [r2, #0]
 8009102:	4621      	mov	r1, r4
 8009104:	b991      	cbnz	r1, 800912c <_malloc_r+0x54>
 8009106:	4c20      	ldr	r4, [pc, #128]	; (8009188 <_malloc_r+0xb0>)
 8009108:	6823      	ldr	r3, [r4, #0]
 800910a:	b91b      	cbnz	r3, 8009114 <_malloc_r+0x3c>
 800910c:	4630      	mov	r0, r6
 800910e:	f000 f98f 	bl	8009430 <_sbrk_r>
 8009112:	6020      	str	r0, [r4, #0]
 8009114:	4629      	mov	r1, r5
 8009116:	4630      	mov	r0, r6
 8009118:	f000 f98a 	bl	8009430 <_sbrk_r>
 800911c:	1c43      	adds	r3, r0, #1
 800911e:	d124      	bne.n	800916a <_malloc_r+0x92>
 8009120:	230c      	movs	r3, #12
 8009122:	6033      	str	r3, [r6, #0]
 8009124:	4630      	mov	r0, r6
 8009126:	f000 f9cc 	bl	80094c2 <__malloc_unlock>
 800912a:	e7e4      	b.n	80090f6 <_malloc_r+0x1e>
 800912c:	680b      	ldr	r3, [r1, #0]
 800912e:	1b5b      	subs	r3, r3, r5
 8009130:	d418      	bmi.n	8009164 <_malloc_r+0x8c>
 8009132:	2b0b      	cmp	r3, #11
 8009134:	d90f      	bls.n	8009156 <_malloc_r+0x7e>
 8009136:	600b      	str	r3, [r1, #0]
 8009138:	50cd      	str	r5, [r1, r3]
 800913a:	18cc      	adds	r4, r1, r3
 800913c:	4630      	mov	r0, r6
 800913e:	f000 f9c0 	bl	80094c2 <__malloc_unlock>
 8009142:	f104 000b 	add.w	r0, r4, #11
 8009146:	1d23      	adds	r3, r4, #4
 8009148:	f020 0007 	bic.w	r0, r0, #7
 800914c:	1ac3      	subs	r3, r0, r3
 800914e:	d0d3      	beq.n	80090f8 <_malloc_r+0x20>
 8009150:	425a      	negs	r2, r3
 8009152:	50e2      	str	r2, [r4, r3]
 8009154:	e7d0      	b.n	80090f8 <_malloc_r+0x20>
 8009156:	428c      	cmp	r4, r1
 8009158:	684b      	ldr	r3, [r1, #4]
 800915a:	bf16      	itet	ne
 800915c:	6063      	strne	r3, [r4, #4]
 800915e:	6013      	streq	r3, [r2, #0]
 8009160:	460c      	movne	r4, r1
 8009162:	e7eb      	b.n	800913c <_malloc_r+0x64>
 8009164:	460c      	mov	r4, r1
 8009166:	6849      	ldr	r1, [r1, #4]
 8009168:	e7cc      	b.n	8009104 <_malloc_r+0x2c>
 800916a:	1cc4      	adds	r4, r0, #3
 800916c:	f024 0403 	bic.w	r4, r4, #3
 8009170:	42a0      	cmp	r0, r4
 8009172:	d005      	beq.n	8009180 <_malloc_r+0xa8>
 8009174:	1a21      	subs	r1, r4, r0
 8009176:	4630      	mov	r0, r6
 8009178:	f000 f95a 	bl	8009430 <_sbrk_r>
 800917c:	3001      	adds	r0, #1
 800917e:	d0cf      	beq.n	8009120 <_malloc_r+0x48>
 8009180:	6025      	str	r5, [r4, #0]
 8009182:	e7db      	b.n	800913c <_malloc_r+0x64>
 8009184:	20000200 	.word	0x20000200
 8009188:	20000204 	.word	0x20000204

0800918c <__ssputs_r>:
 800918c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009190:	688e      	ldr	r6, [r1, #8]
 8009192:	429e      	cmp	r6, r3
 8009194:	4682      	mov	sl, r0
 8009196:	460c      	mov	r4, r1
 8009198:	4690      	mov	r8, r2
 800919a:	4699      	mov	r9, r3
 800919c:	d837      	bhi.n	800920e <__ssputs_r+0x82>
 800919e:	898a      	ldrh	r2, [r1, #12]
 80091a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80091a4:	d031      	beq.n	800920a <__ssputs_r+0x7e>
 80091a6:	6825      	ldr	r5, [r4, #0]
 80091a8:	6909      	ldr	r1, [r1, #16]
 80091aa:	1a6f      	subs	r7, r5, r1
 80091ac:	6965      	ldr	r5, [r4, #20]
 80091ae:	2302      	movs	r3, #2
 80091b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80091b4:	fb95 f5f3 	sdiv	r5, r5, r3
 80091b8:	f109 0301 	add.w	r3, r9, #1
 80091bc:	443b      	add	r3, r7
 80091be:	429d      	cmp	r5, r3
 80091c0:	bf38      	it	cc
 80091c2:	461d      	movcc	r5, r3
 80091c4:	0553      	lsls	r3, r2, #21
 80091c6:	d530      	bpl.n	800922a <__ssputs_r+0x9e>
 80091c8:	4629      	mov	r1, r5
 80091ca:	f7ff ff85 	bl	80090d8 <_malloc_r>
 80091ce:	4606      	mov	r6, r0
 80091d0:	b950      	cbnz	r0, 80091e8 <__ssputs_r+0x5c>
 80091d2:	230c      	movs	r3, #12
 80091d4:	f8ca 3000 	str.w	r3, [sl]
 80091d8:	89a3      	ldrh	r3, [r4, #12]
 80091da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091de:	81a3      	strh	r3, [r4, #12]
 80091e0:	f04f 30ff 	mov.w	r0, #4294967295
 80091e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091e8:	463a      	mov	r2, r7
 80091ea:	6921      	ldr	r1, [r4, #16]
 80091ec:	f7fc fc56 	bl	8005a9c <memcpy>
 80091f0:	89a3      	ldrh	r3, [r4, #12]
 80091f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80091f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80091fa:	81a3      	strh	r3, [r4, #12]
 80091fc:	6126      	str	r6, [r4, #16]
 80091fe:	6165      	str	r5, [r4, #20]
 8009200:	443e      	add	r6, r7
 8009202:	1bed      	subs	r5, r5, r7
 8009204:	6026      	str	r6, [r4, #0]
 8009206:	60a5      	str	r5, [r4, #8]
 8009208:	464e      	mov	r6, r9
 800920a:	454e      	cmp	r6, r9
 800920c:	d900      	bls.n	8009210 <__ssputs_r+0x84>
 800920e:	464e      	mov	r6, r9
 8009210:	4632      	mov	r2, r6
 8009212:	4641      	mov	r1, r8
 8009214:	6820      	ldr	r0, [r4, #0]
 8009216:	f000 f93a 	bl	800948e <memmove>
 800921a:	68a3      	ldr	r3, [r4, #8]
 800921c:	1b9b      	subs	r3, r3, r6
 800921e:	60a3      	str	r3, [r4, #8]
 8009220:	6823      	ldr	r3, [r4, #0]
 8009222:	441e      	add	r6, r3
 8009224:	6026      	str	r6, [r4, #0]
 8009226:	2000      	movs	r0, #0
 8009228:	e7dc      	b.n	80091e4 <__ssputs_r+0x58>
 800922a:	462a      	mov	r2, r5
 800922c:	f000 f94a 	bl	80094c4 <_realloc_r>
 8009230:	4606      	mov	r6, r0
 8009232:	2800      	cmp	r0, #0
 8009234:	d1e2      	bne.n	80091fc <__ssputs_r+0x70>
 8009236:	6921      	ldr	r1, [r4, #16]
 8009238:	4650      	mov	r0, sl
 800923a:	f7ff feff 	bl	800903c <_free_r>
 800923e:	e7c8      	b.n	80091d2 <__ssputs_r+0x46>

08009240 <_svfiprintf_r>:
 8009240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009244:	461d      	mov	r5, r3
 8009246:	898b      	ldrh	r3, [r1, #12]
 8009248:	061f      	lsls	r7, r3, #24
 800924a:	b09d      	sub	sp, #116	; 0x74
 800924c:	4680      	mov	r8, r0
 800924e:	460c      	mov	r4, r1
 8009250:	4616      	mov	r6, r2
 8009252:	d50f      	bpl.n	8009274 <_svfiprintf_r+0x34>
 8009254:	690b      	ldr	r3, [r1, #16]
 8009256:	b96b      	cbnz	r3, 8009274 <_svfiprintf_r+0x34>
 8009258:	2140      	movs	r1, #64	; 0x40
 800925a:	f7ff ff3d 	bl	80090d8 <_malloc_r>
 800925e:	6020      	str	r0, [r4, #0]
 8009260:	6120      	str	r0, [r4, #16]
 8009262:	b928      	cbnz	r0, 8009270 <_svfiprintf_r+0x30>
 8009264:	230c      	movs	r3, #12
 8009266:	f8c8 3000 	str.w	r3, [r8]
 800926a:	f04f 30ff 	mov.w	r0, #4294967295
 800926e:	e0c8      	b.n	8009402 <_svfiprintf_r+0x1c2>
 8009270:	2340      	movs	r3, #64	; 0x40
 8009272:	6163      	str	r3, [r4, #20]
 8009274:	2300      	movs	r3, #0
 8009276:	9309      	str	r3, [sp, #36]	; 0x24
 8009278:	2320      	movs	r3, #32
 800927a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800927e:	2330      	movs	r3, #48	; 0x30
 8009280:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009284:	9503      	str	r5, [sp, #12]
 8009286:	f04f 0b01 	mov.w	fp, #1
 800928a:	4637      	mov	r7, r6
 800928c:	463d      	mov	r5, r7
 800928e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009292:	b10b      	cbz	r3, 8009298 <_svfiprintf_r+0x58>
 8009294:	2b25      	cmp	r3, #37	; 0x25
 8009296:	d13e      	bne.n	8009316 <_svfiprintf_r+0xd6>
 8009298:	ebb7 0a06 	subs.w	sl, r7, r6
 800929c:	d00b      	beq.n	80092b6 <_svfiprintf_r+0x76>
 800929e:	4653      	mov	r3, sl
 80092a0:	4632      	mov	r2, r6
 80092a2:	4621      	mov	r1, r4
 80092a4:	4640      	mov	r0, r8
 80092a6:	f7ff ff71 	bl	800918c <__ssputs_r>
 80092aa:	3001      	adds	r0, #1
 80092ac:	f000 80a4 	beq.w	80093f8 <_svfiprintf_r+0x1b8>
 80092b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b2:	4453      	add	r3, sl
 80092b4:	9309      	str	r3, [sp, #36]	; 0x24
 80092b6:	783b      	ldrb	r3, [r7, #0]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 809d 	beq.w	80093f8 <_svfiprintf_r+0x1b8>
 80092be:	2300      	movs	r3, #0
 80092c0:	f04f 32ff 	mov.w	r2, #4294967295
 80092c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80092c8:	9304      	str	r3, [sp, #16]
 80092ca:	9307      	str	r3, [sp, #28]
 80092cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092d0:	931a      	str	r3, [sp, #104]	; 0x68
 80092d2:	462f      	mov	r7, r5
 80092d4:	2205      	movs	r2, #5
 80092d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80092da:	4850      	ldr	r0, [pc, #320]	; (800941c <_svfiprintf_r+0x1dc>)
 80092dc:	f7f6 fff8 	bl	80002d0 <memchr>
 80092e0:	9b04      	ldr	r3, [sp, #16]
 80092e2:	b9d0      	cbnz	r0, 800931a <_svfiprintf_r+0xda>
 80092e4:	06d9      	lsls	r1, r3, #27
 80092e6:	bf44      	itt	mi
 80092e8:	2220      	movmi	r2, #32
 80092ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80092ee:	071a      	lsls	r2, r3, #28
 80092f0:	bf44      	itt	mi
 80092f2:	222b      	movmi	r2, #43	; 0x2b
 80092f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80092f8:	782a      	ldrb	r2, [r5, #0]
 80092fa:	2a2a      	cmp	r2, #42	; 0x2a
 80092fc:	d015      	beq.n	800932a <_svfiprintf_r+0xea>
 80092fe:	9a07      	ldr	r2, [sp, #28]
 8009300:	462f      	mov	r7, r5
 8009302:	2000      	movs	r0, #0
 8009304:	250a      	movs	r5, #10
 8009306:	4639      	mov	r1, r7
 8009308:	f811 3b01 	ldrb.w	r3, [r1], #1
 800930c:	3b30      	subs	r3, #48	; 0x30
 800930e:	2b09      	cmp	r3, #9
 8009310:	d94d      	bls.n	80093ae <_svfiprintf_r+0x16e>
 8009312:	b1b8      	cbz	r0, 8009344 <_svfiprintf_r+0x104>
 8009314:	e00f      	b.n	8009336 <_svfiprintf_r+0xf6>
 8009316:	462f      	mov	r7, r5
 8009318:	e7b8      	b.n	800928c <_svfiprintf_r+0x4c>
 800931a:	4a40      	ldr	r2, [pc, #256]	; (800941c <_svfiprintf_r+0x1dc>)
 800931c:	1a80      	subs	r0, r0, r2
 800931e:	fa0b f000 	lsl.w	r0, fp, r0
 8009322:	4318      	orrs	r0, r3
 8009324:	9004      	str	r0, [sp, #16]
 8009326:	463d      	mov	r5, r7
 8009328:	e7d3      	b.n	80092d2 <_svfiprintf_r+0x92>
 800932a:	9a03      	ldr	r2, [sp, #12]
 800932c:	1d11      	adds	r1, r2, #4
 800932e:	6812      	ldr	r2, [r2, #0]
 8009330:	9103      	str	r1, [sp, #12]
 8009332:	2a00      	cmp	r2, #0
 8009334:	db01      	blt.n	800933a <_svfiprintf_r+0xfa>
 8009336:	9207      	str	r2, [sp, #28]
 8009338:	e004      	b.n	8009344 <_svfiprintf_r+0x104>
 800933a:	4252      	negs	r2, r2
 800933c:	f043 0302 	orr.w	r3, r3, #2
 8009340:	9207      	str	r2, [sp, #28]
 8009342:	9304      	str	r3, [sp, #16]
 8009344:	783b      	ldrb	r3, [r7, #0]
 8009346:	2b2e      	cmp	r3, #46	; 0x2e
 8009348:	d10c      	bne.n	8009364 <_svfiprintf_r+0x124>
 800934a:	787b      	ldrb	r3, [r7, #1]
 800934c:	2b2a      	cmp	r3, #42	; 0x2a
 800934e:	d133      	bne.n	80093b8 <_svfiprintf_r+0x178>
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	1d1a      	adds	r2, r3, #4
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	9203      	str	r2, [sp, #12]
 8009358:	2b00      	cmp	r3, #0
 800935a:	bfb8      	it	lt
 800935c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009360:	3702      	adds	r7, #2
 8009362:	9305      	str	r3, [sp, #20]
 8009364:	4d2e      	ldr	r5, [pc, #184]	; (8009420 <_svfiprintf_r+0x1e0>)
 8009366:	7839      	ldrb	r1, [r7, #0]
 8009368:	2203      	movs	r2, #3
 800936a:	4628      	mov	r0, r5
 800936c:	f7f6 ffb0 	bl	80002d0 <memchr>
 8009370:	b138      	cbz	r0, 8009382 <_svfiprintf_r+0x142>
 8009372:	2340      	movs	r3, #64	; 0x40
 8009374:	1b40      	subs	r0, r0, r5
 8009376:	fa03 f000 	lsl.w	r0, r3, r0
 800937a:	9b04      	ldr	r3, [sp, #16]
 800937c:	4303      	orrs	r3, r0
 800937e:	3701      	adds	r7, #1
 8009380:	9304      	str	r3, [sp, #16]
 8009382:	7839      	ldrb	r1, [r7, #0]
 8009384:	4827      	ldr	r0, [pc, #156]	; (8009424 <_svfiprintf_r+0x1e4>)
 8009386:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800938a:	2206      	movs	r2, #6
 800938c:	1c7e      	adds	r6, r7, #1
 800938e:	f7f6 ff9f 	bl	80002d0 <memchr>
 8009392:	2800      	cmp	r0, #0
 8009394:	d038      	beq.n	8009408 <_svfiprintf_r+0x1c8>
 8009396:	4b24      	ldr	r3, [pc, #144]	; (8009428 <_svfiprintf_r+0x1e8>)
 8009398:	bb13      	cbnz	r3, 80093e0 <_svfiprintf_r+0x1a0>
 800939a:	9b03      	ldr	r3, [sp, #12]
 800939c:	3307      	adds	r3, #7
 800939e:	f023 0307 	bic.w	r3, r3, #7
 80093a2:	3308      	adds	r3, #8
 80093a4:	9303      	str	r3, [sp, #12]
 80093a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093a8:	444b      	add	r3, r9
 80093aa:	9309      	str	r3, [sp, #36]	; 0x24
 80093ac:	e76d      	b.n	800928a <_svfiprintf_r+0x4a>
 80093ae:	fb05 3202 	mla	r2, r5, r2, r3
 80093b2:	2001      	movs	r0, #1
 80093b4:	460f      	mov	r7, r1
 80093b6:	e7a6      	b.n	8009306 <_svfiprintf_r+0xc6>
 80093b8:	2300      	movs	r3, #0
 80093ba:	3701      	adds	r7, #1
 80093bc:	9305      	str	r3, [sp, #20]
 80093be:	4619      	mov	r1, r3
 80093c0:	250a      	movs	r5, #10
 80093c2:	4638      	mov	r0, r7
 80093c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80093c8:	3a30      	subs	r2, #48	; 0x30
 80093ca:	2a09      	cmp	r2, #9
 80093cc:	d903      	bls.n	80093d6 <_svfiprintf_r+0x196>
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d0c8      	beq.n	8009364 <_svfiprintf_r+0x124>
 80093d2:	9105      	str	r1, [sp, #20]
 80093d4:	e7c6      	b.n	8009364 <_svfiprintf_r+0x124>
 80093d6:	fb05 2101 	mla	r1, r5, r1, r2
 80093da:	2301      	movs	r3, #1
 80093dc:	4607      	mov	r7, r0
 80093de:	e7f0      	b.n	80093c2 <_svfiprintf_r+0x182>
 80093e0:	ab03      	add	r3, sp, #12
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	4622      	mov	r2, r4
 80093e6:	4b11      	ldr	r3, [pc, #68]	; (800942c <_svfiprintf_r+0x1ec>)
 80093e8:	a904      	add	r1, sp, #16
 80093ea:	4640      	mov	r0, r8
 80093ec:	f7fc fbfe 	bl	8005bec <_printf_float>
 80093f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80093f4:	4681      	mov	r9, r0
 80093f6:	d1d6      	bne.n	80093a6 <_svfiprintf_r+0x166>
 80093f8:	89a3      	ldrh	r3, [r4, #12]
 80093fa:	065b      	lsls	r3, r3, #25
 80093fc:	f53f af35 	bmi.w	800926a <_svfiprintf_r+0x2a>
 8009400:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009402:	b01d      	add	sp, #116	; 0x74
 8009404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009408:	ab03      	add	r3, sp, #12
 800940a:	9300      	str	r3, [sp, #0]
 800940c:	4622      	mov	r2, r4
 800940e:	4b07      	ldr	r3, [pc, #28]	; (800942c <_svfiprintf_r+0x1ec>)
 8009410:	a904      	add	r1, sp, #16
 8009412:	4640      	mov	r0, r8
 8009414:	f7fc fea0 	bl	8006158 <_printf_i>
 8009418:	e7ea      	b.n	80093f0 <_svfiprintf_r+0x1b0>
 800941a:	bf00      	nop
 800941c:	080099dc 	.word	0x080099dc
 8009420:	080099e2 	.word	0x080099e2
 8009424:	080099e6 	.word	0x080099e6
 8009428:	08005bed 	.word	0x08005bed
 800942c:	0800918d 	.word	0x0800918d

08009430 <_sbrk_r>:
 8009430:	b538      	push	{r3, r4, r5, lr}
 8009432:	4c06      	ldr	r4, [pc, #24]	; (800944c <_sbrk_r+0x1c>)
 8009434:	2300      	movs	r3, #0
 8009436:	4605      	mov	r5, r0
 8009438:	4608      	mov	r0, r1
 800943a:	6023      	str	r3, [r4, #0]
 800943c:	f7f8 fbf8 	bl	8001c30 <_sbrk>
 8009440:	1c43      	adds	r3, r0, #1
 8009442:	d102      	bne.n	800944a <_sbrk_r+0x1a>
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	b103      	cbz	r3, 800944a <_sbrk_r+0x1a>
 8009448:	602b      	str	r3, [r5, #0]
 800944a:	bd38      	pop	{r3, r4, r5, pc}
 800944c:	200002e4 	.word	0x200002e4

08009450 <strncmp>:
 8009450:	b510      	push	{r4, lr}
 8009452:	b16a      	cbz	r2, 8009470 <strncmp+0x20>
 8009454:	3901      	subs	r1, #1
 8009456:	1884      	adds	r4, r0, r2
 8009458:	f810 3b01 	ldrb.w	r3, [r0], #1
 800945c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009460:	4293      	cmp	r3, r2
 8009462:	d103      	bne.n	800946c <strncmp+0x1c>
 8009464:	42a0      	cmp	r0, r4
 8009466:	d001      	beq.n	800946c <strncmp+0x1c>
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1f5      	bne.n	8009458 <strncmp+0x8>
 800946c:	1a98      	subs	r0, r3, r2
 800946e:	bd10      	pop	{r4, pc}
 8009470:	4610      	mov	r0, r2
 8009472:	e7fc      	b.n	800946e <strncmp+0x1e>

08009474 <__ascii_wctomb>:
 8009474:	b149      	cbz	r1, 800948a <__ascii_wctomb+0x16>
 8009476:	2aff      	cmp	r2, #255	; 0xff
 8009478:	bf85      	ittet	hi
 800947a:	238a      	movhi	r3, #138	; 0x8a
 800947c:	6003      	strhi	r3, [r0, #0]
 800947e:	700a      	strbls	r2, [r1, #0]
 8009480:	f04f 30ff 	movhi.w	r0, #4294967295
 8009484:	bf98      	it	ls
 8009486:	2001      	movls	r0, #1
 8009488:	4770      	bx	lr
 800948a:	4608      	mov	r0, r1
 800948c:	4770      	bx	lr

0800948e <memmove>:
 800948e:	4288      	cmp	r0, r1
 8009490:	b510      	push	{r4, lr}
 8009492:	eb01 0302 	add.w	r3, r1, r2
 8009496:	d807      	bhi.n	80094a8 <memmove+0x1a>
 8009498:	1e42      	subs	r2, r0, #1
 800949a:	4299      	cmp	r1, r3
 800949c:	d00a      	beq.n	80094b4 <memmove+0x26>
 800949e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094a2:	f802 4f01 	strb.w	r4, [r2, #1]!
 80094a6:	e7f8      	b.n	800949a <memmove+0xc>
 80094a8:	4283      	cmp	r3, r0
 80094aa:	d9f5      	bls.n	8009498 <memmove+0xa>
 80094ac:	1881      	adds	r1, r0, r2
 80094ae:	1ad2      	subs	r2, r2, r3
 80094b0:	42d3      	cmn	r3, r2
 80094b2:	d100      	bne.n	80094b6 <memmove+0x28>
 80094b4:	bd10      	pop	{r4, pc}
 80094b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094ba:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80094be:	e7f7      	b.n	80094b0 <memmove+0x22>

080094c0 <__malloc_lock>:
 80094c0:	4770      	bx	lr

080094c2 <__malloc_unlock>:
 80094c2:	4770      	bx	lr

080094c4 <_realloc_r>:
 80094c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c6:	4607      	mov	r7, r0
 80094c8:	4614      	mov	r4, r2
 80094ca:	460e      	mov	r6, r1
 80094cc:	b921      	cbnz	r1, 80094d8 <_realloc_r+0x14>
 80094ce:	4611      	mov	r1, r2
 80094d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80094d4:	f7ff be00 	b.w	80090d8 <_malloc_r>
 80094d8:	b922      	cbnz	r2, 80094e4 <_realloc_r+0x20>
 80094da:	f7ff fdaf 	bl	800903c <_free_r>
 80094de:	4625      	mov	r5, r4
 80094e0:	4628      	mov	r0, r5
 80094e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e4:	f000 f814 	bl	8009510 <_malloc_usable_size_r>
 80094e8:	42a0      	cmp	r0, r4
 80094ea:	d20f      	bcs.n	800950c <_realloc_r+0x48>
 80094ec:	4621      	mov	r1, r4
 80094ee:	4638      	mov	r0, r7
 80094f0:	f7ff fdf2 	bl	80090d8 <_malloc_r>
 80094f4:	4605      	mov	r5, r0
 80094f6:	2800      	cmp	r0, #0
 80094f8:	d0f2      	beq.n	80094e0 <_realloc_r+0x1c>
 80094fa:	4631      	mov	r1, r6
 80094fc:	4622      	mov	r2, r4
 80094fe:	f7fc facd 	bl	8005a9c <memcpy>
 8009502:	4631      	mov	r1, r6
 8009504:	4638      	mov	r0, r7
 8009506:	f7ff fd99 	bl	800903c <_free_r>
 800950a:	e7e9      	b.n	80094e0 <_realloc_r+0x1c>
 800950c:	4635      	mov	r5, r6
 800950e:	e7e7      	b.n	80094e0 <_realloc_r+0x1c>

08009510 <_malloc_usable_size_r>:
 8009510:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009514:	1f18      	subs	r0, r3, #4
 8009516:	2b00      	cmp	r3, #0
 8009518:	bfbc      	itt	lt
 800951a:	580b      	ldrlt	r3, [r1, r0]
 800951c:	18c0      	addlt	r0, r0, r3
 800951e:	4770      	bx	lr

08009520 <sqrtf>:
 8009520:	b510      	push	{r4, lr}
 8009522:	ed2d 8b02 	vpush	{d8}
 8009526:	b08a      	sub	sp, #40	; 0x28
 8009528:	eeb0 8a40 	vmov.f32	s16, s0
 800952c:	f000 f848 	bl	80095c0 <__ieee754_sqrtf>
 8009530:	4b21      	ldr	r3, [pc, #132]	; (80095b8 <sqrtf+0x98>)
 8009532:	f993 4000 	ldrsb.w	r4, [r3]
 8009536:	1c63      	adds	r3, r4, #1
 8009538:	d02c      	beq.n	8009594 <sqrtf+0x74>
 800953a:	eeb4 8a48 	vcmp.f32	s16, s16
 800953e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009542:	d627      	bvs.n	8009594 <sqrtf+0x74>
 8009544:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800954c:	d522      	bpl.n	8009594 <sqrtf+0x74>
 800954e:	2301      	movs	r3, #1
 8009550:	9300      	str	r3, [sp, #0]
 8009552:	4b1a      	ldr	r3, [pc, #104]	; (80095bc <sqrtf+0x9c>)
 8009554:	9301      	str	r3, [sp, #4]
 8009556:	ee18 0a10 	vmov	r0, s16
 800955a:	2300      	movs	r3, #0
 800955c:	9308      	str	r3, [sp, #32]
 800955e:	f7f7 f86b 	bl	8000638 <__aeabi_f2d>
 8009562:	2200      	movs	r2, #0
 8009564:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009568:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800956c:	2300      	movs	r3, #0
 800956e:	b9ac      	cbnz	r4, 800959c <sqrtf+0x7c>
 8009570:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009574:	4668      	mov	r0, sp
 8009576:	f000 f826 	bl	80095c6 <matherr>
 800957a:	b1b8      	cbz	r0, 80095ac <sqrtf+0x8c>
 800957c:	9b08      	ldr	r3, [sp, #32]
 800957e:	b11b      	cbz	r3, 8009588 <sqrtf+0x68>
 8009580:	f7fc fa62 	bl	8005a48 <__errno>
 8009584:	9b08      	ldr	r3, [sp, #32]
 8009586:	6003      	str	r3, [r0, #0]
 8009588:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800958c:	f7f7 fba4 	bl	8000cd8 <__aeabi_d2f>
 8009590:	ee00 0a10 	vmov	s0, r0
 8009594:	b00a      	add	sp, #40	; 0x28
 8009596:	ecbd 8b02 	vpop	{d8}
 800959a:	bd10      	pop	{r4, pc}
 800959c:	4610      	mov	r0, r2
 800959e:	4619      	mov	r1, r3
 80095a0:	f7f7 f9cc 	bl	800093c <__aeabi_ddiv>
 80095a4:	2c02      	cmp	r4, #2
 80095a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80095aa:	d1e3      	bne.n	8009574 <sqrtf+0x54>
 80095ac:	f7fc fa4c 	bl	8005a48 <__errno>
 80095b0:	2321      	movs	r3, #33	; 0x21
 80095b2:	6003      	str	r3, [r0, #0]
 80095b4:	e7e2      	b.n	800957c <sqrtf+0x5c>
 80095b6:	bf00      	nop
 80095b8:	200001dc 	.word	0x200001dc
 80095bc:	08009aee 	.word	0x08009aee

080095c0 <__ieee754_sqrtf>:
 80095c0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80095c4:	4770      	bx	lr

080095c6 <matherr>:
 80095c6:	2000      	movs	r0, #0
 80095c8:	4770      	bx	lr
	...

080095cc <_init>:
 80095cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ce:	bf00      	nop
 80095d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095d2:	bc08      	pop	{r3}
 80095d4:	469e      	mov	lr, r3
 80095d6:	4770      	bx	lr

080095d8 <_fini>:
 80095d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095da:	bf00      	nop
 80095dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095de:	bc08      	pop	{r3}
 80095e0:	469e      	mov	lr, r3
 80095e2:	4770      	bx	lr
