
Lab1_Group3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f90  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08007150  08007150  00017150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800756c  0800756c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800756c  0800756c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800756c  0800756c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800756c  0800756c  0001756c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007570  08007570  00017570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007574  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  200001e0  08007754  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  08007754  0002025c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bed0  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001849  00000000  00000000  0002c0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b48  00000000  00000000  0002d930  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a60  00000000  00000000  0002e478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a672  00000000  00000000  0002eed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009387  00000000  00000000  0005954a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010647b  00000000  00000000  000628d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00168d4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d1c  00000000  00000000  00168dc8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08007138 	.word	0x08007138

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001e4 	.word	0x200001e4
 80001fc:	08007138 	.word	0x08007138

08000200 <kalmanUpdateA>:
* R0 = pointer to struct kalmanState
* S0 = measurement, then the return value x
*/

kalmanUpdateA:
			PUSH {R4, LR}
 8000200:	b510      	push	{r4, lr}
			VSTMDB.f32 SP!,{S4-S9}
 8000202:	ed2d 2a06 	vpush	{s4-s9}

			VLDMIA.f32 R0!, {S4-S8}
 8000206:	ecb0 2a05 	vldmia	r0!, {s4-s8}

			VADD.f32 S7, S7, S4
 800020a:	ee73 3a82 	vadd.f32	s7, s7, s4
			VADD.f32 S9, S7, S5
 800020e:	ee73 4aa2 	vadd.f32	s9, s7, s5
			VDIV.f32 S8, S7, S9
 8000212:	ee83 4aa4 	vdiv.f32	s8, s7, s9
			VSUB.f32 S9, S0, S6
 8000216:	ee70 4a43 	vsub.f32	s9, s0, s6
			VMLA.f32 S6, S8, S9
 800021a:	ee04 3a24 	vmla.f32	s6, s8, s9
			VMLS.f32 S7, S8, S7
 800021e:	ee44 3a63 	vmls.f32	s7, s8, s7

			VMRS R4, FPSCR
 8000222:	eef1 4a10 	vmrs	r4, fpscr
			LSL R4, R4, #28
 8000226:	0724      	lsls	r4, r4, #28
			BNE exception
 8000228:	d106      	bne.n	8000238 <exception>

			VMOV.f32 S0, S6					// return self.x
 800022a:	eeb0 0a43 	vmov.f32	s0, s6
			VSTMDB.f32 R0!, {S4-S8} 		// !!We still need this right???
 800022e:	ed20 2a05 	vstmdb	r0!, {s4-s8}
			VLDMIA.f32 SP!,{S4-S9}
 8000232:	ecbd 2a06 	vpop	{s4-s9}
			POP {R4, PC}
 8000236:	bd10      	pop	{r4, pc}

08000238 <exception>:

exception:	VMOV.f32 S0, S6					// force NaN or let it be x?
 8000238:	eeb0 0a43 	vmov.f32	s0, s6
			VLDMIA.f32 SP!,{S4-S9}
 800023c:	ecbd 2a06 	vpop	{s4-s9}
			POP {R4, PC}
 8000240:	bd10      	pop	{r4, pc}

08000242 <strlen>:
 8000242:	4603      	mov	r3, r0
 8000244:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000248:	2a00      	cmp	r2, #0
 800024a:	d1fb      	bne.n	8000244 <strlen+0x2>
 800024c:	1a18      	subs	r0, r3, r0
 800024e:	3801      	subs	r0, #1
 8000250:	4770      	bx	lr
	...

08000260 <memchr>:
 8000260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000264:	2a10      	cmp	r2, #16
 8000266:	db2b      	blt.n	80002c0 <memchr+0x60>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	d008      	beq.n	8000280 <memchr+0x20>
 800026e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000272:	3a01      	subs	r2, #1
 8000274:	428b      	cmp	r3, r1
 8000276:	d02d      	beq.n	80002d4 <memchr+0x74>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	b342      	cbz	r2, 80002d0 <memchr+0x70>
 800027e:	d1f6      	bne.n	800026e <memchr+0xe>
 8000280:	b4f0      	push	{r4, r5, r6, r7}
 8000282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800028a:	f022 0407 	bic.w	r4, r2, #7
 800028e:	f07f 0700 	mvns.w	r7, #0
 8000292:	2300      	movs	r3, #0
 8000294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000298:	3c08      	subs	r4, #8
 800029a:	ea85 0501 	eor.w	r5, r5, r1
 800029e:	ea86 0601 	eor.w	r6, r6, r1
 80002a2:	fa85 f547 	uadd8	r5, r5, r7
 80002a6:	faa3 f587 	sel	r5, r3, r7
 80002aa:	fa86 f647 	uadd8	r6, r6, r7
 80002ae:	faa5 f687 	sel	r6, r5, r7
 80002b2:	b98e      	cbnz	r6, 80002d8 <memchr+0x78>
 80002b4:	d1ee      	bne.n	8000294 <memchr+0x34>
 80002b6:	bcf0      	pop	{r4, r5, r6, r7}
 80002b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002bc:	f002 0207 	and.w	r2, r2, #7
 80002c0:	b132      	cbz	r2, 80002d0 <memchr+0x70>
 80002c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002c6:	3a01      	subs	r2, #1
 80002c8:	ea83 0301 	eor.w	r3, r3, r1
 80002cc:	b113      	cbz	r3, 80002d4 <memchr+0x74>
 80002ce:	d1f8      	bne.n	80002c2 <memchr+0x62>
 80002d0:	2000      	movs	r0, #0
 80002d2:	4770      	bx	lr
 80002d4:	3801      	subs	r0, #1
 80002d6:	4770      	bx	lr
 80002d8:	2d00      	cmp	r5, #0
 80002da:	bf06      	itte	eq
 80002dc:	4635      	moveq	r5, r6
 80002de:	3803      	subeq	r0, #3
 80002e0:	3807      	subne	r0, #7
 80002e2:	f015 0f01 	tst.w	r5, #1
 80002e6:	d107      	bne.n	80002f8 <memchr+0x98>
 80002e8:	3001      	adds	r0, #1
 80002ea:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ee:	bf02      	ittt	eq
 80002f0:	3001      	addeq	r0, #1
 80002f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002f6:	3001      	addeq	r0, #1
 80002f8:	bcf0      	pop	{r4, r5, r6, r7}
 80002fa:	3801      	subs	r0, #1
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop

08000300 <__aeabi_drsub>:
 8000300:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000304:	e002      	b.n	800030c <__adddf3>
 8000306:	bf00      	nop

08000308 <__aeabi_dsub>:
 8000308:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800030c <__adddf3>:
 800030c:	b530      	push	{r4, r5, lr}
 800030e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000312:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000316:	ea94 0f05 	teq	r4, r5
 800031a:	bf08      	it	eq
 800031c:	ea90 0f02 	teqeq	r0, r2
 8000320:	bf1f      	itttt	ne
 8000322:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000326:	ea55 0c02 	orrsne.w	ip, r5, r2
 800032a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800032e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000332:	f000 80e2 	beq.w	80004fa <__adddf3+0x1ee>
 8000336:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800033a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800033e:	bfb8      	it	lt
 8000340:	426d      	neglt	r5, r5
 8000342:	dd0c      	ble.n	800035e <__adddf3+0x52>
 8000344:	442c      	add	r4, r5
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	ea82 0000 	eor.w	r0, r2, r0
 8000352:	ea83 0101 	eor.w	r1, r3, r1
 8000356:	ea80 0202 	eor.w	r2, r0, r2
 800035a:	ea81 0303 	eor.w	r3, r1, r3
 800035e:	2d36      	cmp	r5, #54	; 0x36
 8000360:	bf88      	it	hi
 8000362:	bd30      	pophi	{r4, r5, pc}
 8000364:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800036c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000370:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000374:	d002      	beq.n	800037c <__adddf3+0x70>
 8000376:	4240      	negs	r0, r0
 8000378:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800037c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000380:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000384:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000388:	d002      	beq.n	8000390 <__adddf3+0x84>
 800038a:	4252      	negs	r2, r2
 800038c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000390:	ea94 0f05 	teq	r4, r5
 8000394:	f000 80a7 	beq.w	80004e6 <__adddf3+0x1da>
 8000398:	f1a4 0401 	sub.w	r4, r4, #1
 800039c:	f1d5 0e20 	rsbs	lr, r5, #32
 80003a0:	db0d      	blt.n	80003be <__adddf3+0xb2>
 80003a2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003a6:	fa22 f205 	lsr.w	r2, r2, r5
 80003aa:	1880      	adds	r0, r0, r2
 80003ac:	f141 0100 	adc.w	r1, r1, #0
 80003b0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003b4:	1880      	adds	r0, r0, r2
 80003b6:	fa43 f305 	asr.w	r3, r3, r5
 80003ba:	4159      	adcs	r1, r3
 80003bc:	e00e      	b.n	80003dc <__adddf3+0xd0>
 80003be:	f1a5 0520 	sub.w	r5, r5, #32
 80003c2:	f10e 0e20 	add.w	lr, lr, #32
 80003c6:	2a01      	cmp	r2, #1
 80003c8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003cc:	bf28      	it	cs
 80003ce:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003d2:	fa43 f305 	asr.w	r3, r3, r5
 80003d6:	18c0      	adds	r0, r0, r3
 80003d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003e0:	d507      	bpl.n	80003f2 <__adddf3+0xe6>
 80003e2:	f04f 0e00 	mov.w	lr, #0
 80003e6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ea:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ee:	eb6e 0101 	sbc.w	r1, lr, r1
 80003f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003f6:	d31b      	bcc.n	8000430 <__adddf3+0x124>
 80003f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003fc:	d30c      	bcc.n	8000418 <__adddf3+0x10c>
 80003fe:	0849      	lsrs	r1, r1, #1
 8000400:	ea5f 0030 	movs.w	r0, r0, rrx
 8000404:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000408:	f104 0401 	add.w	r4, r4, #1
 800040c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000410:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000414:	f080 809a 	bcs.w	800054c <__adddf3+0x240>
 8000418:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800041c:	bf08      	it	eq
 800041e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000422:	f150 0000 	adcs.w	r0, r0, #0
 8000426:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800042a:	ea41 0105 	orr.w	r1, r1, r5
 800042e:	bd30      	pop	{r4, r5, pc}
 8000430:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000434:	4140      	adcs	r0, r0
 8000436:	eb41 0101 	adc.w	r1, r1, r1
 800043a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800043e:	f1a4 0401 	sub.w	r4, r4, #1
 8000442:	d1e9      	bne.n	8000418 <__adddf3+0x10c>
 8000444:	f091 0f00 	teq	r1, #0
 8000448:	bf04      	itt	eq
 800044a:	4601      	moveq	r1, r0
 800044c:	2000      	moveq	r0, #0
 800044e:	fab1 f381 	clz	r3, r1
 8000452:	bf08      	it	eq
 8000454:	3320      	addeq	r3, #32
 8000456:	f1a3 030b 	sub.w	r3, r3, #11
 800045a:	f1b3 0220 	subs.w	r2, r3, #32
 800045e:	da0c      	bge.n	800047a <__adddf3+0x16e>
 8000460:	320c      	adds	r2, #12
 8000462:	dd08      	ble.n	8000476 <__adddf3+0x16a>
 8000464:	f102 0c14 	add.w	ip, r2, #20
 8000468:	f1c2 020c 	rsb	r2, r2, #12
 800046c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000470:	fa21 f102 	lsr.w	r1, r1, r2
 8000474:	e00c      	b.n	8000490 <__adddf3+0x184>
 8000476:	f102 0214 	add.w	r2, r2, #20
 800047a:	bfd8      	it	le
 800047c:	f1c2 0c20 	rsble	ip, r2, #32
 8000480:	fa01 f102 	lsl.w	r1, r1, r2
 8000484:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000488:	bfdc      	itt	le
 800048a:	ea41 010c 	orrle.w	r1, r1, ip
 800048e:	4090      	lslle	r0, r2
 8000490:	1ae4      	subs	r4, r4, r3
 8000492:	bfa2      	ittt	ge
 8000494:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000498:	4329      	orrge	r1, r5
 800049a:	bd30      	popge	{r4, r5, pc}
 800049c:	ea6f 0404 	mvn.w	r4, r4
 80004a0:	3c1f      	subs	r4, #31
 80004a2:	da1c      	bge.n	80004de <__adddf3+0x1d2>
 80004a4:	340c      	adds	r4, #12
 80004a6:	dc0e      	bgt.n	80004c6 <__adddf3+0x1ba>
 80004a8:	f104 0414 	add.w	r4, r4, #20
 80004ac:	f1c4 0220 	rsb	r2, r4, #32
 80004b0:	fa20 f004 	lsr.w	r0, r0, r4
 80004b4:	fa01 f302 	lsl.w	r3, r1, r2
 80004b8:	ea40 0003 	orr.w	r0, r0, r3
 80004bc:	fa21 f304 	lsr.w	r3, r1, r4
 80004c0:	ea45 0103 	orr.w	r1, r5, r3
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f1c4 040c 	rsb	r4, r4, #12
 80004ca:	f1c4 0220 	rsb	r2, r4, #32
 80004ce:	fa20 f002 	lsr.w	r0, r0, r2
 80004d2:	fa01 f304 	lsl.w	r3, r1, r4
 80004d6:	ea40 0003 	orr.w	r0, r0, r3
 80004da:	4629      	mov	r1, r5
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	fa21 f004 	lsr.w	r0, r1, r4
 80004e2:	4629      	mov	r1, r5
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f094 0f00 	teq	r4, #0
 80004ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ee:	bf06      	itte	eq
 80004f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004f4:	3401      	addeq	r4, #1
 80004f6:	3d01      	subne	r5, #1
 80004f8:	e74e      	b.n	8000398 <__adddf3+0x8c>
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf18      	it	ne
 8000500:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000504:	d029      	beq.n	800055a <__adddf3+0x24e>
 8000506:	ea94 0f05 	teq	r4, r5
 800050a:	bf08      	it	eq
 800050c:	ea90 0f02 	teqeq	r0, r2
 8000510:	d005      	beq.n	800051e <__adddf3+0x212>
 8000512:	ea54 0c00 	orrs.w	ip, r4, r0
 8000516:	bf04      	itt	eq
 8000518:	4619      	moveq	r1, r3
 800051a:	4610      	moveq	r0, r2
 800051c:	bd30      	pop	{r4, r5, pc}
 800051e:	ea91 0f03 	teq	r1, r3
 8000522:	bf1e      	ittt	ne
 8000524:	2100      	movne	r1, #0
 8000526:	2000      	movne	r0, #0
 8000528:	bd30      	popne	{r4, r5, pc}
 800052a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800052e:	d105      	bne.n	800053c <__adddf3+0x230>
 8000530:	0040      	lsls	r0, r0, #1
 8000532:	4149      	adcs	r1, r1
 8000534:	bf28      	it	cs
 8000536:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800053a:	bd30      	pop	{r4, r5, pc}
 800053c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000540:	bf3c      	itt	cc
 8000542:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000546:	bd30      	popcc	{r4, r5, pc}
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000554:	f04f 0000 	mov.w	r0, #0
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800055e:	bf1a      	itte	ne
 8000560:	4619      	movne	r1, r3
 8000562:	4610      	movne	r0, r2
 8000564:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000568:	bf1c      	itt	ne
 800056a:	460b      	movne	r3, r1
 800056c:	4602      	movne	r2, r0
 800056e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000572:	bf06      	itte	eq
 8000574:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000578:	ea91 0f03 	teqeq	r1, r3
 800057c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	bf00      	nop

08000584 <__aeabi_ui2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f04f 0500 	mov.w	r5, #0
 800059c:	f04f 0100 	mov.w	r1, #0
 80005a0:	e750      	b.n	8000444 <__adddf3+0x138>
 80005a2:	bf00      	nop

080005a4 <__aeabi_i2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005bc:	bf48      	it	mi
 80005be:	4240      	negmi	r0, r0
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	e73e      	b.n	8000444 <__adddf3+0x138>
 80005c6:	bf00      	nop

080005c8 <__aeabi_f2d>:
 80005c8:	0042      	lsls	r2, r0, #1
 80005ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ce:	ea4f 0131 	mov.w	r1, r1, rrx
 80005d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005d6:	bf1f      	itttt	ne
 80005d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005e4:	4770      	bxne	lr
 80005e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ea:	bf08      	it	eq
 80005ec:	4770      	bxeq	lr
 80005ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005f2:	bf04      	itt	eq
 80005f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005f8:	4770      	bxeq	lr
 80005fa:	b530      	push	{r4, r5, lr}
 80005fc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000600:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000608:	e71c      	b.n	8000444 <__adddf3+0x138>
 800060a:	bf00      	nop

0800060c <__aeabi_ul2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f04f 0500 	mov.w	r5, #0
 800061a:	e00a      	b.n	8000632 <__aeabi_l2d+0x16>

0800061c <__aeabi_l2d>:
 800061c:	ea50 0201 	orrs.w	r2, r0, r1
 8000620:	bf08      	it	eq
 8000622:	4770      	bxeq	lr
 8000624:	b530      	push	{r4, r5, lr}
 8000626:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800062a:	d502      	bpl.n	8000632 <__aeabi_l2d+0x16>
 800062c:	4240      	negs	r0, r0
 800062e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000632:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000636:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800063a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800063e:	f43f aed8 	beq.w	80003f2 <__adddf3+0xe6>
 8000642:	f04f 0203 	mov.w	r2, #3
 8000646:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800064a:	bf18      	it	ne
 800064c:	3203      	addne	r2, #3
 800064e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000652:	bf18      	it	ne
 8000654:	3203      	addne	r2, #3
 8000656:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800065a:	f1c2 0320 	rsb	r3, r2, #32
 800065e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000662:	fa20 f002 	lsr.w	r0, r0, r2
 8000666:	fa01 fe03 	lsl.w	lr, r1, r3
 800066a:	ea40 000e 	orr.w	r0, r0, lr
 800066e:	fa21 f102 	lsr.w	r1, r1, r2
 8000672:	4414      	add	r4, r2
 8000674:	e6bd      	b.n	80003f2 <__adddf3+0xe6>
 8000676:	bf00      	nop

08000678 <__aeabi_dmul>:
 8000678:	b570      	push	{r4, r5, r6, lr}
 800067a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800067e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000682:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000686:	bf1d      	ittte	ne
 8000688:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800068c:	ea94 0f0c 	teqne	r4, ip
 8000690:	ea95 0f0c 	teqne	r5, ip
 8000694:	f000 f8de 	bleq	8000854 <__aeabi_dmul+0x1dc>
 8000698:	442c      	add	r4, r5
 800069a:	ea81 0603 	eor.w	r6, r1, r3
 800069e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006aa:	bf18      	it	ne
 80006ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006b8:	d038      	beq.n	800072c <__aeabi_dmul+0xb4>
 80006ba:	fba0 ce02 	umull	ip, lr, r0, r2
 80006be:	f04f 0500 	mov.w	r5, #0
 80006c2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ca:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ce:	f04f 0600 	mov.w	r6, #0
 80006d2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006d6:	f09c 0f00 	teq	ip, #0
 80006da:	bf18      	it	ne
 80006dc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ec:	d204      	bcs.n	80006f8 <__aeabi_dmul+0x80>
 80006ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006f2:	416d      	adcs	r5, r5
 80006f4:	eb46 0606 	adc.w	r6, r6, r6
 80006f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000700:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000704:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000708:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800070c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000710:	bf88      	it	hi
 8000712:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000716:	d81e      	bhi.n	8000756 <__aeabi_dmul+0xde>
 8000718:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800071c:	bf08      	it	eq
 800071e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000722:	f150 0000 	adcs.w	r0, r0, #0
 8000726:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000730:	ea46 0101 	orr.w	r1, r6, r1
 8000734:	ea40 0002 	orr.w	r0, r0, r2
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000740:	bfc2      	ittt	gt
 8000742:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000746:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800074a:	bd70      	popgt	{r4, r5, r6, pc}
 800074c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000750:	f04f 0e00 	mov.w	lr, #0
 8000754:	3c01      	subs	r4, #1
 8000756:	f300 80ab 	bgt.w	80008b0 <__aeabi_dmul+0x238>
 800075a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800075e:	bfde      	ittt	le
 8000760:	2000      	movle	r0, #0
 8000762:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000766:	bd70      	pople	{r4, r5, r6, pc}
 8000768:	f1c4 0400 	rsb	r4, r4, #0
 800076c:	3c20      	subs	r4, #32
 800076e:	da35      	bge.n	80007dc <__aeabi_dmul+0x164>
 8000770:	340c      	adds	r4, #12
 8000772:	dc1b      	bgt.n	80007ac <__aeabi_dmul+0x134>
 8000774:	f104 0414 	add.w	r4, r4, #20
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f305 	lsl.w	r3, r0, r5
 8000780:	fa20 f004 	lsr.w	r0, r0, r4
 8000784:	fa01 f205 	lsl.w	r2, r1, r5
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000790:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000794:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000798:	fa21 f604 	lsr.w	r6, r1, r4
 800079c:	eb42 0106 	adc.w	r1, r2, r6
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 040c 	rsb	r4, r4, #12
 80007b0:	f1c4 0520 	rsb	r5, r4, #32
 80007b4:	fa00 f304 	lsl.w	r3, r0, r4
 80007b8:	fa20 f005 	lsr.w	r0, r0, r5
 80007bc:	fa01 f204 	lsl.w	r2, r1, r4
 80007c0:	ea40 0002 	orr.w	r0, r0, r2
 80007c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007cc:	f141 0100 	adc.w	r1, r1, #0
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 0520 	rsb	r5, r4, #32
 80007e0:	fa00 f205 	lsl.w	r2, r0, r5
 80007e4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007e8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ec:	fa01 f205 	lsl.w	r2, r1, r5
 80007f0:	ea43 0302 	orr.w	r3, r3, r2
 80007f4:	fa21 f004 	lsr.w	r0, r1, r4
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	fa21 f204 	lsr.w	r2, r1, r4
 8000800:	ea20 0002 	bic.w	r0, r0, r2
 8000804:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000808:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800080c:	bf08      	it	eq
 800080e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000812:	bd70      	pop	{r4, r5, r6, pc}
 8000814:	f094 0f00 	teq	r4, #0
 8000818:	d10f      	bne.n	800083a <__aeabi_dmul+0x1c2>
 800081a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800081e:	0040      	lsls	r0, r0, #1
 8000820:	eb41 0101 	adc.w	r1, r1, r1
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3c01      	subeq	r4, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1a6>
 800082e:	ea41 0106 	orr.w	r1, r1, r6
 8000832:	f095 0f00 	teq	r5, #0
 8000836:	bf18      	it	ne
 8000838:	4770      	bxne	lr
 800083a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800083e:	0052      	lsls	r2, r2, #1
 8000840:	eb43 0303 	adc.w	r3, r3, r3
 8000844:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000848:	bf08      	it	eq
 800084a:	3d01      	subeq	r5, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1c6>
 800084e:	ea43 0306 	orr.w	r3, r3, r6
 8000852:	4770      	bx	lr
 8000854:	ea94 0f0c 	teq	r4, ip
 8000858:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800085c:	bf18      	it	ne
 800085e:	ea95 0f0c 	teqne	r5, ip
 8000862:	d00c      	beq.n	800087e <__aeabi_dmul+0x206>
 8000864:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000868:	bf18      	it	ne
 800086a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086e:	d1d1      	bne.n	8000814 <__aeabi_dmul+0x19c>
 8000870:	ea81 0103 	eor.w	r1, r1, r3
 8000874:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000878:	f04f 0000 	mov.w	r0, #0
 800087c:	bd70      	pop	{r4, r5, r6, pc}
 800087e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000882:	bf06      	itte	eq
 8000884:	4610      	moveq	r0, r2
 8000886:	4619      	moveq	r1, r3
 8000888:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088c:	d019      	beq.n	80008c2 <__aeabi_dmul+0x24a>
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	d102      	bne.n	800089a <__aeabi_dmul+0x222>
 8000894:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000898:	d113      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 800089a:	ea95 0f0c 	teq	r5, ip
 800089e:	d105      	bne.n	80008ac <__aeabi_dmul+0x234>
 80008a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008a4:	bf1c      	itt	ne
 80008a6:	4610      	movne	r0, r2
 80008a8:	4619      	movne	r1, r3
 80008aa:	d10a      	bne.n	80008c2 <__aeabi_dmul+0x24a>
 80008ac:	ea81 0103 	eor.w	r1, r1, r3
 80008b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008bc:	f04f 0000 	mov.w	r0, #0
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ca:	bd70      	pop	{r4, r5, r6, pc}

080008cc <__aeabi_ddiv>:
 80008cc:	b570      	push	{r4, r5, r6, lr}
 80008ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008da:	bf1d      	ittte	ne
 80008dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008e0:	ea94 0f0c 	teqne	r4, ip
 80008e4:	ea95 0f0c 	teqne	r5, ip
 80008e8:	f000 f8a7 	bleq	8000a3a <__aeabi_ddiv+0x16e>
 80008ec:	eba4 0405 	sub.w	r4, r4, r5
 80008f0:	ea81 0e03 	eor.w	lr, r1, r3
 80008f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008fc:	f000 8088 	beq.w	8000a10 <__aeabi_ddiv+0x144>
 8000900:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000904:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000908:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800090c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000910:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000914:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000918:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800091c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000920:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000924:	429d      	cmp	r5, r3
 8000926:	bf08      	it	eq
 8000928:	4296      	cmpeq	r6, r2
 800092a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800092e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000932:	d202      	bcs.n	800093a <__aeabi_ddiv+0x6e>
 8000934:	085b      	lsrs	r3, r3, #1
 8000936:	ea4f 0232 	mov.w	r2, r2, rrx
 800093a:	1ab6      	subs	r6, r6, r2
 800093c:	eb65 0503 	sbc.w	r5, r5, r3
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800094a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000978:	085b      	lsrs	r3, r3, #1
 800097a:	ea4f 0232 	mov.w	r2, r2, rrx
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009a8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009ac:	d018      	beq.n	80009e0 <__aeabi_ddiv+0x114>
 80009ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ca:	d1c0      	bne.n	800094e <__aeabi_ddiv+0x82>
 80009cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d0:	d10b      	bne.n	80009ea <__aeabi_ddiv+0x11e>
 80009d2:	ea41 0100 	orr.w	r1, r1, r0
 80009d6:	f04f 0000 	mov.w	r0, #0
 80009da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009de:	e7b6      	b.n	800094e <__aeabi_ddiv+0x82>
 80009e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009e4:	bf04      	itt	eq
 80009e6:	4301      	orreq	r1, r0
 80009e8:	2000      	moveq	r0, #0
 80009ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ee:	bf88      	it	hi
 80009f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009f4:	f63f aeaf 	bhi.w	8000756 <__aeabi_dmul+0xde>
 80009f8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009fc:	bf04      	itt	eq
 80009fe:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a02:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a06:	f150 0000 	adcs.w	r0, r0, #0
 8000a0a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a0e:	bd70      	pop	{r4, r5, r6, pc}
 8000a10:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a14:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a18:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a1c:	bfc2      	ittt	gt
 8000a1e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a22:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a26:	bd70      	popgt	{r4, r5, r6, pc}
 8000a28:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a2c:	f04f 0e00 	mov.w	lr, #0
 8000a30:	3c01      	subs	r4, #1
 8000a32:	e690      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a34:	ea45 0e06 	orr.w	lr, r5, r6
 8000a38:	e68d      	b.n	8000756 <__aeabi_dmul+0xde>
 8000a3a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a3e:	ea94 0f0c 	teq	r4, ip
 8000a42:	bf08      	it	eq
 8000a44:	ea95 0f0c 	teqeq	r5, ip
 8000a48:	f43f af3b 	beq.w	80008c2 <__aeabi_dmul+0x24a>
 8000a4c:	ea94 0f0c 	teq	r4, ip
 8000a50:	d10a      	bne.n	8000a68 <__aeabi_ddiv+0x19c>
 8000a52:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a56:	f47f af34 	bne.w	80008c2 <__aeabi_dmul+0x24a>
 8000a5a:	ea95 0f0c 	teq	r5, ip
 8000a5e:	f47f af25 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a62:	4610      	mov	r0, r2
 8000a64:	4619      	mov	r1, r3
 8000a66:	e72c      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a68:	ea95 0f0c 	teq	r5, ip
 8000a6c:	d106      	bne.n	8000a7c <__aeabi_ddiv+0x1b0>
 8000a6e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a72:	f43f aefd 	beq.w	8000870 <__aeabi_dmul+0x1f8>
 8000a76:	4610      	mov	r0, r2
 8000a78:	4619      	mov	r1, r3
 8000a7a:	e722      	b.n	80008c2 <__aeabi_dmul+0x24a>
 8000a7c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a86:	f47f aec5 	bne.w	8000814 <__aeabi_dmul+0x19c>
 8000a8a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a8e:	f47f af0d 	bne.w	80008ac <__aeabi_dmul+0x234>
 8000a92:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a96:	f47f aeeb 	bne.w	8000870 <__aeabi_dmul+0x1f8>
 8000a9a:	e712      	b.n	80008c2 <__aeabi_dmul+0x24a>

08000a9c <__gedf2>:
 8000a9c:	f04f 3cff 	mov.w	ip, #4294967295
 8000aa0:	e006      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aa2:	bf00      	nop

08000aa4 <__ledf2>:
 8000aa4:	f04f 0c01 	mov.w	ip, #1
 8000aa8:	e002      	b.n	8000ab0 <__cmpdf2+0x4>
 8000aaa:	bf00      	nop

08000aac <__cmpdf2>:
 8000aac:	f04f 0c01 	mov.w	ip, #1
 8000ab0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac0:	bf18      	it	ne
 8000ac2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ac6:	d01b      	beq.n	8000b00 <__cmpdf2+0x54>
 8000ac8:	b001      	add	sp, #4
 8000aca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ace:	bf0c      	ite	eq
 8000ad0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ad4:	ea91 0f03 	teqne	r1, r3
 8000ad8:	bf02      	ittt	eq
 8000ada:	ea90 0f02 	teqeq	r0, r2
 8000ade:	2000      	moveq	r0, #0
 8000ae0:	4770      	bxeq	lr
 8000ae2:	f110 0f00 	cmn.w	r0, #0
 8000ae6:	ea91 0f03 	teq	r1, r3
 8000aea:	bf58      	it	pl
 8000aec:	4299      	cmppl	r1, r3
 8000aee:	bf08      	it	eq
 8000af0:	4290      	cmpeq	r0, r2
 8000af2:	bf2c      	ite	cs
 8000af4:	17d8      	asrcs	r0, r3, #31
 8000af6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000afa:	f040 0001 	orr.w	r0, r0, #1
 8000afe:	4770      	bx	lr
 8000b00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d102      	bne.n	8000b10 <__cmpdf2+0x64>
 8000b0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b0e:	d107      	bne.n	8000b20 <__cmpdf2+0x74>
 8000b10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b18:	d1d6      	bne.n	8000ac8 <__cmpdf2+0x1c>
 8000b1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b1e:	d0d3      	beq.n	8000ac8 <__cmpdf2+0x1c>
 8000b20:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdrcmple>:
 8000b28:	4684      	mov	ip, r0
 8000b2a:	4610      	mov	r0, r2
 8000b2c:	4662      	mov	r2, ip
 8000b2e:	468c      	mov	ip, r1
 8000b30:	4619      	mov	r1, r3
 8000b32:	4663      	mov	r3, ip
 8000b34:	e000      	b.n	8000b38 <__aeabi_cdcmpeq>
 8000b36:	bf00      	nop

08000b38 <__aeabi_cdcmpeq>:
 8000b38:	b501      	push	{r0, lr}
 8000b3a:	f7ff ffb7 	bl	8000aac <__cmpdf2>
 8000b3e:	2800      	cmp	r0, #0
 8000b40:	bf48      	it	mi
 8000b42:	f110 0f00 	cmnmi.w	r0, #0
 8000b46:	bd01      	pop	{r0, pc}

08000b48 <__aeabi_dcmpeq>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff fff4 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b50:	bf0c      	ite	eq
 8000b52:	2001      	moveq	r0, #1
 8000b54:	2000      	movne	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmplt>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffea 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b64:	bf34      	ite	cc
 8000b66:	2001      	movcc	r0, #1
 8000b68:	2000      	movcs	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmple>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffe0 	bl	8000b38 <__aeabi_cdcmpeq>
 8000b78:	bf94      	ite	ls
 8000b7a:	2001      	movls	r0, #1
 8000b7c:	2000      	movhi	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpge>:
 8000b84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b88:	f7ff ffce 	bl	8000b28 <__aeabi_cdrcmple>
 8000b8c:	bf94      	ite	ls
 8000b8e:	2001      	movls	r0, #1
 8000b90:	2000      	movhi	r0, #0
 8000b92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b96:	bf00      	nop

08000b98 <__aeabi_dcmpgt>:
 8000b98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b9c:	f7ff ffc4 	bl	8000b28 <__aeabi_cdrcmple>
 8000ba0:	bf34      	ite	cc
 8000ba2:	2001      	movcc	r0, #1
 8000ba4:	2000      	movcs	r0, #0
 8000ba6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000baa:	bf00      	nop

08000bac <__aeabi_dcmpun>:
 8000bac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x10>
 8000bb6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bba:	d10a      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bbc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bc4:	d102      	bne.n	8000bcc <__aeabi_dcmpun+0x20>
 8000bc6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_dcmpun+0x26>
 8000bcc:	f04f 0000 	mov.w	r0, #0
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0001 	mov.w	r0, #1
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2iz>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000be0:	d215      	bcs.n	8000c0e <__aeabi_d2iz+0x36>
 8000be2:	d511      	bpl.n	8000c08 <__aeabi_d2iz+0x30>
 8000be4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000be8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bec:	d912      	bls.n	8000c14 <__aeabi_d2iz+0x3c>
 8000bee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bf6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bfa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bfe:	fa23 f002 	lsr.w	r0, r3, r2
 8000c02:	bf18      	it	ne
 8000c04:	4240      	negne	r0, r0
 8000c06:	4770      	bx	lr
 8000c08:	f04f 0000 	mov.w	r0, #0
 8000c0c:	4770      	bx	lr
 8000c0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c12:	d105      	bne.n	8000c20 <__aeabi_d2iz+0x48>
 8000c14:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	bf08      	it	eq
 8000c1a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_d2uiz>:
 8000c28:	004a      	lsls	r2, r1, #1
 8000c2a:	d211      	bcs.n	8000c50 <__aeabi_d2uiz+0x28>
 8000c2c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c30:	d211      	bcs.n	8000c56 <__aeabi_d2uiz+0x2e>
 8000c32:	d50d      	bpl.n	8000c50 <__aeabi_d2uiz+0x28>
 8000c34:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c38:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c3c:	d40e      	bmi.n	8000c5c <__aeabi_d2uiz+0x34>
 8000c3e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c42:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c46:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c4a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c5a:	d102      	bne.n	8000c62 <__aeabi_d2uiz+0x3a>
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c60:	4770      	bx	lr
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2f>:
 8000c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c6c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c70:	bf24      	itt	cs
 8000c72:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c76:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c7a:	d90d      	bls.n	8000c98 <__aeabi_d2f+0x30>
 8000c7c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c80:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c84:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c88:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c8c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c9c:	d121      	bne.n	8000ce2 <__aeabi_d2f+0x7a>
 8000c9e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ca2:	bfbc      	itt	lt
 8000ca4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ca8:	4770      	bxlt	lr
 8000caa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cae:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cb2:	f1c2 0218 	rsb	r2, r2, #24
 8000cb6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cba:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cbe:	fa20 f002 	lsr.w	r0, r0, r2
 8000cc2:	bf18      	it	ne
 8000cc4:	f040 0001 	orrne.w	r0, r0, #1
 8000cc8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ccc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cd0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cd4:	ea40 000c 	orr.w	r0, r0, ip
 8000cd8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ce0:	e7cc      	b.n	8000c7c <__aeabi_d2f+0x14>
 8000ce2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ce6:	d107      	bne.n	8000cf8 <__aeabi_d2f+0x90>
 8000ce8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cec:	bf1e      	ittt	ne
 8000cee:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cf2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cf6:	4770      	bxne	lr
 8000cf8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <kalmanFilterC>:
 */
#include "main.h"
#include "math.h"
#include "lab1util.h"

int kalmanFilterC(float* InputArray, float* OutputArray, struct KalmanState* kstate, int length){
 8000d08:	b5b0      	push	{r4, r5, r7, lr}
 8000d0a:	b092      	sub	sp, #72	; 0x48
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	60f8      	str	r0, [r7, #12]
 8000d10:	60b9      	str	r1, [r7, #8]
 8000d12:	607a      	str	r2, [r7, #4]
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	466b      	mov	r3, sp
 8000d18:	461d      	mov	r5, r3
	float avgIn = 0.0;
 8000d1a:	f04f 0300 	mov.w	r3, #0
 8000d1e:	633b      	str	r3, [r7, #48]	; 0x30
	float avgOut = 0.0;
 8000d20:	f04f 0300 	mov.w	r3, #0
 8000d24:	637b      	str	r3, [r7, #52]	; 0x34
	float avgDiff = 0.0;
 8000d26:	f04f 0300 	mov.w	r3, #0
 8000d2a:	63bb      	str	r3, [r7, #56]	; 0x38


	float diffArray[length];
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	1e43      	subs	r3, r0, #1
 8000d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000d32:	4603      	mov	r3, r0
 8000d34:	4619      	mov	r1, r3
 8000d36:	f04f 0200 	mov.w	r2, #0
 8000d3a:	f04f 0300 	mov.w	r3, #0
 8000d3e:	f04f 0400 	mov.w	r4, #0
 8000d42:	0154      	lsls	r4, r2, #5
 8000d44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000d48:	014b      	lsls	r3, r1, #5
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	f04f 0300 	mov.w	r3, #0
 8000d56:	f04f 0400 	mov.w	r4, #0
 8000d5a:	0154      	lsls	r4, r2, #5
 8000d5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000d60:	014b      	lsls	r3, r1, #5
 8000d62:	4603      	mov	r3, r0
 8000d64:	009b      	lsls	r3, r3, #2
 8000d66:	3303      	adds	r3, #3
 8000d68:	3307      	adds	r3, #7
 8000d6a:	08db      	lsrs	r3, r3, #3
 8000d6c:	00db      	lsls	r3, r3, #3
 8000d6e:	ebad 0d03 	sub.w	sp, sp, r3
 8000d72:	ab02      	add	r3, sp, #8
 8000d74:	3303      	adds	r3, #3
 8000d76:	089b      	lsrs	r3, r3, #2
 8000d78:	009b      	lsls	r3, r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
	float convArray[length*2-1];
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	1e58      	subs	r0, r3, #1
 8000d82:	1e43      	subs	r3, r0, #1
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
 8000d86:	4603      	mov	r3, r0
 8000d88:	4619      	mov	r1, r3
 8000d8a:	f04f 0200 	mov.w	r2, #0
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	f04f 0400 	mov.w	r4, #0
 8000d96:	0154      	lsls	r4, r2, #5
 8000d98:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000d9c:	014b      	lsls	r3, r1, #5
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4619      	mov	r1, r3
 8000da2:	f04f 0200 	mov.w	r2, #0
 8000da6:	f04f 0300 	mov.w	r3, #0
 8000daa:	f04f 0400 	mov.w	r4, #0
 8000dae:	0154      	lsls	r4, r2, #5
 8000db0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000db4:	014b      	lsls	r3, r1, #5
 8000db6:	4603      	mov	r3, r0
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	3303      	adds	r3, #3
 8000dbc:	3307      	adds	r3, #7
 8000dbe:	08db      	lsrs	r3, r3, #3
 8000dc0:	00db      	lsls	r3, r3, #3
 8000dc2:	ebad 0d03 	sub.w	sp, sp, r3
 8000dc6:	ab02      	add	r3, sp, #8
 8000dc8:	3303      	adds	r3, #3
 8000dca:	089b      	lsrs	r3, r3, #2
 8000dcc:	009b      	lsls	r3, r3, #2
 8000dce:	623b      	str	r3, [r7, #32]

	for(int i = 0; i < length; i++){
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000dd4:	e06c      	b.n	8000eb0 <kalmanFilterC+0x1a8>
		float updateResult = kalmanUpdateA(kstate, InputArray[i]);
 8000dd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	68fa      	ldr	r2, [r7, #12]
 8000ddc:	4413      	add	r3, r2
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	eeb0 0a67 	vmov.f32	s0, s15
 8000de6:	6878      	ldr	r0, [r7, #4]
 8000de8:	f7ff fa0a 	bl	8000200 <kalmanUpdateA>
 8000dec:	ed87 0a04 	vstr	s0, [r7, #16]
		if (isnan(updateResult) || isinf(updateResult)){
 8000df0:	ed97 7a04 	vldr	s14, [r7, #16]
 8000df4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000df8:	eeb4 7a67 	vcmp.f32	s14, s15
 8000dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e00:	d612      	bvs.n	8000e28 <kalmanFilterC+0x120>
 8000e02:	edd7 7a04 	vldr	s15, [r7, #16]
 8000e06:	eef0 7ae7 	vabs.f32	s15, s15
 8000e0a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8000f74 <kalmanFilterC+0x26c>
 8000e0e:	eef4 7a47 	vcmp.f32	s15, s14
 8000e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e16:	bfd4      	ite	le
 8000e18:	2301      	movle	r3, #1
 8000e1a:	2300      	movgt	r3, #0
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	f083 0301 	eor.w	r3, r3, #1
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d002      	beq.n	8000e2e <kalmanFilterC+0x126>
			return -1;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
 8000e2c:	e09c      	b.n	8000f68 <kalmanFilterC+0x260>
		}
		OutputArray[i] = updateResult;
 8000e2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	4413      	add	r3, r2
 8000e36:	693a      	ldr	r2, [r7, #16]
 8000e38:	601a      	str	r2, [r3, #0]
		diffArray[i] = OutputArray[i] - InputArray[i];
 8000e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	68ba      	ldr	r2, [r7, #8]
 8000e40:	4413      	add	r3, r2
 8000e42:	ed93 7a00 	vldr	s14, [r3]
 8000e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	edd3 7a00 	vldr	s15, [r3]
 8000e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	edc3 7a00 	vstr	s15, [r3]

		avgIn += InputArray[i];
 8000e62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	4413      	add	r3, r2
 8000e6a:	edd3 7a00 	vldr	s15, [r3]
 8000e6e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8000e72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e76:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
		avgOut += OutputArray[i];
 8000e7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e7c:	009b      	lsls	r3, r3, #2
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	4413      	add	r3, r2
 8000e82:	edd3 7a00 	vldr	s15, [r3]
 8000e86:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8000e8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e8e:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		avgDiff += diffArray[i];
 8000e92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000e96:	009b      	lsls	r3, r3, #2
 8000e98:	4413      	add	r3, r2
 8000e9a:	edd3 7a00 	vldr	s15, [r3]
 8000e9e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8000ea2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ea6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	for(int i = 0; i < length; i++){
 8000eaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000eac:	3301      	adds	r3, #1
 8000eae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000eb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	429a      	cmp	r2, r3
 8000eb6:	db8e      	blt.n	8000dd6 <kalmanFilterC+0xce>
	}

	avgIn = avgIn/(float)length;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	ee07 3a90 	vmov	s15, r3
 8000ebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ec2:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8000ec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000eca:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	avgOut = avgOut/(float)length;
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	ee07 3a90 	vmov	s15, r3
 8000ed4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed8:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8000edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ee0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	avgDiff = avgDiff/(float)length;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eee:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8000ef2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38

	float varDiff = sumSqDev(diffArray, avgDiff, length) / (float)length;
 8000efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000efc:	6839      	ldr	r1, [r7, #0]
 8000efe:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8000f02:	4618      	mov	r0, r3
 8000f04:	f000 f838 	bl	8000f78 <sumSqDev>
 8000f08:	eef0 6a40 	vmov.f32	s13, s0
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f1a:	edc7 7a07 	vstr	s15, [r7, #28]
	float stdDiff = powf(varDiff, 0.5);
 8000f1e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000f22:	ed97 0a07 	vldr	s0, [r7, #28]
 8000f26:	f005 fc07 	bl	8006738 <powf>
 8000f2a:	ed87 0a06 	vstr	s0, [r7, #24]
	float correlation = corrC(InputArray, OutputArray, avgIn, avgOut, length);
 8000f2e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8000f32:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000f36:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8000f3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	ee17 3a90 	vmov	r3, s15
 8000f46:	ee17 2a10 	vmov	r2, s14
 8000f4a:	68b9      	ldr	r1, [r7, #8]
 8000f4c:	68f8      	ldr	r0, [r7, #12]
 8000f4e:	f000 f847 	bl	8000fe0 <corrC>
 8000f52:	ed87 0a05 	vstr	s0, [r7, #20]

	convC(InputArray, OutputArray, convArray, length, length);
 8000f56:	6a3a      	ldr	r2, [r7, #32]
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	9300      	str	r3, [sp, #0]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68b9      	ldr	r1, [r7, #8]
 8000f60:	68f8      	ldr	r0, [r7, #12]
 8000f62:	f000 f8ab 	bl	80010bc <convC>

	return 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	46ad      	mov	sp, r5
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3740      	adds	r7, #64	; 0x40
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bdb0      	pop	{r4, r5, r7, pc}
 8000f72:	bf00      	nop
 8000f74:	7f7fffff 	.word	0x7f7fffff

08000f78 <sumSqDev>:

float sumSqDev (float* inputArray, float avg, int length){
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	ed87 0a02 	vstr	s0, [r7, #8]
 8000f84:	6079      	str	r1, [r7, #4]
	float sumSqDev = 0.0;
 8000f86:	f04f 0300 	mov.w	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
	for(int i = 0; i < length; i++){
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	e01a      	b.n	8000fc8 <sumSqDev+0x50>
		sumSqDev += powf(inputArray[i] - avg, 2);
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	4413      	add	r3, r2
 8000f9a:	ed93 7a00 	vldr	s14, [r3]
 8000f9e:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fa6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000faa:	eeb0 0a67 	vmov.f32	s0, s15
 8000fae:	f005 fbc3 	bl	8006738 <powf>
 8000fb2:	eeb0 7a40 	vmov.f32	s14, s0
 8000fb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8000fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000fbe:	edc7 7a05 	vstr	s15, [r7, #20]
	for(int i = 0; i < length; i++){
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	613b      	str	r3, [r7, #16]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbe0      	blt.n	8000f92 <sumSqDev+0x1a>
	}
	return sumSqDev;
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	ee07 3a90 	vmov	s15, r3
}
 8000fd6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fda:	3718      	adds	r7, #24
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <corrC>:

float corrC (float* inputArray1, float* inputArray2, int avg1, int avg2, int length){
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	ed2d 8b02 	vpush	{d8}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
	float corNume = 0.0;
 8000ff2:	f04f 0300 	mov.w	r3, #0
 8000ff6:	61fb      	str	r3, [r7, #28]
	float corDeno = 0.0;
 8000ff8:	f04f 0300 	mov.w	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]

	for(int i = 0; i < length; i++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	e024      	b.n	800104e <corrC+0x6e>
		corNume += (inputArray1[i] - avg1) * (inputArray2[i] - avg2);
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	68fa      	ldr	r2, [r7, #12]
 800100a:	4413      	add	r3, r2
 800100c:	ed93 7a00 	vldr	s14, [r3]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	ee07 3a90 	vmov	s15, r3
 8001016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800101a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800101e:	69bb      	ldr	r3, [r7, #24]
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	68ba      	ldr	r2, [r7, #8]
 8001024:	4413      	add	r3, r2
 8001026:	edd3 6a00 	vldr	s13, [r3]
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001034:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001044:	edc7 7a07 	vstr	s15, [r7, #28]
	for(int i = 0; i < length; i++){
 8001048:	69bb      	ldr	r3, [r7, #24]
 800104a:	3301      	adds	r3, #1
 800104c:	61bb      	str	r3, [r7, #24]
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001052:	429a      	cmp	r2, r3
 8001054:	dbd6      	blt.n	8001004 <corrC+0x24>
	}
	corDeno = powf( (sumSqDev(inputArray1, avg1, length)*sumSqDev(inputArray2, avg2, length)) , 0.5);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001060:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001062:	eeb0 0a67 	vmov.f32	s0, s15
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f7ff ff86 	bl	8000f78 <sumSqDev>
 800106c:	eeb0 8a40 	vmov.f32	s16, s0
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	ee07 3a90 	vmov	s15, r3
 8001076:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800107a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800107c:	eeb0 0a67 	vmov.f32	s0, s15
 8001080:	68b8      	ldr	r0, [r7, #8]
 8001082:	f7ff ff79 	bl	8000f78 <sumSqDev>
 8001086:	eef0 7a40 	vmov.f32	s15, s0
 800108a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800108e:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001092:	eeb0 0a67 	vmov.f32	s0, s15
 8001096:	f005 fb4f 	bl	8006738 <powf>
 800109a:	ed87 0a05 	vstr	s0, [r7, #20]

	return corNume/corDeno;
 800109e:	ed97 7a07 	vldr	s14, [r7, #28]
 80010a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010a6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010aa:	eef0 7a66 	vmov.f32	s15, s13
}
 80010ae:	eeb0 0a67 	vmov.f32	s0, s15
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	ecbd 8b02 	vpop	{d8}
 80010ba:	bd80      	pop	{r7, pc}

080010bc <convC>:

int convC (float* inputArrayL, float* inputArrayS, float* convolvedArray, int lengthL, int lengthS){
 80010bc:	b480      	push	{r7}
 80010be:	b087      	sub	sp, #28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < lengthS + lengthL -1; i++){
 80010ca:	2300      	movs	r3, #0
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	e03b      	b.n	8001148 <convC+0x8c>
		convolvedArray[i] = 0.0;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4413      	add	r3, r2
 80010d8:	f04f 0200 	mov.w	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
			for (int j = 0; j < lengthL && i>=j ; j++){
 80010de:	2300      	movs	r3, #0
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	e026      	b.n	8001132 <convC+0x76>
				if ((i-j) < lengthS){
 80010e4:	697a      	ldr	r2, [r7, #20]
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	6a3a      	ldr	r2, [r7, #32]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dd1d      	ble.n	800112c <convC+0x70>
					convolvedArray[i] += inputArrayL[j] * inputArrayS[i-j];
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	ed93 7a00 	vldr	s14, [r3]
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	68fa      	ldr	r2, [r7, #12]
 8001102:	4413      	add	r3, r2
 8001104:	edd3 6a00 	vldr	s13, [r3]
 8001108:	697a      	ldr	r2, [r7, #20]
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	68ba      	ldr	r2, [r7, #8]
 8001112:	4413      	add	r3, r2
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4413      	add	r3, r2
 8001124:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001128:	edc3 7a00 	vstr	s15, [r3]
			for (int j = 0; j < lengthL && i>=j ; j++){
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	3301      	adds	r3, #1
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	429a      	cmp	r2, r3
 8001138:	da03      	bge.n	8001142 <convC+0x86>
 800113a:	697a      	ldr	r2, [r7, #20]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	429a      	cmp	r2, r3
 8001140:	dad0      	bge.n	80010e4 <convC+0x28>
	for (int i = 0; i < lengthS + lengthL -1; i++){
 8001142:	697b      	ldr	r3, [r7, #20]
 8001144:	3301      	adds	r3, #1
 8001146:	617b      	str	r3, [r7, #20]
 8001148:	6a3a      	ldr	r2, [r7, #32]
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	4413      	add	r3, r2
 800114e:	3b01      	subs	r3, #1
 8001150:	697a      	ldr	r2, [r7, #20]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbbc      	blt.n	80010d0 <convC+0x14>
				}

			}
		}
	return 0;
 8001156:	2300      	movs	r3, #0
}
 8001158:	4618      	mov	r0, r3
 800115a:	371c      	adds	r7, #28
 800115c:	46bd      	mov	sp, r7
 800115e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001162:	4770      	bx	lr

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b5b0      	push	{r4, r5, r7, lr}
 8001166:	b0f8      	sub	sp, #480	; 0x1e0
 8001168:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116a:	f000 f9f0 	bl	800154e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116e:	f000 f849 	bl	8001204 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 8001172:	f000 f899 	bl	80012a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  struct KalmanState ks = {
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <main+0x8c>)
 8001178:	f507 74e6 	add.w	r4, r7, #460	; 0x1cc
 800117c:	461d      	mov	r5, r3
 800117e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001182:	682b      	ldr	r3, [r5, #0]
 8001184:	6023      	str	r3, [r4, #0]
 		  .r = 0.1,
 		  .x = 5,
 		  .p = 0.1,
 		  .k = 0.0
   };
  struct KalmanState ksZero = {
 8001186:	f04f 0300 	mov.w	r3, #0
 800118a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800118e:	f04f 0300 	mov.w	r3, #0
 8001192:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <main+0x90>)
 8001198:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800119c:	f04f 0300 	mov.w	r3, #0
 80011a0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80011a4:	f04f 0300 	mov.w	r3, #0
 80011a8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
		  .r = 0,
		  .x = 5,
		  .p = 0,
		  .k = 0.0
  };
  struct KalmanState ksOverflow = {
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <main+0x94>)
 80011ae:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 80011b2:	461d      	mov	r5, r3
 80011b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b8:	682b      	ldr	r3, [r5, #0]
 80011ba:	6023      	str	r3, [r4, #0]
  		  .r = 3e38,
  		  .x = 5,
  		  .p = 3e38,
  		  .k = 0.0
    };
  struct KalmanState ksOverflowN = {
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <main+0x98>)
 80011be:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 80011c2:	461d      	mov	r5, r3
 80011c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011c8:	682b      	ldr	r3, [r5, #0]
 80011ca:	6023      	str	r3, [r4, #0]
  		  .x = 5,
  		  .p = -3e38,
  		  .k = 0.0
    };

  float numpyrandom[50] = { 1.2405287 , -0.58042162, -4.65508137, -0.94511273,  4.9037651 ,
 80011cc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80011d0:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <main+0x9c>)
 80011d2:	4618      	mov	r0, r3
 80011d4:	4611      	mov	r1, r2
 80011d6:	23c8      	movs	r3, #200	; 0xc8
 80011d8:	461a      	mov	r2, r3
 80011da:	f001 fd6b 	bl	8002cb4 <memcpy>
          4.10534337, -4.64439689, -3.8368672 , -0.884305  ,  4.76713073,
         -2.0377844 ,  1.52194299, -0.33423315,  0.9391162 , -4.69648876};

  float blankslate[50];

  kalmanFilterC(numpyrandom, blankslate, &ks, 50);
 80011de:	f507 72e6 	add.w	r2, r7, #460	; 0x1cc
 80011e2:	4639      	mov	r1, r7
 80011e4:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80011e8:	2332      	movs	r3, #50	; 0x32
 80011ea:	f7ff fd8d 	bl	8000d08 <kalmanFilterC>
//  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ee:	e7fe      	b.n	80011ee <main+0x8a>
 80011f0:	08007150 	.word	0x08007150
 80011f4:	40a00000 	.word	0x40a00000
 80011f8:	08007164 	.word	0x08007164
 80011fc:	08007178 	.word	0x08007178
 8001200:	0800718c 	.word	0x0800718c

08001204 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b096      	sub	sp, #88	; 0x58
 8001208:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	2244      	movs	r2, #68	; 0x44
 8001210:	2100      	movs	r1, #0
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fd59 	bl	8002cca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001218:	463b      	mov	r3, r7
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8001226:	2000      	movs	r0, #0
 8001228:	f000 fb0c 	bl	8001844 <HAL_PWREx_ControlVoltageScaling>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8001232:	f000 f887 	bl	8001344 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001236:	2310      	movs	r3, #16
 8001238:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800123a:	2301      	movs	r3, #1
 800123c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800123e:	2300      	movs	r3, #0
 8001240:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001242:	2360      	movs	r3, #96	; 0x60
 8001244:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001246:	2302      	movs	r3, #2
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800124a:	2301      	movs	r3, #1
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800124e:	2301      	movs	r3, #1
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8001252:	233c      	movs	r3, #60	; 0x3c
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800125a:	2302      	movs	r3, #2
 800125c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800125e:	2302      	movs	r3, #2
 8001260:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4618      	mov	r0, r3
 8001268:	f000 fb90 	bl	800198c <HAL_RCC_OscConfig>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001272:	f000 f867 	bl	8001344 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001276:	230f      	movs	r3, #15
 8001278:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800127a:	2303      	movs	r3, #3
 800127c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800128a:	463b      	mov	r3, r7
 800128c:	2105      	movs	r1, #5
 800128e:	4618      	mov	r0, r3
 8001290:	f000 ffa2 	bl	80021d8 <HAL_RCC_ClockConfig>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800129a:	f000 f853 	bl	8001344 <Error_Handler>
  }
}
 800129e:	bf00      	nop
 80012a0:	3758      	adds	r7, #88	; 0x58
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b088      	sub	sp, #32
 80012ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ae:	f107 0310 	add.w	r3, r7, #16
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
 80012b6:	605a      	str	r2, [r3, #4]
 80012b8:	609a      	str	r2, [r3, #8]
 80012ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012bc:	1d3b      	adds	r3, r7, #4
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_TIM2_Init+0x98>)
 80012c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 60000;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_TIM2_Init+0x98>)
 80012d0:	f64e 2260 	movw	r2, #60000	; 0xea60
 80012d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d6:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_TIM2_Init+0x98>)
 80012d8:	2200      	movs	r2, #0
 80012da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2000;
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <MX_TIM2_Init+0x98>)
 80012de:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <MX_TIM2_Init+0x98>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <MX_TIM2_Init+0x98>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <MX_TIM2_Init+0x98>)
 80012f2:	f001 f9e9 	bl	80026c8 <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012fc:	f000 f822 	bl	8001344 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001304:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	4619      	mov	r1, r3
 800130c:	480c      	ldr	r0, [pc, #48]	; (8001340 <MX_TIM2_Init+0x98>)
 800130e:	f001 fa32 	bl	8002776 <HAL_TIM_ConfigClockSource>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8001318:	f000 f814 	bl	8001344 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	4619      	mov	r1, r3
 8001328:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_TIM2_Init+0x98>)
 800132a:	f001 fc11 	bl	8002b50 <HAL_TIMEx_MasterConfigSynchronization>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001334:	f000 f806 	bl	8001344 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	3720      	adds	r7, #32
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000208 	.word	0x20000208

08001344 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001348:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800134a:	e7fe      	b.n	800134a <Error_Handler+0x6>

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x44>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_MspInit+0x44>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6613      	str	r3, [r2, #96]	; 0x60
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_MspInit+0x44>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_MspInit+0x44>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_MspInit+0x44>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6593      	str	r3, [r2, #88]	; 0x58
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_MspInit+0x44>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001394:	b480      	push	{r7}
 8001396:	b085      	sub	sp, #20
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a4:	d10b      	bne.n	80013be <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013a6:	4b09      	ldr	r3, [pc, #36]	; (80013cc <HAL_TIM_Base_MspInit+0x38>)
 80013a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013aa:	4a08      	ldr	r2, [pc, #32]	; (80013cc <HAL_TIM_Base_MspInit+0x38>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6593      	str	r3, [r2, #88]	; 0x58
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_TIM_Base_MspInit+0x38>)
 80013b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80013be:	bf00      	nop
 80013c0:	3714      	adds	r7, #20
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000

080013d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler+0x4>

080013d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <HardFault_Handler+0x4>

080013dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <MemManage_Handler+0x4>

080013e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <BusFault_Handler+0x4>

080013e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler+0x4>

080013ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr

0800140a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800140a:	b480      	push	{r7}
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800140e:	bf00      	nop
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800141c:	f000 f8ec 	bl	80015f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	bd80      	pop	{r7, pc}

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f001 fc04 	bl	8002c60 <__errno>
 8001458:	4602      	mov	r2, r0
 800145a:	230c      	movs	r3, #12
 800145c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	200a0000 	.word	0x200a0000
 8001484:	00000400 	.word	0x00000400
 8001488:	200001fc 	.word	0x200001fc
 800148c:	20000260 	.word	0x20000260

08001490 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001494:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <SystemInit+0x64>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a16      	ldr	r2, [pc, #88]	; (80014f4 <SystemInit+0x64>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80014a4:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <SystemInit+0x68>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <SystemInit+0x68>)
 80014aa:	f043 0301 	orr.w	r3, r3, #1
 80014ae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <SystemInit+0x68>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <SystemInit+0x68>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a0f      	ldr	r2, [pc, #60]	; (80014f8 <SystemInit+0x68>)
 80014bc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80014c0:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80014c4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80014c6:	4b0c      	ldr	r3, [pc, #48]	; (80014f8 <SystemInit+0x68>)
 80014c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014cc:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014ce:	4b0a      	ldr	r3, [pc, #40]	; (80014f8 <SystemInit+0x68>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a09      	ldr	r2, [pc, #36]	; (80014f8 <SystemInit+0x68>)
 80014d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d8:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <SystemInit+0x68>)
 80014dc:	2200      	movs	r2, #0
 80014de:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SystemInit+0x64>)
 80014e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014e6:	609a      	str	r2, [r3, #8]
#endif
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	e000ed00 	.word	0xe000ed00
 80014f8:	40021000 	.word	0x40021000

080014fc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001534 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001500:	f7ff ffc6 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001504:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001506:	e003      	b.n	8001510 <LoopCopyDataInit>

08001508 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001508:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800150a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800150c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800150e:	3104      	adds	r1, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001510:	480a      	ldr	r0, [pc, #40]	; (800153c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001514:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001516:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001518:	d3f6      	bcc.n	8001508 <CopyDataInit>
	ldr	r2, =_sbss
 800151a:	4a0a      	ldr	r2, [pc, #40]	; (8001544 <LoopForever+0x12>)
	b	LoopFillZerobss
 800151c:	e002      	b.n	8001524 <LoopFillZerobss>

0800151e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800151e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001520:	f842 3b04 	str.w	r3, [r2], #4

08001524 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <LoopForever+0x16>)
	cmp	r2, r3
 8001526:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001528:	d3f9      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800152a:	f001 fb9f 	bl	8002c6c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800152e:	f7ff fe19 	bl	8001164 <main>

08001532 <LoopForever>:

LoopForever:
    b LoopForever
 8001532:	e7fe      	b.n	8001532 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001534:	200a0000 	.word	0x200a0000
	ldr	r3, =_sidata
 8001538:	08007574 	.word	0x08007574
	ldr	r0, =_sdata
 800153c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001540:	200001e0 	.word	0x200001e0
	ldr	r2, =_sbss
 8001544:	200001e0 	.word	0x200001e0
	ldr	r3, = _ebss
 8001548:	2000025c 	.word	0x2000025c

0800154c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800154c:	e7fe      	b.n	800154c <ADC1_IRQHandler>

0800154e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001554:	2300      	movs	r3, #0
 8001556:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f91f 	bl	800179c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800155e:	2000      	movs	r0, #0
 8001560:	f000 f80e 	bl	8001580 <HAL_InitTick>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d002      	beq.n	8001570 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	71fb      	strb	r3, [r7, #7]
 800156e:	e001      	b.n	8001574 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001570:	f7ff feec 	bl	800134c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001574:	79fb      	ldrb	r3, [r7, #7]
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
	...

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001588:	2300      	movs	r3, #0
 800158a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_InitTick+0x6c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d023      	beq.n	80015dc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001594:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_InitTick+0x70>)
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	4b14      	ldr	r3, [pc, #80]	; (80015ec <HAL_InitTick+0x6c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	4619      	mov	r1, r3
 800159e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015aa:	4618      	mov	r0, r3
 80015ac:	f000 f91d 	bl	80017ea <HAL_SYSTICK_Config>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d10f      	bne.n	80015d6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2b0f      	cmp	r3, #15
 80015ba:	d809      	bhi.n	80015d0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015bc:	2200      	movs	r2, #0
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	f04f 30ff 	mov.w	r0, #4294967295
 80015c4:	f000 f8f5 	bl	80017b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c8:	4a0a      	ldr	r2, [pc, #40]	; (80015f4 <HAL_InitTick+0x74>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e007      	b.n	80015e0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	73fb      	strb	r3, [r7, #15]
 80015d4:	e004      	b.n	80015e0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	e001      	b.n	80015e0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000008 	.word	0x20000008
 80015f0:	20000000 	.word	0x20000000
 80015f4:	20000004 	.word	0x20000004

080015f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <HAL_IncTick+0x20>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	461a      	mov	r2, r3
 8001602:	4b06      	ldr	r3, [pc, #24]	; (800161c <HAL_IncTick+0x24>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4413      	add	r3, r2
 8001608:	4a04      	ldr	r2, [pc, #16]	; (800161c <HAL_IncTick+0x24>)
 800160a:	6013      	str	r3, [r2, #0]
}
 800160c:	bf00      	nop
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	20000008 	.word	0x20000008
 800161c:	20000254 	.word	0x20000254

08001620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_GetTick+0x14>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000254 	.word	0x20000254

08001638 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800164e:	68ba      	ldr	r2, [r7, #8]
 8001650:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001654:	4013      	ands	r3, r2
 8001656:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001660:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001664:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001668:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <__NVIC_SetPriorityGrouping+0x44>)
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	60d3      	str	r3, [r2, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <__NVIC_GetPriorityGrouping+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	0a1b      	lsrs	r3, r3, #8
 800168a:	f003 0307 	and.w	r3, r3, #7
}
 800168e:	4618      	mov	r0, r3
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	6039      	str	r1, [r7, #0]
 80016a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	db0a      	blt.n	80016c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	490c      	ldr	r1, [pc, #48]	; (80016e8 <__NVIC_SetPriority+0x4c>)
 80016b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ba:	0112      	lsls	r2, r2, #4
 80016bc:	b2d2      	uxtb	r2, r2
 80016be:	440b      	add	r3, r1
 80016c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016c4:	e00a      	b.n	80016dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4908      	ldr	r1, [pc, #32]	; (80016ec <__NVIC_SetPriority+0x50>)
 80016cc:	79fb      	ldrb	r3, [r7, #7]
 80016ce:	f003 030f 	and.w	r3, r3, #15
 80016d2:	3b04      	subs	r3, #4
 80016d4:	0112      	lsls	r2, r2, #4
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	440b      	add	r3, r1
 80016da:	761a      	strb	r2, [r3, #24]
}
 80016dc:	bf00      	nop
 80016de:	370c      	adds	r7, #12
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000e100 	.word	0xe000e100
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b089      	sub	sp, #36	; 0x24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	60f8      	str	r0, [r7, #12]
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	f1c3 0307 	rsb	r3, r3, #7
 800170a:	2b04      	cmp	r3, #4
 800170c:	bf28      	it	cs
 800170e:	2304      	movcs	r3, #4
 8001710:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3304      	adds	r3, #4
 8001716:	2b06      	cmp	r3, #6
 8001718:	d902      	bls.n	8001720 <NVIC_EncodePriority+0x30>
 800171a:	69fb      	ldr	r3, [r7, #28]
 800171c:	3b03      	subs	r3, #3
 800171e:	e000      	b.n	8001722 <NVIC_EncodePriority+0x32>
 8001720:	2300      	movs	r3, #0
 8001722:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	f04f 32ff 	mov.w	r2, #4294967295
 8001728:	69bb      	ldr	r3, [r7, #24]
 800172a:	fa02 f303 	lsl.w	r3, r2, r3
 800172e:	43da      	mvns	r2, r3
 8001730:	68bb      	ldr	r3, [r7, #8]
 8001732:	401a      	ands	r2, r3
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001738:	f04f 31ff 	mov.w	r1, #4294967295
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	fa01 f303 	lsl.w	r3, r1, r3
 8001742:	43d9      	mvns	r1, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	4313      	orrs	r3, r2
         );
}
 800174a:	4618      	mov	r0, r3
 800174c:	3724      	adds	r7, #36	; 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
	...

08001758 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b082      	sub	sp, #8
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3b01      	subs	r3, #1
 8001764:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001768:	d301      	bcc.n	800176e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800176a:	2301      	movs	r3, #1
 800176c:	e00f      	b.n	800178e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800176e:	4a0a      	ldr	r2, [pc, #40]	; (8001798 <SysTick_Config+0x40>)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	3b01      	subs	r3, #1
 8001774:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001776:	210f      	movs	r1, #15
 8001778:	f04f 30ff 	mov.w	r0, #4294967295
 800177c:	f7ff ff8e 	bl	800169c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001780:	4b05      	ldr	r3, [pc, #20]	; (8001798 <SysTick_Config+0x40>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <SysTick_Config+0x40>)
 8001788:	2207      	movs	r2, #7
 800178a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	e000e010 	.word	0xe000e010

0800179c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b082      	sub	sp, #8
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	f7ff ff47 	bl	8001638 <__NVIC_SetPriorityGrouping>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}

080017b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017b2:	b580      	push	{r7, lr}
 80017b4:	b086      	sub	sp, #24
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	4603      	mov	r3, r0
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
 80017be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017c4:	f7ff ff5c 	bl	8001680 <__NVIC_GetPriorityGrouping>
 80017c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	68b9      	ldr	r1, [r7, #8]
 80017ce:	6978      	ldr	r0, [r7, #20]
 80017d0:	f7ff ff8e 	bl	80016f0 <NVIC_EncodePriority>
 80017d4:	4602      	mov	r2, r0
 80017d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff5d 	bl	800169c <__NVIC_SetPriority>
}
 80017e2:	bf00      	nop
 80017e4:	3718      	adds	r7, #24
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b082      	sub	sp, #8
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7ff ffb0 	bl	8001758 <SysTick_Config>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001808:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_PWREx_GetVoltageRange+0x3c>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001814:	d102      	bne.n	800181c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001816:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181a:	e00b      	b.n	8001834 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <HAL_PWREx_GetVoltageRange+0x3c>)
 800181e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800182a:	d102      	bne.n	8001832 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800182c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001830:	e000      	b.n	8001834 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001832:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40007000 	.word	0x40007000

08001844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d141      	bne.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001852:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d131      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001866:	4a46      	ldr	r2, [pc, #280]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001870:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001878:	4a41      	ldr	r2, [pc, #260]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2232      	movs	r2, #50	; 0x32
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001896:	e002      	b.n	800189e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3b01      	subs	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018aa:	d102      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f2      	bne.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018be:	d158      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e057      	b.n	8001974 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018c4:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ca:	4a2d      	ldr	r2, [pc, #180]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018d4:	e04d      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018dc:	d141      	bne.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018de:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d131      	bne.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f2:	4a23      	ldr	r2, [pc, #140]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2232      	movs	r2, #50	; 0x32
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	0c9b      	lsrs	r3, r3, #18
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001922:	e002      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3b01      	subs	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001936:	d102      	bne.n	800193e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f2      	bne.n	8001924 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194a:	d112      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e011      	b.n	8001974 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001960:	e007      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001970:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40007000 	.word	0x40007000
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83

0800198c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b088      	sub	sp, #32
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d102      	bne.n	80019a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	f000 bc16 	b.w	80021cc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019a0:	4ba0      	ldr	r3, [pc, #640]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019aa:	4b9e      	ldr	r3, [pc, #632]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	f003 0303 	and.w	r3, r3, #3
 80019b2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0310 	and.w	r3, r3, #16
 80019bc:	2b00      	cmp	r3, #0
 80019be:	f000 80e4 	beq.w	8001b8a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80019c2:	69bb      	ldr	r3, [r7, #24]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d007      	beq.n	80019d8 <HAL_RCC_OscConfig+0x4c>
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	2b0c      	cmp	r3, #12
 80019cc:	f040 808b 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	f040 8087 	bne.w	8001ae6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80019d8:	4b92      	ldr	r3, [pc, #584]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_OscConfig+0x64>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d101      	bne.n	80019f0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e3ed      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a1a      	ldr	r2, [r3, #32]
 80019f4:	4b8b      	ldr	r3, [pc, #556]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0308 	and.w	r3, r3, #8
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <HAL_RCC_OscConfig+0x7e>
 8001a00:	4b88      	ldr	r3, [pc, #544]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a08:	e005      	b.n	8001a16 <HAL_RCC_OscConfig+0x8a>
 8001a0a:	4b86      	ldr	r3, [pc, #536]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a10:	091b      	lsrs	r3, r3, #4
 8001a12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d223      	bcs.n	8001a62 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 fd90 	bl	8002544 <RCC_SetFlashLatencyFromMSIRange>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e3ce      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a2e:	4b7d      	ldr	r3, [pc, #500]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a7c      	ldr	r2, [pc, #496]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a34:	f043 0308 	orr.w	r3, r3, #8
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	4b7a      	ldr	r3, [pc, #488]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	4977      	ldr	r1, [pc, #476]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a4c:	4b75      	ldr	r3, [pc, #468]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	021b      	lsls	r3, r3, #8
 8001a5a:	4972      	ldr	r1, [pc, #456]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
 8001a60:	e025      	b.n	8001aae <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a62:	4b70      	ldr	r3, [pc, #448]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a6f      	ldr	r2, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a68:	f043 0308 	orr.w	r3, r3, #8
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b6d      	ldr	r3, [pc, #436]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6a1b      	ldr	r3, [r3, #32]
 8001a7a:	496a      	ldr	r1, [pc, #424]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a80:	4b68      	ldr	r3, [pc, #416]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	69db      	ldr	r3, [r3, #28]
 8001a8c:	021b      	lsls	r3, r3, #8
 8001a8e:	4965      	ldr	r1, [pc, #404]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d109      	bne.n	8001aae <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a1b      	ldr	r3, [r3, #32]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fd50 	bl	8002544 <RCC_SetFlashLatencyFromMSIRange>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	e38e      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001aae:	f000 fcbf 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 8001ab2:	4601      	mov	r1, r0
 8001ab4:	4b5b      	ldr	r3, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	091b      	lsrs	r3, r3, #4
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <HAL_RCC_OscConfig+0x29c>)
 8001ac0:	5cd3      	ldrb	r3, [r2, r3]
 8001ac2:	f003 031f 	and.w	r3, r3, #31
 8001ac6:	fa21 f303 	lsr.w	r3, r1, r3
 8001aca:	4a58      	ldr	r2, [pc, #352]	; (8001c2c <HAL_RCC_OscConfig+0x2a0>)
 8001acc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ace:	4b58      	ldr	r3, [pc, #352]	; (8001c30 <HAL_RCC_OscConfig+0x2a4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff fd54 	bl	8001580 <HAL_InitTick>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d052      	beq.n	8001b88 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	e372      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d032      	beq.n	8001b54 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001aee:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a4c      	ldr	r2, [pc, #304]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001afa:	f7ff fd91 	bl	8001620 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b02:	f7ff fd8d 	bl	8001620 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e35b      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b14:	4b43      	ldr	r3, [pc, #268]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d0f0      	beq.n	8001b02 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b20:	4b40      	ldr	r3, [pc, #256]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a3f      	ldr	r2, [pc, #252]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b26:	f043 0308 	orr.w	r3, r3, #8
 8001b2a:	6013      	str	r3, [r2, #0]
 8001b2c:	4b3d      	ldr	r3, [pc, #244]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6a1b      	ldr	r3, [r3, #32]
 8001b38:	493a      	ldr	r1, [pc, #232]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b3e:	4b39      	ldr	r3, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	4935      	ldr	r1, [pc, #212]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	604b      	str	r3, [r1, #4]
 8001b52:	e01a      	b.n	8001b8a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001b54:	4b33      	ldr	r3, [pc, #204]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a32      	ldr	r2, [pc, #200]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b5a:	f023 0301 	bic.w	r3, r3, #1
 8001b5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b60:	f7ff fd5e 	bl	8001620 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b68:	f7ff fd5a 	bl	8001620 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e328      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b7a:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1f0      	bne.n	8001b68 <HAL_RCC_OscConfig+0x1dc>
 8001b86:	e000      	b.n	8001b8a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b88:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d073      	beq.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d005      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x21c>
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d10e      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d10b      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	4b1e      	ldr	r3, [pc, #120]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d063      	beq.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d15f      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	e305      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bc8:	d106      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x24c>
 8001bca:	4b16      	ldr	r3, [pc, #88]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a15      	ldr	r2, [pc, #84]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd4:	6013      	str	r3, [r2, #0]
 8001bd6:	e01d      	b.n	8001c14 <HAL_RCC_OscConfig+0x288>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001be0:	d10c      	bne.n	8001bfc <HAL_RCC_OscConfig+0x270>
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001be8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bec:	6013      	str	r3, [r2, #0]
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	e00b      	b.n	8001c14 <HAL_RCC_OscConfig+0x288>
 8001bfc:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <HAL_RCC_OscConfig+0x298>)
 8001c0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c12:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d01b      	beq.n	8001c54 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1c:	f7ff fd00 	bl	8001620 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c22:	e010      	b.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
 8001c24:	40021000 	.word	0x40021000
 8001c28:	08007254 	.word	0x08007254
 8001c2c:	20000000 	.word	0x20000000
 8001c30:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fcf4 	bl	8001620 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e2c2      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c46:	4baf      	ldr	r3, [pc, #700]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0x2a8>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff fce4 	bl	8001620 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fce0 	bl	8001620 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e2ae      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c6e:	4ba5      	ldr	r3, [pc, #660]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x2d0>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d060      	beq.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c8a:	69bb      	ldr	r3, [r7, #24]
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	d005      	beq.n	8001c9c <HAL_RCC_OscConfig+0x310>
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	2b0c      	cmp	r3, #12
 8001c94:	d119      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d116      	bne.n	8001cca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c9c:	4b99      	ldr	r3, [pc, #612]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x328>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e28b      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cb4:	4b93      	ldr	r3, [pc, #588]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	061b      	lsls	r3, r3, #24
 8001cc2:	4990      	ldr	r1, [pc, #576]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cc8:	e040      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d023      	beq.n	8001d1a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cd2:	4b8c      	ldr	r3, [pc, #560]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a8b      	ldr	r2, [pc, #556]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cde:	f7ff fc9f 	bl	8001620 <HAL_GetTick>
 8001ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce4:	e008      	b.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce6:	f7ff fc9b 	bl	8001620 <HAL_GetTick>
 8001cea:	4602      	mov	r2, r0
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	1ad3      	subs	r3, r2, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d901      	bls.n	8001cf8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	e269      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cf8:	4b82      	ldr	r3, [pc, #520]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d0f0      	beq.n	8001ce6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b7f      	ldr	r3, [pc, #508]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	497c      	ldr	r1, [pc, #496]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
 8001d18:	e018      	b.n	8001d4c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d1a:	4b7a      	ldr	r3, [pc, #488]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a79      	ldr	r2, [pc, #484]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d26:	f7ff fc7b 	bl	8001620 <HAL_GetTick>
 8001d2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d2e:	f7ff fc77 	bl	8001620 <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	693b      	ldr	r3, [r7, #16]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e245      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d40:	4b70      	ldr	r3, [pc, #448]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1f0      	bne.n	8001d2e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0308 	and.w	r3, r3, #8
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d03c      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	695b      	ldr	r3, [r3, #20]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d01c      	beq.n	8001d9a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d60:	4b68      	ldr	r3, [pc, #416]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d66:	4a67      	ldr	r2, [pc, #412]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff fc56 	bl	8001620 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff fc52 	bl	8001620 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e220      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d8a:	4b5e      	ldr	r3, [pc, #376]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ef      	beq.n	8001d78 <HAL_RCC_OscConfig+0x3ec>
 8001d98:	e01b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9a:	4b5a      	ldr	r3, [pc, #360]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da0:	4a58      	ldr	r2, [pc, #352]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001da2:	f023 0301 	bic.w	r3, r3, #1
 8001da6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001daa:	f7ff fc39 	bl	8001620 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001db2:	f7ff fc35 	bl	8001620 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e203      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001dc4:	4b4f      	ldr	r3, [pc, #316]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001dc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1ef      	bne.n	8001db2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	f000 80a6 	beq.w	8001f2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de0:	2300      	movs	r3, #0
 8001de2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001de4:	4b47      	ldr	r3, [pc, #284]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10d      	bne.n	8001e0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df0:	4b44      	ldr	r3, [pc, #272]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df4:	4a43      	ldr	r2, [pc, #268]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001df6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfc:	4b41      	ldr	r3, [pc, #260]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e04:	60bb      	str	r3, [r7, #8]
 8001e06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0c:	4b3e      	ldr	r3, [pc, #248]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d118      	bne.n	8001e4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e18:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3a      	ldr	r2, [pc, #232]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e24:	f7ff fbfc 	bl	8001620 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7ff fbf8 	bl	8001620 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e1c6      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3e:	4b32      	ldr	r3, [pc, #200]	; (8001f08 <HAL_RCC_OscConfig+0x57c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d0f0      	beq.n	8001e2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d108      	bne.n	8001e64 <HAL_RCC_OscConfig+0x4d8>
 8001e52:	4b2c      	ldr	r3, [pc, #176]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e58:	4a2a      	ldr	r2, [pc, #168]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e62:	e024      	b.n	8001eae <HAL_RCC_OscConfig+0x522>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	2b05      	cmp	r3, #5
 8001e6a:	d110      	bne.n	8001e8e <HAL_RCC_OscConfig+0x502>
 8001e6c:	4b25      	ldr	r3, [pc, #148]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e72:	4a24      	ldr	r2, [pc, #144]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e74:	f043 0304 	orr.w	r3, r3, #4
 8001e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7c:	4b21      	ldr	r3, [pc, #132]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a20      	ldr	r2, [pc, #128]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8c:	e00f      	b.n	8001eae <HAL_RCC_OscConfig+0x522>
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001e96:	f023 0301 	bic.w	r3, r3, #1
 8001e9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9e:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea4:	4a17      	ldr	r2, [pc, #92]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001ea6:	f023 0304 	bic.w	r3, r3, #4
 8001eaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d016      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb6:	f7ff fbb3 	bl	8001620 <HAL_GetTick>
 8001eba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ebc:	e00a      	b.n	8001ed4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebe:	f7ff fbaf 	bl	8001620 <HAL_GetTick>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	1ad3      	subs	r3, r2, r3
 8001ec8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e17b      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <HAL_RCC_OscConfig+0x578>)
 8001ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eda:	f003 0302 	and.w	r3, r3, #2
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0ed      	beq.n	8001ebe <HAL_RCC_OscConfig+0x532>
 8001ee2:	e01a      	b.n	8001f1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee4:	f7ff fb9c 	bl	8001620 <HAL_GetTick>
 8001ee8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eea:	e00f      	b.n	8001f0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eec:	f7ff fb98 	bl	8001620 <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d906      	bls.n	8001f0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e164      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f0c:	4ba8      	ldr	r3, [pc, #672]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1e8      	bne.n	8001eec <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1a:	7ffb      	ldrb	r3, [r7, #31]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d105      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f20:	4ba3      	ldr	r3, [pc, #652]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	4aa2      	ldr	r2, [pc, #648]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001f26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 0320 	and.w	r3, r3, #32
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d03c      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d01c      	beq.n	8001f7a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f40:	4b9b      	ldr	r3, [pc, #620]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001f42:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f46:	4a9a      	ldr	r2, [pc, #616]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f50:	f7ff fb66 	bl	8001620 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f58:	f7ff fb62 	bl	8001620 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e130      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f6a:	4b91      	ldr	r3, [pc, #580]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001f6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0ef      	beq.n	8001f58 <HAL_RCC_OscConfig+0x5cc>
 8001f78:	e01b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f7a:	4b8d      	ldr	r3, [pc, #564]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f80:	4a8b      	ldr	r2, [pc, #556]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001f82:	f023 0301 	bic.w	r3, r3, #1
 8001f86:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8a:	f7ff fb49 	bl	8001620 <HAL_GetTick>
 8001f8e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f92:	f7ff fb45 	bl	8001620 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e113      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fa4:	4b82      	ldr	r3, [pc, #520]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ef      	bne.n	8001f92 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 8107 	beq.w	80021ca <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	f040 80cb 	bne.w	800215c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fc6:	4b7a      	ldr	r3, [pc, #488]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	f003 0203 	and.w	r2, r3, #3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d12c      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe4:	3b01      	subs	r3, #1
 8001fe6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d123      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d11b      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002006:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002008:	429a      	cmp	r2, r3
 800200a:	d113      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002016:	085b      	lsrs	r3, r3, #1
 8002018:	3b01      	subs	r3, #1
 800201a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800201c:	429a      	cmp	r2, r3
 800201e:	d109      	bne.n	8002034 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	085b      	lsrs	r3, r3, #1
 800202c:	3b01      	subs	r3, #1
 800202e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d06d      	beq.n	8002110 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d068      	beq.n	800210c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800203a:	4b5d      	ldr	r3, [pc, #372]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002042:	2b00      	cmp	r3, #0
 8002044:	d105      	bne.n	8002052 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002046:	4b5a      	ldr	r3, [pc, #360]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e0ba      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002056:	4b56      	ldr	r3, [pc, #344]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a55      	ldr	r2, [pc, #340]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 800205c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002060:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002062:	f7ff fadd 	bl	8001620 <HAL_GetTick>
 8002066:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002068:	e008      	b.n	800207c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800206a:	f7ff fad9 	bl	8001620 <HAL_GetTick>
 800206e:	4602      	mov	r2, r0
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	1ad3      	subs	r3, r2, r3
 8002074:	2b02      	cmp	r3, #2
 8002076:	d901      	bls.n	800207c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002078:	2303      	movs	r3, #3
 800207a:	e0a7      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800207c:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1f0      	bne.n	800206a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002088:	4b49      	ldr	r3, [pc, #292]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 800208a:	68da      	ldr	r2, [r3, #12]
 800208c:	4b49      	ldr	r3, [pc, #292]	; (80021b4 <HAL_RCC_OscConfig+0x828>)
 800208e:	4013      	ands	r3, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002098:	3a01      	subs	r2, #1
 800209a:	0112      	lsls	r2, r2, #4
 800209c:	4311      	orrs	r1, r2
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020a2:	0212      	lsls	r2, r2, #8
 80020a4:	4311      	orrs	r1, r2
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020aa:	0852      	lsrs	r2, r2, #1
 80020ac:	3a01      	subs	r2, #1
 80020ae:	0552      	lsls	r2, r2, #21
 80020b0:	4311      	orrs	r1, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020b6:	0852      	lsrs	r2, r2, #1
 80020b8:	3a01      	subs	r2, #1
 80020ba:	0652      	lsls	r2, r2, #25
 80020bc:	4311      	orrs	r1, r2
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020c2:	06d2      	lsls	r2, r2, #27
 80020c4:	430a      	orrs	r2, r1
 80020c6:	493a      	ldr	r1, [pc, #232]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 80020c8:	4313      	orrs	r3, r2
 80020ca:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020cc:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a37      	ldr	r2, [pc, #220]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 80020d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d8:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a34      	ldr	r2, [pc, #208]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 80020de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020e4:	f7ff fa9c 	bl	8001620 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020ec:	f7ff fa98 	bl	8001620 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e066      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020fe:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d0f0      	beq.n	80020ec <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800210a:	e05e      	b.n	80021ca <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e05d      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d156      	bne.n	80021ca <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800211c:	4b24      	ldr	r3, [pc, #144]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a23      	ldr	r2, [pc, #140]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002126:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002128:	4b21      	ldr	r3, [pc, #132]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a20      	ldr	r2, [pc, #128]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 800212e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002132:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002134:	f7ff fa74 	bl	8001620 <HAL_GetTick>
 8002138:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800213a:	e008      	b.n	800214e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213c:	f7ff fa70 	bl	8001620 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e03e      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x7b0>
 800215a:	e036      	b.n	80021ca <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d031      	beq.n	80021c6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002162:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a12      	ldr	r2, [pc, #72]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800216c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d105      	bne.n	8002186 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002180:	f023 0303 	bic.w	r3, r3, #3
 8002184:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002186:	4b0a      	ldr	r3, [pc, #40]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_OscConfig+0x824>)
 800218c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002194:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002196:	f7ff fa43 	bl	8001620 <HAL_GetTick>
 800219a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219c:	e00c      	b.n	80021b8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219e:	f7ff fa3f 	bl	8001620 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d905      	bls.n	80021b8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e00d      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
 80021b0:	40021000 	.word	0x40021000
 80021b4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b8:	4b06      	ldr	r3, [pc, #24]	; (80021d4 <HAL_RCC_OscConfig+0x848>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1ec      	bne.n	800219e <HAL_RCC_OscConfig+0x812>
 80021c4:	e001      	b.n	80021ca <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000

080021d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b086      	sub	sp, #24
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e10f      	b.n	8002410 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f0:	4b89      	ldr	r3, [pc, #548]	; (8002418 <HAL_RCC_ClockConfig+0x240>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 030f 	and.w	r3, r3, #15
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d910      	bls.n	8002220 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b86      	ldr	r3, [pc, #536]	; (8002418 <HAL_RCC_ClockConfig+0x240>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 020f 	bic.w	r2, r3, #15
 8002206:	4984      	ldr	r1, [pc, #528]	; (8002418 <HAL_RCC_ClockConfig+0x240>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b82      	ldr	r3, [pc, #520]	; (8002418 <HAL_RCC_ClockConfig+0x240>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0f7      	b.n	8002410 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8089 	beq.w	8002340 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d133      	bne.n	800229e <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002236:	4b79      	ldr	r3, [pc, #484]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0e4      	b.n	8002410 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002246:	f000 f9d7 	bl	80025f8 <RCC_GetSysClockFreqFromPLLSource>
 800224a:	4602      	mov	r2, r0
 800224c:	4b74      	ldr	r3, [pc, #464]	; (8002420 <HAL_RCC_ClockConfig+0x248>)
 800224e:	429a      	cmp	r2, r3
 8002250:	d955      	bls.n	80022fe <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002252:	4b72      	ldr	r3, [pc, #456]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d10a      	bne.n	8002274 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800225e:	4b6f      	ldr	r3, [pc, #444]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002266:	4a6d      	ldr	r2, [pc, #436]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 8002268:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800226c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800226e:	2380      	movs	r3, #128	; 0x80
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	e044      	b.n	80022fe <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d03e      	beq.n	80022fe <HAL_RCC_ClockConfig+0x126>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d13a      	bne.n	80022fe <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002288:	4b64      	ldr	r3, [pc, #400]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002290:	4a62      	ldr	r2, [pc, #392]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 8002292:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002296:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002298:	2380      	movs	r3, #128	; 0x80
 800229a:	617b      	str	r3, [r7, #20]
 800229c:	e02f      	b.n	80022fe <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022a6:	4b5d      	ldr	r3, [pc, #372]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d115      	bne.n	80022de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0ac      	b.n	8002410 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022be:	4b57      	ldr	r3, [pc, #348]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0a0      	b.n	8002410 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022ce:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e098      	b.n	8002410 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80022de:	f000 f8a7 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <HAL_RCC_ClockConfig+0x248>)
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d909      	bls.n	80022fe <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ea:	4b4c      	ldr	r3, [pc, #304]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022f2:	4a4a      	ldr	r2, [pc, #296]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80022f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f023 0203 	bic.w	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	4944      	ldr	r1, [pc, #272]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 800230c:	4313      	orrs	r3, r2
 800230e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002310:	f7ff f986 	bl	8001620 <HAL_GetTick>
 8002314:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002316:	e00a      	b.n	800232e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002318:	f7ff f982 	bl	8001620 <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	693b      	ldr	r3, [r7, #16]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	f241 3288 	movw	r2, #5000	; 0x1388
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e070      	b.n	8002410 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f003 020c 	and.w	r2, r3, #12
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	429a      	cmp	r2, r3
 800233e:	d1eb      	bne.n	8002318 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d009      	beq.n	8002360 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800234c:	4b33      	ldr	r3, [pc, #204]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4930      	ldr	r1, [pc, #192]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 800235a:	4313      	orrs	r3, r2
 800235c:	608b      	str	r3, [r1, #8]
 800235e:	e008      	b.n	8002372 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	2b80      	cmp	r3, #128	; 0x80
 8002364:	d105      	bne.n	8002372 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002366:	4b2d      	ldr	r3, [pc, #180]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4a2c      	ldr	r2, [pc, #176]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 800236c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002370:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002372:	4b29      	ldr	r3, [pc, #164]	; (8002418 <HAL_RCC_ClockConfig+0x240>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 030f 	and.w	r3, r3, #15
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	429a      	cmp	r2, r3
 800237e:	d210      	bcs.n	80023a2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_RCC_ClockConfig+0x240>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f023 020f 	bic.w	r2, r3, #15
 8002388:	4923      	ldr	r1, [pc, #140]	; (8002418 <HAL_RCC_ClockConfig+0x240>)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002390:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HAL_RCC_ClockConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 030f 	and.w	r3, r3, #15
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e036      	b.n	8002410 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d008      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023ae:	4b1b      	ldr	r3, [pc, #108]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	4918      	ldr	r1, [pc, #96]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0308 	and.w	r3, r3, #8
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d009      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023cc:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	00db      	lsls	r3, r3, #3
 80023da:	4910      	ldr	r1, [pc, #64]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80023e0:	f000 f826 	bl	8002430 <HAL_RCC_GetSysClockFreq>
 80023e4:	4601      	mov	r1, r0
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <HAL_RCC_ClockConfig+0x244>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	091b      	lsrs	r3, r3, #4
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	4a0c      	ldr	r2, [pc, #48]	; (8002424 <HAL_RCC_ClockConfig+0x24c>)
 80023f2:	5cd3      	ldrb	r3, [r2, r3]
 80023f4:	f003 031f 	and.w	r3, r3, #31
 80023f8:	fa21 f303 	lsr.w	r3, r1, r3
 80023fc:	4a0a      	ldr	r2, [pc, #40]	; (8002428 <HAL_RCC_ClockConfig+0x250>)
 80023fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_RCC_ClockConfig+0x254>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff f8bb 	bl	8001580 <HAL_InitTick>
 800240a:	4603      	mov	r3, r0
 800240c:	73fb      	strb	r3, [r7, #15]

  return status;
 800240e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3718      	adds	r7, #24
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	40022000 	.word	0x40022000
 800241c:	40021000 	.word	0x40021000
 8002420:	04c4b400 	.word	0x04c4b400
 8002424:	08007254 	.word	0x08007254
 8002428:	20000000 	.word	0x20000000
 800242c:	20000004 	.word	0x20000004

08002430 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b089      	sub	sp, #36	; 0x24
 8002434:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002436:	2300      	movs	r3, #0
 8002438:	61fb      	str	r3, [r7, #28]
 800243a:	2300      	movs	r3, #0
 800243c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800243e:	4b3d      	ldr	r3, [pc, #244]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f003 030c 	and.w	r3, r3, #12
 8002446:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002448:	4b3a      	ldr	r3, [pc, #232]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	f003 0303 	and.w	r3, r3, #3
 8002450:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_GetSysClockFreq+0x34>
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d121      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d11e      	bne.n	80024a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002464:	4b33      	ldr	r3, [pc, #204]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	0a1b      	lsrs	r3, r3, #8
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e005      	b.n	800248c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002480:	4b2c      	ldr	r3, [pc, #176]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	091b      	lsrs	r3, r3, #4
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800248c:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <HAL_RCC_GetSysClockFreq+0x108>)
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d10d      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024a0:	e00a      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d102      	bne.n	80024ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024a8:	4b24      	ldr	r3, [pc, #144]	; (800253c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024aa:	61bb      	str	r3, [r7, #24]
 80024ac:	e004      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d101      	bne.n	80024b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b4:	4b22      	ldr	r3, [pc, #136]	; (8002540 <HAL_RCC_GetSysClockFreq+0x110>)
 80024b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	2b0c      	cmp	r3, #12
 80024bc:	d133      	bne.n	8002526 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024be:	4b1d      	ldr	r3, [pc, #116]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	f003 0303 	and.w	r3, r3, #3
 80024c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d002      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0xa4>
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d003      	beq.n	80024da <HAL_RCC_GetSysClockFreq+0xaa>
 80024d2:	e005      	b.n	80024e0 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024d4:	4b19      	ldr	r3, [pc, #100]	; (800253c <HAL_RCC_GetSysClockFreq+0x10c>)
 80024d6:	617b      	str	r3, [r7, #20]
      break;
 80024d8:	e005      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80024da:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_RCC_GetSysClockFreq+0x110>)
 80024dc:	617b      	str	r3, [r7, #20]
      break;
 80024de:	e002      	b.n	80024e6 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	617b      	str	r3, [r7, #20]
      break;
 80024e4:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 030f 	and.w	r3, r3, #15
 80024f0:	3301      	adds	r3, #1
 80024f2:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024f4:	4b0f      	ldr	r3, [pc, #60]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	0a1b      	lsrs	r3, r3, #8
 80024fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80024fe:	697a      	ldr	r2, [r7, #20]
 8002500:	fb02 f203 	mul.w	r2, r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800250c:	4b09      	ldr	r3, [pc, #36]	; (8002534 <HAL_RCC_GetSysClockFreq+0x104>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0e5b      	lsrs	r3, r3, #25
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	3301      	adds	r3, #1
 8002518:	005b      	lsls	r3, r3, #1
 800251a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800251c:	697a      	ldr	r2, [r7, #20]
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	fbb2 f3f3 	udiv	r3, r2, r3
 8002524:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002526:	69bb      	ldr	r3, [r7, #24]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3724      	adds	r7, #36	; 0x24
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	40021000 	.word	0x40021000
 8002538:	08007264 	.word	0x08007264
 800253c:	00f42400 	.word	0x00f42400
 8002540:	007a1200 	.word	0x007a1200

08002544 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800254c:	2300      	movs	r3, #0
 800254e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002550:	4b27      	ldr	r3, [pc, #156]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002558:	2b00      	cmp	r3, #0
 800255a:	d003      	beq.n	8002564 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800255c:	f7ff f952 	bl	8001804 <HAL_PWREx_GetVoltageRange>
 8002560:	6178      	str	r0, [r7, #20]
 8002562:	e014      	b.n	800258e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002564:	4b22      	ldr	r3, [pc, #136]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002568:	4a21      	ldr	r2, [pc, #132]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800256a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256e:	6593      	str	r3, [r2, #88]	; 0x58
 8002570:	4b1f      	ldr	r3, [pc, #124]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002578:	60fb      	str	r3, [r7, #12]
 800257a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800257c:	f7ff f942 	bl	8001804 <HAL_PWREx_GetVoltageRange>
 8002580:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002582:	4b1b      	ldr	r3, [pc, #108]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002586:	4a1a      	ldr	r2, [pc, #104]	; (80025f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002588:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800258c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002594:	d10b      	bne.n	80025ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b80      	cmp	r3, #128	; 0x80
 800259a:	d913      	bls.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2ba0      	cmp	r3, #160	; 0xa0
 80025a0:	d902      	bls.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025a2:	2302      	movs	r3, #2
 80025a4:	613b      	str	r3, [r7, #16]
 80025a6:	e00d      	b.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a8:	2301      	movs	r3, #1
 80025aa:	613b      	str	r3, [r7, #16]
 80025ac:	e00a      	b.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b7f      	cmp	r3, #127	; 0x7f
 80025b2:	d902      	bls.n	80025ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80025b4:	2302      	movs	r3, #2
 80025b6:	613b      	str	r3, [r7, #16]
 80025b8:	e004      	b.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2b70      	cmp	r3, #112	; 0x70
 80025be:	d101      	bne.n	80025c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c0:	2301      	movs	r3, #1
 80025c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025c4:	4b0b      	ldr	r3, [pc, #44]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f023 020f 	bic.w	r2, r3, #15
 80025cc:	4909      	ldr	r1, [pc, #36]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	4313      	orrs	r3, r2
 80025d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025d4:	4b07      	ldr	r3, [pc, #28]	; (80025f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d001      	beq.n	80025e6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e000      	b.n	80025e8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40022000 	.word	0x40022000

080025f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 8002602:	4b2d      	ldr	r3, [pc, #180]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	2b01      	cmp	r3, #1
 800260c:	d118      	bne.n	8002640 <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800260e:	4b2a      	ldr	r3, [pc, #168]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d107      	bne.n	800262a <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800261a:	4b27      	ldr	r3, [pc, #156]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800261c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	e005      	b.n	8002636 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800262a:	4b23      	ldr	r3, [pc, #140]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	091b      	lsrs	r3, r3, #4
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002636:	4a21      	ldr	r2, [pc, #132]	; (80026bc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800263e:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002640:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0303 	and.w	r3, r3, #3
 8002648:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d002      	beq.n	8002656 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 8002650:	2b03      	cmp	r3, #3
 8002652:	d003      	beq.n	800265c <RCC_GetSysClockFreqFromPLLSource+0x64>
 8002654:	e005      	b.n	8002662 <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002658:	613b      	str	r3, [r7, #16]
    break;
 800265a:	e005      	b.n	8002668 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800265c:	4b19      	ldr	r3, [pc, #100]	; (80026c4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800265e:	613b      	str	r3, [r7, #16]
    break;
 8002660:	e002      	b.n	8002668 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	613b      	str	r3, [r7, #16]
    break;
 8002666:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002668:	4b13      	ldr	r3, [pc, #76]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	091b      	lsrs	r3, r3, #4
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	3301      	adds	r3, #1
 8002674:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002676:	4b10      	ldr	r3, [pc, #64]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	0a1b      	lsrs	r3, r3, #8
 800267c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	fb02 f203 	mul.w	r2, r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800268e:	4b0a      	ldr	r3, [pc, #40]	; (80026b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	0e5b      	lsrs	r3, r3, #25
 8002694:	f003 0303 	and.w	r3, r3, #3
 8002698:	3301      	adds	r3, #1
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800269e:	693a      	ldr	r2, [r7, #16]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a6:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80026a8:	683b      	ldr	r3, [r7, #0]
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	371c      	adds	r7, #28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	08007264 	.word	0x08007264
 80026c0:	00f42400 	.word	0x00f42400
 80026c4:	007a1200 	.word	0x007a1200

080026c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d101      	bne.n	80026da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e049      	b.n	800276e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d106      	bne.n	80026f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7fe fe50 	bl	8001394 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3304      	adds	r3, #4
 8002704:	4619      	mov	r1, r3
 8002706:	4610      	mov	r0, r2
 8002708:	f000 f8ee 	bl	80028e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2201      	movs	r2, #1
 8002710:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2201      	movs	r2, #1
 8002718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b084      	sub	sp, #16
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002786:	2b01      	cmp	r3, #1
 8002788:	d101      	bne.n	800278e <HAL_TIM_ConfigClockSource+0x18>
 800278a:	2302      	movs	r3, #2
 800278c:	e0a8      	b.n	80028e0 <HAL_TIM_ConfigClockSource+0x16a>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2201      	movs	r2, #1
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80027b0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80027b8:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b40      	cmp	r3, #64	; 0x40
 80027c8:	d067      	beq.n	800289a <HAL_TIM_ConfigClockSource+0x124>
 80027ca:	2b40      	cmp	r3, #64	; 0x40
 80027cc:	d80b      	bhi.n	80027e6 <HAL_TIM_ConfigClockSource+0x70>
 80027ce:	2b10      	cmp	r3, #16
 80027d0:	d073      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x144>
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d802      	bhi.n	80027dc <HAL_TIM_ConfigClockSource+0x66>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d06f      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x144>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80027da:	e078      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d06c      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x144>
 80027e0:	2b30      	cmp	r3, #48	; 0x30
 80027e2:	d06a      	beq.n	80028ba <HAL_TIM_ConfigClockSource+0x144>
      break;
 80027e4:	e073      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80027e6:	2b70      	cmp	r3, #112	; 0x70
 80027e8:	d00d      	beq.n	8002806 <HAL_TIM_ConfigClockSource+0x90>
 80027ea:	2b70      	cmp	r3, #112	; 0x70
 80027ec:	d804      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x82>
 80027ee:	2b50      	cmp	r3, #80	; 0x50
 80027f0:	d033      	beq.n	800285a <HAL_TIM_ConfigClockSource+0xe4>
 80027f2:	2b60      	cmp	r3, #96	; 0x60
 80027f4:	d041      	beq.n	800287a <HAL_TIM_ConfigClockSource+0x104>
      break;
 80027f6:	e06a      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 80027f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027fc:	d066      	beq.n	80028cc <HAL_TIM_ConfigClockSource+0x156>
 80027fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002802:	d017      	beq.n	8002834 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002804:	e063      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6818      	ldr	r0, [r3, #0]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	6899      	ldr	r1, [r3, #8]
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	f000 f97b 	bl	8002b10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002828:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	609a      	str	r2, [r3, #8]
      break;
 8002832:	e04c      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6818      	ldr	r0, [r3, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	6899      	ldr	r1, [r3, #8]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	685a      	ldr	r2, [r3, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	f000 f964 	bl	8002b10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	689a      	ldr	r2, [r3, #8]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002856:	609a      	str	r2, [r3, #8]
      break;
 8002858:	e039      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	6859      	ldr	r1, [r3, #4]
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	68db      	ldr	r3, [r3, #12]
 8002866:	461a      	mov	r2, r3
 8002868:	f000 f8d8 	bl	8002a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	2150      	movs	r1, #80	; 0x50
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f931 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002878:	e029      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6859      	ldr	r1, [r3, #4]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	461a      	mov	r2, r3
 8002888:	f000 f8f7 	bl	8002a7a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2160      	movs	r1, #96	; 0x60
 8002892:	4618      	mov	r0, r3
 8002894:	f000 f921 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 8002898:	e019      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6818      	ldr	r0, [r3, #0]
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	6859      	ldr	r1, [r3, #4]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	461a      	mov	r2, r3
 80028a8:	f000 f8b8 	bl	8002a1c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2140      	movs	r1, #64	; 0x40
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f911 	bl	8002ada <TIM_ITRx_SetConfig>
      break;
 80028b8:	e009      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4619      	mov	r1, r3
 80028c4:	4610      	mov	r0, r2
 80028c6:	f000 f908 	bl	8002ada <TIM_ITRx_SetConfig>
        break;
 80028ca:	e000      	b.n	80028ce <HAL_TIM_ConfigClockSource+0x158>
      break;
 80028cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028de:	2300      	movs	r3, #0
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}

080028e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a40      	ldr	r2, [pc, #256]	; (80029fc <TIM_Base_SetConfig+0x114>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d013      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d00f      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a3d      	ldr	r2, [pc, #244]	; (8002a00 <TIM_Base_SetConfig+0x118>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d00b      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a3c      	ldr	r2, [pc, #240]	; (8002a04 <TIM_Base_SetConfig+0x11c>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d007      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a3b      	ldr	r2, [pc, #236]	; (8002a08 <TIM_Base_SetConfig+0x120>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d003      	beq.n	8002928 <TIM_Base_SetConfig+0x40>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3a      	ldr	r2, [pc, #232]	; (8002a0c <TIM_Base_SetConfig+0x124>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d108      	bne.n	800293a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800292e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4313      	orrs	r3, r2
 8002938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a2f      	ldr	r2, [pc, #188]	; (80029fc <TIM_Base_SetConfig+0x114>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01f      	beq.n	8002982 <TIM_Base_SetConfig+0x9a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002948:	d01b      	beq.n	8002982 <TIM_Base_SetConfig+0x9a>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a2c      	ldr	r2, [pc, #176]	; (8002a00 <TIM_Base_SetConfig+0x118>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d017      	beq.n	8002982 <TIM_Base_SetConfig+0x9a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a2b      	ldr	r2, [pc, #172]	; (8002a04 <TIM_Base_SetConfig+0x11c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d013      	beq.n	8002982 <TIM_Base_SetConfig+0x9a>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a2a      	ldr	r2, [pc, #168]	; (8002a08 <TIM_Base_SetConfig+0x120>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d00f      	beq.n	8002982 <TIM_Base_SetConfig+0x9a>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a29      	ldr	r2, [pc, #164]	; (8002a0c <TIM_Base_SetConfig+0x124>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d00b      	beq.n	8002982 <TIM_Base_SetConfig+0x9a>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a28      	ldr	r2, [pc, #160]	; (8002a10 <TIM_Base_SetConfig+0x128>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d007      	beq.n	8002982 <TIM_Base_SetConfig+0x9a>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a27      	ldr	r2, [pc, #156]	; (8002a14 <TIM_Base_SetConfig+0x12c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d003      	beq.n	8002982 <TIM_Base_SetConfig+0x9a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a26      	ldr	r2, [pc, #152]	; (8002a18 <TIM_Base_SetConfig+0x130>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d108      	bne.n	8002994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	4313      	orrs	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a10      	ldr	r2, [pc, #64]	; (80029fc <TIM_Base_SetConfig+0x114>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00f      	beq.n	80029e0 <TIM_Base_SetConfig+0xf8>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a12      	ldr	r2, [pc, #72]	; (8002a0c <TIM_Base_SetConfig+0x124>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d00b      	beq.n	80029e0 <TIM_Base_SetConfig+0xf8>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a11      	ldr	r2, [pc, #68]	; (8002a10 <TIM_Base_SetConfig+0x128>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d007      	beq.n	80029e0 <TIM_Base_SetConfig+0xf8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a10      	ldr	r2, [pc, #64]	; (8002a14 <TIM_Base_SetConfig+0x12c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d003      	beq.n	80029e0 <TIM_Base_SetConfig+0xf8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a0f      	ldr	r2, [pc, #60]	; (8002a18 <TIM_Base_SetConfig+0x130>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d103      	bne.n	80029e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	691a      	ldr	r2, [r3, #16]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	615a      	str	r2, [r3, #20]
}
 80029ee:	bf00      	nop
 80029f0:	3714      	adds	r7, #20
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	40012c00 	.word	0x40012c00
 8002a00:	40000400 	.word	0x40000400
 8002a04:	40000800 	.word	0x40000800
 8002a08:	40000c00 	.word	0x40000c00
 8002a0c:	40013400 	.word	0x40013400
 8002a10:	40014000 	.word	0x40014000
 8002a14:	40014400 	.word	0x40014400
 8002a18:	40014800 	.word	0x40014800

08002a1c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b087      	sub	sp, #28
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a1b      	ldr	r3, [r3, #32]
 8002a32:	f023 0201 	bic.w	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	011b      	lsls	r3, r3, #4
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f023 030a 	bic.w	r3, r3, #10
 8002a58:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	621a      	str	r2, [r3, #32]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b087      	sub	sp, #28
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0210 	bic.w	r2, r3, #16
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	6a1b      	ldr	r3, [r3, #32]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002aa4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	031b      	lsls	r3, r3, #12
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ab6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	621a      	str	r2, [r3, #32]
}
 8002ace:	bf00      	nop
 8002ad0:	371c      	adds	r7, #28
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b085      	sub	sp, #20
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	f043 0307 	orr.w	r3, r3, #7
 8002afc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68fa      	ldr	r2, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]
}
 8002b04:	bf00      	nop
 8002b06:	3714      	adds	r7, #20
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	021a      	lsls	r2, r3, #8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	431a      	orrs	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	609a      	str	r2, [r3, #8]
}
 8002b44:	bf00      	nop
 8002b46:	371c      	adds	r7, #28
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b085      	sub	sp, #20
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e068      	b.n	8002c3a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a2e      	ldr	r2, [pc, #184]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d004      	beq.n	8002b9c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a2d      	ldr	r2, [pc, #180]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d108      	bne.n	8002bae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002ba2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68fa      	ldr	r2, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bda:	d018      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1b      	ldr	r2, [pc, #108]	; (8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1a      	ldr	r2, [pc, #104]	; (8002c54 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a18      	ldr	r2, [pc, #96]	; (8002c58 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a14      	ldr	r2, [pc, #80]	; (8002c5c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d10c      	bne.n	8002c28 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	68ba      	ldr	r2, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3714      	adds	r7, #20
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40013400 	.word	0x40013400
 8002c50:	40000400 	.word	0x40000400
 8002c54:	40000800 	.word	0x40000800
 8002c58:	40000c00 	.word	0x40000c00
 8002c5c:	40014000 	.word	0x40014000

08002c60 <__errno>:
 8002c60:	4b01      	ldr	r3, [pc, #4]	; (8002c68 <__errno+0x8>)
 8002c62:	6818      	ldr	r0, [r3, #0]
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	2000000c 	.word	0x2000000c

08002c6c <__libc_init_array>:
 8002c6c:	b570      	push	{r4, r5, r6, lr}
 8002c6e:	4e0d      	ldr	r6, [pc, #52]	; (8002ca4 <__libc_init_array+0x38>)
 8002c70:	4c0d      	ldr	r4, [pc, #52]	; (8002ca8 <__libc_init_array+0x3c>)
 8002c72:	1ba4      	subs	r4, r4, r6
 8002c74:	10a4      	asrs	r4, r4, #2
 8002c76:	2500      	movs	r5, #0
 8002c78:	42a5      	cmp	r5, r4
 8002c7a:	d109      	bne.n	8002c90 <__libc_init_array+0x24>
 8002c7c:	4e0b      	ldr	r6, [pc, #44]	; (8002cac <__libc_init_array+0x40>)
 8002c7e:	4c0c      	ldr	r4, [pc, #48]	; (8002cb0 <__libc_init_array+0x44>)
 8002c80:	f004 fa5a 	bl	8007138 <_init>
 8002c84:	1ba4      	subs	r4, r4, r6
 8002c86:	10a4      	asrs	r4, r4, #2
 8002c88:	2500      	movs	r5, #0
 8002c8a:	42a5      	cmp	r5, r4
 8002c8c:	d105      	bne.n	8002c9a <__libc_init_array+0x2e>
 8002c8e:	bd70      	pop	{r4, r5, r6, pc}
 8002c90:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c94:	4798      	blx	r3
 8002c96:	3501      	adds	r5, #1
 8002c98:	e7ee      	b.n	8002c78 <__libc_init_array+0xc>
 8002c9a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002c9e:	4798      	blx	r3
 8002ca0:	3501      	adds	r5, #1
 8002ca2:	e7f2      	b.n	8002c8a <__libc_init_array+0x1e>
 8002ca4:	0800756c 	.word	0x0800756c
 8002ca8:	0800756c 	.word	0x0800756c
 8002cac:	0800756c 	.word	0x0800756c
 8002cb0:	08007570 	.word	0x08007570

08002cb4 <memcpy>:
 8002cb4:	b510      	push	{r4, lr}
 8002cb6:	1e43      	subs	r3, r0, #1
 8002cb8:	440a      	add	r2, r1
 8002cba:	4291      	cmp	r1, r2
 8002cbc:	d100      	bne.n	8002cc0 <memcpy+0xc>
 8002cbe:	bd10      	pop	{r4, pc}
 8002cc0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cc8:	e7f7      	b.n	8002cba <memcpy+0x6>

08002cca <memset>:
 8002cca:	4402      	add	r2, r0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d100      	bne.n	8002cd4 <memset+0xa>
 8002cd2:	4770      	bx	lr
 8002cd4:	f803 1b01 	strb.w	r1, [r3], #1
 8002cd8:	e7f9      	b.n	8002cce <memset+0x4>

08002cda <__cvt>:
 8002cda:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002cde:	ec55 4b10 	vmov	r4, r5, d0
 8002ce2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8002ce4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8002ce8:	2d00      	cmp	r5, #0
 8002cea:	460e      	mov	r6, r1
 8002cec:	4691      	mov	r9, r2
 8002cee:	4619      	mov	r1, r3
 8002cf0:	bfb8      	it	lt
 8002cf2:	4622      	movlt	r2, r4
 8002cf4:	462b      	mov	r3, r5
 8002cf6:	f027 0720 	bic.w	r7, r7, #32
 8002cfa:	bfbb      	ittet	lt
 8002cfc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8002d00:	461d      	movlt	r5, r3
 8002d02:	2300      	movge	r3, #0
 8002d04:	232d      	movlt	r3, #45	; 0x2d
 8002d06:	bfb8      	it	lt
 8002d08:	4614      	movlt	r4, r2
 8002d0a:	2f46      	cmp	r7, #70	; 0x46
 8002d0c:	700b      	strb	r3, [r1, #0]
 8002d0e:	d004      	beq.n	8002d1a <__cvt+0x40>
 8002d10:	2f45      	cmp	r7, #69	; 0x45
 8002d12:	d100      	bne.n	8002d16 <__cvt+0x3c>
 8002d14:	3601      	adds	r6, #1
 8002d16:	2102      	movs	r1, #2
 8002d18:	e000      	b.n	8002d1c <__cvt+0x42>
 8002d1a:	2103      	movs	r1, #3
 8002d1c:	ab03      	add	r3, sp, #12
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	ab02      	add	r3, sp, #8
 8002d22:	9300      	str	r3, [sp, #0]
 8002d24:	4632      	mov	r2, r6
 8002d26:	4653      	mov	r3, sl
 8002d28:	ec45 4b10 	vmov	d0, r4, r5
 8002d2c:	f001 fd78 	bl	8004820 <_dtoa_r>
 8002d30:	2f47      	cmp	r7, #71	; 0x47
 8002d32:	4680      	mov	r8, r0
 8002d34:	d102      	bne.n	8002d3c <__cvt+0x62>
 8002d36:	f019 0f01 	tst.w	r9, #1
 8002d3a:	d026      	beq.n	8002d8a <__cvt+0xb0>
 8002d3c:	2f46      	cmp	r7, #70	; 0x46
 8002d3e:	eb08 0906 	add.w	r9, r8, r6
 8002d42:	d111      	bne.n	8002d68 <__cvt+0x8e>
 8002d44:	f898 3000 	ldrb.w	r3, [r8]
 8002d48:	2b30      	cmp	r3, #48	; 0x30
 8002d4a:	d10a      	bne.n	8002d62 <__cvt+0x88>
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2300      	movs	r3, #0
 8002d50:	4620      	mov	r0, r4
 8002d52:	4629      	mov	r1, r5
 8002d54:	f7fd fef8 	bl	8000b48 <__aeabi_dcmpeq>
 8002d58:	b918      	cbnz	r0, 8002d62 <__cvt+0x88>
 8002d5a:	f1c6 0601 	rsb	r6, r6, #1
 8002d5e:	f8ca 6000 	str.w	r6, [sl]
 8002d62:	f8da 3000 	ldr.w	r3, [sl]
 8002d66:	4499      	add	r9, r3
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	4620      	mov	r0, r4
 8002d6e:	4629      	mov	r1, r5
 8002d70:	f7fd feea 	bl	8000b48 <__aeabi_dcmpeq>
 8002d74:	b938      	cbnz	r0, 8002d86 <__cvt+0xac>
 8002d76:	2230      	movs	r2, #48	; 0x30
 8002d78:	9b03      	ldr	r3, [sp, #12]
 8002d7a:	454b      	cmp	r3, r9
 8002d7c:	d205      	bcs.n	8002d8a <__cvt+0xb0>
 8002d7e:	1c59      	adds	r1, r3, #1
 8002d80:	9103      	str	r1, [sp, #12]
 8002d82:	701a      	strb	r2, [r3, #0]
 8002d84:	e7f8      	b.n	8002d78 <__cvt+0x9e>
 8002d86:	f8cd 900c 	str.w	r9, [sp, #12]
 8002d8a:	9b03      	ldr	r3, [sp, #12]
 8002d8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002d8e:	eba3 0308 	sub.w	r3, r3, r8
 8002d92:	4640      	mov	r0, r8
 8002d94:	6013      	str	r3, [r2, #0]
 8002d96:	b004      	add	sp, #16
 8002d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002d9c <__exponent>:
 8002d9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002d9e:	2900      	cmp	r1, #0
 8002da0:	4604      	mov	r4, r0
 8002da2:	bfba      	itte	lt
 8002da4:	4249      	neglt	r1, r1
 8002da6:	232d      	movlt	r3, #45	; 0x2d
 8002da8:	232b      	movge	r3, #43	; 0x2b
 8002daa:	2909      	cmp	r1, #9
 8002dac:	f804 2b02 	strb.w	r2, [r4], #2
 8002db0:	7043      	strb	r3, [r0, #1]
 8002db2:	dd20      	ble.n	8002df6 <__exponent+0x5a>
 8002db4:	f10d 0307 	add.w	r3, sp, #7
 8002db8:	461f      	mov	r7, r3
 8002dba:	260a      	movs	r6, #10
 8002dbc:	fb91 f5f6 	sdiv	r5, r1, r6
 8002dc0:	fb06 1115 	mls	r1, r6, r5, r1
 8002dc4:	3130      	adds	r1, #48	; 0x30
 8002dc6:	2d09      	cmp	r5, #9
 8002dc8:	f803 1c01 	strb.w	r1, [r3, #-1]
 8002dcc:	f103 32ff 	add.w	r2, r3, #4294967295
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	dc09      	bgt.n	8002de8 <__exponent+0x4c>
 8002dd4:	3130      	adds	r1, #48	; 0x30
 8002dd6:	3b02      	subs	r3, #2
 8002dd8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002ddc:	42bb      	cmp	r3, r7
 8002dde:	4622      	mov	r2, r4
 8002de0:	d304      	bcc.n	8002dec <__exponent+0x50>
 8002de2:	1a10      	subs	r0, r2, r0
 8002de4:	b003      	add	sp, #12
 8002de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002de8:	4613      	mov	r3, r2
 8002dea:	e7e7      	b.n	8002dbc <__exponent+0x20>
 8002dec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002df0:	f804 2b01 	strb.w	r2, [r4], #1
 8002df4:	e7f2      	b.n	8002ddc <__exponent+0x40>
 8002df6:	2330      	movs	r3, #48	; 0x30
 8002df8:	4419      	add	r1, r3
 8002dfa:	7083      	strb	r3, [r0, #2]
 8002dfc:	1d02      	adds	r2, r0, #4
 8002dfe:	70c1      	strb	r1, [r0, #3]
 8002e00:	e7ef      	b.n	8002de2 <__exponent+0x46>
	...

08002e04 <_printf_float>:
 8002e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e08:	b08d      	sub	sp, #52	; 0x34
 8002e0a:	460c      	mov	r4, r1
 8002e0c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8002e10:	4616      	mov	r6, r2
 8002e12:	461f      	mov	r7, r3
 8002e14:	4605      	mov	r5, r0
 8002e16:	f002 fde7 	bl	80059e8 <_localeconv_r>
 8002e1a:	6803      	ldr	r3, [r0, #0]
 8002e1c:	9304      	str	r3, [sp, #16]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fa0f 	bl	8000242 <strlen>
 8002e24:	2300      	movs	r3, #0
 8002e26:	930a      	str	r3, [sp, #40]	; 0x28
 8002e28:	f8d8 3000 	ldr.w	r3, [r8]
 8002e2c:	9005      	str	r0, [sp, #20]
 8002e2e:	3307      	adds	r3, #7
 8002e30:	f023 0307 	bic.w	r3, r3, #7
 8002e34:	f103 0208 	add.w	r2, r3, #8
 8002e38:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002e3c:	f8d4 b000 	ldr.w	fp, [r4]
 8002e40:	f8c8 2000 	str.w	r2, [r8]
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002e4c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8002e50:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8002e54:	9307      	str	r3, [sp, #28]
 8002e56:	f8cd 8018 	str.w	r8, [sp, #24]
 8002e5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e5e:	4ba7      	ldr	r3, [pc, #668]	; (80030fc <_printf_float+0x2f8>)
 8002e60:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e64:	f7fd fea2 	bl	8000bac <__aeabi_dcmpun>
 8002e68:	bb70      	cbnz	r0, 8002ec8 <_printf_float+0xc4>
 8002e6a:	f04f 32ff 	mov.w	r2, #4294967295
 8002e6e:	4ba3      	ldr	r3, [pc, #652]	; (80030fc <_printf_float+0x2f8>)
 8002e70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e74:	f7fd fe7c 	bl	8000b70 <__aeabi_dcmple>
 8002e78:	bb30      	cbnz	r0, 8002ec8 <_printf_float+0xc4>
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	4640      	mov	r0, r8
 8002e80:	4649      	mov	r1, r9
 8002e82:	f7fd fe6b 	bl	8000b5c <__aeabi_dcmplt>
 8002e86:	b110      	cbz	r0, 8002e8e <_printf_float+0x8a>
 8002e88:	232d      	movs	r3, #45	; 0x2d
 8002e8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002e8e:	4a9c      	ldr	r2, [pc, #624]	; (8003100 <_printf_float+0x2fc>)
 8002e90:	4b9c      	ldr	r3, [pc, #624]	; (8003104 <_printf_float+0x300>)
 8002e92:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002e96:	bf8c      	ite	hi
 8002e98:	4690      	movhi	r8, r2
 8002e9a:	4698      	movls	r8, r3
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	f02b 0204 	bic.w	r2, fp, #4
 8002ea2:	6123      	str	r3, [r4, #16]
 8002ea4:	6022      	str	r2, [r4, #0]
 8002ea6:	f04f 0900 	mov.w	r9, #0
 8002eaa:	9700      	str	r7, [sp, #0]
 8002eac:	4633      	mov	r3, r6
 8002eae:	aa0b      	add	r2, sp, #44	; 0x2c
 8002eb0:	4621      	mov	r1, r4
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f000 f9e6 	bl	8003284 <_printf_common>
 8002eb8:	3001      	adds	r0, #1
 8002eba:	f040 808d 	bne.w	8002fd8 <_printf_float+0x1d4>
 8002ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec2:	b00d      	add	sp, #52	; 0x34
 8002ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ec8:	4642      	mov	r2, r8
 8002eca:	464b      	mov	r3, r9
 8002ecc:	4640      	mov	r0, r8
 8002ece:	4649      	mov	r1, r9
 8002ed0:	f7fd fe6c 	bl	8000bac <__aeabi_dcmpun>
 8002ed4:	b110      	cbz	r0, 8002edc <_printf_float+0xd8>
 8002ed6:	4a8c      	ldr	r2, [pc, #560]	; (8003108 <_printf_float+0x304>)
 8002ed8:	4b8c      	ldr	r3, [pc, #560]	; (800310c <_printf_float+0x308>)
 8002eda:	e7da      	b.n	8002e92 <_printf_float+0x8e>
 8002edc:	6861      	ldr	r1, [r4, #4]
 8002ede:	1c4b      	adds	r3, r1, #1
 8002ee0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002ee4:	a80a      	add	r0, sp, #40	; 0x28
 8002ee6:	d13e      	bne.n	8002f66 <_printf_float+0x162>
 8002ee8:	2306      	movs	r3, #6
 8002eea:	6063      	str	r3, [r4, #4]
 8002eec:	2300      	movs	r3, #0
 8002eee:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8002ef2:	ab09      	add	r3, sp, #36	; 0x24
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	ec49 8b10 	vmov	d0, r8, r9
 8002efa:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002efe:	6022      	str	r2, [r4, #0]
 8002f00:	f8cd a004 	str.w	sl, [sp, #4]
 8002f04:	6861      	ldr	r1, [r4, #4]
 8002f06:	4628      	mov	r0, r5
 8002f08:	f7ff fee7 	bl	8002cda <__cvt>
 8002f0c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8002f10:	2b47      	cmp	r3, #71	; 0x47
 8002f12:	4680      	mov	r8, r0
 8002f14:	d109      	bne.n	8002f2a <_printf_float+0x126>
 8002f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f18:	1cd8      	adds	r0, r3, #3
 8002f1a:	db02      	blt.n	8002f22 <_printf_float+0x11e>
 8002f1c:	6862      	ldr	r2, [r4, #4]
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	dd47      	ble.n	8002fb2 <_printf_float+0x1ae>
 8002f22:	f1aa 0a02 	sub.w	sl, sl, #2
 8002f26:	fa5f fa8a 	uxtb.w	sl, sl
 8002f2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002f2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002f30:	d824      	bhi.n	8002f7c <_printf_float+0x178>
 8002f32:	3901      	subs	r1, #1
 8002f34:	4652      	mov	r2, sl
 8002f36:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002f3a:	9109      	str	r1, [sp, #36]	; 0x24
 8002f3c:	f7ff ff2e 	bl	8002d9c <__exponent>
 8002f40:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002f42:	1813      	adds	r3, r2, r0
 8002f44:	2a01      	cmp	r2, #1
 8002f46:	4681      	mov	r9, r0
 8002f48:	6123      	str	r3, [r4, #16]
 8002f4a:	dc02      	bgt.n	8002f52 <_printf_float+0x14e>
 8002f4c:	6822      	ldr	r2, [r4, #0]
 8002f4e:	07d1      	lsls	r1, r2, #31
 8002f50:	d501      	bpl.n	8002f56 <_printf_float+0x152>
 8002f52:	3301      	adds	r3, #1
 8002f54:	6123      	str	r3, [r4, #16]
 8002f56:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0a5      	beq.n	8002eaa <_printf_float+0xa6>
 8002f5e:	232d      	movs	r3, #45	; 0x2d
 8002f60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f64:	e7a1      	b.n	8002eaa <_printf_float+0xa6>
 8002f66:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8002f6a:	f000 8177 	beq.w	800325c <_printf_float+0x458>
 8002f6e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002f72:	d1bb      	bne.n	8002eec <_printf_float+0xe8>
 8002f74:	2900      	cmp	r1, #0
 8002f76:	d1b9      	bne.n	8002eec <_printf_float+0xe8>
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e7b6      	b.n	8002eea <_printf_float+0xe6>
 8002f7c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002f80:	d119      	bne.n	8002fb6 <_printf_float+0x1b2>
 8002f82:	2900      	cmp	r1, #0
 8002f84:	6863      	ldr	r3, [r4, #4]
 8002f86:	dd0c      	ble.n	8002fa2 <_printf_float+0x19e>
 8002f88:	6121      	str	r1, [r4, #16]
 8002f8a:	b913      	cbnz	r3, 8002f92 <_printf_float+0x18e>
 8002f8c:	6822      	ldr	r2, [r4, #0]
 8002f8e:	07d2      	lsls	r2, r2, #31
 8002f90:	d502      	bpl.n	8002f98 <_printf_float+0x194>
 8002f92:	3301      	adds	r3, #1
 8002f94:	440b      	add	r3, r1
 8002f96:	6123      	str	r3, [r4, #16]
 8002f98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002f9a:	65a3      	str	r3, [r4, #88]	; 0x58
 8002f9c:	f04f 0900 	mov.w	r9, #0
 8002fa0:	e7d9      	b.n	8002f56 <_printf_float+0x152>
 8002fa2:	b913      	cbnz	r3, 8002faa <_printf_float+0x1a6>
 8002fa4:	6822      	ldr	r2, [r4, #0]
 8002fa6:	07d0      	lsls	r0, r2, #31
 8002fa8:	d501      	bpl.n	8002fae <_printf_float+0x1aa>
 8002faa:	3302      	adds	r3, #2
 8002fac:	e7f3      	b.n	8002f96 <_printf_float+0x192>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e7f1      	b.n	8002f96 <_printf_float+0x192>
 8002fb2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002fb6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	db05      	blt.n	8002fca <_printf_float+0x1c6>
 8002fbe:	6822      	ldr	r2, [r4, #0]
 8002fc0:	6123      	str	r3, [r4, #16]
 8002fc2:	07d1      	lsls	r1, r2, #31
 8002fc4:	d5e8      	bpl.n	8002f98 <_printf_float+0x194>
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	e7e5      	b.n	8002f96 <_printf_float+0x192>
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	bfd4      	ite	le
 8002fce:	f1c3 0302 	rsble	r3, r3, #2
 8002fd2:	2301      	movgt	r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	e7de      	b.n	8002f96 <_printf_float+0x192>
 8002fd8:	6823      	ldr	r3, [r4, #0]
 8002fda:	055a      	lsls	r2, r3, #21
 8002fdc:	d407      	bmi.n	8002fee <_printf_float+0x1ea>
 8002fde:	6923      	ldr	r3, [r4, #16]
 8002fe0:	4642      	mov	r2, r8
 8002fe2:	4631      	mov	r1, r6
 8002fe4:	4628      	mov	r0, r5
 8002fe6:	47b8      	blx	r7
 8002fe8:	3001      	adds	r0, #1
 8002fea:	d12b      	bne.n	8003044 <_printf_float+0x240>
 8002fec:	e767      	b.n	8002ebe <_printf_float+0xba>
 8002fee:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002ff2:	f240 80dc 	bls.w	80031ae <_printf_float+0x3aa>
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002ffe:	f7fd fda3 	bl	8000b48 <__aeabi_dcmpeq>
 8003002:	2800      	cmp	r0, #0
 8003004:	d033      	beq.n	800306e <_printf_float+0x26a>
 8003006:	2301      	movs	r3, #1
 8003008:	4a41      	ldr	r2, [pc, #260]	; (8003110 <_printf_float+0x30c>)
 800300a:	4631      	mov	r1, r6
 800300c:	4628      	mov	r0, r5
 800300e:	47b8      	blx	r7
 8003010:	3001      	adds	r0, #1
 8003012:	f43f af54 	beq.w	8002ebe <_printf_float+0xba>
 8003016:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800301a:	429a      	cmp	r2, r3
 800301c:	db02      	blt.n	8003024 <_printf_float+0x220>
 800301e:	6823      	ldr	r3, [r4, #0]
 8003020:	07d8      	lsls	r0, r3, #31
 8003022:	d50f      	bpl.n	8003044 <_printf_float+0x240>
 8003024:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003028:	4631      	mov	r1, r6
 800302a:	4628      	mov	r0, r5
 800302c:	47b8      	blx	r7
 800302e:	3001      	adds	r0, #1
 8003030:	f43f af45 	beq.w	8002ebe <_printf_float+0xba>
 8003034:	f04f 0800 	mov.w	r8, #0
 8003038:	f104 091a 	add.w	r9, r4, #26
 800303c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800303e:	3b01      	subs	r3, #1
 8003040:	4543      	cmp	r3, r8
 8003042:	dc09      	bgt.n	8003058 <_printf_float+0x254>
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	079b      	lsls	r3, r3, #30
 8003048:	f100 8103 	bmi.w	8003252 <_printf_float+0x44e>
 800304c:	68e0      	ldr	r0, [r4, #12]
 800304e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003050:	4298      	cmp	r0, r3
 8003052:	bfb8      	it	lt
 8003054:	4618      	movlt	r0, r3
 8003056:	e734      	b.n	8002ec2 <_printf_float+0xbe>
 8003058:	2301      	movs	r3, #1
 800305a:	464a      	mov	r2, r9
 800305c:	4631      	mov	r1, r6
 800305e:	4628      	mov	r0, r5
 8003060:	47b8      	blx	r7
 8003062:	3001      	adds	r0, #1
 8003064:	f43f af2b 	beq.w	8002ebe <_printf_float+0xba>
 8003068:	f108 0801 	add.w	r8, r8, #1
 800306c:	e7e6      	b.n	800303c <_printf_float+0x238>
 800306e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003070:	2b00      	cmp	r3, #0
 8003072:	dc2b      	bgt.n	80030cc <_printf_float+0x2c8>
 8003074:	2301      	movs	r3, #1
 8003076:	4a26      	ldr	r2, [pc, #152]	; (8003110 <_printf_float+0x30c>)
 8003078:	4631      	mov	r1, r6
 800307a:	4628      	mov	r0, r5
 800307c:	47b8      	blx	r7
 800307e:	3001      	adds	r0, #1
 8003080:	f43f af1d 	beq.w	8002ebe <_printf_float+0xba>
 8003084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003086:	b923      	cbnz	r3, 8003092 <_printf_float+0x28e>
 8003088:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800308a:	b913      	cbnz	r3, 8003092 <_printf_float+0x28e>
 800308c:	6823      	ldr	r3, [r4, #0]
 800308e:	07d9      	lsls	r1, r3, #31
 8003090:	d5d8      	bpl.n	8003044 <_printf_float+0x240>
 8003092:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003096:	4631      	mov	r1, r6
 8003098:	4628      	mov	r0, r5
 800309a:	47b8      	blx	r7
 800309c:	3001      	adds	r0, #1
 800309e:	f43f af0e 	beq.w	8002ebe <_printf_float+0xba>
 80030a2:	f04f 0900 	mov.w	r9, #0
 80030a6:	f104 0a1a 	add.w	sl, r4, #26
 80030aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80030ac:	425b      	negs	r3, r3
 80030ae:	454b      	cmp	r3, r9
 80030b0:	dc01      	bgt.n	80030b6 <_printf_float+0x2b2>
 80030b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80030b4:	e794      	b.n	8002fe0 <_printf_float+0x1dc>
 80030b6:	2301      	movs	r3, #1
 80030b8:	4652      	mov	r2, sl
 80030ba:	4631      	mov	r1, r6
 80030bc:	4628      	mov	r0, r5
 80030be:	47b8      	blx	r7
 80030c0:	3001      	adds	r0, #1
 80030c2:	f43f aefc 	beq.w	8002ebe <_printf_float+0xba>
 80030c6:	f109 0901 	add.w	r9, r9, #1
 80030ca:	e7ee      	b.n	80030aa <_printf_float+0x2a6>
 80030cc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030d0:	429a      	cmp	r2, r3
 80030d2:	bfa8      	it	ge
 80030d4:	461a      	movge	r2, r3
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	4691      	mov	r9, r2
 80030da:	dd07      	ble.n	80030ec <_printf_float+0x2e8>
 80030dc:	4613      	mov	r3, r2
 80030de:	4631      	mov	r1, r6
 80030e0:	4642      	mov	r2, r8
 80030e2:	4628      	mov	r0, r5
 80030e4:	47b8      	blx	r7
 80030e6:	3001      	adds	r0, #1
 80030e8:	f43f aee9 	beq.w	8002ebe <_printf_float+0xba>
 80030ec:	f104 031a 	add.w	r3, r4, #26
 80030f0:	f04f 0b00 	mov.w	fp, #0
 80030f4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80030f8:	9306      	str	r3, [sp, #24]
 80030fa:	e015      	b.n	8003128 <_printf_float+0x324>
 80030fc:	7fefffff 	.word	0x7fefffff
 8003100:	08007298 	.word	0x08007298
 8003104:	08007294 	.word	0x08007294
 8003108:	080072a0 	.word	0x080072a0
 800310c:	0800729c 	.word	0x0800729c
 8003110:	080072a4 	.word	0x080072a4
 8003114:	2301      	movs	r3, #1
 8003116:	9a06      	ldr	r2, [sp, #24]
 8003118:	4631      	mov	r1, r6
 800311a:	4628      	mov	r0, r5
 800311c:	47b8      	blx	r7
 800311e:	3001      	adds	r0, #1
 8003120:	f43f aecd 	beq.w	8002ebe <_printf_float+0xba>
 8003124:	f10b 0b01 	add.w	fp, fp, #1
 8003128:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800312c:	ebaa 0309 	sub.w	r3, sl, r9
 8003130:	455b      	cmp	r3, fp
 8003132:	dcef      	bgt.n	8003114 <_printf_float+0x310>
 8003134:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003138:	429a      	cmp	r2, r3
 800313a:	44d0      	add	r8, sl
 800313c:	db15      	blt.n	800316a <_printf_float+0x366>
 800313e:	6823      	ldr	r3, [r4, #0]
 8003140:	07da      	lsls	r2, r3, #31
 8003142:	d412      	bmi.n	800316a <_printf_float+0x366>
 8003144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003146:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003148:	eba3 020a 	sub.w	r2, r3, sl
 800314c:	eba3 0a01 	sub.w	sl, r3, r1
 8003150:	4592      	cmp	sl, r2
 8003152:	bfa8      	it	ge
 8003154:	4692      	movge	sl, r2
 8003156:	f1ba 0f00 	cmp.w	sl, #0
 800315a:	dc0e      	bgt.n	800317a <_printf_float+0x376>
 800315c:	f04f 0800 	mov.w	r8, #0
 8003160:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8003164:	f104 091a 	add.w	r9, r4, #26
 8003168:	e019      	b.n	800319e <_printf_float+0x39a>
 800316a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800316e:	4631      	mov	r1, r6
 8003170:	4628      	mov	r0, r5
 8003172:	47b8      	blx	r7
 8003174:	3001      	adds	r0, #1
 8003176:	d1e5      	bne.n	8003144 <_printf_float+0x340>
 8003178:	e6a1      	b.n	8002ebe <_printf_float+0xba>
 800317a:	4653      	mov	r3, sl
 800317c:	4642      	mov	r2, r8
 800317e:	4631      	mov	r1, r6
 8003180:	4628      	mov	r0, r5
 8003182:	47b8      	blx	r7
 8003184:	3001      	adds	r0, #1
 8003186:	d1e9      	bne.n	800315c <_printf_float+0x358>
 8003188:	e699      	b.n	8002ebe <_printf_float+0xba>
 800318a:	2301      	movs	r3, #1
 800318c:	464a      	mov	r2, r9
 800318e:	4631      	mov	r1, r6
 8003190:	4628      	mov	r0, r5
 8003192:	47b8      	blx	r7
 8003194:	3001      	adds	r0, #1
 8003196:	f43f ae92 	beq.w	8002ebe <_printf_float+0xba>
 800319a:	f108 0801 	add.w	r8, r8, #1
 800319e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80031a2:	1a9b      	subs	r3, r3, r2
 80031a4:	eba3 030a 	sub.w	r3, r3, sl
 80031a8:	4543      	cmp	r3, r8
 80031aa:	dcee      	bgt.n	800318a <_printf_float+0x386>
 80031ac:	e74a      	b.n	8003044 <_printf_float+0x240>
 80031ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80031b0:	2a01      	cmp	r2, #1
 80031b2:	dc01      	bgt.n	80031b8 <_printf_float+0x3b4>
 80031b4:	07db      	lsls	r3, r3, #31
 80031b6:	d53a      	bpl.n	800322e <_printf_float+0x42a>
 80031b8:	2301      	movs	r3, #1
 80031ba:	4642      	mov	r2, r8
 80031bc:	4631      	mov	r1, r6
 80031be:	4628      	mov	r0, r5
 80031c0:	47b8      	blx	r7
 80031c2:	3001      	adds	r0, #1
 80031c4:	f43f ae7b 	beq.w	8002ebe <_printf_float+0xba>
 80031c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80031cc:	4631      	mov	r1, r6
 80031ce:	4628      	mov	r0, r5
 80031d0:	47b8      	blx	r7
 80031d2:	3001      	adds	r0, #1
 80031d4:	f108 0801 	add.w	r8, r8, #1
 80031d8:	f43f ae71 	beq.w	8002ebe <_printf_float+0xba>
 80031dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80031de:	2200      	movs	r2, #0
 80031e0:	f103 3aff 	add.w	sl, r3, #4294967295
 80031e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80031e8:	2300      	movs	r3, #0
 80031ea:	f7fd fcad 	bl	8000b48 <__aeabi_dcmpeq>
 80031ee:	b9c8      	cbnz	r0, 8003224 <_printf_float+0x420>
 80031f0:	4653      	mov	r3, sl
 80031f2:	4642      	mov	r2, r8
 80031f4:	4631      	mov	r1, r6
 80031f6:	4628      	mov	r0, r5
 80031f8:	47b8      	blx	r7
 80031fa:	3001      	adds	r0, #1
 80031fc:	d10e      	bne.n	800321c <_printf_float+0x418>
 80031fe:	e65e      	b.n	8002ebe <_printf_float+0xba>
 8003200:	2301      	movs	r3, #1
 8003202:	4652      	mov	r2, sl
 8003204:	4631      	mov	r1, r6
 8003206:	4628      	mov	r0, r5
 8003208:	47b8      	blx	r7
 800320a:	3001      	adds	r0, #1
 800320c:	f43f ae57 	beq.w	8002ebe <_printf_float+0xba>
 8003210:	f108 0801 	add.w	r8, r8, #1
 8003214:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	4543      	cmp	r3, r8
 800321a:	dcf1      	bgt.n	8003200 <_printf_float+0x3fc>
 800321c:	464b      	mov	r3, r9
 800321e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003222:	e6de      	b.n	8002fe2 <_printf_float+0x1de>
 8003224:	f04f 0800 	mov.w	r8, #0
 8003228:	f104 0a1a 	add.w	sl, r4, #26
 800322c:	e7f2      	b.n	8003214 <_printf_float+0x410>
 800322e:	2301      	movs	r3, #1
 8003230:	e7df      	b.n	80031f2 <_printf_float+0x3ee>
 8003232:	2301      	movs	r3, #1
 8003234:	464a      	mov	r2, r9
 8003236:	4631      	mov	r1, r6
 8003238:	4628      	mov	r0, r5
 800323a:	47b8      	blx	r7
 800323c:	3001      	adds	r0, #1
 800323e:	f43f ae3e 	beq.w	8002ebe <_printf_float+0xba>
 8003242:	f108 0801 	add.w	r8, r8, #1
 8003246:	68e3      	ldr	r3, [r4, #12]
 8003248:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	4543      	cmp	r3, r8
 800324e:	dcf0      	bgt.n	8003232 <_printf_float+0x42e>
 8003250:	e6fc      	b.n	800304c <_printf_float+0x248>
 8003252:	f04f 0800 	mov.w	r8, #0
 8003256:	f104 0919 	add.w	r9, r4, #25
 800325a:	e7f4      	b.n	8003246 <_printf_float+0x442>
 800325c:	2900      	cmp	r1, #0
 800325e:	f43f ae8b 	beq.w	8002f78 <_printf_float+0x174>
 8003262:	2300      	movs	r3, #0
 8003264:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8003268:	ab09      	add	r3, sp, #36	; 0x24
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	ec49 8b10 	vmov	d0, r8, r9
 8003270:	6022      	str	r2, [r4, #0]
 8003272:	f8cd a004 	str.w	sl, [sp, #4]
 8003276:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800327a:	4628      	mov	r0, r5
 800327c:	f7ff fd2d 	bl	8002cda <__cvt>
 8003280:	4680      	mov	r8, r0
 8003282:	e648      	b.n	8002f16 <_printf_float+0x112>

08003284 <_printf_common>:
 8003284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003288:	4691      	mov	r9, r2
 800328a:	461f      	mov	r7, r3
 800328c:	688a      	ldr	r2, [r1, #8]
 800328e:	690b      	ldr	r3, [r1, #16]
 8003290:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003294:	4293      	cmp	r3, r2
 8003296:	bfb8      	it	lt
 8003298:	4613      	movlt	r3, r2
 800329a:	f8c9 3000 	str.w	r3, [r9]
 800329e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032a2:	4606      	mov	r6, r0
 80032a4:	460c      	mov	r4, r1
 80032a6:	b112      	cbz	r2, 80032ae <_printf_common+0x2a>
 80032a8:	3301      	adds	r3, #1
 80032aa:	f8c9 3000 	str.w	r3, [r9]
 80032ae:	6823      	ldr	r3, [r4, #0]
 80032b0:	0699      	lsls	r1, r3, #26
 80032b2:	bf42      	ittt	mi
 80032b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80032b8:	3302      	addmi	r3, #2
 80032ba:	f8c9 3000 	strmi.w	r3, [r9]
 80032be:	6825      	ldr	r5, [r4, #0]
 80032c0:	f015 0506 	ands.w	r5, r5, #6
 80032c4:	d107      	bne.n	80032d6 <_printf_common+0x52>
 80032c6:	f104 0a19 	add.w	sl, r4, #25
 80032ca:	68e3      	ldr	r3, [r4, #12]
 80032cc:	f8d9 2000 	ldr.w	r2, [r9]
 80032d0:	1a9b      	subs	r3, r3, r2
 80032d2:	42ab      	cmp	r3, r5
 80032d4:	dc28      	bgt.n	8003328 <_printf_common+0xa4>
 80032d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80032da:	6822      	ldr	r2, [r4, #0]
 80032dc:	3300      	adds	r3, #0
 80032de:	bf18      	it	ne
 80032e0:	2301      	movne	r3, #1
 80032e2:	0692      	lsls	r2, r2, #26
 80032e4:	d42d      	bmi.n	8003342 <_printf_common+0xbe>
 80032e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80032ea:	4639      	mov	r1, r7
 80032ec:	4630      	mov	r0, r6
 80032ee:	47c0      	blx	r8
 80032f0:	3001      	adds	r0, #1
 80032f2:	d020      	beq.n	8003336 <_printf_common+0xb2>
 80032f4:	6823      	ldr	r3, [r4, #0]
 80032f6:	68e5      	ldr	r5, [r4, #12]
 80032f8:	f8d9 2000 	ldr.w	r2, [r9]
 80032fc:	f003 0306 	and.w	r3, r3, #6
 8003300:	2b04      	cmp	r3, #4
 8003302:	bf08      	it	eq
 8003304:	1aad      	subeq	r5, r5, r2
 8003306:	68a3      	ldr	r3, [r4, #8]
 8003308:	6922      	ldr	r2, [r4, #16]
 800330a:	bf0c      	ite	eq
 800330c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003310:	2500      	movne	r5, #0
 8003312:	4293      	cmp	r3, r2
 8003314:	bfc4      	itt	gt
 8003316:	1a9b      	subgt	r3, r3, r2
 8003318:	18ed      	addgt	r5, r5, r3
 800331a:	f04f 0900 	mov.w	r9, #0
 800331e:	341a      	adds	r4, #26
 8003320:	454d      	cmp	r5, r9
 8003322:	d11a      	bne.n	800335a <_printf_common+0xd6>
 8003324:	2000      	movs	r0, #0
 8003326:	e008      	b.n	800333a <_printf_common+0xb6>
 8003328:	2301      	movs	r3, #1
 800332a:	4652      	mov	r2, sl
 800332c:	4639      	mov	r1, r7
 800332e:	4630      	mov	r0, r6
 8003330:	47c0      	blx	r8
 8003332:	3001      	adds	r0, #1
 8003334:	d103      	bne.n	800333e <_printf_common+0xba>
 8003336:	f04f 30ff 	mov.w	r0, #4294967295
 800333a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800333e:	3501      	adds	r5, #1
 8003340:	e7c3      	b.n	80032ca <_printf_common+0x46>
 8003342:	18e1      	adds	r1, r4, r3
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	2030      	movs	r0, #48	; 0x30
 8003348:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800334c:	4422      	add	r2, r4
 800334e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003352:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003356:	3302      	adds	r3, #2
 8003358:	e7c5      	b.n	80032e6 <_printf_common+0x62>
 800335a:	2301      	movs	r3, #1
 800335c:	4622      	mov	r2, r4
 800335e:	4639      	mov	r1, r7
 8003360:	4630      	mov	r0, r6
 8003362:	47c0      	blx	r8
 8003364:	3001      	adds	r0, #1
 8003366:	d0e6      	beq.n	8003336 <_printf_common+0xb2>
 8003368:	f109 0901 	add.w	r9, r9, #1
 800336c:	e7d8      	b.n	8003320 <_printf_common+0x9c>
	...

08003370 <_printf_i>:
 8003370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003374:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003378:	460c      	mov	r4, r1
 800337a:	7e09      	ldrb	r1, [r1, #24]
 800337c:	b085      	sub	sp, #20
 800337e:	296e      	cmp	r1, #110	; 0x6e
 8003380:	4617      	mov	r7, r2
 8003382:	4606      	mov	r6, r0
 8003384:	4698      	mov	r8, r3
 8003386:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003388:	f000 80b3 	beq.w	80034f2 <_printf_i+0x182>
 800338c:	d822      	bhi.n	80033d4 <_printf_i+0x64>
 800338e:	2963      	cmp	r1, #99	; 0x63
 8003390:	d036      	beq.n	8003400 <_printf_i+0x90>
 8003392:	d80a      	bhi.n	80033aa <_printf_i+0x3a>
 8003394:	2900      	cmp	r1, #0
 8003396:	f000 80b9 	beq.w	800350c <_printf_i+0x19c>
 800339a:	2958      	cmp	r1, #88	; 0x58
 800339c:	f000 8083 	beq.w	80034a6 <_printf_i+0x136>
 80033a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80033a8:	e032      	b.n	8003410 <_printf_i+0xa0>
 80033aa:	2964      	cmp	r1, #100	; 0x64
 80033ac:	d001      	beq.n	80033b2 <_printf_i+0x42>
 80033ae:	2969      	cmp	r1, #105	; 0x69
 80033b0:	d1f6      	bne.n	80033a0 <_printf_i+0x30>
 80033b2:	6820      	ldr	r0, [r4, #0]
 80033b4:	6813      	ldr	r3, [r2, #0]
 80033b6:	0605      	lsls	r5, r0, #24
 80033b8:	f103 0104 	add.w	r1, r3, #4
 80033bc:	d52a      	bpl.n	8003414 <_printf_i+0xa4>
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6011      	str	r1, [r2, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	da03      	bge.n	80033ce <_printf_i+0x5e>
 80033c6:	222d      	movs	r2, #45	; 0x2d
 80033c8:	425b      	negs	r3, r3
 80033ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80033ce:	486f      	ldr	r0, [pc, #444]	; (800358c <_printf_i+0x21c>)
 80033d0:	220a      	movs	r2, #10
 80033d2:	e039      	b.n	8003448 <_printf_i+0xd8>
 80033d4:	2973      	cmp	r1, #115	; 0x73
 80033d6:	f000 809d 	beq.w	8003514 <_printf_i+0x1a4>
 80033da:	d808      	bhi.n	80033ee <_printf_i+0x7e>
 80033dc:	296f      	cmp	r1, #111	; 0x6f
 80033de:	d020      	beq.n	8003422 <_printf_i+0xb2>
 80033e0:	2970      	cmp	r1, #112	; 0x70
 80033e2:	d1dd      	bne.n	80033a0 <_printf_i+0x30>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	f043 0320 	orr.w	r3, r3, #32
 80033ea:	6023      	str	r3, [r4, #0]
 80033ec:	e003      	b.n	80033f6 <_printf_i+0x86>
 80033ee:	2975      	cmp	r1, #117	; 0x75
 80033f0:	d017      	beq.n	8003422 <_printf_i+0xb2>
 80033f2:	2978      	cmp	r1, #120	; 0x78
 80033f4:	d1d4      	bne.n	80033a0 <_printf_i+0x30>
 80033f6:	2378      	movs	r3, #120	; 0x78
 80033f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80033fc:	4864      	ldr	r0, [pc, #400]	; (8003590 <_printf_i+0x220>)
 80033fe:	e055      	b.n	80034ac <_printf_i+0x13c>
 8003400:	6813      	ldr	r3, [r2, #0]
 8003402:	1d19      	adds	r1, r3, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6011      	str	r1, [r2, #0]
 8003408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800340c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003410:	2301      	movs	r3, #1
 8003412:	e08c      	b.n	800352e <_printf_i+0x1be>
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	6011      	str	r1, [r2, #0]
 8003418:	f010 0f40 	tst.w	r0, #64	; 0x40
 800341c:	bf18      	it	ne
 800341e:	b21b      	sxthne	r3, r3
 8003420:	e7cf      	b.n	80033c2 <_printf_i+0x52>
 8003422:	6813      	ldr	r3, [r2, #0]
 8003424:	6825      	ldr	r5, [r4, #0]
 8003426:	1d18      	adds	r0, r3, #4
 8003428:	6010      	str	r0, [r2, #0]
 800342a:	0628      	lsls	r0, r5, #24
 800342c:	d501      	bpl.n	8003432 <_printf_i+0xc2>
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	e002      	b.n	8003438 <_printf_i+0xc8>
 8003432:	0668      	lsls	r0, r5, #25
 8003434:	d5fb      	bpl.n	800342e <_printf_i+0xbe>
 8003436:	881b      	ldrh	r3, [r3, #0]
 8003438:	4854      	ldr	r0, [pc, #336]	; (800358c <_printf_i+0x21c>)
 800343a:	296f      	cmp	r1, #111	; 0x6f
 800343c:	bf14      	ite	ne
 800343e:	220a      	movne	r2, #10
 8003440:	2208      	moveq	r2, #8
 8003442:	2100      	movs	r1, #0
 8003444:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003448:	6865      	ldr	r5, [r4, #4]
 800344a:	60a5      	str	r5, [r4, #8]
 800344c:	2d00      	cmp	r5, #0
 800344e:	f2c0 8095 	blt.w	800357c <_printf_i+0x20c>
 8003452:	6821      	ldr	r1, [r4, #0]
 8003454:	f021 0104 	bic.w	r1, r1, #4
 8003458:	6021      	str	r1, [r4, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d13d      	bne.n	80034da <_printf_i+0x16a>
 800345e:	2d00      	cmp	r5, #0
 8003460:	f040 808e 	bne.w	8003580 <_printf_i+0x210>
 8003464:	4665      	mov	r5, ip
 8003466:	2a08      	cmp	r2, #8
 8003468:	d10b      	bne.n	8003482 <_printf_i+0x112>
 800346a:	6823      	ldr	r3, [r4, #0]
 800346c:	07db      	lsls	r3, r3, #31
 800346e:	d508      	bpl.n	8003482 <_printf_i+0x112>
 8003470:	6923      	ldr	r3, [r4, #16]
 8003472:	6862      	ldr	r2, [r4, #4]
 8003474:	429a      	cmp	r2, r3
 8003476:	bfde      	ittt	le
 8003478:	2330      	movle	r3, #48	; 0x30
 800347a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800347e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003482:	ebac 0305 	sub.w	r3, ip, r5
 8003486:	6123      	str	r3, [r4, #16]
 8003488:	f8cd 8000 	str.w	r8, [sp]
 800348c:	463b      	mov	r3, r7
 800348e:	aa03      	add	r2, sp, #12
 8003490:	4621      	mov	r1, r4
 8003492:	4630      	mov	r0, r6
 8003494:	f7ff fef6 	bl	8003284 <_printf_common>
 8003498:	3001      	adds	r0, #1
 800349a:	d14d      	bne.n	8003538 <_printf_i+0x1c8>
 800349c:	f04f 30ff 	mov.w	r0, #4294967295
 80034a0:	b005      	add	sp, #20
 80034a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034a6:	4839      	ldr	r0, [pc, #228]	; (800358c <_printf_i+0x21c>)
 80034a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80034ac:	6813      	ldr	r3, [r2, #0]
 80034ae:	6821      	ldr	r1, [r4, #0]
 80034b0:	1d1d      	adds	r5, r3, #4
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6015      	str	r5, [r2, #0]
 80034b6:	060a      	lsls	r2, r1, #24
 80034b8:	d50b      	bpl.n	80034d2 <_printf_i+0x162>
 80034ba:	07ca      	lsls	r2, r1, #31
 80034bc:	bf44      	itt	mi
 80034be:	f041 0120 	orrmi.w	r1, r1, #32
 80034c2:	6021      	strmi	r1, [r4, #0]
 80034c4:	b91b      	cbnz	r3, 80034ce <_printf_i+0x15e>
 80034c6:	6822      	ldr	r2, [r4, #0]
 80034c8:	f022 0220 	bic.w	r2, r2, #32
 80034cc:	6022      	str	r2, [r4, #0]
 80034ce:	2210      	movs	r2, #16
 80034d0:	e7b7      	b.n	8003442 <_printf_i+0xd2>
 80034d2:	064d      	lsls	r5, r1, #25
 80034d4:	bf48      	it	mi
 80034d6:	b29b      	uxthmi	r3, r3
 80034d8:	e7ef      	b.n	80034ba <_printf_i+0x14a>
 80034da:	4665      	mov	r5, ip
 80034dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80034e0:	fb02 3311 	mls	r3, r2, r1, r3
 80034e4:	5cc3      	ldrb	r3, [r0, r3]
 80034e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80034ea:	460b      	mov	r3, r1
 80034ec:	2900      	cmp	r1, #0
 80034ee:	d1f5      	bne.n	80034dc <_printf_i+0x16c>
 80034f0:	e7b9      	b.n	8003466 <_printf_i+0xf6>
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	6825      	ldr	r5, [r4, #0]
 80034f6:	6961      	ldr	r1, [r4, #20]
 80034f8:	1d18      	adds	r0, r3, #4
 80034fa:	6010      	str	r0, [r2, #0]
 80034fc:	0628      	lsls	r0, r5, #24
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	d501      	bpl.n	8003506 <_printf_i+0x196>
 8003502:	6019      	str	r1, [r3, #0]
 8003504:	e002      	b.n	800350c <_printf_i+0x19c>
 8003506:	066a      	lsls	r2, r5, #25
 8003508:	d5fb      	bpl.n	8003502 <_printf_i+0x192>
 800350a:	8019      	strh	r1, [r3, #0]
 800350c:	2300      	movs	r3, #0
 800350e:	6123      	str	r3, [r4, #16]
 8003510:	4665      	mov	r5, ip
 8003512:	e7b9      	b.n	8003488 <_printf_i+0x118>
 8003514:	6813      	ldr	r3, [r2, #0]
 8003516:	1d19      	adds	r1, r3, #4
 8003518:	6011      	str	r1, [r2, #0]
 800351a:	681d      	ldr	r5, [r3, #0]
 800351c:	6862      	ldr	r2, [r4, #4]
 800351e:	2100      	movs	r1, #0
 8003520:	4628      	mov	r0, r5
 8003522:	f7fc fe9d 	bl	8000260 <memchr>
 8003526:	b108      	cbz	r0, 800352c <_printf_i+0x1bc>
 8003528:	1b40      	subs	r0, r0, r5
 800352a:	6060      	str	r0, [r4, #4]
 800352c:	6863      	ldr	r3, [r4, #4]
 800352e:	6123      	str	r3, [r4, #16]
 8003530:	2300      	movs	r3, #0
 8003532:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003536:	e7a7      	b.n	8003488 <_printf_i+0x118>
 8003538:	6923      	ldr	r3, [r4, #16]
 800353a:	462a      	mov	r2, r5
 800353c:	4639      	mov	r1, r7
 800353e:	4630      	mov	r0, r6
 8003540:	47c0      	blx	r8
 8003542:	3001      	adds	r0, #1
 8003544:	d0aa      	beq.n	800349c <_printf_i+0x12c>
 8003546:	6823      	ldr	r3, [r4, #0]
 8003548:	079b      	lsls	r3, r3, #30
 800354a:	d413      	bmi.n	8003574 <_printf_i+0x204>
 800354c:	68e0      	ldr	r0, [r4, #12]
 800354e:	9b03      	ldr	r3, [sp, #12]
 8003550:	4298      	cmp	r0, r3
 8003552:	bfb8      	it	lt
 8003554:	4618      	movlt	r0, r3
 8003556:	e7a3      	b.n	80034a0 <_printf_i+0x130>
 8003558:	2301      	movs	r3, #1
 800355a:	464a      	mov	r2, r9
 800355c:	4639      	mov	r1, r7
 800355e:	4630      	mov	r0, r6
 8003560:	47c0      	blx	r8
 8003562:	3001      	adds	r0, #1
 8003564:	d09a      	beq.n	800349c <_printf_i+0x12c>
 8003566:	3501      	adds	r5, #1
 8003568:	68e3      	ldr	r3, [r4, #12]
 800356a:	9a03      	ldr	r2, [sp, #12]
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	42ab      	cmp	r3, r5
 8003570:	dcf2      	bgt.n	8003558 <_printf_i+0x1e8>
 8003572:	e7eb      	b.n	800354c <_printf_i+0x1dc>
 8003574:	2500      	movs	r5, #0
 8003576:	f104 0919 	add.w	r9, r4, #25
 800357a:	e7f5      	b.n	8003568 <_printf_i+0x1f8>
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1ac      	bne.n	80034da <_printf_i+0x16a>
 8003580:	7803      	ldrb	r3, [r0, #0]
 8003582:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003586:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800358a:	e76c      	b.n	8003466 <_printf_i+0xf6>
 800358c:	080072a6 	.word	0x080072a6
 8003590:	080072b7 	.word	0x080072b7

08003594 <_scanf_float>:
 8003594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003598:	469a      	mov	sl, r3
 800359a:	688b      	ldr	r3, [r1, #8]
 800359c:	4616      	mov	r6, r2
 800359e:	1e5a      	subs	r2, r3, #1
 80035a0:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80035a4:	b087      	sub	sp, #28
 80035a6:	bf83      	ittte	hi
 80035a8:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 80035ac:	189b      	addhi	r3, r3, r2
 80035ae:	9301      	strhi	r3, [sp, #4]
 80035b0:	2300      	movls	r3, #0
 80035b2:	bf86      	itte	hi
 80035b4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80035b8:	608b      	strhi	r3, [r1, #8]
 80035ba:	9301      	strls	r3, [sp, #4]
 80035bc:	680b      	ldr	r3, [r1, #0]
 80035be:	4688      	mov	r8, r1
 80035c0:	f04f 0b00 	mov.w	fp, #0
 80035c4:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80035c8:	f848 3b1c 	str.w	r3, [r8], #28
 80035cc:	e9cd bb03 	strd	fp, fp, [sp, #12]
 80035d0:	4607      	mov	r7, r0
 80035d2:	460c      	mov	r4, r1
 80035d4:	4645      	mov	r5, r8
 80035d6:	465a      	mov	r2, fp
 80035d8:	46d9      	mov	r9, fp
 80035da:	f8cd b008 	str.w	fp, [sp, #8]
 80035de:	68a1      	ldr	r1, [r4, #8]
 80035e0:	b181      	cbz	r1, 8003604 <_scanf_float+0x70>
 80035e2:	6833      	ldr	r3, [r6, #0]
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b49      	cmp	r3, #73	; 0x49
 80035e8:	d071      	beq.n	80036ce <_scanf_float+0x13a>
 80035ea:	d84d      	bhi.n	8003688 <_scanf_float+0xf4>
 80035ec:	2b39      	cmp	r3, #57	; 0x39
 80035ee:	d840      	bhi.n	8003672 <_scanf_float+0xde>
 80035f0:	2b31      	cmp	r3, #49	; 0x31
 80035f2:	f080 8088 	bcs.w	8003706 <_scanf_float+0x172>
 80035f6:	2b2d      	cmp	r3, #45	; 0x2d
 80035f8:	f000 8090 	beq.w	800371c <_scanf_float+0x188>
 80035fc:	d815      	bhi.n	800362a <_scanf_float+0x96>
 80035fe:	2b2b      	cmp	r3, #43	; 0x2b
 8003600:	f000 808c 	beq.w	800371c <_scanf_float+0x188>
 8003604:	f1b9 0f00 	cmp.w	r9, #0
 8003608:	d003      	beq.n	8003612 <_scanf_float+0x7e>
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003610:	6023      	str	r3, [r4, #0]
 8003612:	3a01      	subs	r2, #1
 8003614:	2a01      	cmp	r2, #1
 8003616:	f200 80ea 	bhi.w	80037ee <_scanf_float+0x25a>
 800361a:	4545      	cmp	r5, r8
 800361c:	f200 80dc 	bhi.w	80037d8 <_scanf_float+0x244>
 8003620:	2601      	movs	r6, #1
 8003622:	4630      	mov	r0, r6
 8003624:	b007      	add	sp, #28
 8003626:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800362a:	2b2e      	cmp	r3, #46	; 0x2e
 800362c:	f000 809f 	beq.w	800376e <_scanf_float+0x1da>
 8003630:	2b30      	cmp	r3, #48	; 0x30
 8003632:	d1e7      	bne.n	8003604 <_scanf_float+0x70>
 8003634:	6820      	ldr	r0, [r4, #0]
 8003636:	f410 7f80 	tst.w	r0, #256	; 0x100
 800363a:	d064      	beq.n	8003706 <_scanf_float+0x172>
 800363c:	9b01      	ldr	r3, [sp, #4]
 800363e:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8003642:	6020      	str	r0, [r4, #0]
 8003644:	f109 0901 	add.w	r9, r9, #1
 8003648:	b11b      	cbz	r3, 8003652 <_scanf_float+0xbe>
 800364a:	3b01      	subs	r3, #1
 800364c:	3101      	adds	r1, #1
 800364e:	9301      	str	r3, [sp, #4]
 8003650:	60a1      	str	r1, [r4, #8]
 8003652:	68a3      	ldr	r3, [r4, #8]
 8003654:	3b01      	subs	r3, #1
 8003656:	60a3      	str	r3, [r4, #8]
 8003658:	6923      	ldr	r3, [r4, #16]
 800365a:	3301      	adds	r3, #1
 800365c:	6123      	str	r3, [r4, #16]
 800365e:	6873      	ldr	r3, [r6, #4]
 8003660:	3b01      	subs	r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	6073      	str	r3, [r6, #4]
 8003666:	f340 80ac 	ble.w	80037c2 <_scanf_float+0x22e>
 800366a:	6833      	ldr	r3, [r6, #0]
 800366c:	3301      	adds	r3, #1
 800366e:	6033      	str	r3, [r6, #0]
 8003670:	e7b5      	b.n	80035de <_scanf_float+0x4a>
 8003672:	2b45      	cmp	r3, #69	; 0x45
 8003674:	f000 8085 	beq.w	8003782 <_scanf_float+0x1ee>
 8003678:	2b46      	cmp	r3, #70	; 0x46
 800367a:	d06a      	beq.n	8003752 <_scanf_float+0x1be>
 800367c:	2b41      	cmp	r3, #65	; 0x41
 800367e:	d1c1      	bne.n	8003604 <_scanf_float+0x70>
 8003680:	2a01      	cmp	r2, #1
 8003682:	d1bf      	bne.n	8003604 <_scanf_float+0x70>
 8003684:	2202      	movs	r2, #2
 8003686:	e046      	b.n	8003716 <_scanf_float+0x182>
 8003688:	2b65      	cmp	r3, #101	; 0x65
 800368a:	d07a      	beq.n	8003782 <_scanf_float+0x1ee>
 800368c:	d818      	bhi.n	80036c0 <_scanf_float+0x12c>
 800368e:	2b54      	cmp	r3, #84	; 0x54
 8003690:	d066      	beq.n	8003760 <_scanf_float+0x1cc>
 8003692:	d811      	bhi.n	80036b8 <_scanf_float+0x124>
 8003694:	2b4e      	cmp	r3, #78	; 0x4e
 8003696:	d1b5      	bne.n	8003604 <_scanf_float+0x70>
 8003698:	2a00      	cmp	r2, #0
 800369a:	d146      	bne.n	800372a <_scanf_float+0x196>
 800369c:	f1b9 0f00 	cmp.w	r9, #0
 80036a0:	d145      	bne.n	800372e <_scanf_float+0x19a>
 80036a2:	6821      	ldr	r1, [r4, #0]
 80036a4:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80036a8:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80036ac:	d13f      	bne.n	800372e <_scanf_float+0x19a>
 80036ae:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80036b2:	6021      	str	r1, [r4, #0]
 80036b4:	2201      	movs	r2, #1
 80036b6:	e02e      	b.n	8003716 <_scanf_float+0x182>
 80036b8:	2b59      	cmp	r3, #89	; 0x59
 80036ba:	d01e      	beq.n	80036fa <_scanf_float+0x166>
 80036bc:	2b61      	cmp	r3, #97	; 0x61
 80036be:	e7de      	b.n	800367e <_scanf_float+0xea>
 80036c0:	2b6e      	cmp	r3, #110	; 0x6e
 80036c2:	d0e9      	beq.n	8003698 <_scanf_float+0x104>
 80036c4:	d815      	bhi.n	80036f2 <_scanf_float+0x15e>
 80036c6:	2b66      	cmp	r3, #102	; 0x66
 80036c8:	d043      	beq.n	8003752 <_scanf_float+0x1be>
 80036ca:	2b69      	cmp	r3, #105	; 0x69
 80036cc:	d19a      	bne.n	8003604 <_scanf_float+0x70>
 80036ce:	f1bb 0f00 	cmp.w	fp, #0
 80036d2:	d138      	bne.n	8003746 <_scanf_float+0x1b2>
 80036d4:	f1b9 0f00 	cmp.w	r9, #0
 80036d8:	d197      	bne.n	800360a <_scanf_float+0x76>
 80036da:	6821      	ldr	r1, [r4, #0]
 80036dc:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 80036e0:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 80036e4:	d195      	bne.n	8003612 <_scanf_float+0x7e>
 80036e6:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80036ea:	6021      	str	r1, [r4, #0]
 80036ec:	f04f 0b01 	mov.w	fp, #1
 80036f0:	e011      	b.n	8003716 <_scanf_float+0x182>
 80036f2:	2b74      	cmp	r3, #116	; 0x74
 80036f4:	d034      	beq.n	8003760 <_scanf_float+0x1cc>
 80036f6:	2b79      	cmp	r3, #121	; 0x79
 80036f8:	d184      	bne.n	8003604 <_scanf_float+0x70>
 80036fa:	f1bb 0f07 	cmp.w	fp, #7
 80036fe:	d181      	bne.n	8003604 <_scanf_float+0x70>
 8003700:	f04f 0b08 	mov.w	fp, #8
 8003704:	e007      	b.n	8003716 <_scanf_float+0x182>
 8003706:	eb12 0f0b 	cmn.w	r2, fp
 800370a:	f47f af7b 	bne.w	8003604 <_scanf_float+0x70>
 800370e:	6821      	ldr	r1, [r4, #0]
 8003710:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8003714:	6021      	str	r1, [r4, #0]
 8003716:	702b      	strb	r3, [r5, #0]
 8003718:	3501      	adds	r5, #1
 800371a:	e79a      	b.n	8003652 <_scanf_float+0xbe>
 800371c:	6821      	ldr	r1, [r4, #0]
 800371e:	0608      	lsls	r0, r1, #24
 8003720:	f57f af70 	bpl.w	8003604 <_scanf_float+0x70>
 8003724:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003728:	e7f4      	b.n	8003714 <_scanf_float+0x180>
 800372a:	2a02      	cmp	r2, #2
 800372c:	d047      	beq.n	80037be <_scanf_float+0x22a>
 800372e:	f1bb 0f01 	cmp.w	fp, #1
 8003732:	d003      	beq.n	800373c <_scanf_float+0x1a8>
 8003734:	f1bb 0f04 	cmp.w	fp, #4
 8003738:	f47f af64 	bne.w	8003604 <_scanf_float+0x70>
 800373c:	f10b 0b01 	add.w	fp, fp, #1
 8003740:	fa5f fb8b 	uxtb.w	fp, fp
 8003744:	e7e7      	b.n	8003716 <_scanf_float+0x182>
 8003746:	f1bb 0f03 	cmp.w	fp, #3
 800374a:	d0f7      	beq.n	800373c <_scanf_float+0x1a8>
 800374c:	f1bb 0f05 	cmp.w	fp, #5
 8003750:	e7f2      	b.n	8003738 <_scanf_float+0x1a4>
 8003752:	f1bb 0f02 	cmp.w	fp, #2
 8003756:	f47f af55 	bne.w	8003604 <_scanf_float+0x70>
 800375a:	f04f 0b03 	mov.w	fp, #3
 800375e:	e7da      	b.n	8003716 <_scanf_float+0x182>
 8003760:	f1bb 0f06 	cmp.w	fp, #6
 8003764:	f47f af4e 	bne.w	8003604 <_scanf_float+0x70>
 8003768:	f04f 0b07 	mov.w	fp, #7
 800376c:	e7d3      	b.n	8003716 <_scanf_float+0x182>
 800376e:	6821      	ldr	r1, [r4, #0]
 8003770:	0588      	lsls	r0, r1, #22
 8003772:	f57f af47 	bpl.w	8003604 <_scanf_float+0x70>
 8003776:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 800377a:	6021      	str	r1, [r4, #0]
 800377c:	f8cd 9008 	str.w	r9, [sp, #8]
 8003780:	e7c9      	b.n	8003716 <_scanf_float+0x182>
 8003782:	6821      	ldr	r1, [r4, #0]
 8003784:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8003788:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800378c:	d006      	beq.n	800379c <_scanf_float+0x208>
 800378e:	0548      	lsls	r0, r1, #21
 8003790:	f57f af38 	bpl.w	8003604 <_scanf_float+0x70>
 8003794:	f1b9 0f00 	cmp.w	r9, #0
 8003798:	f43f af3b 	beq.w	8003612 <_scanf_float+0x7e>
 800379c:	0588      	lsls	r0, r1, #22
 800379e:	bf58      	it	pl
 80037a0:	9802      	ldrpl	r0, [sp, #8]
 80037a2:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 80037a6:	bf58      	it	pl
 80037a8:	eba9 0000 	subpl.w	r0, r9, r0
 80037ac:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 80037b0:	bf58      	it	pl
 80037b2:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 80037b6:	6021      	str	r1, [r4, #0]
 80037b8:	f04f 0900 	mov.w	r9, #0
 80037bc:	e7ab      	b.n	8003716 <_scanf_float+0x182>
 80037be:	2203      	movs	r2, #3
 80037c0:	e7a9      	b.n	8003716 <_scanf_float+0x182>
 80037c2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80037c6:	9205      	str	r2, [sp, #20]
 80037c8:	4631      	mov	r1, r6
 80037ca:	4638      	mov	r0, r7
 80037cc:	4798      	blx	r3
 80037ce:	9a05      	ldr	r2, [sp, #20]
 80037d0:	2800      	cmp	r0, #0
 80037d2:	f43f af04 	beq.w	80035de <_scanf_float+0x4a>
 80037d6:	e715      	b.n	8003604 <_scanf_float+0x70>
 80037d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80037dc:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80037e0:	4632      	mov	r2, r6
 80037e2:	4638      	mov	r0, r7
 80037e4:	4798      	blx	r3
 80037e6:	6923      	ldr	r3, [r4, #16]
 80037e8:	3b01      	subs	r3, #1
 80037ea:	6123      	str	r3, [r4, #16]
 80037ec:	e715      	b.n	800361a <_scanf_float+0x86>
 80037ee:	f10b 33ff 	add.w	r3, fp, #4294967295
 80037f2:	2b06      	cmp	r3, #6
 80037f4:	d80a      	bhi.n	800380c <_scanf_float+0x278>
 80037f6:	f1bb 0f02 	cmp.w	fp, #2
 80037fa:	d968      	bls.n	80038ce <_scanf_float+0x33a>
 80037fc:	f1ab 0b03 	sub.w	fp, fp, #3
 8003800:	fa5f fb8b 	uxtb.w	fp, fp
 8003804:	eba5 0b0b 	sub.w	fp, r5, fp
 8003808:	455d      	cmp	r5, fp
 800380a:	d14b      	bne.n	80038a4 <_scanf_float+0x310>
 800380c:	6823      	ldr	r3, [r4, #0]
 800380e:	05da      	lsls	r2, r3, #23
 8003810:	d51f      	bpl.n	8003852 <_scanf_float+0x2be>
 8003812:	055b      	lsls	r3, r3, #21
 8003814:	d468      	bmi.n	80038e8 <_scanf_float+0x354>
 8003816:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800381a:	6923      	ldr	r3, [r4, #16]
 800381c:	2965      	cmp	r1, #101	; 0x65
 800381e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003822:	f105 3bff 	add.w	fp, r5, #4294967295
 8003826:	6123      	str	r3, [r4, #16]
 8003828:	d00d      	beq.n	8003846 <_scanf_float+0x2b2>
 800382a:	2945      	cmp	r1, #69	; 0x45
 800382c:	d00b      	beq.n	8003846 <_scanf_float+0x2b2>
 800382e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003832:	4632      	mov	r2, r6
 8003834:	4638      	mov	r0, r7
 8003836:	4798      	blx	r3
 8003838:	6923      	ldr	r3, [r4, #16]
 800383a:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 800383e:	3b01      	subs	r3, #1
 8003840:	f1a5 0b02 	sub.w	fp, r5, #2
 8003844:	6123      	str	r3, [r4, #16]
 8003846:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800384a:	4632      	mov	r2, r6
 800384c:	4638      	mov	r0, r7
 800384e:	4798      	blx	r3
 8003850:	465d      	mov	r5, fp
 8003852:	6826      	ldr	r6, [r4, #0]
 8003854:	f016 0610 	ands.w	r6, r6, #16
 8003858:	d17a      	bne.n	8003950 <_scanf_float+0x3bc>
 800385a:	702e      	strb	r6, [r5, #0]
 800385c:	6823      	ldr	r3, [r4, #0]
 800385e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003862:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003866:	d142      	bne.n	80038ee <_scanf_float+0x35a>
 8003868:	9b02      	ldr	r3, [sp, #8]
 800386a:	eba9 0303 	sub.w	r3, r9, r3
 800386e:	425a      	negs	r2, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d149      	bne.n	8003908 <_scanf_float+0x374>
 8003874:	2200      	movs	r2, #0
 8003876:	4641      	mov	r1, r8
 8003878:	4638      	mov	r0, r7
 800387a:	f000 fea5 	bl	80045c8 <_strtod_r>
 800387e:	6825      	ldr	r5, [r4, #0]
 8003880:	f8da 3000 	ldr.w	r3, [sl]
 8003884:	f015 0f02 	tst.w	r5, #2
 8003888:	f103 0204 	add.w	r2, r3, #4
 800388c:	ec59 8b10 	vmov	r8, r9, d0
 8003890:	f8ca 2000 	str.w	r2, [sl]
 8003894:	d043      	beq.n	800391e <_scanf_float+0x38a>
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	e9c3 8900 	strd	r8, r9, [r3]
 800389c:	68e3      	ldr	r3, [r4, #12]
 800389e:	3301      	adds	r3, #1
 80038a0:	60e3      	str	r3, [r4, #12]
 80038a2:	e6be      	b.n	8003622 <_scanf_float+0x8e>
 80038a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80038a8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80038ac:	4632      	mov	r2, r6
 80038ae:	4638      	mov	r0, r7
 80038b0:	4798      	blx	r3
 80038b2:	6923      	ldr	r3, [r4, #16]
 80038b4:	3b01      	subs	r3, #1
 80038b6:	6123      	str	r3, [r4, #16]
 80038b8:	e7a6      	b.n	8003808 <_scanf_float+0x274>
 80038ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80038be:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80038c2:	4632      	mov	r2, r6
 80038c4:	4638      	mov	r0, r7
 80038c6:	4798      	blx	r3
 80038c8:	6923      	ldr	r3, [r4, #16]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	6123      	str	r3, [r4, #16]
 80038ce:	4545      	cmp	r5, r8
 80038d0:	d8f3      	bhi.n	80038ba <_scanf_float+0x326>
 80038d2:	e6a5      	b.n	8003620 <_scanf_float+0x8c>
 80038d4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80038d8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 80038dc:	4632      	mov	r2, r6
 80038de:	4638      	mov	r0, r7
 80038e0:	4798      	blx	r3
 80038e2:	6923      	ldr	r3, [r4, #16]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	6123      	str	r3, [r4, #16]
 80038e8:	4545      	cmp	r5, r8
 80038ea:	d8f3      	bhi.n	80038d4 <_scanf_float+0x340>
 80038ec:	e698      	b.n	8003620 <_scanf_float+0x8c>
 80038ee:	9b03      	ldr	r3, [sp, #12]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0bf      	beq.n	8003874 <_scanf_float+0x2e0>
 80038f4:	9904      	ldr	r1, [sp, #16]
 80038f6:	230a      	movs	r3, #10
 80038f8:	4632      	mov	r2, r6
 80038fa:	3101      	adds	r1, #1
 80038fc:	4638      	mov	r0, r7
 80038fe:	f000 feef 	bl	80046e0 <_strtol_r>
 8003902:	9b03      	ldr	r3, [sp, #12]
 8003904:	9d04      	ldr	r5, [sp, #16]
 8003906:	1ac2      	subs	r2, r0, r3
 8003908:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800390c:	429d      	cmp	r5, r3
 800390e:	bf28      	it	cs
 8003910:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8003914:	490f      	ldr	r1, [pc, #60]	; (8003954 <_scanf_float+0x3c0>)
 8003916:	4628      	mov	r0, r5
 8003918:	f000 f824 	bl	8003964 <siprintf>
 800391c:	e7aa      	b.n	8003874 <_scanf_float+0x2e0>
 800391e:	f015 0504 	ands.w	r5, r5, #4
 8003922:	d1b8      	bne.n	8003896 <_scanf_float+0x302>
 8003924:	681f      	ldr	r7, [r3, #0]
 8003926:	ee10 2a10 	vmov	r2, s0
 800392a:	464b      	mov	r3, r9
 800392c:	ee10 0a10 	vmov	r0, s0
 8003930:	4649      	mov	r1, r9
 8003932:	f7fd f93b 	bl	8000bac <__aeabi_dcmpun>
 8003936:	b128      	cbz	r0, 8003944 <_scanf_float+0x3b0>
 8003938:	4628      	mov	r0, r5
 800393a:	f000 f80d 	bl	8003958 <nanf>
 800393e:	ed87 0a00 	vstr	s0, [r7]
 8003942:	e7ab      	b.n	800389c <_scanf_float+0x308>
 8003944:	4640      	mov	r0, r8
 8003946:	4649      	mov	r1, r9
 8003948:	f7fd f98e 	bl	8000c68 <__aeabi_d2f>
 800394c:	6038      	str	r0, [r7, #0]
 800394e:	e7a5      	b.n	800389c <_scanf_float+0x308>
 8003950:	2600      	movs	r6, #0
 8003952:	e666      	b.n	8003622 <_scanf_float+0x8e>
 8003954:	080072c8 	.word	0x080072c8

08003958 <nanf>:
 8003958:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8003960 <nanf+0x8>
 800395c:	4770      	bx	lr
 800395e:	bf00      	nop
 8003960:	7fc00000 	.word	0x7fc00000

08003964 <siprintf>:
 8003964:	b40e      	push	{r1, r2, r3}
 8003966:	b500      	push	{lr}
 8003968:	b09c      	sub	sp, #112	; 0x70
 800396a:	ab1d      	add	r3, sp, #116	; 0x74
 800396c:	9002      	str	r0, [sp, #8]
 800396e:	9006      	str	r0, [sp, #24]
 8003970:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003974:	4809      	ldr	r0, [pc, #36]	; (800399c <siprintf+0x38>)
 8003976:	9107      	str	r1, [sp, #28]
 8003978:	9104      	str	r1, [sp, #16]
 800397a:	4909      	ldr	r1, [pc, #36]	; (80039a0 <siprintf+0x3c>)
 800397c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003980:	9105      	str	r1, [sp, #20]
 8003982:	6800      	ldr	r0, [r0, #0]
 8003984:	9301      	str	r3, [sp, #4]
 8003986:	a902      	add	r1, sp, #8
 8003988:	f002 fd66 	bl	8006458 <_svfiprintf_r>
 800398c:	9b02      	ldr	r3, [sp, #8]
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
 8003992:	b01c      	add	sp, #112	; 0x70
 8003994:	f85d eb04 	ldr.w	lr, [sp], #4
 8003998:	b003      	add	sp, #12
 800399a:	4770      	bx	lr
 800399c:	2000000c 	.word	0x2000000c
 80039a0:	ffff0208 	.word	0xffff0208

080039a4 <sulp>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	4604      	mov	r4, r0
 80039a8:	460d      	mov	r5, r1
 80039aa:	ec45 4b10 	vmov	d0, r4, r5
 80039ae:	4616      	mov	r6, r2
 80039b0:	f002 fb0e 	bl	8005fd0 <__ulp>
 80039b4:	ec51 0b10 	vmov	r0, r1, d0
 80039b8:	b17e      	cbz	r6, 80039da <sulp+0x36>
 80039ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80039be:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	dd09      	ble.n	80039da <sulp+0x36>
 80039c6:	051b      	lsls	r3, r3, #20
 80039c8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80039cc:	2400      	movs	r4, #0
 80039ce:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80039d2:	4622      	mov	r2, r4
 80039d4:	462b      	mov	r3, r5
 80039d6:	f7fc fe4f 	bl	8000678 <__aeabi_dmul>
 80039da:	bd70      	pop	{r4, r5, r6, pc}
 80039dc:	0000      	movs	r0, r0
	...

080039e0 <_strtod_l>:
 80039e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039e4:	461f      	mov	r7, r3
 80039e6:	b0a1      	sub	sp, #132	; 0x84
 80039e8:	2300      	movs	r3, #0
 80039ea:	4681      	mov	r9, r0
 80039ec:	4638      	mov	r0, r7
 80039ee:	460e      	mov	r6, r1
 80039f0:	9217      	str	r2, [sp, #92]	; 0x5c
 80039f2:	931c      	str	r3, [sp, #112]	; 0x70
 80039f4:	f001 fff5 	bl	80059e2 <__localeconv_l>
 80039f8:	4680      	mov	r8, r0
 80039fa:	6800      	ldr	r0, [r0, #0]
 80039fc:	f7fc fc21 	bl	8000242 <strlen>
 8003a00:	f04f 0a00 	mov.w	sl, #0
 8003a04:	4604      	mov	r4, r0
 8003a06:	f04f 0b00 	mov.w	fp, #0
 8003a0a:	961b      	str	r6, [sp, #108]	; 0x6c
 8003a0c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003a0e:	781a      	ldrb	r2, [r3, #0]
 8003a10:	2a0d      	cmp	r2, #13
 8003a12:	d832      	bhi.n	8003a7a <_strtod_l+0x9a>
 8003a14:	2a09      	cmp	r2, #9
 8003a16:	d236      	bcs.n	8003a86 <_strtod_l+0xa6>
 8003a18:	2a00      	cmp	r2, #0
 8003a1a:	d03e      	beq.n	8003a9a <_strtod_l+0xba>
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	930d      	str	r3, [sp, #52]	; 0x34
 8003a20:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8003a22:	782b      	ldrb	r3, [r5, #0]
 8003a24:	2b30      	cmp	r3, #48	; 0x30
 8003a26:	f040 80ac 	bne.w	8003b82 <_strtod_l+0x1a2>
 8003a2a:	786b      	ldrb	r3, [r5, #1]
 8003a2c:	2b58      	cmp	r3, #88	; 0x58
 8003a2e:	d001      	beq.n	8003a34 <_strtod_l+0x54>
 8003a30:	2b78      	cmp	r3, #120	; 0x78
 8003a32:	d167      	bne.n	8003b04 <_strtod_l+0x124>
 8003a34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	ab1c      	add	r3, sp, #112	; 0x70
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	9702      	str	r7, [sp, #8]
 8003a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8003a40:	4a88      	ldr	r2, [pc, #544]	; (8003c64 <_strtod_l+0x284>)
 8003a42:	a91b      	add	r1, sp, #108	; 0x6c
 8003a44:	4648      	mov	r0, r9
 8003a46:	f001 fcf2 	bl	800542e <__gethex>
 8003a4a:	f010 0407 	ands.w	r4, r0, #7
 8003a4e:	4606      	mov	r6, r0
 8003a50:	d005      	beq.n	8003a5e <_strtod_l+0x7e>
 8003a52:	2c06      	cmp	r4, #6
 8003a54:	d12b      	bne.n	8003aae <_strtod_l+0xce>
 8003a56:	3501      	adds	r5, #1
 8003a58:	2300      	movs	r3, #0
 8003a5a:	951b      	str	r5, [sp, #108]	; 0x6c
 8003a5c:	930d      	str	r3, [sp, #52]	; 0x34
 8003a5e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f040 859a 	bne.w	800459a <_strtod_l+0xbba>
 8003a66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003a68:	b1e3      	cbz	r3, 8003aa4 <_strtod_l+0xc4>
 8003a6a:	4652      	mov	r2, sl
 8003a6c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8003a70:	ec43 2b10 	vmov	d0, r2, r3
 8003a74:	b021      	add	sp, #132	; 0x84
 8003a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a7a:	2a2b      	cmp	r2, #43	; 0x2b
 8003a7c:	d015      	beq.n	8003aaa <_strtod_l+0xca>
 8003a7e:	2a2d      	cmp	r2, #45	; 0x2d
 8003a80:	d004      	beq.n	8003a8c <_strtod_l+0xac>
 8003a82:	2a20      	cmp	r2, #32
 8003a84:	d1ca      	bne.n	8003a1c <_strtod_l+0x3c>
 8003a86:	3301      	adds	r3, #1
 8003a88:	931b      	str	r3, [sp, #108]	; 0x6c
 8003a8a:	e7bf      	b.n	8003a0c <_strtod_l+0x2c>
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	920d      	str	r2, [sp, #52]	; 0x34
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	921b      	str	r2, [sp, #108]	; 0x6c
 8003a94:	785b      	ldrb	r3, [r3, #1]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1c2      	bne.n	8003a20 <_strtod_l+0x40>
 8003a9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8003a9c:	961b      	str	r6, [sp, #108]	; 0x6c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f040 8579 	bne.w	8004596 <_strtod_l+0xbb6>
 8003aa4:	4652      	mov	r2, sl
 8003aa6:	465b      	mov	r3, fp
 8003aa8:	e7e2      	b.n	8003a70 <_strtod_l+0x90>
 8003aaa:	2200      	movs	r2, #0
 8003aac:	e7ef      	b.n	8003a8e <_strtod_l+0xae>
 8003aae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8003ab0:	b13a      	cbz	r2, 8003ac2 <_strtod_l+0xe2>
 8003ab2:	2135      	movs	r1, #53	; 0x35
 8003ab4:	a81e      	add	r0, sp, #120	; 0x78
 8003ab6:	f002 fb83 	bl	80061c0 <__copybits>
 8003aba:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003abc:	4648      	mov	r0, r9
 8003abe:	f001 ffef 	bl	8005aa0 <_Bfree>
 8003ac2:	3c01      	subs	r4, #1
 8003ac4:	2c04      	cmp	r4, #4
 8003ac6:	d806      	bhi.n	8003ad6 <_strtod_l+0xf6>
 8003ac8:	e8df f004 	tbb	[pc, r4]
 8003acc:	1714030a 	.word	0x1714030a
 8003ad0:	0a          	.byte	0x0a
 8003ad1:	00          	.byte	0x00
 8003ad2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 8003ad6:	0730      	lsls	r0, r6, #28
 8003ad8:	d5c1      	bpl.n	8003a5e <_strtod_l+0x7e>
 8003ada:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8003ade:	e7be      	b.n	8003a5e <_strtod_l+0x7e>
 8003ae0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 8003ae4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8003ae6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003aea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8003aee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8003af2:	e7f0      	b.n	8003ad6 <_strtod_l+0xf6>
 8003af4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8003c68 <_strtod_l+0x288>
 8003af8:	e7ed      	b.n	8003ad6 <_strtod_l+0xf6>
 8003afa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8003afe:	f04f 3aff 	mov.w	sl, #4294967295
 8003b02:	e7e8      	b.n	8003ad6 <_strtod_l+0xf6>
 8003b04:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b06:	1c5a      	adds	r2, r3, #1
 8003b08:	921b      	str	r2, [sp, #108]	; 0x6c
 8003b0a:	785b      	ldrb	r3, [r3, #1]
 8003b0c:	2b30      	cmp	r3, #48	; 0x30
 8003b0e:	d0f9      	beq.n	8003b04 <_strtod_l+0x124>
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d0a4      	beq.n	8003a5e <_strtod_l+0x7e>
 8003b14:	2301      	movs	r3, #1
 8003b16:	2500      	movs	r5, #0
 8003b18:	9306      	str	r3, [sp, #24]
 8003b1a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003b1c:	9308      	str	r3, [sp, #32]
 8003b1e:	9507      	str	r5, [sp, #28]
 8003b20:	9505      	str	r5, [sp, #20]
 8003b22:	220a      	movs	r2, #10
 8003b24:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8003b26:	7807      	ldrb	r7, [r0, #0]
 8003b28:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 8003b2c:	b2d9      	uxtb	r1, r3
 8003b2e:	2909      	cmp	r1, #9
 8003b30:	d929      	bls.n	8003b86 <_strtod_l+0x1a6>
 8003b32:	4622      	mov	r2, r4
 8003b34:	f8d8 1000 	ldr.w	r1, [r8]
 8003b38:	f002 fd96 	bl	8006668 <strncmp>
 8003b3c:	2800      	cmp	r0, #0
 8003b3e:	d031      	beq.n	8003ba4 <_strtod_l+0x1c4>
 8003b40:	2000      	movs	r0, #0
 8003b42:	9c05      	ldr	r4, [sp, #20]
 8003b44:	9004      	str	r0, [sp, #16]
 8003b46:	463b      	mov	r3, r7
 8003b48:	4602      	mov	r2, r0
 8003b4a:	2b65      	cmp	r3, #101	; 0x65
 8003b4c:	d001      	beq.n	8003b52 <_strtod_l+0x172>
 8003b4e:	2b45      	cmp	r3, #69	; 0x45
 8003b50:	d114      	bne.n	8003b7c <_strtod_l+0x19c>
 8003b52:	b924      	cbnz	r4, 8003b5e <_strtod_l+0x17e>
 8003b54:	b910      	cbnz	r0, 8003b5c <_strtod_l+0x17c>
 8003b56:	9b06      	ldr	r3, [sp, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d09e      	beq.n	8003a9a <_strtod_l+0xba>
 8003b5c:	2400      	movs	r4, #0
 8003b5e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8003b60:	1c73      	adds	r3, r6, #1
 8003b62:	931b      	str	r3, [sp, #108]	; 0x6c
 8003b64:	7873      	ldrb	r3, [r6, #1]
 8003b66:	2b2b      	cmp	r3, #43	; 0x2b
 8003b68:	d078      	beq.n	8003c5c <_strtod_l+0x27c>
 8003b6a:	2b2d      	cmp	r3, #45	; 0x2d
 8003b6c:	d070      	beq.n	8003c50 <_strtod_l+0x270>
 8003b6e:	f04f 0c00 	mov.w	ip, #0
 8003b72:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8003b76:	2f09      	cmp	r7, #9
 8003b78:	d97c      	bls.n	8003c74 <_strtod_l+0x294>
 8003b7a:	961b      	str	r6, [sp, #108]	; 0x6c
 8003b7c:	f04f 0e00 	mov.w	lr, #0
 8003b80:	e09a      	b.n	8003cb8 <_strtod_l+0x2d8>
 8003b82:	2300      	movs	r3, #0
 8003b84:	e7c7      	b.n	8003b16 <_strtod_l+0x136>
 8003b86:	9905      	ldr	r1, [sp, #20]
 8003b88:	2908      	cmp	r1, #8
 8003b8a:	bfdd      	ittte	le
 8003b8c:	9907      	ldrle	r1, [sp, #28]
 8003b8e:	fb02 3301 	mlale	r3, r2, r1, r3
 8003b92:	9307      	strle	r3, [sp, #28]
 8003b94:	fb02 3505 	mlagt	r5, r2, r5, r3
 8003b98:	9b05      	ldr	r3, [sp, #20]
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	9305      	str	r3, [sp, #20]
 8003ba0:	901b      	str	r0, [sp, #108]	; 0x6c
 8003ba2:	e7bf      	b.n	8003b24 <_strtod_l+0x144>
 8003ba4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003ba6:	191a      	adds	r2, r3, r4
 8003ba8:	921b      	str	r2, [sp, #108]	; 0x6c
 8003baa:	9a05      	ldr	r2, [sp, #20]
 8003bac:	5d1b      	ldrb	r3, [r3, r4]
 8003bae:	2a00      	cmp	r2, #0
 8003bb0:	d037      	beq.n	8003c22 <_strtod_l+0x242>
 8003bb2:	9c05      	ldr	r4, [sp, #20]
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8003bba:	2909      	cmp	r1, #9
 8003bbc:	d913      	bls.n	8003be6 <_strtod_l+0x206>
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	9104      	str	r1, [sp, #16]
 8003bc2:	e7c2      	b.n	8003b4a <_strtod_l+0x16a>
 8003bc4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	921b      	str	r2, [sp, #108]	; 0x6c
 8003bca:	785b      	ldrb	r3, [r3, #1]
 8003bcc:	3001      	adds	r0, #1
 8003bce:	2b30      	cmp	r3, #48	; 0x30
 8003bd0:	d0f8      	beq.n	8003bc4 <_strtod_l+0x1e4>
 8003bd2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8003bd6:	2a08      	cmp	r2, #8
 8003bd8:	f200 84e4 	bhi.w	80045a4 <_strtod_l+0xbc4>
 8003bdc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8003bde:	9208      	str	r2, [sp, #32]
 8003be0:	4602      	mov	r2, r0
 8003be2:	2000      	movs	r0, #0
 8003be4:	4604      	mov	r4, r0
 8003be6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 8003bea:	f100 0101 	add.w	r1, r0, #1
 8003bee:	d012      	beq.n	8003c16 <_strtod_l+0x236>
 8003bf0:	440a      	add	r2, r1
 8003bf2:	eb00 0c04 	add.w	ip, r0, r4
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	270a      	movs	r7, #10
 8003bfa:	458c      	cmp	ip, r1
 8003bfc:	d113      	bne.n	8003c26 <_strtod_l+0x246>
 8003bfe:	1821      	adds	r1, r4, r0
 8003c00:	2908      	cmp	r1, #8
 8003c02:	f104 0401 	add.w	r4, r4, #1
 8003c06:	4404      	add	r4, r0
 8003c08:	dc19      	bgt.n	8003c3e <_strtod_l+0x25e>
 8003c0a:	9b07      	ldr	r3, [sp, #28]
 8003c0c:	210a      	movs	r1, #10
 8003c0e:	fb01 e303 	mla	r3, r1, r3, lr
 8003c12:	9307      	str	r3, [sp, #28]
 8003c14:	2100      	movs	r1, #0
 8003c16:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c18:	1c58      	adds	r0, r3, #1
 8003c1a:	901b      	str	r0, [sp, #108]	; 0x6c
 8003c1c:	785b      	ldrb	r3, [r3, #1]
 8003c1e:	4608      	mov	r0, r1
 8003c20:	e7c9      	b.n	8003bb6 <_strtod_l+0x1d6>
 8003c22:	9805      	ldr	r0, [sp, #20]
 8003c24:	e7d3      	b.n	8003bce <_strtod_l+0x1ee>
 8003c26:	2908      	cmp	r1, #8
 8003c28:	f101 0101 	add.w	r1, r1, #1
 8003c2c:	dc03      	bgt.n	8003c36 <_strtod_l+0x256>
 8003c2e:	9b07      	ldr	r3, [sp, #28]
 8003c30:	437b      	muls	r3, r7
 8003c32:	9307      	str	r3, [sp, #28]
 8003c34:	e7e1      	b.n	8003bfa <_strtod_l+0x21a>
 8003c36:	2910      	cmp	r1, #16
 8003c38:	bfd8      	it	le
 8003c3a:	437d      	mulle	r5, r7
 8003c3c:	e7dd      	b.n	8003bfa <_strtod_l+0x21a>
 8003c3e:	2c10      	cmp	r4, #16
 8003c40:	bfdc      	itt	le
 8003c42:	210a      	movle	r1, #10
 8003c44:	fb01 e505 	mlale	r5, r1, r5, lr
 8003c48:	e7e4      	b.n	8003c14 <_strtod_l+0x234>
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	9304      	str	r3, [sp, #16]
 8003c4e:	e781      	b.n	8003b54 <_strtod_l+0x174>
 8003c50:	f04f 0c01 	mov.w	ip, #1
 8003c54:	1cb3      	adds	r3, r6, #2
 8003c56:	931b      	str	r3, [sp, #108]	; 0x6c
 8003c58:	78b3      	ldrb	r3, [r6, #2]
 8003c5a:	e78a      	b.n	8003b72 <_strtod_l+0x192>
 8003c5c:	f04f 0c00 	mov.w	ip, #0
 8003c60:	e7f8      	b.n	8003c54 <_strtod_l+0x274>
 8003c62:	bf00      	nop
 8003c64:	080072d0 	.word	0x080072d0
 8003c68:	7ff00000 	.word	0x7ff00000
 8003c6c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c6e:	1c5f      	adds	r7, r3, #1
 8003c70:	971b      	str	r7, [sp, #108]	; 0x6c
 8003c72:	785b      	ldrb	r3, [r3, #1]
 8003c74:	2b30      	cmp	r3, #48	; 0x30
 8003c76:	d0f9      	beq.n	8003c6c <_strtod_l+0x28c>
 8003c78:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 8003c7c:	2f08      	cmp	r7, #8
 8003c7e:	f63f af7d 	bhi.w	8003b7c <_strtod_l+0x19c>
 8003c82:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8003c86:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c88:	930a      	str	r3, [sp, #40]	; 0x28
 8003c8a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003c8c:	1c5f      	adds	r7, r3, #1
 8003c8e:	971b      	str	r7, [sp, #108]	; 0x6c
 8003c90:	785b      	ldrb	r3, [r3, #1]
 8003c92:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8003c96:	f1b8 0f09 	cmp.w	r8, #9
 8003c9a:	d937      	bls.n	8003d0c <_strtod_l+0x32c>
 8003c9c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003c9e:	1a7f      	subs	r7, r7, r1
 8003ca0:	2f08      	cmp	r7, #8
 8003ca2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8003ca6:	dc37      	bgt.n	8003d18 <_strtod_l+0x338>
 8003ca8:	45be      	cmp	lr, r7
 8003caa:	bfa8      	it	ge
 8003cac:	46be      	movge	lr, r7
 8003cae:	f1bc 0f00 	cmp.w	ip, #0
 8003cb2:	d001      	beq.n	8003cb8 <_strtod_l+0x2d8>
 8003cb4:	f1ce 0e00 	rsb	lr, lr, #0
 8003cb8:	2c00      	cmp	r4, #0
 8003cba:	d151      	bne.n	8003d60 <_strtod_l+0x380>
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	f47f aece 	bne.w	8003a5e <_strtod_l+0x7e>
 8003cc2:	9a06      	ldr	r2, [sp, #24]
 8003cc4:	2a00      	cmp	r2, #0
 8003cc6:	f47f aeca 	bne.w	8003a5e <_strtod_l+0x7e>
 8003cca:	9a04      	ldr	r2, [sp, #16]
 8003ccc:	2a00      	cmp	r2, #0
 8003cce:	f47f aee4 	bne.w	8003a9a <_strtod_l+0xba>
 8003cd2:	2b4e      	cmp	r3, #78	; 0x4e
 8003cd4:	d027      	beq.n	8003d26 <_strtod_l+0x346>
 8003cd6:	dc21      	bgt.n	8003d1c <_strtod_l+0x33c>
 8003cd8:	2b49      	cmp	r3, #73	; 0x49
 8003cda:	f47f aede 	bne.w	8003a9a <_strtod_l+0xba>
 8003cde:	49a0      	ldr	r1, [pc, #640]	; (8003f60 <_strtod_l+0x580>)
 8003ce0:	a81b      	add	r0, sp, #108	; 0x6c
 8003ce2:	f001 fdd7 	bl	8005894 <__match>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	f43f aed7 	beq.w	8003a9a <_strtod_l+0xba>
 8003cec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cee:	499d      	ldr	r1, [pc, #628]	; (8003f64 <_strtod_l+0x584>)
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	a81b      	add	r0, sp, #108	; 0x6c
 8003cf4:	931b      	str	r3, [sp, #108]	; 0x6c
 8003cf6:	f001 fdcd 	bl	8005894 <__match>
 8003cfa:	b910      	cbnz	r0, 8003d02 <_strtod_l+0x322>
 8003cfc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003cfe:	3301      	adds	r3, #1
 8003d00:	931b      	str	r3, [sp, #108]	; 0x6c
 8003d02:	f8df b274 	ldr.w	fp, [pc, #628]	; 8003f78 <_strtod_l+0x598>
 8003d06:	f04f 0a00 	mov.w	sl, #0
 8003d0a:	e6a8      	b.n	8003a5e <_strtod_l+0x7e>
 8003d0c:	210a      	movs	r1, #10
 8003d0e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8003d12:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8003d16:	e7b8      	b.n	8003c8a <_strtod_l+0x2aa>
 8003d18:	46be      	mov	lr, r7
 8003d1a:	e7c8      	b.n	8003cae <_strtod_l+0x2ce>
 8003d1c:	2b69      	cmp	r3, #105	; 0x69
 8003d1e:	d0de      	beq.n	8003cde <_strtod_l+0x2fe>
 8003d20:	2b6e      	cmp	r3, #110	; 0x6e
 8003d22:	f47f aeba 	bne.w	8003a9a <_strtod_l+0xba>
 8003d26:	4990      	ldr	r1, [pc, #576]	; (8003f68 <_strtod_l+0x588>)
 8003d28:	a81b      	add	r0, sp, #108	; 0x6c
 8003d2a:	f001 fdb3 	bl	8005894 <__match>
 8003d2e:	2800      	cmp	r0, #0
 8003d30:	f43f aeb3 	beq.w	8003a9a <_strtod_l+0xba>
 8003d34:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b28      	cmp	r3, #40	; 0x28
 8003d3a:	d10e      	bne.n	8003d5a <_strtod_l+0x37a>
 8003d3c:	aa1e      	add	r2, sp, #120	; 0x78
 8003d3e:	498b      	ldr	r1, [pc, #556]	; (8003f6c <_strtod_l+0x58c>)
 8003d40:	a81b      	add	r0, sp, #108	; 0x6c
 8003d42:	f001 fdbb 	bl	80058bc <__hexnan>
 8003d46:	2805      	cmp	r0, #5
 8003d48:	d107      	bne.n	8003d5a <_strtod_l+0x37a>
 8003d4a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8003d4c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8003d50:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8003d54:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8003d58:	e681      	b.n	8003a5e <_strtod_l+0x7e>
 8003d5a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8003f80 <_strtod_l+0x5a0>
 8003d5e:	e7d2      	b.n	8003d06 <_strtod_l+0x326>
 8003d60:	ebae 0302 	sub.w	r3, lr, r2
 8003d64:	9306      	str	r3, [sp, #24]
 8003d66:	9b05      	ldr	r3, [sp, #20]
 8003d68:	9807      	ldr	r0, [sp, #28]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	bf08      	it	eq
 8003d6e:	4623      	moveq	r3, r4
 8003d70:	2c10      	cmp	r4, #16
 8003d72:	9305      	str	r3, [sp, #20]
 8003d74:	46a0      	mov	r8, r4
 8003d76:	bfa8      	it	ge
 8003d78:	f04f 0810 	movge.w	r8, #16
 8003d7c:	f7fc fc02 	bl	8000584 <__aeabi_ui2d>
 8003d80:	2c09      	cmp	r4, #9
 8003d82:	4682      	mov	sl, r0
 8003d84:	468b      	mov	fp, r1
 8003d86:	dc13      	bgt.n	8003db0 <_strtod_l+0x3d0>
 8003d88:	9b06      	ldr	r3, [sp, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f43f ae67 	beq.w	8003a5e <_strtod_l+0x7e>
 8003d90:	9b06      	ldr	r3, [sp, #24]
 8003d92:	dd7a      	ble.n	8003e8a <_strtod_l+0x4aa>
 8003d94:	2b16      	cmp	r3, #22
 8003d96:	dc61      	bgt.n	8003e5c <_strtod_l+0x47c>
 8003d98:	4a75      	ldr	r2, [pc, #468]	; (8003f70 <_strtod_l+0x590>)
 8003d9a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 8003d9e:	e9de 0100 	ldrd	r0, r1, [lr]
 8003da2:	4652      	mov	r2, sl
 8003da4:	465b      	mov	r3, fp
 8003da6:	f7fc fc67 	bl	8000678 <__aeabi_dmul>
 8003daa:	4682      	mov	sl, r0
 8003dac:	468b      	mov	fp, r1
 8003dae:	e656      	b.n	8003a5e <_strtod_l+0x7e>
 8003db0:	4b6f      	ldr	r3, [pc, #444]	; (8003f70 <_strtod_l+0x590>)
 8003db2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8003db6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8003dba:	f7fc fc5d 	bl	8000678 <__aeabi_dmul>
 8003dbe:	4606      	mov	r6, r0
 8003dc0:	4628      	mov	r0, r5
 8003dc2:	460f      	mov	r7, r1
 8003dc4:	f7fc fbde 	bl	8000584 <__aeabi_ui2d>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	460b      	mov	r3, r1
 8003dcc:	4630      	mov	r0, r6
 8003dce:	4639      	mov	r1, r7
 8003dd0:	f7fc fa9c 	bl	800030c <__adddf3>
 8003dd4:	2c0f      	cmp	r4, #15
 8003dd6:	4682      	mov	sl, r0
 8003dd8:	468b      	mov	fp, r1
 8003dda:	ddd5      	ble.n	8003d88 <_strtod_l+0x3a8>
 8003ddc:	9b06      	ldr	r3, [sp, #24]
 8003dde:	eba4 0808 	sub.w	r8, r4, r8
 8003de2:	4498      	add	r8, r3
 8003de4:	f1b8 0f00 	cmp.w	r8, #0
 8003de8:	f340 8096 	ble.w	8003f18 <_strtod_l+0x538>
 8003dec:	f018 030f 	ands.w	r3, r8, #15
 8003df0:	d00a      	beq.n	8003e08 <_strtod_l+0x428>
 8003df2:	495f      	ldr	r1, [pc, #380]	; (8003f70 <_strtod_l+0x590>)
 8003df4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8003df8:	4652      	mov	r2, sl
 8003dfa:	465b      	mov	r3, fp
 8003dfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e00:	f7fc fc3a 	bl	8000678 <__aeabi_dmul>
 8003e04:	4682      	mov	sl, r0
 8003e06:	468b      	mov	fp, r1
 8003e08:	f038 080f 	bics.w	r8, r8, #15
 8003e0c:	d073      	beq.n	8003ef6 <_strtod_l+0x516>
 8003e0e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8003e12:	dd47      	ble.n	8003ea4 <_strtod_l+0x4c4>
 8003e14:	2400      	movs	r4, #0
 8003e16:	46a0      	mov	r8, r4
 8003e18:	9407      	str	r4, [sp, #28]
 8003e1a:	9405      	str	r4, [sp, #20]
 8003e1c:	2322      	movs	r3, #34	; 0x22
 8003e1e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8003f78 <_strtod_l+0x598>
 8003e22:	f8c9 3000 	str.w	r3, [r9]
 8003e26:	f04f 0a00 	mov.w	sl, #0
 8003e2a:	9b07      	ldr	r3, [sp, #28]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f43f ae16 	beq.w	8003a5e <_strtod_l+0x7e>
 8003e32:	991c      	ldr	r1, [sp, #112]	; 0x70
 8003e34:	4648      	mov	r0, r9
 8003e36:	f001 fe33 	bl	8005aa0 <_Bfree>
 8003e3a:	9905      	ldr	r1, [sp, #20]
 8003e3c:	4648      	mov	r0, r9
 8003e3e:	f001 fe2f 	bl	8005aa0 <_Bfree>
 8003e42:	4641      	mov	r1, r8
 8003e44:	4648      	mov	r0, r9
 8003e46:	f001 fe2b 	bl	8005aa0 <_Bfree>
 8003e4a:	9907      	ldr	r1, [sp, #28]
 8003e4c:	4648      	mov	r0, r9
 8003e4e:	f001 fe27 	bl	8005aa0 <_Bfree>
 8003e52:	4621      	mov	r1, r4
 8003e54:	4648      	mov	r0, r9
 8003e56:	f001 fe23 	bl	8005aa0 <_Bfree>
 8003e5a:	e600      	b.n	8003a5e <_strtod_l+0x7e>
 8003e5c:	9a06      	ldr	r2, [sp, #24]
 8003e5e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8003e62:	4293      	cmp	r3, r2
 8003e64:	dbba      	blt.n	8003ddc <_strtod_l+0x3fc>
 8003e66:	4d42      	ldr	r5, [pc, #264]	; (8003f70 <_strtod_l+0x590>)
 8003e68:	f1c4 040f 	rsb	r4, r4, #15
 8003e6c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8003e70:	4652      	mov	r2, sl
 8003e72:	465b      	mov	r3, fp
 8003e74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003e78:	f7fc fbfe 	bl	8000678 <__aeabi_dmul>
 8003e7c:	9b06      	ldr	r3, [sp, #24]
 8003e7e:	1b1c      	subs	r4, r3, r4
 8003e80:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8003e84:	e9d5 2300 	ldrd	r2, r3, [r5]
 8003e88:	e78d      	b.n	8003da6 <_strtod_l+0x3c6>
 8003e8a:	f113 0f16 	cmn.w	r3, #22
 8003e8e:	dba5      	blt.n	8003ddc <_strtod_l+0x3fc>
 8003e90:	4a37      	ldr	r2, [pc, #220]	; (8003f70 <_strtod_l+0x590>)
 8003e92:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8003e96:	e9d2 2300 	ldrd	r2, r3, [r2]
 8003e9a:	4650      	mov	r0, sl
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	f7fc fd15 	bl	80008cc <__aeabi_ddiv>
 8003ea2:	e782      	b.n	8003daa <_strtod_l+0x3ca>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4e33      	ldr	r6, [pc, #204]	; (8003f74 <_strtod_l+0x594>)
 8003ea8:	ea4f 1828 	mov.w	r8, r8, asr #4
 8003eac:	4650      	mov	r0, sl
 8003eae:	4659      	mov	r1, fp
 8003eb0:	461d      	mov	r5, r3
 8003eb2:	f1b8 0f01 	cmp.w	r8, #1
 8003eb6:	dc21      	bgt.n	8003efc <_strtod_l+0x51c>
 8003eb8:	b10b      	cbz	r3, 8003ebe <_strtod_l+0x4de>
 8003eba:	4682      	mov	sl, r0
 8003ebc:	468b      	mov	fp, r1
 8003ebe:	4b2d      	ldr	r3, [pc, #180]	; (8003f74 <_strtod_l+0x594>)
 8003ec0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8003ec4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8003ec8:	4652      	mov	r2, sl
 8003eca:	465b      	mov	r3, fp
 8003ecc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8003ed0:	f7fc fbd2 	bl	8000678 <__aeabi_dmul>
 8003ed4:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <_strtod_l+0x598>)
 8003ed6:	460a      	mov	r2, r1
 8003ed8:	400b      	ands	r3, r1
 8003eda:	4928      	ldr	r1, [pc, #160]	; (8003f7c <_strtod_l+0x59c>)
 8003edc:	428b      	cmp	r3, r1
 8003ede:	4682      	mov	sl, r0
 8003ee0:	d898      	bhi.n	8003e14 <_strtod_l+0x434>
 8003ee2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8003ee6:	428b      	cmp	r3, r1
 8003ee8:	bf86      	itte	hi
 8003eea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8003f84 <_strtod_l+0x5a4>
 8003eee:	f04f 3aff 	movhi.w	sl, #4294967295
 8003ef2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	9304      	str	r3, [sp, #16]
 8003efa:	e077      	b.n	8003fec <_strtod_l+0x60c>
 8003efc:	f018 0f01 	tst.w	r8, #1
 8003f00:	d006      	beq.n	8003f10 <_strtod_l+0x530>
 8003f02:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8003f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0a:	f7fc fbb5 	bl	8000678 <__aeabi_dmul>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	3501      	adds	r5, #1
 8003f12:	ea4f 0868 	mov.w	r8, r8, asr #1
 8003f16:	e7cc      	b.n	8003eb2 <_strtod_l+0x4d2>
 8003f18:	d0ed      	beq.n	8003ef6 <_strtod_l+0x516>
 8003f1a:	f1c8 0800 	rsb	r8, r8, #0
 8003f1e:	f018 020f 	ands.w	r2, r8, #15
 8003f22:	d00a      	beq.n	8003f3a <_strtod_l+0x55a>
 8003f24:	4b12      	ldr	r3, [pc, #72]	; (8003f70 <_strtod_l+0x590>)
 8003f26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003f2a:	4650      	mov	r0, sl
 8003f2c:	4659      	mov	r1, fp
 8003f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f32:	f7fc fccb 	bl	80008cc <__aeabi_ddiv>
 8003f36:	4682      	mov	sl, r0
 8003f38:	468b      	mov	fp, r1
 8003f3a:	ea5f 1828 	movs.w	r8, r8, asr #4
 8003f3e:	d0da      	beq.n	8003ef6 <_strtod_l+0x516>
 8003f40:	f1b8 0f1f 	cmp.w	r8, #31
 8003f44:	dd20      	ble.n	8003f88 <_strtod_l+0x5a8>
 8003f46:	2400      	movs	r4, #0
 8003f48:	46a0      	mov	r8, r4
 8003f4a:	9407      	str	r4, [sp, #28]
 8003f4c:	9405      	str	r4, [sp, #20]
 8003f4e:	2322      	movs	r3, #34	; 0x22
 8003f50:	f04f 0a00 	mov.w	sl, #0
 8003f54:	f04f 0b00 	mov.w	fp, #0
 8003f58:	f8c9 3000 	str.w	r3, [r9]
 8003f5c:	e765      	b.n	8003e2a <_strtod_l+0x44a>
 8003f5e:	bf00      	nop
 8003f60:	08007299 	.word	0x08007299
 8003f64:	08007323 	.word	0x08007323
 8003f68:	080072a1 	.word	0x080072a1
 8003f6c:	080072e4 	.word	0x080072e4
 8003f70:	08007360 	.word	0x08007360
 8003f74:	08007338 	.word	0x08007338
 8003f78:	7ff00000 	.word	0x7ff00000
 8003f7c:	7ca00000 	.word	0x7ca00000
 8003f80:	fff80000 	.word	0xfff80000
 8003f84:	7fefffff 	.word	0x7fefffff
 8003f88:	f018 0310 	ands.w	r3, r8, #16
 8003f8c:	bf18      	it	ne
 8003f8e:	236a      	movne	r3, #106	; 0x6a
 8003f90:	4da0      	ldr	r5, [pc, #640]	; (8004214 <_strtod_l+0x834>)
 8003f92:	9304      	str	r3, [sp, #16]
 8003f94:	4650      	mov	r0, sl
 8003f96:	4659      	mov	r1, fp
 8003f98:	2300      	movs	r3, #0
 8003f9a:	f1b8 0f00 	cmp.w	r8, #0
 8003f9e:	f300 810a 	bgt.w	80041b6 <_strtod_l+0x7d6>
 8003fa2:	b10b      	cbz	r3, 8003fa8 <_strtod_l+0x5c8>
 8003fa4:	4682      	mov	sl, r0
 8003fa6:	468b      	mov	fp, r1
 8003fa8:	9b04      	ldr	r3, [sp, #16]
 8003faa:	b1bb      	cbz	r3, 8003fdc <_strtod_l+0x5fc>
 8003fac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8003fb0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	4659      	mov	r1, fp
 8003fb8:	dd10      	ble.n	8003fdc <_strtod_l+0x5fc>
 8003fba:	2b1f      	cmp	r3, #31
 8003fbc:	f340 8107 	ble.w	80041ce <_strtod_l+0x7ee>
 8003fc0:	2b34      	cmp	r3, #52	; 0x34
 8003fc2:	bfde      	ittt	le
 8003fc4:	3b20      	suble	r3, #32
 8003fc6:	f04f 32ff 	movle.w	r2, #4294967295
 8003fca:	fa02 f303 	lslle.w	r3, r2, r3
 8003fce:	f04f 0a00 	mov.w	sl, #0
 8003fd2:	bfcc      	ite	gt
 8003fd4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8003fd8:	ea03 0b01 	andle.w	fp, r3, r1
 8003fdc:	2200      	movs	r2, #0
 8003fde:	2300      	movs	r3, #0
 8003fe0:	4650      	mov	r0, sl
 8003fe2:	4659      	mov	r1, fp
 8003fe4:	f7fc fdb0 	bl	8000b48 <__aeabi_dcmpeq>
 8003fe8:	2800      	cmp	r0, #0
 8003fea:	d1ac      	bne.n	8003f46 <_strtod_l+0x566>
 8003fec:	9b07      	ldr	r3, [sp, #28]
 8003fee:	9300      	str	r3, [sp, #0]
 8003ff0:	9a05      	ldr	r2, [sp, #20]
 8003ff2:	9908      	ldr	r1, [sp, #32]
 8003ff4:	4623      	mov	r3, r4
 8003ff6:	4648      	mov	r0, r9
 8003ff8:	f001 fda4 	bl	8005b44 <__s2b>
 8003ffc:	9007      	str	r0, [sp, #28]
 8003ffe:	2800      	cmp	r0, #0
 8004000:	f43f af08 	beq.w	8003e14 <_strtod_l+0x434>
 8004004:	9a06      	ldr	r2, [sp, #24]
 8004006:	9b06      	ldr	r3, [sp, #24]
 8004008:	2a00      	cmp	r2, #0
 800400a:	f1c3 0300 	rsb	r3, r3, #0
 800400e:	bfa8      	it	ge
 8004010:	2300      	movge	r3, #0
 8004012:	930e      	str	r3, [sp, #56]	; 0x38
 8004014:	2400      	movs	r4, #0
 8004016:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800401a:	9316      	str	r3, [sp, #88]	; 0x58
 800401c:	46a0      	mov	r8, r4
 800401e:	9b07      	ldr	r3, [sp, #28]
 8004020:	4648      	mov	r0, r9
 8004022:	6859      	ldr	r1, [r3, #4]
 8004024:	f001 fd08 	bl	8005a38 <_Balloc>
 8004028:	9005      	str	r0, [sp, #20]
 800402a:	2800      	cmp	r0, #0
 800402c:	f43f aef6 	beq.w	8003e1c <_strtod_l+0x43c>
 8004030:	9b07      	ldr	r3, [sp, #28]
 8004032:	691a      	ldr	r2, [r3, #16]
 8004034:	3202      	adds	r2, #2
 8004036:	f103 010c 	add.w	r1, r3, #12
 800403a:	0092      	lsls	r2, r2, #2
 800403c:	300c      	adds	r0, #12
 800403e:	f7fe fe39 	bl	8002cb4 <memcpy>
 8004042:	aa1e      	add	r2, sp, #120	; 0x78
 8004044:	a91d      	add	r1, sp, #116	; 0x74
 8004046:	ec4b ab10 	vmov	d0, sl, fp
 800404a:	4648      	mov	r0, r9
 800404c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004050:	f002 f834 	bl	80060bc <__d2b>
 8004054:	901c      	str	r0, [sp, #112]	; 0x70
 8004056:	2800      	cmp	r0, #0
 8004058:	f43f aee0 	beq.w	8003e1c <_strtod_l+0x43c>
 800405c:	2101      	movs	r1, #1
 800405e:	4648      	mov	r0, r9
 8004060:	f001 fdfc 	bl	8005c5c <__i2b>
 8004064:	4680      	mov	r8, r0
 8004066:	2800      	cmp	r0, #0
 8004068:	f43f aed8 	beq.w	8003e1c <_strtod_l+0x43c>
 800406c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800406e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8004070:	2e00      	cmp	r6, #0
 8004072:	bfab      	itete	ge
 8004074:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8004076:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8004078:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800407a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800407c:	bfac      	ite	ge
 800407e:	18f7      	addge	r7, r6, r3
 8004080:	1b9d      	sublt	r5, r3, r6
 8004082:	9b04      	ldr	r3, [sp, #16]
 8004084:	1af6      	subs	r6, r6, r3
 8004086:	4416      	add	r6, r2
 8004088:	4b63      	ldr	r3, [pc, #396]	; (8004218 <_strtod_l+0x838>)
 800408a:	3e01      	subs	r6, #1
 800408c:	429e      	cmp	r6, r3
 800408e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8004092:	f280 80af 	bge.w	80041f4 <_strtod_l+0x814>
 8004096:	1b9b      	subs	r3, r3, r6
 8004098:	2b1f      	cmp	r3, #31
 800409a:	eba2 0203 	sub.w	r2, r2, r3
 800409e:	f04f 0101 	mov.w	r1, #1
 80040a2:	f300 809b 	bgt.w	80041dc <_strtod_l+0x7fc>
 80040a6:	fa01 f303 	lsl.w	r3, r1, r3
 80040aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80040ac:	2300      	movs	r3, #0
 80040ae:	930a      	str	r3, [sp, #40]	; 0x28
 80040b0:	18be      	adds	r6, r7, r2
 80040b2:	9b04      	ldr	r3, [sp, #16]
 80040b4:	42b7      	cmp	r7, r6
 80040b6:	4415      	add	r5, r2
 80040b8:	441d      	add	r5, r3
 80040ba:	463b      	mov	r3, r7
 80040bc:	bfa8      	it	ge
 80040be:	4633      	movge	r3, r6
 80040c0:	42ab      	cmp	r3, r5
 80040c2:	bfa8      	it	ge
 80040c4:	462b      	movge	r3, r5
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	bfc2      	ittt	gt
 80040ca:	1af6      	subgt	r6, r6, r3
 80040cc:	1aed      	subgt	r5, r5, r3
 80040ce:	1aff      	subgt	r7, r7, r3
 80040d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80040d2:	b1bb      	cbz	r3, 8004104 <_strtod_l+0x724>
 80040d4:	4641      	mov	r1, r8
 80040d6:	461a      	mov	r2, r3
 80040d8:	4648      	mov	r0, r9
 80040da:	f001 fe5f 	bl	8005d9c <__pow5mult>
 80040de:	4680      	mov	r8, r0
 80040e0:	2800      	cmp	r0, #0
 80040e2:	f43f ae9b 	beq.w	8003e1c <_strtod_l+0x43c>
 80040e6:	4601      	mov	r1, r0
 80040e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80040ea:	4648      	mov	r0, r9
 80040ec:	f001 fdbf 	bl	8005c6e <__multiply>
 80040f0:	900c      	str	r0, [sp, #48]	; 0x30
 80040f2:	2800      	cmp	r0, #0
 80040f4:	f43f ae92 	beq.w	8003e1c <_strtod_l+0x43c>
 80040f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80040fa:	4648      	mov	r0, r9
 80040fc:	f001 fcd0 	bl	8005aa0 <_Bfree>
 8004100:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004102:	931c      	str	r3, [sp, #112]	; 0x70
 8004104:	2e00      	cmp	r6, #0
 8004106:	dc7a      	bgt.n	80041fe <_strtod_l+0x81e>
 8004108:	9b06      	ldr	r3, [sp, #24]
 800410a:	2b00      	cmp	r3, #0
 800410c:	dd08      	ble.n	8004120 <_strtod_l+0x740>
 800410e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8004110:	9905      	ldr	r1, [sp, #20]
 8004112:	4648      	mov	r0, r9
 8004114:	f001 fe42 	bl	8005d9c <__pow5mult>
 8004118:	9005      	str	r0, [sp, #20]
 800411a:	2800      	cmp	r0, #0
 800411c:	f43f ae7e 	beq.w	8003e1c <_strtod_l+0x43c>
 8004120:	2d00      	cmp	r5, #0
 8004122:	dd08      	ble.n	8004136 <_strtod_l+0x756>
 8004124:	462a      	mov	r2, r5
 8004126:	9905      	ldr	r1, [sp, #20]
 8004128:	4648      	mov	r0, r9
 800412a:	f001 fe85 	bl	8005e38 <__lshift>
 800412e:	9005      	str	r0, [sp, #20]
 8004130:	2800      	cmp	r0, #0
 8004132:	f43f ae73 	beq.w	8003e1c <_strtod_l+0x43c>
 8004136:	2f00      	cmp	r7, #0
 8004138:	dd08      	ble.n	800414c <_strtod_l+0x76c>
 800413a:	4641      	mov	r1, r8
 800413c:	463a      	mov	r2, r7
 800413e:	4648      	mov	r0, r9
 8004140:	f001 fe7a 	bl	8005e38 <__lshift>
 8004144:	4680      	mov	r8, r0
 8004146:	2800      	cmp	r0, #0
 8004148:	f43f ae68 	beq.w	8003e1c <_strtod_l+0x43c>
 800414c:	9a05      	ldr	r2, [sp, #20]
 800414e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004150:	4648      	mov	r0, r9
 8004152:	f001 fedf 	bl	8005f14 <__mdiff>
 8004156:	4604      	mov	r4, r0
 8004158:	2800      	cmp	r0, #0
 800415a:	f43f ae5f 	beq.w	8003e1c <_strtod_l+0x43c>
 800415e:	68c3      	ldr	r3, [r0, #12]
 8004160:	930c      	str	r3, [sp, #48]	; 0x30
 8004162:	2300      	movs	r3, #0
 8004164:	60c3      	str	r3, [r0, #12]
 8004166:	4641      	mov	r1, r8
 8004168:	f001 feba 	bl	8005ee0 <__mcmp>
 800416c:	2800      	cmp	r0, #0
 800416e:	da55      	bge.n	800421c <_strtod_l+0x83c>
 8004170:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004172:	b9e3      	cbnz	r3, 80041ae <_strtod_l+0x7ce>
 8004174:	f1ba 0f00 	cmp.w	sl, #0
 8004178:	d119      	bne.n	80041ae <_strtod_l+0x7ce>
 800417a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800417e:	b9b3      	cbnz	r3, 80041ae <_strtod_l+0x7ce>
 8004180:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004184:	0d1b      	lsrs	r3, r3, #20
 8004186:	051b      	lsls	r3, r3, #20
 8004188:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800418c:	d90f      	bls.n	80041ae <_strtod_l+0x7ce>
 800418e:	6963      	ldr	r3, [r4, #20]
 8004190:	b913      	cbnz	r3, 8004198 <_strtod_l+0x7b8>
 8004192:	6923      	ldr	r3, [r4, #16]
 8004194:	2b01      	cmp	r3, #1
 8004196:	dd0a      	ble.n	80041ae <_strtod_l+0x7ce>
 8004198:	4621      	mov	r1, r4
 800419a:	2201      	movs	r2, #1
 800419c:	4648      	mov	r0, r9
 800419e:	f001 fe4b 	bl	8005e38 <__lshift>
 80041a2:	4641      	mov	r1, r8
 80041a4:	4604      	mov	r4, r0
 80041a6:	f001 fe9b 	bl	8005ee0 <__mcmp>
 80041aa:	2800      	cmp	r0, #0
 80041ac:	dc67      	bgt.n	800427e <_strtod_l+0x89e>
 80041ae:	9b04      	ldr	r3, [sp, #16]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d171      	bne.n	8004298 <_strtod_l+0x8b8>
 80041b4:	e63d      	b.n	8003e32 <_strtod_l+0x452>
 80041b6:	f018 0f01 	tst.w	r8, #1
 80041ba:	d004      	beq.n	80041c6 <_strtod_l+0x7e6>
 80041bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041c0:	f7fc fa5a 	bl	8000678 <__aeabi_dmul>
 80041c4:	2301      	movs	r3, #1
 80041c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80041ca:	3508      	adds	r5, #8
 80041cc:	e6e5      	b.n	8003f9a <_strtod_l+0x5ba>
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295
 80041d2:	fa02 f303 	lsl.w	r3, r2, r3
 80041d6:	ea03 0a0a 	and.w	sl, r3, sl
 80041da:	e6ff      	b.n	8003fdc <_strtod_l+0x5fc>
 80041dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80041e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80041e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80041e8:	36e2      	adds	r6, #226	; 0xe2
 80041ea:	fa01 f306 	lsl.w	r3, r1, r6
 80041ee:	930a      	str	r3, [sp, #40]	; 0x28
 80041f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80041f2:	e75d      	b.n	80040b0 <_strtod_l+0x6d0>
 80041f4:	2300      	movs	r3, #0
 80041f6:	930a      	str	r3, [sp, #40]	; 0x28
 80041f8:	2301      	movs	r3, #1
 80041fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80041fc:	e758      	b.n	80040b0 <_strtod_l+0x6d0>
 80041fe:	4632      	mov	r2, r6
 8004200:	991c      	ldr	r1, [sp, #112]	; 0x70
 8004202:	4648      	mov	r0, r9
 8004204:	f001 fe18 	bl	8005e38 <__lshift>
 8004208:	901c      	str	r0, [sp, #112]	; 0x70
 800420a:	2800      	cmp	r0, #0
 800420c:	f47f af7c 	bne.w	8004108 <_strtod_l+0x728>
 8004210:	e604      	b.n	8003e1c <_strtod_l+0x43c>
 8004212:	bf00      	nop
 8004214:	080072f8 	.word	0x080072f8
 8004218:	fffffc02 	.word	0xfffffc02
 800421c:	465d      	mov	r5, fp
 800421e:	f040 8086 	bne.w	800432e <_strtod_l+0x94e>
 8004222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004224:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004228:	b32a      	cbz	r2, 8004276 <_strtod_l+0x896>
 800422a:	4aaf      	ldr	r2, [pc, #700]	; (80044e8 <_strtod_l+0xb08>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d153      	bne.n	80042d8 <_strtod_l+0x8f8>
 8004230:	9b04      	ldr	r3, [sp, #16]
 8004232:	4650      	mov	r0, sl
 8004234:	b1d3      	cbz	r3, 800426c <_strtod_l+0x88c>
 8004236:	4aad      	ldr	r2, [pc, #692]	; (80044ec <_strtod_l+0xb0c>)
 8004238:	402a      	ands	r2, r5
 800423a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800423e:	f04f 31ff 	mov.w	r1, #4294967295
 8004242:	d816      	bhi.n	8004272 <_strtod_l+0x892>
 8004244:	0d12      	lsrs	r2, r2, #20
 8004246:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800424a:	fa01 f303 	lsl.w	r3, r1, r3
 800424e:	4298      	cmp	r0, r3
 8004250:	d142      	bne.n	80042d8 <_strtod_l+0x8f8>
 8004252:	4ba7      	ldr	r3, [pc, #668]	; (80044f0 <_strtod_l+0xb10>)
 8004254:	429d      	cmp	r5, r3
 8004256:	d102      	bne.n	800425e <_strtod_l+0x87e>
 8004258:	3001      	adds	r0, #1
 800425a:	f43f addf 	beq.w	8003e1c <_strtod_l+0x43c>
 800425e:	4ba3      	ldr	r3, [pc, #652]	; (80044ec <_strtod_l+0xb0c>)
 8004260:	402b      	ands	r3, r5
 8004262:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8004266:	f04f 0a00 	mov.w	sl, #0
 800426a:	e7a0      	b.n	80041ae <_strtod_l+0x7ce>
 800426c:	f04f 33ff 	mov.w	r3, #4294967295
 8004270:	e7ed      	b.n	800424e <_strtod_l+0x86e>
 8004272:	460b      	mov	r3, r1
 8004274:	e7eb      	b.n	800424e <_strtod_l+0x86e>
 8004276:	bb7b      	cbnz	r3, 80042d8 <_strtod_l+0x8f8>
 8004278:	f1ba 0f00 	cmp.w	sl, #0
 800427c:	d12c      	bne.n	80042d8 <_strtod_l+0x8f8>
 800427e:	9904      	ldr	r1, [sp, #16]
 8004280:	4a9a      	ldr	r2, [pc, #616]	; (80044ec <_strtod_l+0xb0c>)
 8004282:	465b      	mov	r3, fp
 8004284:	b1f1      	cbz	r1, 80042c4 <_strtod_l+0x8e4>
 8004286:	ea02 010b 	and.w	r1, r2, fp
 800428a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800428e:	dc19      	bgt.n	80042c4 <_strtod_l+0x8e4>
 8004290:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004294:	f77f ae5b 	ble.w	8003f4e <_strtod_l+0x56e>
 8004298:	4a96      	ldr	r2, [pc, #600]	; (80044f4 <_strtod_l+0xb14>)
 800429a:	2300      	movs	r3, #0
 800429c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80042a0:	4650      	mov	r0, sl
 80042a2:	4659      	mov	r1, fp
 80042a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80042a8:	f7fc f9e6 	bl	8000678 <__aeabi_dmul>
 80042ac:	4682      	mov	sl, r0
 80042ae:	468b      	mov	fp, r1
 80042b0:	2900      	cmp	r1, #0
 80042b2:	f47f adbe 	bne.w	8003e32 <_strtod_l+0x452>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	f47f adbb 	bne.w	8003e32 <_strtod_l+0x452>
 80042bc:	2322      	movs	r3, #34	; 0x22
 80042be:	f8c9 3000 	str.w	r3, [r9]
 80042c2:	e5b6      	b.n	8003e32 <_strtod_l+0x452>
 80042c4:	4013      	ands	r3, r2
 80042c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80042ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80042ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80042d2:	f04f 3aff 	mov.w	sl, #4294967295
 80042d6:	e76a      	b.n	80041ae <_strtod_l+0x7ce>
 80042d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042da:	b193      	cbz	r3, 8004302 <_strtod_l+0x922>
 80042dc:	422b      	tst	r3, r5
 80042de:	f43f af66 	beq.w	80041ae <_strtod_l+0x7ce>
 80042e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80042e4:	9a04      	ldr	r2, [sp, #16]
 80042e6:	4650      	mov	r0, sl
 80042e8:	4659      	mov	r1, fp
 80042ea:	b173      	cbz	r3, 800430a <_strtod_l+0x92a>
 80042ec:	f7ff fb5a 	bl	80039a4 <sulp>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80042f8:	f7fc f808 	bl	800030c <__adddf3>
 80042fc:	4682      	mov	sl, r0
 80042fe:	468b      	mov	fp, r1
 8004300:	e755      	b.n	80041ae <_strtod_l+0x7ce>
 8004302:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004304:	ea13 0f0a 	tst.w	r3, sl
 8004308:	e7e9      	b.n	80042de <_strtod_l+0x8fe>
 800430a:	f7ff fb4b 	bl	80039a4 <sulp>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004316:	f7fb fff7 	bl	8000308 <__aeabi_dsub>
 800431a:	2200      	movs	r2, #0
 800431c:	2300      	movs	r3, #0
 800431e:	4682      	mov	sl, r0
 8004320:	468b      	mov	fp, r1
 8004322:	f7fc fc11 	bl	8000b48 <__aeabi_dcmpeq>
 8004326:	2800      	cmp	r0, #0
 8004328:	f47f ae11 	bne.w	8003f4e <_strtod_l+0x56e>
 800432c:	e73f      	b.n	80041ae <_strtod_l+0x7ce>
 800432e:	4641      	mov	r1, r8
 8004330:	4620      	mov	r0, r4
 8004332:	f001 ff12 	bl	800615a <__ratio>
 8004336:	ec57 6b10 	vmov	r6, r7, d0
 800433a:	2200      	movs	r2, #0
 800433c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004340:	ee10 0a10 	vmov	r0, s0
 8004344:	4639      	mov	r1, r7
 8004346:	f7fc fc13 	bl	8000b70 <__aeabi_dcmple>
 800434a:	2800      	cmp	r0, #0
 800434c:	d077      	beq.n	800443e <_strtod_l+0xa5e>
 800434e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004350:	2b00      	cmp	r3, #0
 8004352:	d04a      	beq.n	80043ea <_strtod_l+0xa0a>
 8004354:	4b68      	ldr	r3, [pc, #416]	; (80044f8 <_strtod_l+0xb18>)
 8004356:	2200      	movs	r2, #0
 8004358:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800435c:	4f66      	ldr	r7, [pc, #408]	; (80044f8 <_strtod_l+0xb18>)
 800435e:	2600      	movs	r6, #0
 8004360:	4b62      	ldr	r3, [pc, #392]	; (80044ec <_strtod_l+0xb0c>)
 8004362:	402b      	ands	r3, r5
 8004364:	930f      	str	r3, [sp, #60]	; 0x3c
 8004366:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004368:	4b64      	ldr	r3, [pc, #400]	; (80044fc <_strtod_l+0xb1c>)
 800436a:	429a      	cmp	r2, r3
 800436c:	f040 80ce 	bne.w	800450c <_strtod_l+0xb2c>
 8004370:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004374:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004378:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800437c:	ec4b ab10 	vmov	d0, sl, fp
 8004380:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004384:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004388:	f001 fe22 	bl	8005fd0 <__ulp>
 800438c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004390:	ec53 2b10 	vmov	r2, r3, d0
 8004394:	f7fc f970 	bl	8000678 <__aeabi_dmul>
 8004398:	4652      	mov	r2, sl
 800439a:	465b      	mov	r3, fp
 800439c:	f7fb ffb6 	bl	800030c <__adddf3>
 80043a0:	460b      	mov	r3, r1
 80043a2:	4952      	ldr	r1, [pc, #328]	; (80044ec <_strtod_l+0xb0c>)
 80043a4:	4a56      	ldr	r2, [pc, #344]	; (8004500 <_strtod_l+0xb20>)
 80043a6:	4019      	ands	r1, r3
 80043a8:	4291      	cmp	r1, r2
 80043aa:	4682      	mov	sl, r0
 80043ac:	d95b      	bls.n	8004466 <_strtod_l+0xa86>
 80043ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d103      	bne.n	80043c0 <_strtod_l+0x9e0>
 80043b8:	9b08      	ldr	r3, [sp, #32]
 80043ba:	3301      	adds	r3, #1
 80043bc:	f43f ad2e 	beq.w	8003e1c <_strtod_l+0x43c>
 80043c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 80044f0 <_strtod_l+0xb10>
 80043c4:	f04f 3aff 	mov.w	sl, #4294967295
 80043c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80043ca:	4648      	mov	r0, r9
 80043cc:	f001 fb68 	bl	8005aa0 <_Bfree>
 80043d0:	9905      	ldr	r1, [sp, #20]
 80043d2:	4648      	mov	r0, r9
 80043d4:	f001 fb64 	bl	8005aa0 <_Bfree>
 80043d8:	4641      	mov	r1, r8
 80043da:	4648      	mov	r0, r9
 80043dc:	f001 fb60 	bl	8005aa0 <_Bfree>
 80043e0:	4621      	mov	r1, r4
 80043e2:	4648      	mov	r0, r9
 80043e4:	f001 fb5c 	bl	8005aa0 <_Bfree>
 80043e8:	e619      	b.n	800401e <_strtod_l+0x63e>
 80043ea:	f1ba 0f00 	cmp.w	sl, #0
 80043ee:	d11a      	bne.n	8004426 <_strtod_l+0xa46>
 80043f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80043f4:	b9eb      	cbnz	r3, 8004432 <_strtod_l+0xa52>
 80043f6:	2200      	movs	r2, #0
 80043f8:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <_strtod_l+0xb18>)
 80043fa:	4630      	mov	r0, r6
 80043fc:	4639      	mov	r1, r7
 80043fe:	f7fc fbad 	bl	8000b5c <__aeabi_dcmplt>
 8004402:	b9c8      	cbnz	r0, 8004438 <_strtod_l+0xa58>
 8004404:	4630      	mov	r0, r6
 8004406:	4639      	mov	r1, r7
 8004408:	2200      	movs	r2, #0
 800440a:	4b3e      	ldr	r3, [pc, #248]	; (8004504 <_strtod_l+0xb24>)
 800440c:	f7fc f934 	bl	8000678 <__aeabi_dmul>
 8004410:	4606      	mov	r6, r0
 8004412:	460f      	mov	r7, r1
 8004414:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8004418:	9618      	str	r6, [sp, #96]	; 0x60
 800441a:	9319      	str	r3, [sp, #100]	; 0x64
 800441c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8004420:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004424:	e79c      	b.n	8004360 <_strtod_l+0x980>
 8004426:	f1ba 0f01 	cmp.w	sl, #1
 800442a:	d102      	bne.n	8004432 <_strtod_l+0xa52>
 800442c:	2d00      	cmp	r5, #0
 800442e:	f43f ad8e 	beq.w	8003f4e <_strtod_l+0x56e>
 8004432:	2200      	movs	r2, #0
 8004434:	4b34      	ldr	r3, [pc, #208]	; (8004508 <_strtod_l+0xb28>)
 8004436:	e78f      	b.n	8004358 <_strtod_l+0x978>
 8004438:	2600      	movs	r6, #0
 800443a:	4f32      	ldr	r7, [pc, #200]	; (8004504 <_strtod_l+0xb24>)
 800443c:	e7ea      	b.n	8004414 <_strtod_l+0xa34>
 800443e:	4b31      	ldr	r3, [pc, #196]	; (8004504 <_strtod_l+0xb24>)
 8004440:	4630      	mov	r0, r6
 8004442:	4639      	mov	r1, r7
 8004444:	2200      	movs	r2, #0
 8004446:	f7fc f917 	bl	8000678 <__aeabi_dmul>
 800444a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800444c:	4606      	mov	r6, r0
 800444e:	460f      	mov	r7, r1
 8004450:	b933      	cbnz	r3, 8004460 <_strtod_l+0xa80>
 8004452:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004456:	9010      	str	r0, [sp, #64]	; 0x40
 8004458:	9311      	str	r3, [sp, #68]	; 0x44
 800445a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800445e:	e7df      	b.n	8004420 <_strtod_l+0xa40>
 8004460:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8004464:	e7f9      	b.n	800445a <_strtod_l+0xa7a>
 8004466:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800446a:	9b04      	ldr	r3, [sp, #16]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1ab      	bne.n	80043c8 <_strtod_l+0x9e8>
 8004470:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004474:	0d1b      	lsrs	r3, r3, #20
 8004476:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004478:	051b      	lsls	r3, r3, #20
 800447a:	429a      	cmp	r2, r3
 800447c:	465d      	mov	r5, fp
 800447e:	d1a3      	bne.n	80043c8 <_strtod_l+0x9e8>
 8004480:	4639      	mov	r1, r7
 8004482:	4630      	mov	r0, r6
 8004484:	f7fc fba8 	bl	8000bd8 <__aeabi_d2iz>
 8004488:	f7fc f88c 	bl	80005a4 <__aeabi_i2d>
 800448c:	460b      	mov	r3, r1
 800448e:	4602      	mov	r2, r0
 8004490:	4639      	mov	r1, r7
 8004492:	4630      	mov	r0, r6
 8004494:	f7fb ff38 	bl	8000308 <__aeabi_dsub>
 8004498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800449a:	4606      	mov	r6, r0
 800449c:	460f      	mov	r7, r1
 800449e:	b933      	cbnz	r3, 80044ae <_strtod_l+0xace>
 80044a0:	f1ba 0f00 	cmp.w	sl, #0
 80044a4:	d103      	bne.n	80044ae <_strtod_l+0xace>
 80044a6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 80044aa:	2d00      	cmp	r5, #0
 80044ac:	d06d      	beq.n	800458a <_strtod_l+0xbaa>
 80044ae:	a30a      	add	r3, pc, #40	; (adr r3, 80044d8 <_strtod_l+0xaf8>)
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	4630      	mov	r0, r6
 80044b6:	4639      	mov	r1, r7
 80044b8:	f7fc fb50 	bl	8000b5c <__aeabi_dcmplt>
 80044bc:	2800      	cmp	r0, #0
 80044be:	f47f acb8 	bne.w	8003e32 <_strtod_l+0x452>
 80044c2:	a307      	add	r3, pc, #28	; (adr r3, 80044e0 <_strtod_l+0xb00>)
 80044c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044c8:	4630      	mov	r0, r6
 80044ca:	4639      	mov	r1, r7
 80044cc:	f7fc fb64 	bl	8000b98 <__aeabi_dcmpgt>
 80044d0:	2800      	cmp	r0, #0
 80044d2:	f43f af79 	beq.w	80043c8 <_strtod_l+0x9e8>
 80044d6:	e4ac      	b.n	8003e32 <_strtod_l+0x452>
 80044d8:	94a03595 	.word	0x94a03595
 80044dc:	3fdfffff 	.word	0x3fdfffff
 80044e0:	35afe535 	.word	0x35afe535
 80044e4:	3fe00000 	.word	0x3fe00000
 80044e8:	000fffff 	.word	0x000fffff
 80044ec:	7ff00000 	.word	0x7ff00000
 80044f0:	7fefffff 	.word	0x7fefffff
 80044f4:	39500000 	.word	0x39500000
 80044f8:	3ff00000 	.word	0x3ff00000
 80044fc:	7fe00000 	.word	0x7fe00000
 8004500:	7c9fffff 	.word	0x7c9fffff
 8004504:	3fe00000 	.word	0x3fe00000
 8004508:	bff00000 	.word	0xbff00000
 800450c:	9b04      	ldr	r3, [sp, #16]
 800450e:	b333      	cbz	r3, 800455e <_strtod_l+0xb7e>
 8004510:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004512:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004516:	d822      	bhi.n	800455e <_strtod_l+0xb7e>
 8004518:	a327      	add	r3, pc, #156	; (adr r3, 80045b8 <_strtod_l+0xbd8>)
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	4630      	mov	r0, r6
 8004520:	4639      	mov	r1, r7
 8004522:	f7fc fb25 	bl	8000b70 <__aeabi_dcmple>
 8004526:	b1a0      	cbz	r0, 8004552 <_strtod_l+0xb72>
 8004528:	4639      	mov	r1, r7
 800452a:	4630      	mov	r0, r6
 800452c:	f7fc fb7c 	bl	8000c28 <__aeabi_d2uiz>
 8004530:	2800      	cmp	r0, #0
 8004532:	bf08      	it	eq
 8004534:	2001      	moveq	r0, #1
 8004536:	f7fc f825 	bl	8000584 <__aeabi_ui2d>
 800453a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800453c:	4606      	mov	r6, r0
 800453e:	460f      	mov	r7, r1
 8004540:	bb03      	cbnz	r3, 8004584 <_strtod_l+0xba4>
 8004542:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004546:	9012      	str	r0, [sp, #72]	; 0x48
 8004548:	9313      	str	r3, [sp, #76]	; 0x4c
 800454a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800454e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004554:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004556:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800455a:	1a9b      	subs	r3, r3, r2
 800455c:	930b      	str	r3, [sp, #44]	; 0x2c
 800455e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8004562:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8004566:	f001 fd33 	bl	8005fd0 <__ulp>
 800456a:	4650      	mov	r0, sl
 800456c:	ec53 2b10 	vmov	r2, r3, d0
 8004570:	4659      	mov	r1, fp
 8004572:	f7fc f881 	bl	8000678 <__aeabi_dmul>
 8004576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800457a:	f7fb fec7 	bl	800030c <__adddf3>
 800457e:	4682      	mov	sl, r0
 8004580:	468b      	mov	fp, r1
 8004582:	e772      	b.n	800446a <_strtod_l+0xa8a>
 8004584:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8004588:	e7df      	b.n	800454a <_strtod_l+0xb6a>
 800458a:	a30d      	add	r3, pc, #52	; (adr r3, 80045c0 <_strtod_l+0xbe0>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	f7fc fae4 	bl	8000b5c <__aeabi_dcmplt>
 8004594:	e79c      	b.n	80044d0 <_strtod_l+0xaf0>
 8004596:	2300      	movs	r3, #0
 8004598:	930d      	str	r3, [sp, #52]	; 0x34
 800459a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800459c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800459e:	6013      	str	r3, [r2, #0]
 80045a0:	f7ff ba61 	b.w	8003a66 <_strtod_l+0x86>
 80045a4:	2b65      	cmp	r3, #101	; 0x65
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	f43f ab4e 	beq.w	8003c4a <_strtod_l+0x26a>
 80045ae:	2101      	movs	r1, #1
 80045b0:	4614      	mov	r4, r2
 80045b2:	9104      	str	r1, [sp, #16]
 80045b4:	f7ff bacb 	b.w	8003b4e <_strtod_l+0x16e>
 80045b8:	ffc00000 	.word	0xffc00000
 80045bc:	41dfffff 	.word	0x41dfffff
 80045c0:	94a03595 	.word	0x94a03595
 80045c4:	3fcfffff 	.word	0x3fcfffff

080045c8 <_strtod_r>:
 80045c8:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <_strtod_r+0x18>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	b410      	push	{r4}
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	4c04      	ldr	r4, [pc, #16]	; (80045e4 <_strtod_r+0x1c>)
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	bf08      	it	eq
 80045d6:	4623      	moveq	r3, r4
 80045d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045dc:	f7ff ba00 	b.w	80039e0 <_strtod_l>
 80045e0:	2000000c 	.word	0x2000000c
 80045e4:	20000070 	.word	0x20000070

080045e8 <_strtol_l.isra.0>:
 80045e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80045ec:	4680      	mov	r8, r0
 80045ee:	4689      	mov	r9, r1
 80045f0:	4692      	mov	sl, r2
 80045f2:	461e      	mov	r6, r3
 80045f4:	460f      	mov	r7, r1
 80045f6:	463d      	mov	r5, r7
 80045f8:	9808      	ldr	r0, [sp, #32]
 80045fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045fe:	f001 f9ed 	bl	80059dc <__locale_ctype_ptr_l>
 8004602:	4420      	add	r0, r4
 8004604:	7843      	ldrb	r3, [r0, #1]
 8004606:	f013 0308 	ands.w	r3, r3, #8
 800460a:	d132      	bne.n	8004672 <_strtol_l.isra.0+0x8a>
 800460c:	2c2d      	cmp	r4, #45	; 0x2d
 800460e:	d132      	bne.n	8004676 <_strtol_l.isra.0+0x8e>
 8004610:	787c      	ldrb	r4, [r7, #1]
 8004612:	1cbd      	adds	r5, r7, #2
 8004614:	2201      	movs	r2, #1
 8004616:	2e00      	cmp	r6, #0
 8004618:	d05d      	beq.n	80046d6 <_strtol_l.isra.0+0xee>
 800461a:	2e10      	cmp	r6, #16
 800461c:	d109      	bne.n	8004632 <_strtol_l.isra.0+0x4a>
 800461e:	2c30      	cmp	r4, #48	; 0x30
 8004620:	d107      	bne.n	8004632 <_strtol_l.isra.0+0x4a>
 8004622:	782b      	ldrb	r3, [r5, #0]
 8004624:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8004628:	2b58      	cmp	r3, #88	; 0x58
 800462a:	d14f      	bne.n	80046cc <_strtol_l.isra.0+0xe4>
 800462c:	786c      	ldrb	r4, [r5, #1]
 800462e:	2610      	movs	r6, #16
 8004630:	3502      	adds	r5, #2
 8004632:	2a00      	cmp	r2, #0
 8004634:	bf14      	ite	ne
 8004636:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800463a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800463e:	2700      	movs	r7, #0
 8004640:	fbb1 fcf6 	udiv	ip, r1, r6
 8004644:	4638      	mov	r0, r7
 8004646:	fb06 1e1c 	mls	lr, r6, ip, r1
 800464a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800464e:	2b09      	cmp	r3, #9
 8004650:	d817      	bhi.n	8004682 <_strtol_l.isra.0+0x9a>
 8004652:	461c      	mov	r4, r3
 8004654:	42a6      	cmp	r6, r4
 8004656:	dd23      	ble.n	80046a0 <_strtol_l.isra.0+0xb8>
 8004658:	1c7b      	adds	r3, r7, #1
 800465a:	d007      	beq.n	800466c <_strtol_l.isra.0+0x84>
 800465c:	4584      	cmp	ip, r0
 800465e:	d31c      	bcc.n	800469a <_strtol_l.isra.0+0xb2>
 8004660:	d101      	bne.n	8004666 <_strtol_l.isra.0+0x7e>
 8004662:	45a6      	cmp	lr, r4
 8004664:	db19      	blt.n	800469a <_strtol_l.isra.0+0xb2>
 8004666:	fb00 4006 	mla	r0, r0, r6, r4
 800466a:	2701      	movs	r7, #1
 800466c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004670:	e7eb      	b.n	800464a <_strtol_l.isra.0+0x62>
 8004672:	462f      	mov	r7, r5
 8004674:	e7bf      	b.n	80045f6 <_strtol_l.isra.0+0xe>
 8004676:	2c2b      	cmp	r4, #43	; 0x2b
 8004678:	bf04      	itt	eq
 800467a:	1cbd      	addeq	r5, r7, #2
 800467c:	787c      	ldrbeq	r4, [r7, #1]
 800467e:	461a      	mov	r2, r3
 8004680:	e7c9      	b.n	8004616 <_strtol_l.isra.0+0x2e>
 8004682:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8004686:	2b19      	cmp	r3, #25
 8004688:	d801      	bhi.n	800468e <_strtol_l.isra.0+0xa6>
 800468a:	3c37      	subs	r4, #55	; 0x37
 800468c:	e7e2      	b.n	8004654 <_strtol_l.isra.0+0x6c>
 800468e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8004692:	2b19      	cmp	r3, #25
 8004694:	d804      	bhi.n	80046a0 <_strtol_l.isra.0+0xb8>
 8004696:	3c57      	subs	r4, #87	; 0x57
 8004698:	e7dc      	b.n	8004654 <_strtol_l.isra.0+0x6c>
 800469a:	f04f 37ff 	mov.w	r7, #4294967295
 800469e:	e7e5      	b.n	800466c <_strtol_l.isra.0+0x84>
 80046a0:	1c7b      	adds	r3, r7, #1
 80046a2:	d108      	bne.n	80046b6 <_strtol_l.isra.0+0xce>
 80046a4:	2322      	movs	r3, #34	; 0x22
 80046a6:	f8c8 3000 	str.w	r3, [r8]
 80046aa:	4608      	mov	r0, r1
 80046ac:	f1ba 0f00 	cmp.w	sl, #0
 80046b0:	d107      	bne.n	80046c2 <_strtol_l.isra.0+0xda>
 80046b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046b6:	b102      	cbz	r2, 80046ba <_strtol_l.isra.0+0xd2>
 80046b8:	4240      	negs	r0, r0
 80046ba:	f1ba 0f00 	cmp.w	sl, #0
 80046be:	d0f8      	beq.n	80046b2 <_strtol_l.isra.0+0xca>
 80046c0:	b10f      	cbz	r7, 80046c6 <_strtol_l.isra.0+0xde>
 80046c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80046c6:	f8ca 9000 	str.w	r9, [sl]
 80046ca:	e7f2      	b.n	80046b2 <_strtol_l.isra.0+0xca>
 80046cc:	2430      	movs	r4, #48	; 0x30
 80046ce:	2e00      	cmp	r6, #0
 80046d0:	d1af      	bne.n	8004632 <_strtol_l.isra.0+0x4a>
 80046d2:	2608      	movs	r6, #8
 80046d4:	e7ad      	b.n	8004632 <_strtol_l.isra.0+0x4a>
 80046d6:	2c30      	cmp	r4, #48	; 0x30
 80046d8:	d0a3      	beq.n	8004622 <_strtol_l.isra.0+0x3a>
 80046da:	260a      	movs	r6, #10
 80046dc:	e7a9      	b.n	8004632 <_strtol_l.isra.0+0x4a>
	...

080046e0 <_strtol_r>:
 80046e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80046e2:	4c06      	ldr	r4, [pc, #24]	; (80046fc <_strtol_r+0x1c>)
 80046e4:	4d06      	ldr	r5, [pc, #24]	; (8004700 <_strtol_r+0x20>)
 80046e6:	6824      	ldr	r4, [r4, #0]
 80046e8:	6a24      	ldr	r4, [r4, #32]
 80046ea:	2c00      	cmp	r4, #0
 80046ec:	bf08      	it	eq
 80046ee:	462c      	moveq	r4, r5
 80046f0:	9400      	str	r4, [sp, #0]
 80046f2:	f7ff ff79 	bl	80045e8 <_strtol_l.isra.0>
 80046f6:	b003      	add	sp, #12
 80046f8:	bd30      	pop	{r4, r5, pc}
 80046fa:	bf00      	nop
 80046fc:	2000000c 	.word	0x2000000c
 8004700:	20000070 	.word	0x20000070

08004704 <quorem>:
 8004704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004708:	6903      	ldr	r3, [r0, #16]
 800470a:	690c      	ldr	r4, [r1, #16]
 800470c:	42a3      	cmp	r3, r4
 800470e:	4680      	mov	r8, r0
 8004710:	f2c0 8082 	blt.w	8004818 <quorem+0x114>
 8004714:	3c01      	subs	r4, #1
 8004716:	f101 0714 	add.w	r7, r1, #20
 800471a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800471e:	f100 0614 	add.w	r6, r0, #20
 8004722:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004726:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800472a:	eb06 030c 	add.w	r3, r6, ip
 800472e:	3501      	adds	r5, #1
 8004730:	eb07 090c 	add.w	r9, r7, ip
 8004734:	9301      	str	r3, [sp, #4]
 8004736:	fbb0 f5f5 	udiv	r5, r0, r5
 800473a:	b395      	cbz	r5, 80047a2 <quorem+0x9e>
 800473c:	f04f 0a00 	mov.w	sl, #0
 8004740:	4638      	mov	r0, r7
 8004742:	46b6      	mov	lr, r6
 8004744:	46d3      	mov	fp, sl
 8004746:	f850 2b04 	ldr.w	r2, [r0], #4
 800474a:	b293      	uxth	r3, r2
 800474c:	fb05 a303 	mla	r3, r5, r3, sl
 8004750:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004754:	b29b      	uxth	r3, r3
 8004756:	ebab 0303 	sub.w	r3, fp, r3
 800475a:	0c12      	lsrs	r2, r2, #16
 800475c:	f8de b000 	ldr.w	fp, [lr]
 8004760:	fb05 a202 	mla	r2, r5, r2, sl
 8004764:	fa13 f38b 	uxtah	r3, r3, fp
 8004768:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800476c:	fa1f fb82 	uxth.w	fp, r2
 8004770:	f8de 2000 	ldr.w	r2, [lr]
 8004774:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800477c:	b29b      	uxth	r3, r3
 800477e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004782:	4581      	cmp	r9, r0
 8004784:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004788:	f84e 3b04 	str.w	r3, [lr], #4
 800478c:	d2db      	bcs.n	8004746 <quorem+0x42>
 800478e:	f856 300c 	ldr.w	r3, [r6, ip]
 8004792:	b933      	cbnz	r3, 80047a2 <quorem+0x9e>
 8004794:	9b01      	ldr	r3, [sp, #4]
 8004796:	3b04      	subs	r3, #4
 8004798:	429e      	cmp	r6, r3
 800479a:	461a      	mov	r2, r3
 800479c:	d330      	bcc.n	8004800 <quorem+0xfc>
 800479e:	f8c8 4010 	str.w	r4, [r8, #16]
 80047a2:	4640      	mov	r0, r8
 80047a4:	f001 fb9c 	bl	8005ee0 <__mcmp>
 80047a8:	2800      	cmp	r0, #0
 80047aa:	db25      	blt.n	80047f8 <quorem+0xf4>
 80047ac:	3501      	adds	r5, #1
 80047ae:	4630      	mov	r0, r6
 80047b0:	f04f 0c00 	mov.w	ip, #0
 80047b4:	f857 2b04 	ldr.w	r2, [r7], #4
 80047b8:	f8d0 e000 	ldr.w	lr, [r0]
 80047bc:	b293      	uxth	r3, r2
 80047be:	ebac 0303 	sub.w	r3, ip, r3
 80047c2:	0c12      	lsrs	r2, r2, #16
 80047c4:	fa13 f38e 	uxtah	r3, r3, lr
 80047c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80047cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80047d6:	45b9      	cmp	r9, r7
 80047d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80047dc:	f840 3b04 	str.w	r3, [r0], #4
 80047e0:	d2e8      	bcs.n	80047b4 <quorem+0xb0>
 80047e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80047e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80047ea:	b92a      	cbnz	r2, 80047f8 <quorem+0xf4>
 80047ec:	3b04      	subs	r3, #4
 80047ee:	429e      	cmp	r6, r3
 80047f0:	461a      	mov	r2, r3
 80047f2:	d30b      	bcc.n	800480c <quorem+0x108>
 80047f4:	f8c8 4010 	str.w	r4, [r8, #16]
 80047f8:	4628      	mov	r0, r5
 80047fa:	b003      	add	sp, #12
 80047fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004800:	6812      	ldr	r2, [r2, #0]
 8004802:	3b04      	subs	r3, #4
 8004804:	2a00      	cmp	r2, #0
 8004806:	d1ca      	bne.n	800479e <quorem+0x9a>
 8004808:	3c01      	subs	r4, #1
 800480a:	e7c5      	b.n	8004798 <quorem+0x94>
 800480c:	6812      	ldr	r2, [r2, #0]
 800480e:	3b04      	subs	r3, #4
 8004810:	2a00      	cmp	r2, #0
 8004812:	d1ef      	bne.n	80047f4 <quorem+0xf0>
 8004814:	3c01      	subs	r4, #1
 8004816:	e7ea      	b.n	80047ee <quorem+0xea>
 8004818:	2000      	movs	r0, #0
 800481a:	e7ee      	b.n	80047fa <quorem+0xf6>
 800481c:	0000      	movs	r0, r0
	...

08004820 <_dtoa_r>:
 8004820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004824:	ec57 6b10 	vmov	r6, r7, d0
 8004828:	b097      	sub	sp, #92	; 0x5c
 800482a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800482c:	9106      	str	r1, [sp, #24]
 800482e:	4604      	mov	r4, r0
 8004830:	920b      	str	r2, [sp, #44]	; 0x2c
 8004832:	9312      	str	r3, [sp, #72]	; 0x48
 8004834:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004838:	e9cd 6700 	strd	r6, r7, [sp]
 800483c:	b93d      	cbnz	r5, 800484e <_dtoa_r+0x2e>
 800483e:	2010      	movs	r0, #16
 8004840:	f001 f8e0 	bl	8005a04 <malloc>
 8004844:	6260      	str	r0, [r4, #36]	; 0x24
 8004846:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800484a:	6005      	str	r5, [r0, #0]
 800484c:	60c5      	str	r5, [r0, #12]
 800484e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	b151      	cbz	r1, 800486a <_dtoa_r+0x4a>
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	604a      	str	r2, [r1, #4]
 8004858:	2301      	movs	r3, #1
 800485a:	4093      	lsls	r3, r2
 800485c:	608b      	str	r3, [r1, #8]
 800485e:	4620      	mov	r0, r4
 8004860:	f001 f91e 	bl	8005aa0 <_Bfree>
 8004864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	1e3b      	subs	r3, r7, #0
 800486c:	bfbb      	ittet	lt
 800486e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004872:	9301      	strlt	r3, [sp, #4]
 8004874:	2300      	movge	r3, #0
 8004876:	2201      	movlt	r2, #1
 8004878:	bfac      	ite	ge
 800487a:	f8c8 3000 	strge.w	r3, [r8]
 800487e:	f8c8 2000 	strlt.w	r2, [r8]
 8004882:	4baf      	ldr	r3, [pc, #700]	; (8004b40 <_dtoa_r+0x320>)
 8004884:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004888:	ea33 0308 	bics.w	r3, r3, r8
 800488c:	d114      	bne.n	80048b8 <_dtoa_r+0x98>
 800488e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004890:	f242 730f 	movw	r3, #9999	; 0x270f
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	9b00      	ldr	r3, [sp, #0]
 8004898:	b923      	cbnz	r3, 80048a4 <_dtoa_r+0x84>
 800489a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800489e:	2800      	cmp	r0, #0
 80048a0:	f000 8542 	beq.w	8005328 <_dtoa_r+0xb08>
 80048a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8004b54 <_dtoa_r+0x334>
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	f000 8544 	beq.w	8005338 <_dtoa_r+0xb18>
 80048b0:	f10b 0303 	add.w	r3, fp, #3
 80048b4:	f000 bd3e 	b.w	8005334 <_dtoa_r+0xb14>
 80048b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80048bc:	2200      	movs	r2, #0
 80048be:	2300      	movs	r3, #0
 80048c0:	4630      	mov	r0, r6
 80048c2:	4639      	mov	r1, r7
 80048c4:	f7fc f940 	bl	8000b48 <__aeabi_dcmpeq>
 80048c8:	4681      	mov	r9, r0
 80048ca:	b168      	cbz	r0, 80048e8 <_dtoa_r+0xc8>
 80048cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80048ce:	2301      	movs	r3, #1
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	f000 8524 	beq.w	8005322 <_dtoa_r+0xb02>
 80048da:	4b9a      	ldr	r3, [pc, #616]	; (8004b44 <_dtoa_r+0x324>)
 80048dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80048de:	f103 3bff 	add.w	fp, r3, #4294967295
 80048e2:	6013      	str	r3, [r2, #0]
 80048e4:	f000 bd28 	b.w	8005338 <_dtoa_r+0xb18>
 80048e8:	aa14      	add	r2, sp, #80	; 0x50
 80048ea:	a915      	add	r1, sp, #84	; 0x54
 80048ec:	ec47 6b10 	vmov	d0, r6, r7
 80048f0:	4620      	mov	r0, r4
 80048f2:	f001 fbe3 	bl	80060bc <__d2b>
 80048f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80048fa:	9004      	str	r0, [sp, #16]
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	d07c      	beq.n	80049fa <_dtoa_r+0x1da>
 8004900:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8004904:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8004908:	46b2      	mov	sl, r6
 800490a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800490e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004912:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8004916:	2200      	movs	r2, #0
 8004918:	4b8b      	ldr	r3, [pc, #556]	; (8004b48 <_dtoa_r+0x328>)
 800491a:	4650      	mov	r0, sl
 800491c:	4659      	mov	r1, fp
 800491e:	f7fb fcf3 	bl	8000308 <__aeabi_dsub>
 8004922:	a381      	add	r3, pc, #516	; (adr r3, 8004b28 <_dtoa_r+0x308>)
 8004924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004928:	f7fb fea6 	bl	8000678 <__aeabi_dmul>
 800492c:	a380      	add	r3, pc, #512	; (adr r3, 8004b30 <_dtoa_r+0x310>)
 800492e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004932:	f7fb fceb 	bl	800030c <__adddf3>
 8004936:	4606      	mov	r6, r0
 8004938:	4628      	mov	r0, r5
 800493a:	460f      	mov	r7, r1
 800493c:	f7fb fe32 	bl	80005a4 <__aeabi_i2d>
 8004940:	a37d      	add	r3, pc, #500	; (adr r3, 8004b38 <_dtoa_r+0x318>)
 8004942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004946:	f7fb fe97 	bl	8000678 <__aeabi_dmul>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4630      	mov	r0, r6
 8004950:	4639      	mov	r1, r7
 8004952:	f7fb fcdb 	bl	800030c <__adddf3>
 8004956:	4606      	mov	r6, r0
 8004958:	460f      	mov	r7, r1
 800495a:	f7fc f93d 	bl	8000bd8 <__aeabi_d2iz>
 800495e:	2200      	movs	r2, #0
 8004960:	4682      	mov	sl, r0
 8004962:	2300      	movs	r3, #0
 8004964:	4630      	mov	r0, r6
 8004966:	4639      	mov	r1, r7
 8004968:	f7fc f8f8 	bl	8000b5c <__aeabi_dcmplt>
 800496c:	b148      	cbz	r0, 8004982 <_dtoa_r+0x162>
 800496e:	4650      	mov	r0, sl
 8004970:	f7fb fe18 	bl	80005a4 <__aeabi_i2d>
 8004974:	4632      	mov	r2, r6
 8004976:	463b      	mov	r3, r7
 8004978:	f7fc f8e6 	bl	8000b48 <__aeabi_dcmpeq>
 800497c:	b908      	cbnz	r0, 8004982 <_dtoa_r+0x162>
 800497e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004982:	f1ba 0f16 	cmp.w	sl, #22
 8004986:	d859      	bhi.n	8004a3c <_dtoa_r+0x21c>
 8004988:	4970      	ldr	r1, [pc, #448]	; (8004b4c <_dtoa_r+0x32c>)
 800498a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800498e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004992:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004996:	f7fc f8ff 	bl	8000b98 <__aeabi_dcmpgt>
 800499a:	2800      	cmp	r0, #0
 800499c:	d050      	beq.n	8004a40 <_dtoa_r+0x220>
 800499e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049a2:	2300      	movs	r3, #0
 80049a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80049a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80049a8:	1b5d      	subs	r5, r3, r5
 80049aa:	f1b5 0801 	subs.w	r8, r5, #1
 80049ae:	bf49      	itett	mi
 80049b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80049b4:	2300      	movpl	r3, #0
 80049b6:	9305      	strmi	r3, [sp, #20]
 80049b8:	f04f 0800 	movmi.w	r8, #0
 80049bc:	bf58      	it	pl
 80049be:	9305      	strpl	r3, [sp, #20]
 80049c0:	f1ba 0f00 	cmp.w	sl, #0
 80049c4:	db3e      	blt.n	8004a44 <_dtoa_r+0x224>
 80049c6:	2300      	movs	r3, #0
 80049c8:	44d0      	add	r8, sl
 80049ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80049ce:	9307      	str	r3, [sp, #28]
 80049d0:	9b06      	ldr	r3, [sp, #24]
 80049d2:	2b09      	cmp	r3, #9
 80049d4:	f200 8090 	bhi.w	8004af8 <_dtoa_r+0x2d8>
 80049d8:	2b05      	cmp	r3, #5
 80049da:	bfc4      	itt	gt
 80049dc:	3b04      	subgt	r3, #4
 80049de:	9306      	strgt	r3, [sp, #24]
 80049e0:	9b06      	ldr	r3, [sp, #24]
 80049e2:	f1a3 0302 	sub.w	r3, r3, #2
 80049e6:	bfcc      	ite	gt
 80049e8:	2500      	movgt	r5, #0
 80049ea:	2501      	movle	r5, #1
 80049ec:	2b03      	cmp	r3, #3
 80049ee:	f200 808f 	bhi.w	8004b10 <_dtoa_r+0x2f0>
 80049f2:	e8df f003 	tbb	[pc, r3]
 80049f6:	7f7d      	.short	0x7f7d
 80049f8:	7131      	.short	0x7131
 80049fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80049fe:	441d      	add	r5, r3
 8004a00:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8004a04:	2820      	cmp	r0, #32
 8004a06:	dd13      	ble.n	8004a30 <_dtoa_r+0x210>
 8004a08:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8004a0c:	9b00      	ldr	r3, [sp, #0]
 8004a0e:	fa08 f800 	lsl.w	r8, r8, r0
 8004a12:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8004a16:	fa23 f000 	lsr.w	r0, r3, r0
 8004a1a:	ea48 0000 	orr.w	r0, r8, r0
 8004a1e:	f7fb fdb1 	bl	8000584 <__aeabi_ui2d>
 8004a22:	2301      	movs	r3, #1
 8004a24:	4682      	mov	sl, r0
 8004a26:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8004a2a:	3d01      	subs	r5, #1
 8004a2c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004a2e:	e772      	b.n	8004916 <_dtoa_r+0xf6>
 8004a30:	9b00      	ldr	r3, [sp, #0]
 8004a32:	f1c0 0020 	rsb	r0, r0, #32
 8004a36:	fa03 f000 	lsl.w	r0, r3, r0
 8004a3a:	e7f0      	b.n	8004a1e <_dtoa_r+0x1fe>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e7b1      	b.n	80049a4 <_dtoa_r+0x184>
 8004a40:	900f      	str	r0, [sp, #60]	; 0x3c
 8004a42:	e7b0      	b.n	80049a6 <_dtoa_r+0x186>
 8004a44:	9b05      	ldr	r3, [sp, #20]
 8004a46:	eba3 030a 	sub.w	r3, r3, sl
 8004a4a:	9305      	str	r3, [sp, #20]
 8004a4c:	f1ca 0300 	rsb	r3, sl, #0
 8004a50:	9307      	str	r3, [sp, #28]
 8004a52:	2300      	movs	r3, #0
 8004a54:	930e      	str	r3, [sp, #56]	; 0x38
 8004a56:	e7bb      	b.n	80049d0 <_dtoa_r+0x1b0>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a5c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	dd59      	ble.n	8004b16 <_dtoa_r+0x2f6>
 8004a62:	9302      	str	r3, [sp, #8]
 8004a64:	4699      	mov	r9, r3
 8004a66:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a68:	2200      	movs	r2, #0
 8004a6a:	6072      	str	r2, [r6, #4]
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	f102 0014 	add.w	r0, r2, #20
 8004a72:	4298      	cmp	r0, r3
 8004a74:	6871      	ldr	r1, [r6, #4]
 8004a76:	d953      	bls.n	8004b20 <_dtoa_r+0x300>
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 ffdd 	bl	8005a38 <_Balloc>
 8004a7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a80:	6030      	str	r0, [r6, #0]
 8004a82:	f1b9 0f0e 	cmp.w	r9, #14
 8004a86:	f8d3 b000 	ldr.w	fp, [r3]
 8004a8a:	f200 80e6 	bhi.w	8004c5a <_dtoa_r+0x43a>
 8004a8e:	2d00      	cmp	r5, #0
 8004a90:	f000 80e3 	beq.w	8004c5a <_dtoa_r+0x43a>
 8004a94:	ed9d 7b00 	vldr	d7, [sp]
 8004a98:	f1ba 0f00 	cmp.w	sl, #0
 8004a9c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004aa0:	dd74      	ble.n	8004b8c <_dtoa_r+0x36c>
 8004aa2:	4a2a      	ldr	r2, [pc, #168]	; (8004b4c <_dtoa_r+0x32c>)
 8004aa4:	f00a 030f 	and.w	r3, sl, #15
 8004aa8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004aac:	ed93 7b00 	vldr	d7, [r3]
 8004ab0:	ea4f 162a 	mov.w	r6, sl, asr #4
 8004ab4:	06f0      	lsls	r0, r6, #27
 8004ab6:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004aba:	d565      	bpl.n	8004b88 <_dtoa_r+0x368>
 8004abc:	4b24      	ldr	r3, [pc, #144]	; (8004b50 <_dtoa_r+0x330>)
 8004abe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ac2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004ac6:	f7fb ff01 	bl	80008cc <__aeabi_ddiv>
 8004aca:	e9cd 0100 	strd	r0, r1, [sp]
 8004ace:	f006 060f 	and.w	r6, r6, #15
 8004ad2:	2503      	movs	r5, #3
 8004ad4:	4f1e      	ldr	r7, [pc, #120]	; (8004b50 <_dtoa_r+0x330>)
 8004ad6:	e04c      	b.n	8004b72 <_dtoa_r+0x352>
 8004ad8:	2301      	movs	r3, #1
 8004ada:	930a      	str	r3, [sp, #40]	; 0x28
 8004adc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ade:	4453      	add	r3, sl
 8004ae0:	f103 0901 	add.w	r9, r3, #1
 8004ae4:	9302      	str	r3, [sp, #8]
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	bfb8      	it	lt
 8004aec:	2301      	movlt	r3, #1
 8004aee:	e7ba      	b.n	8004a66 <_dtoa_r+0x246>
 8004af0:	2300      	movs	r3, #0
 8004af2:	e7b2      	b.n	8004a5a <_dtoa_r+0x23a>
 8004af4:	2300      	movs	r3, #0
 8004af6:	e7f0      	b.n	8004ada <_dtoa_r+0x2ba>
 8004af8:	2501      	movs	r5, #1
 8004afa:	2300      	movs	r3, #0
 8004afc:	9306      	str	r3, [sp, #24]
 8004afe:	950a      	str	r5, [sp, #40]	; 0x28
 8004b00:	f04f 33ff 	mov.w	r3, #4294967295
 8004b04:	9302      	str	r3, [sp, #8]
 8004b06:	4699      	mov	r9, r3
 8004b08:	2200      	movs	r2, #0
 8004b0a:	2312      	movs	r3, #18
 8004b0c:	920b      	str	r2, [sp, #44]	; 0x2c
 8004b0e:	e7aa      	b.n	8004a66 <_dtoa_r+0x246>
 8004b10:	2301      	movs	r3, #1
 8004b12:	930a      	str	r3, [sp, #40]	; 0x28
 8004b14:	e7f4      	b.n	8004b00 <_dtoa_r+0x2e0>
 8004b16:	2301      	movs	r3, #1
 8004b18:	9302      	str	r3, [sp, #8]
 8004b1a:	4699      	mov	r9, r3
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	e7f5      	b.n	8004b0c <_dtoa_r+0x2ec>
 8004b20:	3101      	adds	r1, #1
 8004b22:	6071      	str	r1, [r6, #4]
 8004b24:	0052      	lsls	r2, r2, #1
 8004b26:	e7a2      	b.n	8004a6e <_dtoa_r+0x24e>
 8004b28:	636f4361 	.word	0x636f4361
 8004b2c:	3fd287a7 	.word	0x3fd287a7
 8004b30:	8b60c8b3 	.word	0x8b60c8b3
 8004b34:	3fc68a28 	.word	0x3fc68a28
 8004b38:	509f79fb 	.word	0x509f79fb
 8004b3c:	3fd34413 	.word	0x3fd34413
 8004b40:	7ff00000 	.word	0x7ff00000
 8004b44:	080072a5 	.word	0x080072a5
 8004b48:	3ff80000 	.word	0x3ff80000
 8004b4c:	08007360 	.word	0x08007360
 8004b50:	08007338 	.word	0x08007338
 8004b54:	08007329 	.word	0x08007329
 8004b58:	07f1      	lsls	r1, r6, #31
 8004b5a:	d508      	bpl.n	8004b6e <_dtoa_r+0x34e>
 8004b5c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004b60:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b64:	f7fb fd88 	bl	8000678 <__aeabi_dmul>
 8004b68:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b6c:	3501      	adds	r5, #1
 8004b6e:	1076      	asrs	r6, r6, #1
 8004b70:	3708      	adds	r7, #8
 8004b72:	2e00      	cmp	r6, #0
 8004b74:	d1f0      	bne.n	8004b58 <_dtoa_r+0x338>
 8004b76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004b7a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004b7e:	f7fb fea5 	bl	80008cc <__aeabi_ddiv>
 8004b82:	e9cd 0100 	strd	r0, r1, [sp]
 8004b86:	e01a      	b.n	8004bbe <_dtoa_r+0x39e>
 8004b88:	2502      	movs	r5, #2
 8004b8a:	e7a3      	b.n	8004ad4 <_dtoa_r+0x2b4>
 8004b8c:	f000 80a0 	beq.w	8004cd0 <_dtoa_r+0x4b0>
 8004b90:	f1ca 0600 	rsb	r6, sl, #0
 8004b94:	4b9f      	ldr	r3, [pc, #636]	; (8004e14 <_dtoa_r+0x5f4>)
 8004b96:	4fa0      	ldr	r7, [pc, #640]	; (8004e18 <_dtoa_r+0x5f8>)
 8004b98:	f006 020f 	and.w	r2, r6, #15
 8004b9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ba4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ba8:	f7fb fd66 	bl	8000678 <__aeabi_dmul>
 8004bac:	e9cd 0100 	strd	r0, r1, [sp]
 8004bb0:	1136      	asrs	r6, r6, #4
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2502      	movs	r5, #2
 8004bb6:	2e00      	cmp	r6, #0
 8004bb8:	d17f      	bne.n	8004cba <_dtoa_r+0x49a>
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d1e1      	bne.n	8004b82 <_dtoa_r+0x362>
 8004bbe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8087 	beq.w	8004cd4 <_dtoa_r+0x4b4>
 8004bc6:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4b93      	ldr	r3, [pc, #588]	; (8004e1c <_dtoa_r+0x5fc>)
 8004bce:	4630      	mov	r0, r6
 8004bd0:	4639      	mov	r1, r7
 8004bd2:	f7fb ffc3 	bl	8000b5c <__aeabi_dcmplt>
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	d07c      	beq.n	8004cd4 <_dtoa_r+0x4b4>
 8004bda:	f1b9 0f00 	cmp.w	r9, #0
 8004bde:	d079      	beq.n	8004cd4 <_dtoa_r+0x4b4>
 8004be0:	9b02      	ldr	r3, [sp, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	dd35      	ble.n	8004c52 <_dtoa_r+0x432>
 8004be6:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004bea:	9308      	str	r3, [sp, #32]
 8004bec:	4639      	mov	r1, r7
 8004bee:	2200      	movs	r2, #0
 8004bf0:	4b8b      	ldr	r3, [pc, #556]	; (8004e20 <_dtoa_r+0x600>)
 8004bf2:	4630      	mov	r0, r6
 8004bf4:	f7fb fd40 	bl	8000678 <__aeabi_dmul>
 8004bf8:	e9cd 0100 	strd	r0, r1, [sp]
 8004bfc:	9f02      	ldr	r7, [sp, #8]
 8004bfe:	3501      	adds	r5, #1
 8004c00:	4628      	mov	r0, r5
 8004c02:	f7fb fccf 	bl	80005a4 <__aeabi_i2d>
 8004c06:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c0a:	f7fb fd35 	bl	8000678 <__aeabi_dmul>
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4b84      	ldr	r3, [pc, #528]	; (8004e24 <_dtoa_r+0x604>)
 8004c12:	f7fb fb7b 	bl	800030c <__adddf3>
 8004c16:	4605      	mov	r5, r0
 8004c18:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004c1c:	2f00      	cmp	r7, #0
 8004c1e:	d15d      	bne.n	8004cdc <_dtoa_r+0x4bc>
 8004c20:	2200      	movs	r2, #0
 8004c22:	4b81      	ldr	r3, [pc, #516]	; (8004e28 <_dtoa_r+0x608>)
 8004c24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c28:	f7fb fb6e 	bl	8000308 <__aeabi_dsub>
 8004c2c:	462a      	mov	r2, r5
 8004c2e:	4633      	mov	r3, r6
 8004c30:	e9cd 0100 	strd	r0, r1, [sp]
 8004c34:	f7fb ffb0 	bl	8000b98 <__aeabi_dcmpgt>
 8004c38:	2800      	cmp	r0, #0
 8004c3a:	f040 8288 	bne.w	800514e <_dtoa_r+0x92e>
 8004c3e:	462a      	mov	r2, r5
 8004c40:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004c44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004c48:	f7fb ff88 	bl	8000b5c <__aeabi_dcmplt>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	f040 827c 	bne.w	800514a <_dtoa_r+0x92a>
 8004c52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004c56:	e9cd 2300 	strd	r2, r3, [sp]
 8004c5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	f2c0 8150 	blt.w	8004f02 <_dtoa_r+0x6e2>
 8004c62:	f1ba 0f0e 	cmp.w	sl, #14
 8004c66:	f300 814c 	bgt.w	8004f02 <_dtoa_r+0x6e2>
 8004c6a:	4b6a      	ldr	r3, [pc, #424]	; (8004e14 <_dtoa_r+0x5f4>)
 8004c6c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c70:	ed93 7b00 	vldr	d7, [r3]
 8004c74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004c7c:	f280 80d8 	bge.w	8004e30 <_dtoa_r+0x610>
 8004c80:	f1b9 0f00 	cmp.w	r9, #0
 8004c84:	f300 80d4 	bgt.w	8004e30 <_dtoa_r+0x610>
 8004c88:	f040 825e 	bne.w	8005148 <_dtoa_r+0x928>
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	4b66      	ldr	r3, [pc, #408]	; (8004e28 <_dtoa_r+0x608>)
 8004c90:	ec51 0b17 	vmov	r0, r1, d7
 8004c94:	f7fb fcf0 	bl	8000678 <__aeabi_dmul>
 8004c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c9c:	f7fb ff72 	bl	8000b84 <__aeabi_dcmpge>
 8004ca0:	464f      	mov	r7, r9
 8004ca2:	464e      	mov	r6, r9
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f040 8234 	bne.w	8005112 <_dtoa_r+0x8f2>
 8004caa:	2331      	movs	r3, #49	; 0x31
 8004cac:	f10b 0501 	add.w	r5, fp, #1
 8004cb0:	f88b 3000 	strb.w	r3, [fp]
 8004cb4:	f10a 0a01 	add.w	sl, sl, #1
 8004cb8:	e22f      	b.n	800511a <_dtoa_r+0x8fa>
 8004cba:	07f2      	lsls	r2, r6, #31
 8004cbc:	d505      	bpl.n	8004cca <_dtoa_r+0x4aa>
 8004cbe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004cc2:	f7fb fcd9 	bl	8000678 <__aeabi_dmul>
 8004cc6:	3501      	adds	r5, #1
 8004cc8:	2301      	movs	r3, #1
 8004cca:	1076      	asrs	r6, r6, #1
 8004ccc:	3708      	adds	r7, #8
 8004cce:	e772      	b.n	8004bb6 <_dtoa_r+0x396>
 8004cd0:	2502      	movs	r5, #2
 8004cd2:	e774      	b.n	8004bbe <_dtoa_r+0x39e>
 8004cd4:	f8cd a020 	str.w	sl, [sp, #32]
 8004cd8:	464f      	mov	r7, r9
 8004cda:	e791      	b.n	8004c00 <_dtoa_r+0x3e0>
 8004cdc:	4b4d      	ldr	r3, [pc, #308]	; (8004e14 <_dtoa_r+0x5f4>)
 8004cde:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004ce2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8004ce6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d047      	beq.n	8004d7c <_dtoa_r+0x55c>
 8004cec:	4602      	mov	r2, r0
 8004cee:	460b      	mov	r3, r1
 8004cf0:	2000      	movs	r0, #0
 8004cf2:	494e      	ldr	r1, [pc, #312]	; (8004e2c <_dtoa_r+0x60c>)
 8004cf4:	f7fb fdea 	bl	80008cc <__aeabi_ddiv>
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	4633      	mov	r3, r6
 8004cfc:	f7fb fb04 	bl	8000308 <__aeabi_dsub>
 8004d00:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004d04:	465d      	mov	r5, fp
 8004d06:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d0a:	f7fb ff65 	bl	8000bd8 <__aeabi_d2iz>
 8004d0e:	4606      	mov	r6, r0
 8004d10:	f7fb fc48 	bl	80005a4 <__aeabi_i2d>
 8004d14:	4602      	mov	r2, r0
 8004d16:	460b      	mov	r3, r1
 8004d18:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d1c:	f7fb faf4 	bl	8000308 <__aeabi_dsub>
 8004d20:	3630      	adds	r6, #48	; 0x30
 8004d22:	f805 6b01 	strb.w	r6, [r5], #1
 8004d26:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d2a:	e9cd 0100 	strd	r0, r1, [sp]
 8004d2e:	f7fb ff15 	bl	8000b5c <__aeabi_dcmplt>
 8004d32:	2800      	cmp	r0, #0
 8004d34:	d163      	bne.n	8004dfe <_dtoa_r+0x5de>
 8004d36:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d3a:	2000      	movs	r0, #0
 8004d3c:	4937      	ldr	r1, [pc, #220]	; (8004e1c <_dtoa_r+0x5fc>)
 8004d3e:	f7fb fae3 	bl	8000308 <__aeabi_dsub>
 8004d42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d46:	f7fb ff09 	bl	8000b5c <__aeabi_dcmplt>
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	f040 80b7 	bne.w	8004ebe <_dtoa_r+0x69e>
 8004d50:	eba5 030b 	sub.w	r3, r5, fp
 8004d54:	429f      	cmp	r7, r3
 8004d56:	f77f af7c 	ble.w	8004c52 <_dtoa_r+0x432>
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	4b30      	ldr	r3, [pc, #192]	; (8004e20 <_dtoa_r+0x600>)
 8004d5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d62:	f7fb fc89 	bl	8000678 <__aeabi_dmul>
 8004d66:	2200      	movs	r2, #0
 8004d68:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004d6c:	4b2c      	ldr	r3, [pc, #176]	; (8004e20 <_dtoa_r+0x600>)
 8004d6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d72:	f7fb fc81 	bl	8000678 <__aeabi_dmul>
 8004d76:	e9cd 0100 	strd	r0, r1, [sp]
 8004d7a:	e7c4      	b.n	8004d06 <_dtoa_r+0x4e6>
 8004d7c:	462a      	mov	r2, r5
 8004d7e:	4633      	mov	r3, r6
 8004d80:	f7fb fc7a 	bl	8000678 <__aeabi_dmul>
 8004d84:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8004d88:	eb0b 0507 	add.w	r5, fp, r7
 8004d8c:	465e      	mov	r6, fp
 8004d8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d92:	f7fb ff21 	bl	8000bd8 <__aeabi_d2iz>
 8004d96:	4607      	mov	r7, r0
 8004d98:	f7fb fc04 	bl	80005a4 <__aeabi_i2d>
 8004d9c:	3730      	adds	r7, #48	; 0x30
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004da6:	f7fb faaf 	bl	8000308 <__aeabi_dsub>
 8004daa:	f806 7b01 	strb.w	r7, [r6], #1
 8004dae:	42ae      	cmp	r6, r5
 8004db0:	e9cd 0100 	strd	r0, r1, [sp]
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	d126      	bne.n	8004e08 <_dtoa_r+0x5e8>
 8004dba:	4b1c      	ldr	r3, [pc, #112]	; (8004e2c <_dtoa_r+0x60c>)
 8004dbc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004dc0:	f7fb faa4 	bl	800030c <__adddf3>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004dcc:	f7fb fee4 	bl	8000b98 <__aeabi_dcmpgt>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	d174      	bne.n	8004ebe <_dtoa_r+0x69e>
 8004dd4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004dd8:	2000      	movs	r0, #0
 8004dda:	4914      	ldr	r1, [pc, #80]	; (8004e2c <_dtoa_r+0x60c>)
 8004ddc:	f7fb fa94 	bl	8000308 <__aeabi_dsub>
 8004de0:	4602      	mov	r2, r0
 8004de2:	460b      	mov	r3, r1
 8004de4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004de8:	f7fb feb8 	bl	8000b5c <__aeabi_dcmplt>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	f43f af30 	beq.w	8004c52 <_dtoa_r+0x432>
 8004df2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004df6:	2b30      	cmp	r3, #48	; 0x30
 8004df8:	f105 32ff 	add.w	r2, r5, #4294967295
 8004dfc:	d002      	beq.n	8004e04 <_dtoa_r+0x5e4>
 8004dfe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8004e02:	e04a      	b.n	8004e9a <_dtoa_r+0x67a>
 8004e04:	4615      	mov	r5, r2
 8004e06:	e7f4      	b.n	8004df2 <_dtoa_r+0x5d2>
 8004e08:	4b05      	ldr	r3, [pc, #20]	; (8004e20 <_dtoa_r+0x600>)
 8004e0a:	f7fb fc35 	bl	8000678 <__aeabi_dmul>
 8004e0e:	e9cd 0100 	strd	r0, r1, [sp]
 8004e12:	e7bc      	b.n	8004d8e <_dtoa_r+0x56e>
 8004e14:	08007360 	.word	0x08007360
 8004e18:	08007338 	.word	0x08007338
 8004e1c:	3ff00000 	.word	0x3ff00000
 8004e20:	40240000 	.word	0x40240000
 8004e24:	401c0000 	.word	0x401c0000
 8004e28:	40140000 	.word	0x40140000
 8004e2c:	3fe00000 	.word	0x3fe00000
 8004e30:	e9dd 6700 	ldrd	r6, r7, [sp]
 8004e34:	465d      	mov	r5, fp
 8004e36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	4639      	mov	r1, r7
 8004e3e:	f7fb fd45 	bl	80008cc <__aeabi_ddiv>
 8004e42:	f7fb fec9 	bl	8000bd8 <__aeabi_d2iz>
 8004e46:	4680      	mov	r8, r0
 8004e48:	f7fb fbac 	bl	80005a4 <__aeabi_i2d>
 8004e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e50:	f7fb fc12 	bl	8000678 <__aeabi_dmul>
 8004e54:	4602      	mov	r2, r0
 8004e56:	460b      	mov	r3, r1
 8004e58:	4630      	mov	r0, r6
 8004e5a:	4639      	mov	r1, r7
 8004e5c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8004e60:	f7fb fa52 	bl	8000308 <__aeabi_dsub>
 8004e64:	f805 6b01 	strb.w	r6, [r5], #1
 8004e68:	eba5 060b 	sub.w	r6, r5, fp
 8004e6c:	45b1      	cmp	r9, r6
 8004e6e:	4602      	mov	r2, r0
 8004e70:	460b      	mov	r3, r1
 8004e72:	d139      	bne.n	8004ee8 <_dtoa_r+0x6c8>
 8004e74:	f7fb fa4a 	bl	800030c <__adddf3>
 8004e78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e7c:	4606      	mov	r6, r0
 8004e7e:	460f      	mov	r7, r1
 8004e80:	f7fb fe8a 	bl	8000b98 <__aeabi_dcmpgt>
 8004e84:	b9c8      	cbnz	r0, 8004eba <_dtoa_r+0x69a>
 8004e86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	4639      	mov	r1, r7
 8004e8e:	f7fb fe5b 	bl	8000b48 <__aeabi_dcmpeq>
 8004e92:	b110      	cbz	r0, 8004e9a <_dtoa_r+0x67a>
 8004e94:	f018 0f01 	tst.w	r8, #1
 8004e98:	d10f      	bne.n	8004eba <_dtoa_r+0x69a>
 8004e9a:	9904      	ldr	r1, [sp, #16]
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f000 fdff 	bl	8005aa0 <_Bfree>
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004ea6:	702b      	strb	r3, [r5, #0]
 8004ea8:	f10a 0301 	add.w	r3, sl, #1
 8004eac:	6013      	str	r3, [r2, #0]
 8004eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	f000 8241 	beq.w	8005338 <_dtoa_r+0xb18>
 8004eb6:	601d      	str	r5, [r3, #0]
 8004eb8:	e23e      	b.n	8005338 <_dtoa_r+0xb18>
 8004eba:	f8cd a020 	str.w	sl, [sp, #32]
 8004ebe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004ec2:	2a39      	cmp	r2, #57	; 0x39
 8004ec4:	f105 33ff 	add.w	r3, r5, #4294967295
 8004ec8:	d108      	bne.n	8004edc <_dtoa_r+0x6bc>
 8004eca:	459b      	cmp	fp, r3
 8004ecc:	d10a      	bne.n	8004ee4 <_dtoa_r+0x6c4>
 8004ece:	9b08      	ldr	r3, [sp, #32]
 8004ed0:	3301      	adds	r3, #1
 8004ed2:	9308      	str	r3, [sp, #32]
 8004ed4:	2330      	movs	r3, #48	; 0x30
 8004ed6:	f88b 3000 	strb.w	r3, [fp]
 8004eda:	465b      	mov	r3, fp
 8004edc:	781a      	ldrb	r2, [r3, #0]
 8004ede:	3201      	adds	r2, #1
 8004ee0:	701a      	strb	r2, [r3, #0]
 8004ee2:	e78c      	b.n	8004dfe <_dtoa_r+0x5de>
 8004ee4:	461d      	mov	r5, r3
 8004ee6:	e7ea      	b.n	8004ebe <_dtoa_r+0x69e>
 8004ee8:	2200      	movs	r2, #0
 8004eea:	4b9b      	ldr	r3, [pc, #620]	; (8005158 <_dtoa_r+0x938>)
 8004eec:	f7fb fbc4 	bl	8000678 <__aeabi_dmul>
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4606      	mov	r6, r0
 8004ef6:	460f      	mov	r7, r1
 8004ef8:	f7fb fe26 	bl	8000b48 <__aeabi_dcmpeq>
 8004efc:	2800      	cmp	r0, #0
 8004efe:	d09a      	beq.n	8004e36 <_dtoa_r+0x616>
 8004f00:	e7cb      	b.n	8004e9a <_dtoa_r+0x67a>
 8004f02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004f04:	2a00      	cmp	r2, #0
 8004f06:	f000 808b 	beq.w	8005020 <_dtoa_r+0x800>
 8004f0a:	9a06      	ldr	r2, [sp, #24]
 8004f0c:	2a01      	cmp	r2, #1
 8004f0e:	dc6e      	bgt.n	8004fee <_dtoa_r+0x7ce>
 8004f10:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004f12:	2a00      	cmp	r2, #0
 8004f14:	d067      	beq.n	8004fe6 <_dtoa_r+0x7c6>
 8004f16:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004f1a:	9f07      	ldr	r7, [sp, #28]
 8004f1c:	9d05      	ldr	r5, [sp, #20]
 8004f1e:	9a05      	ldr	r2, [sp, #20]
 8004f20:	2101      	movs	r1, #1
 8004f22:	441a      	add	r2, r3
 8004f24:	4620      	mov	r0, r4
 8004f26:	9205      	str	r2, [sp, #20]
 8004f28:	4498      	add	r8, r3
 8004f2a:	f000 fe97 	bl	8005c5c <__i2b>
 8004f2e:	4606      	mov	r6, r0
 8004f30:	2d00      	cmp	r5, #0
 8004f32:	dd0c      	ble.n	8004f4e <_dtoa_r+0x72e>
 8004f34:	f1b8 0f00 	cmp.w	r8, #0
 8004f38:	dd09      	ble.n	8004f4e <_dtoa_r+0x72e>
 8004f3a:	4545      	cmp	r5, r8
 8004f3c:	9a05      	ldr	r2, [sp, #20]
 8004f3e:	462b      	mov	r3, r5
 8004f40:	bfa8      	it	ge
 8004f42:	4643      	movge	r3, r8
 8004f44:	1ad2      	subs	r2, r2, r3
 8004f46:	9205      	str	r2, [sp, #20]
 8004f48:	1aed      	subs	r5, r5, r3
 8004f4a:	eba8 0803 	sub.w	r8, r8, r3
 8004f4e:	9b07      	ldr	r3, [sp, #28]
 8004f50:	b1eb      	cbz	r3, 8004f8e <_dtoa_r+0x76e>
 8004f52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d067      	beq.n	8005028 <_dtoa_r+0x808>
 8004f58:	b18f      	cbz	r7, 8004f7e <_dtoa_r+0x75e>
 8004f5a:	4631      	mov	r1, r6
 8004f5c:	463a      	mov	r2, r7
 8004f5e:	4620      	mov	r0, r4
 8004f60:	f000 ff1c 	bl	8005d9c <__pow5mult>
 8004f64:	9a04      	ldr	r2, [sp, #16]
 8004f66:	4601      	mov	r1, r0
 8004f68:	4606      	mov	r6, r0
 8004f6a:	4620      	mov	r0, r4
 8004f6c:	f000 fe7f 	bl	8005c6e <__multiply>
 8004f70:	9904      	ldr	r1, [sp, #16]
 8004f72:	9008      	str	r0, [sp, #32]
 8004f74:	4620      	mov	r0, r4
 8004f76:	f000 fd93 	bl	8005aa0 <_Bfree>
 8004f7a:	9b08      	ldr	r3, [sp, #32]
 8004f7c:	9304      	str	r3, [sp, #16]
 8004f7e:	9b07      	ldr	r3, [sp, #28]
 8004f80:	1bda      	subs	r2, r3, r7
 8004f82:	d004      	beq.n	8004f8e <_dtoa_r+0x76e>
 8004f84:	9904      	ldr	r1, [sp, #16]
 8004f86:	4620      	mov	r0, r4
 8004f88:	f000 ff08 	bl	8005d9c <__pow5mult>
 8004f8c:	9004      	str	r0, [sp, #16]
 8004f8e:	2101      	movs	r1, #1
 8004f90:	4620      	mov	r0, r4
 8004f92:	f000 fe63 	bl	8005c5c <__i2b>
 8004f96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f98:	4607      	mov	r7, r0
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	f000 81d0 	beq.w	8005340 <_dtoa_r+0xb20>
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4601      	mov	r1, r0
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f000 fef9 	bl	8005d9c <__pow5mult>
 8004faa:	9b06      	ldr	r3, [sp, #24]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	4607      	mov	r7, r0
 8004fb0:	dc40      	bgt.n	8005034 <_dtoa_r+0x814>
 8004fb2:	9b00      	ldr	r3, [sp, #0]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d139      	bne.n	800502c <_dtoa_r+0x80c>
 8004fb8:	9b01      	ldr	r3, [sp, #4]
 8004fba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d136      	bne.n	8005030 <_dtoa_r+0x810>
 8004fc2:	9b01      	ldr	r3, [sp, #4]
 8004fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004fc8:	0d1b      	lsrs	r3, r3, #20
 8004fca:	051b      	lsls	r3, r3, #20
 8004fcc:	b12b      	cbz	r3, 8004fda <_dtoa_r+0x7ba>
 8004fce:	9b05      	ldr	r3, [sp, #20]
 8004fd0:	3301      	adds	r3, #1
 8004fd2:	9305      	str	r3, [sp, #20]
 8004fd4:	f108 0801 	add.w	r8, r8, #1
 8004fd8:	2301      	movs	r3, #1
 8004fda:	9307      	str	r3, [sp, #28]
 8004fdc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d12a      	bne.n	8005038 <_dtoa_r+0x818>
 8004fe2:	2001      	movs	r0, #1
 8004fe4:	e030      	b.n	8005048 <_dtoa_r+0x828>
 8004fe6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004fe8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004fec:	e795      	b.n	8004f1a <_dtoa_r+0x6fa>
 8004fee:	9b07      	ldr	r3, [sp, #28]
 8004ff0:	f109 37ff 	add.w	r7, r9, #4294967295
 8004ff4:	42bb      	cmp	r3, r7
 8004ff6:	bfbf      	itttt	lt
 8004ff8:	9b07      	ldrlt	r3, [sp, #28]
 8004ffa:	9707      	strlt	r7, [sp, #28]
 8004ffc:	1afa      	sublt	r2, r7, r3
 8004ffe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005000:	bfbb      	ittet	lt
 8005002:	189b      	addlt	r3, r3, r2
 8005004:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005006:	1bdf      	subge	r7, r3, r7
 8005008:	2700      	movlt	r7, #0
 800500a:	f1b9 0f00 	cmp.w	r9, #0
 800500e:	bfb5      	itete	lt
 8005010:	9b05      	ldrlt	r3, [sp, #20]
 8005012:	9d05      	ldrge	r5, [sp, #20]
 8005014:	eba3 0509 	sublt.w	r5, r3, r9
 8005018:	464b      	movge	r3, r9
 800501a:	bfb8      	it	lt
 800501c:	2300      	movlt	r3, #0
 800501e:	e77e      	b.n	8004f1e <_dtoa_r+0x6fe>
 8005020:	9f07      	ldr	r7, [sp, #28]
 8005022:	9d05      	ldr	r5, [sp, #20]
 8005024:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8005026:	e783      	b.n	8004f30 <_dtoa_r+0x710>
 8005028:	9a07      	ldr	r2, [sp, #28]
 800502a:	e7ab      	b.n	8004f84 <_dtoa_r+0x764>
 800502c:	2300      	movs	r3, #0
 800502e:	e7d4      	b.n	8004fda <_dtoa_r+0x7ba>
 8005030:	9b00      	ldr	r3, [sp, #0]
 8005032:	e7d2      	b.n	8004fda <_dtoa_r+0x7ba>
 8005034:	2300      	movs	r3, #0
 8005036:	9307      	str	r3, [sp, #28]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800503e:	6918      	ldr	r0, [r3, #16]
 8005040:	f000 fdbe 	bl	8005bc0 <__hi0bits>
 8005044:	f1c0 0020 	rsb	r0, r0, #32
 8005048:	4440      	add	r0, r8
 800504a:	f010 001f 	ands.w	r0, r0, #31
 800504e:	d047      	beq.n	80050e0 <_dtoa_r+0x8c0>
 8005050:	f1c0 0320 	rsb	r3, r0, #32
 8005054:	2b04      	cmp	r3, #4
 8005056:	dd3b      	ble.n	80050d0 <_dtoa_r+0x8b0>
 8005058:	9b05      	ldr	r3, [sp, #20]
 800505a:	f1c0 001c 	rsb	r0, r0, #28
 800505e:	4403      	add	r3, r0
 8005060:	9305      	str	r3, [sp, #20]
 8005062:	4405      	add	r5, r0
 8005064:	4480      	add	r8, r0
 8005066:	9b05      	ldr	r3, [sp, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	dd05      	ble.n	8005078 <_dtoa_r+0x858>
 800506c:	461a      	mov	r2, r3
 800506e:	9904      	ldr	r1, [sp, #16]
 8005070:	4620      	mov	r0, r4
 8005072:	f000 fee1 	bl	8005e38 <__lshift>
 8005076:	9004      	str	r0, [sp, #16]
 8005078:	f1b8 0f00 	cmp.w	r8, #0
 800507c:	dd05      	ble.n	800508a <_dtoa_r+0x86a>
 800507e:	4639      	mov	r1, r7
 8005080:	4642      	mov	r2, r8
 8005082:	4620      	mov	r0, r4
 8005084:	f000 fed8 	bl	8005e38 <__lshift>
 8005088:	4607      	mov	r7, r0
 800508a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800508c:	b353      	cbz	r3, 80050e4 <_dtoa_r+0x8c4>
 800508e:	4639      	mov	r1, r7
 8005090:	9804      	ldr	r0, [sp, #16]
 8005092:	f000 ff25 	bl	8005ee0 <__mcmp>
 8005096:	2800      	cmp	r0, #0
 8005098:	da24      	bge.n	80050e4 <_dtoa_r+0x8c4>
 800509a:	2300      	movs	r3, #0
 800509c:	220a      	movs	r2, #10
 800509e:	9904      	ldr	r1, [sp, #16]
 80050a0:	4620      	mov	r0, r4
 80050a2:	f000 fd14 	bl	8005ace <__multadd>
 80050a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050a8:	9004      	str	r0, [sp, #16]
 80050aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	f000 814d 	beq.w	800534e <_dtoa_r+0xb2e>
 80050b4:	2300      	movs	r3, #0
 80050b6:	4631      	mov	r1, r6
 80050b8:	220a      	movs	r2, #10
 80050ba:	4620      	mov	r0, r4
 80050bc:	f000 fd07 	bl	8005ace <__multadd>
 80050c0:	9b02      	ldr	r3, [sp, #8]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	4606      	mov	r6, r0
 80050c6:	dc4f      	bgt.n	8005168 <_dtoa_r+0x948>
 80050c8:	9b06      	ldr	r3, [sp, #24]
 80050ca:	2b02      	cmp	r3, #2
 80050cc:	dd4c      	ble.n	8005168 <_dtoa_r+0x948>
 80050ce:	e011      	b.n	80050f4 <_dtoa_r+0x8d4>
 80050d0:	d0c9      	beq.n	8005066 <_dtoa_r+0x846>
 80050d2:	9a05      	ldr	r2, [sp, #20]
 80050d4:	331c      	adds	r3, #28
 80050d6:	441a      	add	r2, r3
 80050d8:	9205      	str	r2, [sp, #20]
 80050da:	441d      	add	r5, r3
 80050dc:	4498      	add	r8, r3
 80050de:	e7c2      	b.n	8005066 <_dtoa_r+0x846>
 80050e0:	4603      	mov	r3, r0
 80050e2:	e7f6      	b.n	80050d2 <_dtoa_r+0x8b2>
 80050e4:	f1b9 0f00 	cmp.w	r9, #0
 80050e8:	dc38      	bgt.n	800515c <_dtoa_r+0x93c>
 80050ea:	9b06      	ldr	r3, [sp, #24]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	dd35      	ble.n	800515c <_dtoa_r+0x93c>
 80050f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80050f4:	9b02      	ldr	r3, [sp, #8]
 80050f6:	b963      	cbnz	r3, 8005112 <_dtoa_r+0x8f2>
 80050f8:	4639      	mov	r1, r7
 80050fa:	2205      	movs	r2, #5
 80050fc:	4620      	mov	r0, r4
 80050fe:	f000 fce6 	bl	8005ace <__multadd>
 8005102:	4601      	mov	r1, r0
 8005104:	4607      	mov	r7, r0
 8005106:	9804      	ldr	r0, [sp, #16]
 8005108:	f000 feea 	bl	8005ee0 <__mcmp>
 800510c:	2800      	cmp	r0, #0
 800510e:	f73f adcc 	bgt.w	8004caa <_dtoa_r+0x48a>
 8005112:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005114:	465d      	mov	r5, fp
 8005116:	ea6f 0a03 	mvn.w	sl, r3
 800511a:	f04f 0900 	mov.w	r9, #0
 800511e:	4639      	mov	r1, r7
 8005120:	4620      	mov	r0, r4
 8005122:	f000 fcbd 	bl	8005aa0 <_Bfree>
 8005126:	2e00      	cmp	r6, #0
 8005128:	f43f aeb7 	beq.w	8004e9a <_dtoa_r+0x67a>
 800512c:	f1b9 0f00 	cmp.w	r9, #0
 8005130:	d005      	beq.n	800513e <_dtoa_r+0x91e>
 8005132:	45b1      	cmp	r9, r6
 8005134:	d003      	beq.n	800513e <_dtoa_r+0x91e>
 8005136:	4649      	mov	r1, r9
 8005138:	4620      	mov	r0, r4
 800513a:	f000 fcb1 	bl	8005aa0 <_Bfree>
 800513e:	4631      	mov	r1, r6
 8005140:	4620      	mov	r0, r4
 8005142:	f000 fcad 	bl	8005aa0 <_Bfree>
 8005146:	e6a8      	b.n	8004e9a <_dtoa_r+0x67a>
 8005148:	2700      	movs	r7, #0
 800514a:	463e      	mov	r6, r7
 800514c:	e7e1      	b.n	8005112 <_dtoa_r+0x8f2>
 800514e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8005152:	463e      	mov	r6, r7
 8005154:	e5a9      	b.n	8004caa <_dtoa_r+0x48a>
 8005156:	bf00      	nop
 8005158:	40240000 	.word	0x40240000
 800515c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515e:	f8cd 9008 	str.w	r9, [sp, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80fa 	beq.w	800535c <_dtoa_r+0xb3c>
 8005168:	2d00      	cmp	r5, #0
 800516a:	dd05      	ble.n	8005178 <_dtoa_r+0x958>
 800516c:	4631      	mov	r1, r6
 800516e:	462a      	mov	r2, r5
 8005170:	4620      	mov	r0, r4
 8005172:	f000 fe61 	bl	8005e38 <__lshift>
 8005176:	4606      	mov	r6, r0
 8005178:	9b07      	ldr	r3, [sp, #28]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d04c      	beq.n	8005218 <_dtoa_r+0x9f8>
 800517e:	6871      	ldr	r1, [r6, #4]
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fc59 	bl	8005a38 <_Balloc>
 8005186:	6932      	ldr	r2, [r6, #16]
 8005188:	3202      	adds	r2, #2
 800518a:	4605      	mov	r5, r0
 800518c:	0092      	lsls	r2, r2, #2
 800518e:	f106 010c 	add.w	r1, r6, #12
 8005192:	300c      	adds	r0, #12
 8005194:	f7fd fd8e 	bl	8002cb4 <memcpy>
 8005198:	2201      	movs	r2, #1
 800519a:	4629      	mov	r1, r5
 800519c:	4620      	mov	r0, r4
 800519e:	f000 fe4b 	bl	8005e38 <__lshift>
 80051a2:	9b00      	ldr	r3, [sp, #0]
 80051a4:	f8cd b014 	str.w	fp, [sp, #20]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	46b1      	mov	r9, r6
 80051ae:	9307      	str	r3, [sp, #28]
 80051b0:	4606      	mov	r6, r0
 80051b2:	4639      	mov	r1, r7
 80051b4:	9804      	ldr	r0, [sp, #16]
 80051b6:	f7ff faa5 	bl	8004704 <quorem>
 80051ba:	4649      	mov	r1, r9
 80051bc:	4605      	mov	r5, r0
 80051be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80051c2:	9804      	ldr	r0, [sp, #16]
 80051c4:	f000 fe8c 	bl	8005ee0 <__mcmp>
 80051c8:	4632      	mov	r2, r6
 80051ca:	9000      	str	r0, [sp, #0]
 80051cc:	4639      	mov	r1, r7
 80051ce:	4620      	mov	r0, r4
 80051d0:	f000 fea0 	bl	8005f14 <__mdiff>
 80051d4:	68c3      	ldr	r3, [r0, #12]
 80051d6:	4602      	mov	r2, r0
 80051d8:	bb03      	cbnz	r3, 800521c <_dtoa_r+0x9fc>
 80051da:	4601      	mov	r1, r0
 80051dc:	9008      	str	r0, [sp, #32]
 80051de:	9804      	ldr	r0, [sp, #16]
 80051e0:	f000 fe7e 	bl	8005ee0 <__mcmp>
 80051e4:	9a08      	ldr	r2, [sp, #32]
 80051e6:	4603      	mov	r3, r0
 80051e8:	4611      	mov	r1, r2
 80051ea:	4620      	mov	r0, r4
 80051ec:	9308      	str	r3, [sp, #32]
 80051ee:	f000 fc57 	bl	8005aa0 <_Bfree>
 80051f2:	9b08      	ldr	r3, [sp, #32]
 80051f4:	b9a3      	cbnz	r3, 8005220 <_dtoa_r+0xa00>
 80051f6:	9a06      	ldr	r2, [sp, #24]
 80051f8:	b992      	cbnz	r2, 8005220 <_dtoa_r+0xa00>
 80051fa:	9a07      	ldr	r2, [sp, #28]
 80051fc:	b982      	cbnz	r2, 8005220 <_dtoa_r+0xa00>
 80051fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005202:	d029      	beq.n	8005258 <_dtoa_r+0xa38>
 8005204:	9b00      	ldr	r3, [sp, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	dd01      	ble.n	800520e <_dtoa_r+0x9ee>
 800520a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800520e:	9b05      	ldr	r3, [sp, #20]
 8005210:	1c5d      	adds	r5, r3, #1
 8005212:	f883 8000 	strb.w	r8, [r3]
 8005216:	e782      	b.n	800511e <_dtoa_r+0x8fe>
 8005218:	4630      	mov	r0, r6
 800521a:	e7c2      	b.n	80051a2 <_dtoa_r+0x982>
 800521c:	2301      	movs	r3, #1
 800521e:	e7e3      	b.n	80051e8 <_dtoa_r+0x9c8>
 8005220:	9a00      	ldr	r2, [sp, #0]
 8005222:	2a00      	cmp	r2, #0
 8005224:	db04      	blt.n	8005230 <_dtoa_r+0xa10>
 8005226:	d125      	bne.n	8005274 <_dtoa_r+0xa54>
 8005228:	9a06      	ldr	r2, [sp, #24]
 800522a:	bb1a      	cbnz	r2, 8005274 <_dtoa_r+0xa54>
 800522c:	9a07      	ldr	r2, [sp, #28]
 800522e:	bb0a      	cbnz	r2, 8005274 <_dtoa_r+0xa54>
 8005230:	2b00      	cmp	r3, #0
 8005232:	ddec      	ble.n	800520e <_dtoa_r+0x9ee>
 8005234:	2201      	movs	r2, #1
 8005236:	9904      	ldr	r1, [sp, #16]
 8005238:	4620      	mov	r0, r4
 800523a:	f000 fdfd 	bl	8005e38 <__lshift>
 800523e:	4639      	mov	r1, r7
 8005240:	9004      	str	r0, [sp, #16]
 8005242:	f000 fe4d 	bl	8005ee0 <__mcmp>
 8005246:	2800      	cmp	r0, #0
 8005248:	dc03      	bgt.n	8005252 <_dtoa_r+0xa32>
 800524a:	d1e0      	bne.n	800520e <_dtoa_r+0x9ee>
 800524c:	f018 0f01 	tst.w	r8, #1
 8005250:	d0dd      	beq.n	800520e <_dtoa_r+0x9ee>
 8005252:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005256:	d1d8      	bne.n	800520a <_dtoa_r+0x9ea>
 8005258:	9b05      	ldr	r3, [sp, #20]
 800525a:	9a05      	ldr	r2, [sp, #20]
 800525c:	1c5d      	adds	r5, r3, #1
 800525e:	2339      	movs	r3, #57	; 0x39
 8005260:	7013      	strb	r3, [r2, #0]
 8005262:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005266:	2b39      	cmp	r3, #57	; 0x39
 8005268:	f105 32ff 	add.w	r2, r5, #4294967295
 800526c:	d04f      	beq.n	800530e <_dtoa_r+0xaee>
 800526e:	3301      	adds	r3, #1
 8005270:	7013      	strb	r3, [r2, #0]
 8005272:	e754      	b.n	800511e <_dtoa_r+0x8fe>
 8005274:	9a05      	ldr	r2, [sp, #20]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f102 0501 	add.w	r5, r2, #1
 800527c:	dd06      	ble.n	800528c <_dtoa_r+0xa6c>
 800527e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8005282:	d0e9      	beq.n	8005258 <_dtoa_r+0xa38>
 8005284:	f108 0801 	add.w	r8, r8, #1
 8005288:	9b05      	ldr	r3, [sp, #20]
 800528a:	e7c2      	b.n	8005212 <_dtoa_r+0x9f2>
 800528c:	9a02      	ldr	r2, [sp, #8]
 800528e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8005292:	eba5 030b 	sub.w	r3, r5, fp
 8005296:	4293      	cmp	r3, r2
 8005298:	d021      	beq.n	80052de <_dtoa_r+0xabe>
 800529a:	2300      	movs	r3, #0
 800529c:	220a      	movs	r2, #10
 800529e:	9904      	ldr	r1, [sp, #16]
 80052a0:	4620      	mov	r0, r4
 80052a2:	f000 fc14 	bl	8005ace <__multadd>
 80052a6:	45b1      	cmp	r9, r6
 80052a8:	9004      	str	r0, [sp, #16]
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	f04f 020a 	mov.w	r2, #10
 80052b2:	4649      	mov	r1, r9
 80052b4:	4620      	mov	r0, r4
 80052b6:	d105      	bne.n	80052c4 <_dtoa_r+0xaa4>
 80052b8:	f000 fc09 	bl	8005ace <__multadd>
 80052bc:	4681      	mov	r9, r0
 80052be:	4606      	mov	r6, r0
 80052c0:	9505      	str	r5, [sp, #20]
 80052c2:	e776      	b.n	80051b2 <_dtoa_r+0x992>
 80052c4:	f000 fc03 	bl	8005ace <__multadd>
 80052c8:	4631      	mov	r1, r6
 80052ca:	4681      	mov	r9, r0
 80052cc:	2300      	movs	r3, #0
 80052ce:	220a      	movs	r2, #10
 80052d0:	4620      	mov	r0, r4
 80052d2:	f000 fbfc 	bl	8005ace <__multadd>
 80052d6:	4606      	mov	r6, r0
 80052d8:	e7f2      	b.n	80052c0 <_dtoa_r+0xaa0>
 80052da:	f04f 0900 	mov.w	r9, #0
 80052de:	2201      	movs	r2, #1
 80052e0:	9904      	ldr	r1, [sp, #16]
 80052e2:	4620      	mov	r0, r4
 80052e4:	f000 fda8 	bl	8005e38 <__lshift>
 80052e8:	4639      	mov	r1, r7
 80052ea:	9004      	str	r0, [sp, #16]
 80052ec:	f000 fdf8 	bl	8005ee0 <__mcmp>
 80052f0:	2800      	cmp	r0, #0
 80052f2:	dcb6      	bgt.n	8005262 <_dtoa_r+0xa42>
 80052f4:	d102      	bne.n	80052fc <_dtoa_r+0xadc>
 80052f6:	f018 0f01 	tst.w	r8, #1
 80052fa:	d1b2      	bne.n	8005262 <_dtoa_r+0xa42>
 80052fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005300:	2b30      	cmp	r3, #48	; 0x30
 8005302:	f105 32ff 	add.w	r2, r5, #4294967295
 8005306:	f47f af0a 	bne.w	800511e <_dtoa_r+0x8fe>
 800530a:	4615      	mov	r5, r2
 800530c:	e7f6      	b.n	80052fc <_dtoa_r+0xadc>
 800530e:	4593      	cmp	fp, r2
 8005310:	d105      	bne.n	800531e <_dtoa_r+0xafe>
 8005312:	2331      	movs	r3, #49	; 0x31
 8005314:	f10a 0a01 	add.w	sl, sl, #1
 8005318:	f88b 3000 	strb.w	r3, [fp]
 800531c:	e6ff      	b.n	800511e <_dtoa_r+0x8fe>
 800531e:	4615      	mov	r5, r2
 8005320:	e79f      	b.n	8005262 <_dtoa_r+0xa42>
 8005322:	f8df b064 	ldr.w	fp, [pc, #100]	; 8005388 <_dtoa_r+0xb68>
 8005326:	e007      	b.n	8005338 <_dtoa_r+0xb18>
 8005328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800532a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800538c <_dtoa_r+0xb6c>
 800532e:	b11b      	cbz	r3, 8005338 <_dtoa_r+0xb18>
 8005330:	f10b 0308 	add.w	r3, fp, #8
 8005334:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005336:	6013      	str	r3, [r2, #0]
 8005338:	4658      	mov	r0, fp
 800533a:	b017      	add	sp, #92	; 0x5c
 800533c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005340:	9b06      	ldr	r3, [sp, #24]
 8005342:	2b01      	cmp	r3, #1
 8005344:	f77f ae35 	ble.w	8004fb2 <_dtoa_r+0x792>
 8005348:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800534a:	9307      	str	r3, [sp, #28]
 800534c:	e649      	b.n	8004fe2 <_dtoa_r+0x7c2>
 800534e:	9b02      	ldr	r3, [sp, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	dc03      	bgt.n	800535c <_dtoa_r+0xb3c>
 8005354:	9b06      	ldr	r3, [sp, #24]
 8005356:	2b02      	cmp	r3, #2
 8005358:	f73f aecc 	bgt.w	80050f4 <_dtoa_r+0x8d4>
 800535c:	465d      	mov	r5, fp
 800535e:	4639      	mov	r1, r7
 8005360:	9804      	ldr	r0, [sp, #16]
 8005362:	f7ff f9cf 	bl	8004704 <quorem>
 8005366:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800536a:	f805 8b01 	strb.w	r8, [r5], #1
 800536e:	9a02      	ldr	r2, [sp, #8]
 8005370:	eba5 030b 	sub.w	r3, r5, fp
 8005374:	429a      	cmp	r2, r3
 8005376:	ddb0      	ble.n	80052da <_dtoa_r+0xaba>
 8005378:	2300      	movs	r3, #0
 800537a:	220a      	movs	r2, #10
 800537c:	9904      	ldr	r1, [sp, #16]
 800537e:	4620      	mov	r0, r4
 8005380:	f000 fba5 	bl	8005ace <__multadd>
 8005384:	9004      	str	r0, [sp, #16]
 8005386:	e7ea      	b.n	800535e <_dtoa_r+0xb3e>
 8005388:	080072a4 	.word	0x080072a4
 800538c:	08007320 	.word	0x08007320

08005390 <rshift>:
 8005390:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005392:	6906      	ldr	r6, [r0, #16]
 8005394:	114b      	asrs	r3, r1, #5
 8005396:	429e      	cmp	r6, r3
 8005398:	f100 0414 	add.w	r4, r0, #20
 800539c:	dd30      	ble.n	8005400 <rshift+0x70>
 800539e:	f011 011f 	ands.w	r1, r1, #31
 80053a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80053a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80053aa:	d108      	bne.n	80053be <rshift+0x2e>
 80053ac:	4621      	mov	r1, r4
 80053ae:	42b2      	cmp	r2, r6
 80053b0:	460b      	mov	r3, r1
 80053b2:	d211      	bcs.n	80053d8 <rshift+0x48>
 80053b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80053b8:	f841 3b04 	str.w	r3, [r1], #4
 80053bc:	e7f7      	b.n	80053ae <rshift+0x1e>
 80053be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80053c2:	f1c1 0c20 	rsb	ip, r1, #32
 80053c6:	40cd      	lsrs	r5, r1
 80053c8:	3204      	adds	r2, #4
 80053ca:	4623      	mov	r3, r4
 80053cc:	42b2      	cmp	r2, r6
 80053ce:	4617      	mov	r7, r2
 80053d0:	d30c      	bcc.n	80053ec <rshift+0x5c>
 80053d2:	601d      	str	r5, [r3, #0]
 80053d4:	b105      	cbz	r5, 80053d8 <rshift+0x48>
 80053d6:	3304      	adds	r3, #4
 80053d8:	1b1a      	subs	r2, r3, r4
 80053da:	42a3      	cmp	r3, r4
 80053dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80053e0:	bf08      	it	eq
 80053e2:	2300      	moveq	r3, #0
 80053e4:	6102      	str	r2, [r0, #16]
 80053e6:	bf08      	it	eq
 80053e8:	6143      	streq	r3, [r0, #20]
 80053ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ec:	683f      	ldr	r7, [r7, #0]
 80053ee:	fa07 f70c 	lsl.w	r7, r7, ip
 80053f2:	433d      	orrs	r5, r7
 80053f4:	f843 5b04 	str.w	r5, [r3], #4
 80053f8:	f852 5b04 	ldr.w	r5, [r2], #4
 80053fc:	40cd      	lsrs	r5, r1
 80053fe:	e7e5      	b.n	80053cc <rshift+0x3c>
 8005400:	4623      	mov	r3, r4
 8005402:	e7e9      	b.n	80053d8 <rshift+0x48>

08005404 <__hexdig_fun>:
 8005404:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005408:	2b09      	cmp	r3, #9
 800540a:	d802      	bhi.n	8005412 <__hexdig_fun+0xe>
 800540c:	3820      	subs	r0, #32
 800540e:	b2c0      	uxtb	r0, r0
 8005410:	4770      	bx	lr
 8005412:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005416:	2b05      	cmp	r3, #5
 8005418:	d801      	bhi.n	800541e <__hexdig_fun+0x1a>
 800541a:	3847      	subs	r0, #71	; 0x47
 800541c:	e7f7      	b.n	800540e <__hexdig_fun+0xa>
 800541e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005422:	2b05      	cmp	r3, #5
 8005424:	d801      	bhi.n	800542a <__hexdig_fun+0x26>
 8005426:	3827      	subs	r0, #39	; 0x27
 8005428:	e7f1      	b.n	800540e <__hexdig_fun+0xa>
 800542a:	2000      	movs	r0, #0
 800542c:	4770      	bx	lr

0800542e <__gethex>:
 800542e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005432:	b08b      	sub	sp, #44	; 0x2c
 8005434:	468a      	mov	sl, r1
 8005436:	9002      	str	r0, [sp, #8]
 8005438:	9816      	ldr	r0, [sp, #88]	; 0x58
 800543a:	9306      	str	r3, [sp, #24]
 800543c:	4690      	mov	r8, r2
 800543e:	f000 fad0 	bl	80059e2 <__localeconv_l>
 8005442:	6803      	ldr	r3, [r0, #0]
 8005444:	9303      	str	r3, [sp, #12]
 8005446:	4618      	mov	r0, r3
 8005448:	f7fa fefb 	bl	8000242 <strlen>
 800544c:	9b03      	ldr	r3, [sp, #12]
 800544e:	9001      	str	r0, [sp, #4]
 8005450:	4403      	add	r3, r0
 8005452:	f04f 0b00 	mov.w	fp, #0
 8005456:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800545a:	9307      	str	r3, [sp, #28]
 800545c:	f8da 3000 	ldr.w	r3, [sl]
 8005460:	3302      	adds	r3, #2
 8005462:	461f      	mov	r7, r3
 8005464:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005468:	2830      	cmp	r0, #48	; 0x30
 800546a:	d06c      	beq.n	8005546 <__gethex+0x118>
 800546c:	f7ff ffca 	bl	8005404 <__hexdig_fun>
 8005470:	4604      	mov	r4, r0
 8005472:	2800      	cmp	r0, #0
 8005474:	d16a      	bne.n	800554c <__gethex+0x11e>
 8005476:	9a01      	ldr	r2, [sp, #4]
 8005478:	9903      	ldr	r1, [sp, #12]
 800547a:	4638      	mov	r0, r7
 800547c:	f001 f8f4 	bl	8006668 <strncmp>
 8005480:	2800      	cmp	r0, #0
 8005482:	d166      	bne.n	8005552 <__gethex+0x124>
 8005484:	9b01      	ldr	r3, [sp, #4]
 8005486:	5cf8      	ldrb	r0, [r7, r3]
 8005488:	18fe      	adds	r6, r7, r3
 800548a:	f7ff ffbb 	bl	8005404 <__hexdig_fun>
 800548e:	2800      	cmp	r0, #0
 8005490:	d062      	beq.n	8005558 <__gethex+0x12a>
 8005492:	4633      	mov	r3, r6
 8005494:	7818      	ldrb	r0, [r3, #0]
 8005496:	2830      	cmp	r0, #48	; 0x30
 8005498:	461f      	mov	r7, r3
 800549a:	f103 0301 	add.w	r3, r3, #1
 800549e:	d0f9      	beq.n	8005494 <__gethex+0x66>
 80054a0:	f7ff ffb0 	bl	8005404 <__hexdig_fun>
 80054a4:	fab0 f580 	clz	r5, r0
 80054a8:	096d      	lsrs	r5, r5, #5
 80054aa:	4634      	mov	r4, r6
 80054ac:	f04f 0b01 	mov.w	fp, #1
 80054b0:	463a      	mov	r2, r7
 80054b2:	4616      	mov	r6, r2
 80054b4:	3201      	adds	r2, #1
 80054b6:	7830      	ldrb	r0, [r6, #0]
 80054b8:	f7ff ffa4 	bl	8005404 <__hexdig_fun>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d1f8      	bne.n	80054b2 <__gethex+0x84>
 80054c0:	9a01      	ldr	r2, [sp, #4]
 80054c2:	9903      	ldr	r1, [sp, #12]
 80054c4:	4630      	mov	r0, r6
 80054c6:	f001 f8cf 	bl	8006668 <strncmp>
 80054ca:	b950      	cbnz	r0, 80054e2 <__gethex+0xb4>
 80054cc:	b954      	cbnz	r4, 80054e4 <__gethex+0xb6>
 80054ce:	9b01      	ldr	r3, [sp, #4]
 80054d0:	18f4      	adds	r4, r6, r3
 80054d2:	4622      	mov	r2, r4
 80054d4:	4616      	mov	r6, r2
 80054d6:	3201      	adds	r2, #1
 80054d8:	7830      	ldrb	r0, [r6, #0]
 80054da:	f7ff ff93 	bl	8005404 <__hexdig_fun>
 80054de:	2800      	cmp	r0, #0
 80054e0:	d1f8      	bne.n	80054d4 <__gethex+0xa6>
 80054e2:	b10c      	cbz	r4, 80054e8 <__gethex+0xba>
 80054e4:	1ba4      	subs	r4, r4, r6
 80054e6:	00a4      	lsls	r4, r4, #2
 80054e8:	7833      	ldrb	r3, [r6, #0]
 80054ea:	2b50      	cmp	r3, #80	; 0x50
 80054ec:	d001      	beq.n	80054f2 <__gethex+0xc4>
 80054ee:	2b70      	cmp	r3, #112	; 0x70
 80054f0:	d140      	bne.n	8005574 <__gethex+0x146>
 80054f2:	7873      	ldrb	r3, [r6, #1]
 80054f4:	2b2b      	cmp	r3, #43	; 0x2b
 80054f6:	d031      	beq.n	800555c <__gethex+0x12e>
 80054f8:	2b2d      	cmp	r3, #45	; 0x2d
 80054fa:	d033      	beq.n	8005564 <__gethex+0x136>
 80054fc:	1c71      	adds	r1, r6, #1
 80054fe:	f04f 0900 	mov.w	r9, #0
 8005502:	7808      	ldrb	r0, [r1, #0]
 8005504:	f7ff ff7e 	bl	8005404 <__hexdig_fun>
 8005508:	1e43      	subs	r3, r0, #1
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b18      	cmp	r3, #24
 800550e:	d831      	bhi.n	8005574 <__gethex+0x146>
 8005510:	f1a0 0210 	sub.w	r2, r0, #16
 8005514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005518:	f7ff ff74 	bl	8005404 <__hexdig_fun>
 800551c:	1e43      	subs	r3, r0, #1
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b18      	cmp	r3, #24
 8005522:	d922      	bls.n	800556a <__gethex+0x13c>
 8005524:	f1b9 0f00 	cmp.w	r9, #0
 8005528:	d000      	beq.n	800552c <__gethex+0xfe>
 800552a:	4252      	negs	r2, r2
 800552c:	4414      	add	r4, r2
 800552e:	f8ca 1000 	str.w	r1, [sl]
 8005532:	b30d      	cbz	r5, 8005578 <__gethex+0x14a>
 8005534:	f1bb 0f00 	cmp.w	fp, #0
 8005538:	bf0c      	ite	eq
 800553a:	2706      	moveq	r7, #6
 800553c:	2700      	movne	r7, #0
 800553e:	4638      	mov	r0, r7
 8005540:	b00b      	add	sp, #44	; 0x2c
 8005542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005546:	f10b 0b01 	add.w	fp, fp, #1
 800554a:	e78a      	b.n	8005462 <__gethex+0x34>
 800554c:	2500      	movs	r5, #0
 800554e:	462c      	mov	r4, r5
 8005550:	e7ae      	b.n	80054b0 <__gethex+0x82>
 8005552:	463e      	mov	r6, r7
 8005554:	2501      	movs	r5, #1
 8005556:	e7c7      	b.n	80054e8 <__gethex+0xba>
 8005558:	4604      	mov	r4, r0
 800555a:	e7fb      	b.n	8005554 <__gethex+0x126>
 800555c:	f04f 0900 	mov.w	r9, #0
 8005560:	1cb1      	adds	r1, r6, #2
 8005562:	e7ce      	b.n	8005502 <__gethex+0xd4>
 8005564:	f04f 0901 	mov.w	r9, #1
 8005568:	e7fa      	b.n	8005560 <__gethex+0x132>
 800556a:	230a      	movs	r3, #10
 800556c:	fb03 0202 	mla	r2, r3, r2, r0
 8005570:	3a10      	subs	r2, #16
 8005572:	e7cf      	b.n	8005514 <__gethex+0xe6>
 8005574:	4631      	mov	r1, r6
 8005576:	e7da      	b.n	800552e <__gethex+0x100>
 8005578:	1bf3      	subs	r3, r6, r7
 800557a:	3b01      	subs	r3, #1
 800557c:	4629      	mov	r1, r5
 800557e:	2b07      	cmp	r3, #7
 8005580:	dc49      	bgt.n	8005616 <__gethex+0x1e8>
 8005582:	9802      	ldr	r0, [sp, #8]
 8005584:	f000 fa58 	bl	8005a38 <_Balloc>
 8005588:	9b01      	ldr	r3, [sp, #4]
 800558a:	f100 0914 	add.w	r9, r0, #20
 800558e:	f04f 0b00 	mov.w	fp, #0
 8005592:	f1c3 0301 	rsb	r3, r3, #1
 8005596:	4605      	mov	r5, r0
 8005598:	f8cd 9010 	str.w	r9, [sp, #16]
 800559c:	46da      	mov	sl, fp
 800559e:	9308      	str	r3, [sp, #32]
 80055a0:	42b7      	cmp	r7, r6
 80055a2:	d33b      	bcc.n	800561c <__gethex+0x1ee>
 80055a4:	9804      	ldr	r0, [sp, #16]
 80055a6:	f840 ab04 	str.w	sl, [r0], #4
 80055aa:	eba0 0009 	sub.w	r0, r0, r9
 80055ae:	1080      	asrs	r0, r0, #2
 80055b0:	6128      	str	r0, [r5, #16]
 80055b2:	0147      	lsls	r7, r0, #5
 80055b4:	4650      	mov	r0, sl
 80055b6:	f000 fb03 	bl	8005bc0 <__hi0bits>
 80055ba:	f8d8 6000 	ldr.w	r6, [r8]
 80055be:	1a3f      	subs	r7, r7, r0
 80055c0:	42b7      	cmp	r7, r6
 80055c2:	dd64      	ble.n	800568e <__gethex+0x260>
 80055c4:	1bbf      	subs	r7, r7, r6
 80055c6:	4639      	mov	r1, r7
 80055c8:	4628      	mov	r0, r5
 80055ca:	f000 fe13 	bl	80061f4 <__any_on>
 80055ce:	4682      	mov	sl, r0
 80055d0:	b178      	cbz	r0, 80055f2 <__gethex+0x1c4>
 80055d2:	1e7b      	subs	r3, r7, #1
 80055d4:	1159      	asrs	r1, r3, #5
 80055d6:	f003 021f 	and.w	r2, r3, #31
 80055da:	f04f 0a01 	mov.w	sl, #1
 80055de:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80055e2:	fa0a f202 	lsl.w	r2, sl, r2
 80055e6:	420a      	tst	r2, r1
 80055e8:	d003      	beq.n	80055f2 <__gethex+0x1c4>
 80055ea:	4553      	cmp	r3, sl
 80055ec:	dc46      	bgt.n	800567c <__gethex+0x24e>
 80055ee:	f04f 0a02 	mov.w	sl, #2
 80055f2:	4639      	mov	r1, r7
 80055f4:	4628      	mov	r0, r5
 80055f6:	f7ff fecb 	bl	8005390 <rshift>
 80055fa:	443c      	add	r4, r7
 80055fc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005600:	42a3      	cmp	r3, r4
 8005602:	da52      	bge.n	80056aa <__gethex+0x27c>
 8005604:	4629      	mov	r1, r5
 8005606:	9802      	ldr	r0, [sp, #8]
 8005608:	f000 fa4a 	bl	8005aa0 <_Bfree>
 800560c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800560e:	2300      	movs	r3, #0
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	27a3      	movs	r7, #163	; 0xa3
 8005614:	e793      	b.n	800553e <__gethex+0x110>
 8005616:	3101      	adds	r1, #1
 8005618:	105b      	asrs	r3, r3, #1
 800561a:	e7b0      	b.n	800557e <__gethex+0x150>
 800561c:	1e73      	subs	r3, r6, #1
 800561e:	9305      	str	r3, [sp, #20]
 8005620:	9a07      	ldr	r2, [sp, #28]
 8005622:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005626:	4293      	cmp	r3, r2
 8005628:	d018      	beq.n	800565c <__gethex+0x22e>
 800562a:	f1bb 0f20 	cmp.w	fp, #32
 800562e:	d107      	bne.n	8005640 <__gethex+0x212>
 8005630:	9b04      	ldr	r3, [sp, #16]
 8005632:	f8c3 a000 	str.w	sl, [r3]
 8005636:	3304      	adds	r3, #4
 8005638:	f04f 0a00 	mov.w	sl, #0
 800563c:	9304      	str	r3, [sp, #16]
 800563e:	46d3      	mov	fp, sl
 8005640:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005644:	f7ff fede 	bl	8005404 <__hexdig_fun>
 8005648:	f000 000f 	and.w	r0, r0, #15
 800564c:	fa00 f00b 	lsl.w	r0, r0, fp
 8005650:	ea4a 0a00 	orr.w	sl, sl, r0
 8005654:	f10b 0b04 	add.w	fp, fp, #4
 8005658:	9b05      	ldr	r3, [sp, #20]
 800565a:	e00d      	b.n	8005678 <__gethex+0x24a>
 800565c:	9b05      	ldr	r3, [sp, #20]
 800565e:	9a08      	ldr	r2, [sp, #32]
 8005660:	4413      	add	r3, r2
 8005662:	42bb      	cmp	r3, r7
 8005664:	d3e1      	bcc.n	800562a <__gethex+0x1fc>
 8005666:	4618      	mov	r0, r3
 8005668:	9a01      	ldr	r2, [sp, #4]
 800566a:	9903      	ldr	r1, [sp, #12]
 800566c:	9309      	str	r3, [sp, #36]	; 0x24
 800566e:	f000 fffb 	bl	8006668 <strncmp>
 8005672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005674:	2800      	cmp	r0, #0
 8005676:	d1d8      	bne.n	800562a <__gethex+0x1fc>
 8005678:	461e      	mov	r6, r3
 800567a:	e791      	b.n	80055a0 <__gethex+0x172>
 800567c:	1eb9      	subs	r1, r7, #2
 800567e:	4628      	mov	r0, r5
 8005680:	f000 fdb8 	bl	80061f4 <__any_on>
 8005684:	2800      	cmp	r0, #0
 8005686:	d0b2      	beq.n	80055ee <__gethex+0x1c0>
 8005688:	f04f 0a03 	mov.w	sl, #3
 800568c:	e7b1      	b.n	80055f2 <__gethex+0x1c4>
 800568e:	da09      	bge.n	80056a4 <__gethex+0x276>
 8005690:	1bf7      	subs	r7, r6, r7
 8005692:	4629      	mov	r1, r5
 8005694:	463a      	mov	r2, r7
 8005696:	9802      	ldr	r0, [sp, #8]
 8005698:	f000 fbce 	bl	8005e38 <__lshift>
 800569c:	1be4      	subs	r4, r4, r7
 800569e:	4605      	mov	r5, r0
 80056a0:	f100 0914 	add.w	r9, r0, #20
 80056a4:	f04f 0a00 	mov.w	sl, #0
 80056a8:	e7a8      	b.n	80055fc <__gethex+0x1ce>
 80056aa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80056ae:	42a0      	cmp	r0, r4
 80056b0:	dd6a      	ble.n	8005788 <__gethex+0x35a>
 80056b2:	1b04      	subs	r4, r0, r4
 80056b4:	42a6      	cmp	r6, r4
 80056b6:	dc2e      	bgt.n	8005716 <__gethex+0x2e8>
 80056b8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d022      	beq.n	8005706 <__gethex+0x2d8>
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d024      	beq.n	800570e <__gethex+0x2e0>
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d115      	bne.n	80056f4 <__gethex+0x2c6>
 80056c8:	42a6      	cmp	r6, r4
 80056ca:	d113      	bne.n	80056f4 <__gethex+0x2c6>
 80056cc:	2e01      	cmp	r6, #1
 80056ce:	dc0b      	bgt.n	80056e8 <__gethex+0x2ba>
 80056d0:	9a06      	ldr	r2, [sp, #24]
 80056d2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80056d6:	6013      	str	r3, [r2, #0]
 80056d8:	2301      	movs	r3, #1
 80056da:	612b      	str	r3, [r5, #16]
 80056dc:	f8c9 3000 	str.w	r3, [r9]
 80056e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80056e2:	2762      	movs	r7, #98	; 0x62
 80056e4:	601d      	str	r5, [r3, #0]
 80056e6:	e72a      	b.n	800553e <__gethex+0x110>
 80056e8:	1e71      	subs	r1, r6, #1
 80056ea:	4628      	mov	r0, r5
 80056ec:	f000 fd82 	bl	80061f4 <__any_on>
 80056f0:	2800      	cmp	r0, #0
 80056f2:	d1ed      	bne.n	80056d0 <__gethex+0x2a2>
 80056f4:	4629      	mov	r1, r5
 80056f6:	9802      	ldr	r0, [sp, #8]
 80056f8:	f000 f9d2 	bl	8005aa0 <_Bfree>
 80056fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80056fe:	2300      	movs	r3, #0
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	2750      	movs	r7, #80	; 0x50
 8005704:	e71b      	b.n	800553e <__gethex+0x110>
 8005706:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005708:	2b00      	cmp	r3, #0
 800570a:	d0e1      	beq.n	80056d0 <__gethex+0x2a2>
 800570c:	e7f2      	b.n	80056f4 <__gethex+0x2c6>
 800570e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005710:	2b00      	cmp	r3, #0
 8005712:	d1dd      	bne.n	80056d0 <__gethex+0x2a2>
 8005714:	e7ee      	b.n	80056f4 <__gethex+0x2c6>
 8005716:	1e67      	subs	r7, r4, #1
 8005718:	f1ba 0f00 	cmp.w	sl, #0
 800571c:	d131      	bne.n	8005782 <__gethex+0x354>
 800571e:	b127      	cbz	r7, 800572a <__gethex+0x2fc>
 8005720:	4639      	mov	r1, r7
 8005722:	4628      	mov	r0, r5
 8005724:	f000 fd66 	bl	80061f4 <__any_on>
 8005728:	4682      	mov	sl, r0
 800572a:	117a      	asrs	r2, r7, #5
 800572c:	2301      	movs	r3, #1
 800572e:	f007 071f 	and.w	r7, r7, #31
 8005732:	fa03 f707 	lsl.w	r7, r3, r7
 8005736:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800573a:	4621      	mov	r1, r4
 800573c:	421f      	tst	r7, r3
 800573e:	4628      	mov	r0, r5
 8005740:	bf18      	it	ne
 8005742:	f04a 0a02 	orrne.w	sl, sl, #2
 8005746:	1b36      	subs	r6, r6, r4
 8005748:	f7ff fe22 	bl	8005390 <rshift>
 800574c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8005750:	2702      	movs	r7, #2
 8005752:	f1ba 0f00 	cmp.w	sl, #0
 8005756:	d048      	beq.n	80057ea <__gethex+0x3bc>
 8005758:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800575c:	2b02      	cmp	r3, #2
 800575e:	d015      	beq.n	800578c <__gethex+0x35e>
 8005760:	2b03      	cmp	r3, #3
 8005762:	d017      	beq.n	8005794 <__gethex+0x366>
 8005764:	2b01      	cmp	r3, #1
 8005766:	d109      	bne.n	800577c <__gethex+0x34e>
 8005768:	f01a 0f02 	tst.w	sl, #2
 800576c:	d006      	beq.n	800577c <__gethex+0x34e>
 800576e:	f8d9 3000 	ldr.w	r3, [r9]
 8005772:	ea4a 0a03 	orr.w	sl, sl, r3
 8005776:	f01a 0f01 	tst.w	sl, #1
 800577a:	d10e      	bne.n	800579a <__gethex+0x36c>
 800577c:	f047 0710 	orr.w	r7, r7, #16
 8005780:	e033      	b.n	80057ea <__gethex+0x3bc>
 8005782:	f04f 0a01 	mov.w	sl, #1
 8005786:	e7d0      	b.n	800572a <__gethex+0x2fc>
 8005788:	2701      	movs	r7, #1
 800578a:	e7e2      	b.n	8005752 <__gethex+0x324>
 800578c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800578e:	f1c3 0301 	rsb	r3, r3, #1
 8005792:	9315      	str	r3, [sp, #84]	; 0x54
 8005794:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005796:	2b00      	cmp	r3, #0
 8005798:	d0f0      	beq.n	800577c <__gethex+0x34e>
 800579a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800579e:	f105 0314 	add.w	r3, r5, #20
 80057a2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 80057a6:	eb03 010a 	add.w	r1, r3, sl
 80057aa:	f04f 0c00 	mov.w	ip, #0
 80057ae:	4618      	mov	r0, r3
 80057b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80057b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80057b8:	d01c      	beq.n	80057f4 <__gethex+0x3c6>
 80057ba:	3201      	adds	r2, #1
 80057bc:	6002      	str	r2, [r0, #0]
 80057be:	2f02      	cmp	r7, #2
 80057c0:	f105 0314 	add.w	r3, r5, #20
 80057c4:	d138      	bne.n	8005838 <__gethex+0x40a>
 80057c6:	f8d8 2000 	ldr.w	r2, [r8]
 80057ca:	3a01      	subs	r2, #1
 80057cc:	42b2      	cmp	r2, r6
 80057ce:	d10a      	bne.n	80057e6 <__gethex+0x3b8>
 80057d0:	1171      	asrs	r1, r6, #5
 80057d2:	2201      	movs	r2, #1
 80057d4:	f006 061f 	and.w	r6, r6, #31
 80057d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80057dc:	fa02 f606 	lsl.w	r6, r2, r6
 80057e0:	421e      	tst	r6, r3
 80057e2:	bf18      	it	ne
 80057e4:	4617      	movne	r7, r2
 80057e6:	f047 0720 	orr.w	r7, r7, #32
 80057ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80057ec:	601d      	str	r5, [r3, #0]
 80057ee:	9b06      	ldr	r3, [sp, #24]
 80057f0:	601c      	str	r4, [r3, #0]
 80057f2:	e6a4      	b.n	800553e <__gethex+0x110>
 80057f4:	4299      	cmp	r1, r3
 80057f6:	f843 cc04 	str.w	ip, [r3, #-4]
 80057fa:	d8d8      	bhi.n	80057ae <__gethex+0x380>
 80057fc:	68ab      	ldr	r3, [r5, #8]
 80057fe:	4599      	cmp	r9, r3
 8005800:	db12      	blt.n	8005828 <__gethex+0x3fa>
 8005802:	6869      	ldr	r1, [r5, #4]
 8005804:	9802      	ldr	r0, [sp, #8]
 8005806:	3101      	adds	r1, #1
 8005808:	f000 f916 	bl	8005a38 <_Balloc>
 800580c:	692a      	ldr	r2, [r5, #16]
 800580e:	3202      	adds	r2, #2
 8005810:	f105 010c 	add.w	r1, r5, #12
 8005814:	4683      	mov	fp, r0
 8005816:	0092      	lsls	r2, r2, #2
 8005818:	300c      	adds	r0, #12
 800581a:	f7fd fa4b 	bl	8002cb4 <memcpy>
 800581e:	4629      	mov	r1, r5
 8005820:	9802      	ldr	r0, [sp, #8]
 8005822:	f000 f93d 	bl	8005aa0 <_Bfree>
 8005826:	465d      	mov	r5, fp
 8005828:	692b      	ldr	r3, [r5, #16]
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005830:	612a      	str	r2, [r5, #16]
 8005832:	2201      	movs	r2, #1
 8005834:	615a      	str	r2, [r3, #20]
 8005836:	e7c2      	b.n	80057be <__gethex+0x390>
 8005838:	692a      	ldr	r2, [r5, #16]
 800583a:	454a      	cmp	r2, r9
 800583c:	dd0b      	ble.n	8005856 <__gethex+0x428>
 800583e:	2101      	movs	r1, #1
 8005840:	4628      	mov	r0, r5
 8005842:	f7ff fda5 	bl	8005390 <rshift>
 8005846:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800584a:	3401      	adds	r4, #1
 800584c:	42a3      	cmp	r3, r4
 800584e:	f6ff aed9 	blt.w	8005604 <__gethex+0x1d6>
 8005852:	2701      	movs	r7, #1
 8005854:	e7c7      	b.n	80057e6 <__gethex+0x3b8>
 8005856:	f016 061f 	ands.w	r6, r6, #31
 800585a:	d0fa      	beq.n	8005852 <__gethex+0x424>
 800585c:	449a      	add	sl, r3
 800585e:	f1c6 0620 	rsb	r6, r6, #32
 8005862:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005866:	f000 f9ab 	bl	8005bc0 <__hi0bits>
 800586a:	42b0      	cmp	r0, r6
 800586c:	dbe7      	blt.n	800583e <__gethex+0x410>
 800586e:	e7f0      	b.n	8005852 <__gethex+0x424>

08005870 <L_shift>:
 8005870:	f1c2 0208 	rsb	r2, r2, #8
 8005874:	0092      	lsls	r2, r2, #2
 8005876:	b570      	push	{r4, r5, r6, lr}
 8005878:	f1c2 0620 	rsb	r6, r2, #32
 800587c:	6843      	ldr	r3, [r0, #4]
 800587e:	6804      	ldr	r4, [r0, #0]
 8005880:	fa03 f506 	lsl.w	r5, r3, r6
 8005884:	432c      	orrs	r4, r5
 8005886:	40d3      	lsrs	r3, r2
 8005888:	6004      	str	r4, [r0, #0]
 800588a:	f840 3f04 	str.w	r3, [r0, #4]!
 800588e:	4288      	cmp	r0, r1
 8005890:	d3f4      	bcc.n	800587c <L_shift+0xc>
 8005892:	bd70      	pop	{r4, r5, r6, pc}

08005894 <__match>:
 8005894:	b530      	push	{r4, r5, lr}
 8005896:	6803      	ldr	r3, [r0, #0]
 8005898:	3301      	adds	r3, #1
 800589a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800589e:	b914      	cbnz	r4, 80058a6 <__match+0x12>
 80058a0:	6003      	str	r3, [r0, #0]
 80058a2:	2001      	movs	r0, #1
 80058a4:	bd30      	pop	{r4, r5, pc}
 80058a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80058ae:	2d19      	cmp	r5, #25
 80058b0:	bf98      	it	ls
 80058b2:	3220      	addls	r2, #32
 80058b4:	42a2      	cmp	r2, r4
 80058b6:	d0f0      	beq.n	800589a <__match+0x6>
 80058b8:	2000      	movs	r0, #0
 80058ba:	e7f3      	b.n	80058a4 <__match+0x10>

080058bc <__hexnan>:
 80058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	680b      	ldr	r3, [r1, #0]
 80058c2:	6801      	ldr	r1, [r0, #0]
 80058c4:	115f      	asrs	r7, r3, #5
 80058c6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80058ca:	f013 031f 	ands.w	r3, r3, #31
 80058ce:	b087      	sub	sp, #28
 80058d0:	bf18      	it	ne
 80058d2:	3704      	addne	r7, #4
 80058d4:	2500      	movs	r5, #0
 80058d6:	1f3e      	subs	r6, r7, #4
 80058d8:	4682      	mov	sl, r0
 80058da:	4690      	mov	r8, r2
 80058dc:	9301      	str	r3, [sp, #4]
 80058de:	f847 5c04 	str.w	r5, [r7, #-4]
 80058e2:	46b1      	mov	r9, r6
 80058e4:	4634      	mov	r4, r6
 80058e6:	9502      	str	r5, [sp, #8]
 80058e8:	46ab      	mov	fp, r5
 80058ea:	784a      	ldrb	r2, [r1, #1]
 80058ec:	1c4b      	adds	r3, r1, #1
 80058ee:	9303      	str	r3, [sp, #12]
 80058f0:	b342      	cbz	r2, 8005944 <__hexnan+0x88>
 80058f2:	4610      	mov	r0, r2
 80058f4:	9105      	str	r1, [sp, #20]
 80058f6:	9204      	str	r2, [sp, #16]
 80058f8:	f7ff fd84 	bl	8005404 <__hexdig_fun>
 80058fc:	2800      	cmp	r0, #0
 80058fe:	d143      	bne.n	8005988 <__hexnan+0xcc>
 8005900:	9a04      	ldr	r2, [sp, #16]
 8005902:	9905      	ldr	r1, [sp, #20]
 8005904:	2a20      	cmp	r2, #32
 8005906:	d818      	bhi.n	800593a <__hexnan+0x7e>
 8005908:	9b02      	ldr	r3, [sp, #8]
 800590a:	459b      	cmp	fp, r3
 800590c:	dd13      	ble.n	8005936 <__hexnan+0x7a>
 800590e:	454c      	cmp	r4, r9
 8005910:	d206      	bcs.n	8005920 <__hexnan+0x64>
 8005912:	2d07      	cmp	r5, #7
 8005914:	dc04      	bgt.n	8005920 <__hexnan+0x64>
 8005916:	462a      	mov	r2, r5
 8005918:	4649      	mov	r1, r9
 800591a:	4620      	mov	r0, r4
 800591c:	f7ff ffa8 	bl	8005870 <L_shift>
 8005920:	4544      	cmp	r4, r8
 8005922:	d944      	bls.n	80059ae <__hexnan+0xf2>
 8005924:	2300      	movs	r3, #0
 8005926:	f1a4 0904 	sub.w	r9, r4, #4
 800592a:	f844 3c04 	str.w	r3, [r4, #-4]
 800592e:	f8cd b008 	str.w	fp, [sp, #8]
 8005932:	464c      	mov	r4, r9
 8005934:	461d      	mov	r5, r3
 8005936:	9903      	ldr	r1, [sp, #12]
 8005938:	e7d7      	b.n	80058ea <__hexnan+0x2e>
 800593a:	2a29      	cmp	r2, #41	; 0x29
 800593c:	d14a      	bne.n	80059d4 <__hexnan+0x118>
 800593e:	3102      	adds	r1, #2
 8005940:	f8ca 1000 	str.w	r1, [sl]
 8005944:	f1bb 0f00 	cmp.w	fp, #0
 8005948:	d044      	beq.n	80059d4 <__hexnan+0x118>
 800594a:	454c      	cmp	r4, r9
 800594c:	d206      	bcs.n	800595c <__hexnan+0xa0>
 800594e:	2d07      	cmp	r5, #7
 8005950:	dc04      	bgt.n	800595c <__hexnan+0xa0>
 8005952:	462a      	mov	r2, r5
 8005954:	4649      	mov	r1, r9
 8005956:	4620      	mov	r0, r4
 8005958:	f7ff ff8a 	bl	8005870 <L_shift>
 800595c:	4544      	cmp	r4, r8
 800595e:	d928      	bls.n	80059b2 <__hexnan+0xf6>
 8005960:	4643      	mov	r3, r8
 8005962:	f854 2b04 	ldr.w	r2, [r4], #4
 8005966:	f843 2b04 	str.w	r2, [r3], #4
 800596a:	42a6      	cmp	r6, r4
 800596c:	d2f9      	bcs.n	8005962 <__hexnan+0xa6>
 800596e:	2200      	movs	r2, #0
 8005970:	f843 2b04 	str.w	r2, [r3], #4
 8005974:	429e      	cmp	r6, r3
 8005976:	d2fb      	bcs.n	8005970 <__hexnan+0xb4>
 8005978:	6833      	ldr	r3, [r6, #0]
 800597a:	b91b      	cbnz	r3, 8005984 <__hexnan+0xc8>
 800597c:	4546      	cmp	r6, r8
 800597e:	d127      	bne.n	80059d0 <__hexnan+0x114>
 8005980:	2301      	movs	r3, #1
 8005982:	6033      	str	r3, [r6, #0]
 8005984:	2005      	movs	r0, #5
 8005986:	e026      	b.n	80059d6 <__hexnan+0x11a>
 8005988:	3501      	adds	r5, #1
 800598a:	2d08      	cmp	r5, #8
 800598c:	f10b 0b01 	add.w	fp, fp, #1
 8005990:	dd06      	ble.n	80059a0 <__hexnan+0xe4>
 8005992:	4544      	cmp	r4, r8
 8005994:	d9cf      	bls.n	8005936 <__hexnan+0x7a>
 8005996:	2300      	movs	r3, #0
 8005998:	f844 3c04 	str.w	r3, [r4, #-4]
 800599c:	2501      	movs	r5, #1
 800599e:	3c04      	subs	r4, #4
 80059a0:	6822      	ldr	r2, [r4, #0]
 80059a2:	f000 000f 	and.w	r0, r0, #15
 80059a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80059aa:	6020      	str	r0, [r4, #0]
 80059ac:	e7c3      	b.n	8005936 <__hexnan+0x7a>
 80059ae:	2508      	movs	r5, #8
 80059b0:	e7c1      	b.n	8005936 <__hexnan+0x7a>
 80059b2:	9b01      	ldr	r3, [sp, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0df      	beq.n	8005978 <__hexnan+0xbc>
 80059b8:	f04f 32ff 	mov.w	r2, #4294967295
 80059bc:	f1c3 0320 	rsb	r3, r3, #32
 80059c0:	fa22 f303 	lsr.w	r3, r2, r3
 80059c4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 80059c8:	401a      	ands	r2, r3
 80059ca:	f847 2c04 	str.w	r2, [r7, #-4]
 80059ce:	e7d3      	b.n	8005978 <__hexnan+0xbc>
 80059d0:	3e04      	subs	r6, #4
 80059d2:	e7d1      	b.n	8005978 <__hexnan+0xbc>
 80059d4:	2004      	movs	r0, #4
 80059d6:	b007      	add	sp, #28
 80059d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080059dc <__locale_ctype_ptr_l>:
 80059dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80059e0:	4770      	bx	lr

080059e2 <__localeconv_l>:
 80059e2:	30f0      	adds	r0, #240	; 0xf0
 80059e4:	4770      	bx	lr
	...

080059e8 <_localeconv_r>:
 80059e8:	4b04      	ldr	r3, [pc, #16]	; (80059fc <_localeconv_r+0x14>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	6a18      	ldr	r0, [r3, #32]
 80059ee:	4b04      	ldr	r3, [pc, #16]	; (8005a00 <_localeconv_r+0x18>)
 80059f0:	2800      	cmp	r0, #0
 80059f2:	bf08      	it	eq
 80059f4:	4618      	moveq	r0, r3
 80059f6:	30f0      	adds	r0, #240	; 0xf0
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	2000000c 	.word	0x2000000c
 8005a00:	20000070 	.word	0x20000070

08005a04 <malloc>:
 8005a04:	4b02      	ldr	r3, [pc, #8]	; (8005a10 <malloc+0xc>)
 8005a06:	4601      	mov	r1, r0
 8005a08:	6818      	ldr	r0, [r3, #0]
 8005a0a:	f000 bc71 	b.w	80062f0 <_malloc_r>
 8005a0e:	bf00      	nop
 8005a10:	2000000c 	.word	0x2000000c

08005a14 <__ascii_mbtowc>:
 8005a14:	b082      	sub	sp, #8
 8005a16:	b901      	cbnz	r1, 8005a1a <__ascii_mbtowc+0x6>
 8005a18:	a901      	add	r1, sp, #4
 8005a1a:	b142      	cbz	r2, 8005a2e <__ascii_mbtowc+0x1a>
 8005a1c:	b14b      	cbz	r3, 8005a32 <__ascii_mbtowc+0x1e>
 8005a1e:	7813      	ldrb	r3, [r2, #0]
 8005a20:	600b      	str	r3, [r1, #0]
 8005a22:	7812      	ldrb	r2, [r2, #0]
 8005a24:	1c10      	adds	r0, r2, #0
 8005a26:	bf18      	it	ne
 8005a28:	2001      	movne	r0, #1
 8005a2a:	b002      	add	sp, #8
 8005a2c:	4770      	bx	lr
 8005a2e:	4610      	mov	r0, r2
 8005a30:	e7fb      	b.n	8005a2a <__ascii_mbtowc+0x16>
 8005a32:	f06f 0001 	mvn.w	r0, #1
 8005a36:	e7f8      	b.n	8005a2a <__ascii_mbtowc+0x16>

08005a38 <_Balloc>:
 8005a38:	b570      	push	{r4, r5, r6, lr}
 8005a3a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a3c:	4604      	mov	r4, r0
 8005a3e:	460e      	mov	r6, r1
 8005a40:	b93d      	cbnz	r5, 8005a52 <_Balloc+0x1a>
 8005a42:	2010      	movs	r0, #16
 8005a44:	f7ff ffde 	bl	8005a04 <malloc>
 8005a48:	6260      	str	r0, [r4, #36]	; 0x24
 8005a4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a4e:	6005      	str	r5, [r0, #0]
 8005a50:	60c5      	str	r5, [r0, #12]
 8005a52:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005a54:	68eb      	ldr	r3, [r5, #12]
 8005a56:	b183      	cbz	r3, 8005a7a <_Balloc+0x42>
 8005a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005a60:	b9b8      	cbnz	r0, 8005a92 <_Balloc+0x5a>
 8005a62:	2101      	movs	r1, #1
 8005a64:	fa01 f506 	lsl.w	r5, r1, r6
 8005a68:	1d6a      	adds	r2, r5, #5
 8005a6a:	0092      	lsls	r2, r2, #2
 8005a6c:	4620      	mov	r0, r4
 8005a6e:	f000 fbe2 	bl	8006236 <_calloc_r>
 8005a72:	b160      	cbz	r0, 8005a8e <_Balloc+0x56>
 8005a74:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8005a78:	e00e      	b.n	8005a98 <_Balloc+0x60>
 8005a7a:	2221      	movs	r2, #33	; 0x21
 8005a7c:	2104      	movs	r1, #4
 8005a7e:	4620      	mov	r0, r4
 8005a80:	f000 fbd9 	bl	8006236 <_calloc_r>
 8005a84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a86:	60e8      	str	r0, [r5, #12]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e4      	bne.n	8005a58 <_Balloc+0x20>
 8005a8e:	2000      	movs	r0, #0
 8005a90:	bd70      	pop	{r4, r5, r6, pc}
 8005a92:	6802      	ldr	r2, [r0, #0]
 8005a94:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005a98:	2300      	movs	r3, #0
 8005a9a:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a9e:	e7f7      	b.n	8005a90 <_Balloc+0x58>

08005aa0 <_Bfree>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005aa4:	4606      	mov	r6, r0
 8005aa6:	460d      	mov	r5, r1
 8005aa8:	b93c      	cbnz	r4, 8005aba <_Bfree+0x1a>
 8005aaa:	2010      	movs	r0, #16
 8005aac:	f7ff ffaa 	bl	8005a04 <malloc>
 8005ab0:	6270      	str	r0, [r6, #36]	; 0x24
 8005ab2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ab6:	6004      	str	r4, [r0, #0]
 8005ab8:	60c4      	str	r4, [r0, #12]
 8005aba:	b13d      	cbz	r5, 8005acc <_Bfree+0x2c>
 8005abc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005abe:	686a      	ldr	r2, [r5, #4]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ac6:	6029      	str	r1, [r5, #0]
 8005ac8:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005acc:	bd70      	pop	{r4, r5, r6, pc}

08005ace <__multadd>:
 8005ace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad2:	690d      	ldr	r5, [r1, #16]
 8005ad4:	461f      	mov	r7, r3
 8005ad6:	4606      	mov	r6, r0
 8005ad8:	460c      	mov	r4, r1
 8005ada:	f101 0c14 	add.w	ip, r1, #20
 8005ade:	2300      	movs	r3, #0
 8005ae0:	f8dc 0000 	ldr.w	r0, [ip]
 8005ae4:	b281      	uxth	r1, r0
 8005ae6:	fb02 7101 	mla	r1, r2, r1, r7
 8005aea:	0c0f      	lsrs	r7, r1, #16
 8005aec:	0c00      	lsrs	r0, r0, #16
 8005aee:	fb02 7000 	mla	r0, r2, r0, r7
 8005af2:	b289      	uxth	r1, r1
 8005af4:	3301      	adds	r3, #1
 8005af6:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005afa:	429d      	cmp	r5, r3
 8005afc:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005b00:	f84c 1b04 	str.w	r1, [ip], #4
 8005b04:	dcec      	bgt.n	8005ae0 <__multadd+0x12>
 8005b06:	b1d7      	cbz	r7, 8005b3e <__multadd+0x70>
 8005b08:	68a3      	ldr	r3, [r4, #8]
 8005b0a:	42ab      	cmp	r3, r5
 8005b0c:	dc12      	bgt.n	8005b34 <__multadd+0x66>
 8005b0e:	6861      	ldr	r1, [r4, #4]
 8005b10:	4630      	mov	r0, r6
 8005b12:	3101      	adds	r1, #1
 8005b14:	f7ff ff90 	bl	8005a38 <_Balloc>
 8005b18:	6922      	ldr	r2, [r4, #16]
 8005b1a:	3202      	adds	r2, #2
 8005b1c:	f104 010c 	add.w	r1, r4, #12
 8005b20:	4680      	mov	r8, r0
 8005b22:	0092      	lsls	r2, r2, #2
 8005b24:	300c      	adds	r0, #12
 8005b26:	f7fd f8c5 	bl	8002cb4 <memcpy>
 8005b2a:	4621      	mov	r1, r4
 8005b2c:	4630      	mov	r0, r6
 8005b2e:	f7ff ffb7 	bl	8005aa0 <_Bfree>
 8005b32:	4644      	mov	r4, r8
 8005b34:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005b38:	3501      	adds	r5, #1
 8005b3a:	615f      	str	r7, [r3, #20]
 8005b3c:	6125      	str	r5, [r4, #16]
 8005b3e:	4620      	mov	r0, r4
 8005b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b44 <__s2b>:
 8005b44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b48:	460c      	mov	r4, r1
 8005b4a:	4615      	mov	r5, r2
 8005b4c:	461f      	mov	r7, r3
 8005b4e:	2209      	movs	r2, #9
 8005b50:	3308      	adds	r3, #8
 8005b52:	4606      	mov	r6, r0
 8005b54:	fb93 f3f2 	sdiv	r3, r3, r2
 8005b58:	2100      	movs	r1, #0
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	db20      	blt.n	8005ba2 <__s2b+0x5e>
 8005b60:	4630      	mov	r0, r6
 8005b62:	f7ff ff69 	bl	8005a38 <_Balloc>
 8005b66:	9b08      	ldr	r3, [sp, #32]
 8005b68:	6143      	str	r3, [r0, #20]
 8005b6a:	2d09      	cmp	r5, #9
 8005b6c:	f04f 0301 	mov.w	r3, #1
 8005b70:	6103      	str	r3, [r0, #16]
 8005b72:	dd19      	ble.n	8005ba8 <__s2b+0x64>
 8005b74:	f104 0809 	add.w	r8, r4, #9
 8005b78:	46c1      	mov	r9, r8
 8005b7a:	442c      	add	r4, r5
 8005b7c:	f819 3b01 	ldrb.w	r3, [r9], #1
 8005b80:	4601      	mov	r1, r0
 8005b82:	3b30      	subs	r3, #48	; 0x30
 8005b84:	220a      	movs	r2, #10
 8005b86:	4630      	mov	r0, r6
 8005b88:	f7ff ffa1 	bl	8005ace <__multadd>
 8005b8c:	45a1      	cmp	r9, r4
 8005b8e:	d1f5      	bne.n	8005b7c <__s2b+0x38>
 8005b90:	eb08 0405 	add.w	r4, r8, r5
 8005b94:	3c08      	subs	r4, #8
 8005b96:	1b2d      	subs	r5, r5, r4
 8005b98:	1963      	adds	r3, r4, r5
 8005b9a:	42bb      	cmp	r3, r7
 8005b9c:	db07      	blt.n	8005bae <__s2b+0x6a>
 8005b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ba2:	0052      	lsls	r2, r2, #1
 8005ba4:	3101      	adds	r1, #1
 8005ba6:	e7d9      	b.n	8005b5c <__s2b+0x18>
 8005ba8:	340a      	adds	r4, #10
 8005baa:	2509      	movs	r5, #9
 8005bac:	e7f3      	b.n	8005b96 <__s2b+0x52>
 8005bae:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005bb2:	4601      	mov	r1, r0
 8005bb4:	3b30      	subs	r3, #48	; 0x30
 8005bb6:	220a      	movs	r2, #10
 8005bb8:	4630      	mov	r0, r6
 8005bba:	f7ff ff88 	bl	8005ace <__multadd>
 8005bbe:	e7eb      	b.n	8005b98 <__s2b+0x54>

08005bc0 <__hi0bits>:
 8005bc0:	0c02      	lsrs	r2, r0, #16
 8005bc2:	0412      	lsls	r2, r2, #16
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	b9b2      	cbnz	r2, 8005bf6 <__hi0bits+0x36>
 8005bc8:	0403      	lsls	r3, r0, #16
 8005bca:	2010      	movs	r0, #16
 8005bcc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005bd0:	bf04      	itt	eq
 8005bd2:	021b      	lsleq	r3, r3, #8
 8005bd4:	3008      	addeq	r0, #8
 8005bd6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005bda:	bf04      	itt	eq
 8005bdc:	011b      	lsleq	r3, r3, #4
 8005bde:	3004      	addeq	r0, #4
 8005be0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005be4:	bf04      	itt	eq
 8005be6:	009b      	lsleq	r3, r3, #2
 8005be8:	3002      	addeq	r0, #2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	db06      	blt.n	8005bfc <__hi0bits+0x3c>
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	d503      	bpl.n	8005bfa <__hi0bits+0x3a>
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	4770      	bx	lr
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	e7e8      	b.n	8005bcc <__hi0bits+0xc>
 8005bfa:	2020      	movs	r0, #32
 8005bfc:	4770      	bx	lr

08005bfe <__lo0bits>:
 8005bfe:	6803      	ldr	r3, [r0, #0]
 8005c00:	f013 0207 	ands.w	r2, r3, #7
 8005c04:	4601      	mov	r1, r0
 8005c06:	d00b      	beq.n	8005c20 <__lo0bits+0x22>
 8005c08:	07da      	lsls	r2, r3, #31
 8005c0a:	d423      	bmi.n	8005c54 <__lo0bits+0x56>
 8005c0c:	0798      	lsls	r0, r3, #30
 8005c0e:	bf49      	itett	mi
 8005c10:	085b      	lsrmi	r3, r3, #1
 8005c12:	089b      	lsrpl	r3, r3, #2
 8005c14:	2001      	movmi	r0, #1
 8005c16:	600b      	strmi	r3, [r1, #0]
 8005c18:	bf5c      	itt	pl
 8005c1a:	600b      	strpl	r3, [r1, #0]
 8005c1c:	2002      	movpl	r0, #2
 8005c1e:	4770      	bx	lr
 8005c20:	b298      	uxth	r0, r3
 8005c22:	b9a8      	cbnz	r0, 8005c50 <__lo0bits+0x52>
 8005c24:	0c1b      	lsrs	r3, r3, #16
 8005c26:	2010      	movs	r0, #16
 8005c28:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005c2c:	bf04      	itt	eq
 8005c2e:	0a1b      	lsreq	r3, r3, #8
 8005c30:	3008      	addeq	r0, #8
 8005c32:	071a      	lsls	r2, r3, #28
 8005c34:	bf04      	itt	eq
 8005c36:	091b      	lsreq	r3, r3, #4
 8005c38:	3004      	addeq	r0, #4
 8005c3a:	079a      	lsls	r2, r3, #30
 8005c3c:	bf04      	itt	eq
 8005c3e:	089b      	lsreq	r3, r3, #2
 8005c40:	3002      	addeq	r0, #2
 8005c42:	07da      	lsls	r2, r3, #31
 8005c44:	d402      	bmi.n	8005c4c <__lo0bits+0x4e>
 8005c46:	085b      	lsrs	r3, r3, #1
 8005c48:	d006      	beq.n	8005c58 <__lo0bits+0x5a>
 8005c4a:	3001      	adds	r0, #1
 8005c4c:	600b      	str	r3, [r1, #0]
 8005c4e:	4770      	bx	lr
 8005c50:	4610      	mov	r0, r2
 8005c52:	e7e9      	b.n	8005c28 <__lo0bits+0x2a>
 8005c54:	2000      	movs	r0, #0
 8005c56:	4770      	bx	lr
 8005c58:	2020      	movs	r0, #32
 8005c5a:	4770      	bx	lr

08005c5c <__i2b>:
 8005c5c:	b510      	push	{r4, lr}
 8005c5e:	460c      	mov	r4, r1
 8005c60:	2101      	movs	r1, #1
 8005c62:	f7ff fee9 	bl	8005a38 <_Balloc>
 8005c66:	2201      	movs	r2, #1
 8005c68:	6144      	str	r4, [r0, #20]
 8005c6a:	6102      	str	r2, [r0, #16]
 8005c6c:	bd10      	pop	{r4, pc}

08005c6e <__multiply>:
 8005c6e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c72:	4614      	mov	r4, r2
 8005c74:	690a      	ldr	r2, [r1, #16]
 8005c76:	6923      	ldr	r3, [r4, #16]
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	bfb8      	it	lt
 8005c7c:	460b      	movlt	r3, r1
 8005c7e:	4688      	mov	r8, r1
 8005c80:	bfbc      	itt	lt
 8005c82:	46a0      	movlt	r8, r4
 8005c84:	461c      	movlt	r4, r3
 8005c86:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005c8a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005c8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005c92:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005c96:	eb07 0609 	add.w	r6, r7, r9
 8005c9a:	42b3      	cmp	r3, r6
 8005c9c:	bfb8      	it	lt
 8005c9e:	3101      	addlt	r1, #1
 8005ca0:	f7ff feca 	bl	8005a38 <_Balloc>
 8005ca4:	f100 0514 	add.w	r5, r0, #20
 8005ca8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8005cac:	462b      	mov	r3, r5
 8005cae:	2200      	movs	r2, #0
 8005cb0:	4573      	cmp	r3, lr
 8005cb2:	d316      	bcc.n	8005ce2 <__multiply+0x74>
 8005cb4:	f104 0214 	add.w	r2, r4, #20
 8005cb8:	f108 0114 	add.w	r1, r8, #20
 8005cbc:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8005cc0:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005cc4:	9300      	str	r3, [sp, #0]
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	9201      	str	r2, [sp, #4]
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d80c      	bhi.n	8005ce8 <__multiply+0x7a>
 8005cce:	2e00      	cmp	r6, #0
 8005cd0:	dd03      	ble.n	8005cda <__multiply+0x6c>
 8005cd2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d05d      	beq.n	8005d96 <__multiply+0x128>
 8005cda:	6106      	str	r6, [r0, #16]
 8005cdc:	b003      	add	sp, #12
 8005cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ce2:	f843 2b04 	str.w	r2, [r3], #4
 8005ce6:	e7e3      	b.n	8005cb0 <__multiply+0x42>
 8005ce8:	f8b2 b000 	ldrh.w	fp, [r2]
 8005cec:	f1bb 0f00 	cmp.w	fp, #0
 8005cf0:	d023      	beq.n	8005d3a <__multiply+0xcc>
 8005cf2:	4689      	mov	r9, r1
 8005cf4:	46ac      	mov	ip, r5
 8005cf6:	f04f 0800 	mov.w	r8, #0
 8005cfa:	f859 4b04 	ldr.w	r4, [r9], #4
 8005cfe:	f8dc a000 	ldr.w	sl, [ip]
 8005d02:	b2a3      	uxth	r3, r4
 8005d04:	fa1f fa8a 	uxth.w	sl, sl
 8005d08:	fb0b a303 	mla	r3, fp, r3, sl
 8005d0c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005d10:	f8dc 4000 	ldr.w	r4, [ip]
 8005d14:	4443      	add	r3, r8
 8005d16:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d1a:	fb0b 840a 	mla	r4, fp, sl, r8
 8005d1e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005d22:	46e2      	mov	sl, ip
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d2a:	454f      	cmp	r7, r9
 8005d2c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005d30:	f84a 3b04 	str.w	r3, [sl], #4
 8005d34:	d82b      	bhi.n	8005d8e <__multiply+0x120>
 8005d36:	f8cc 8004 	str.w	r8, [ip, #4]
 8005d3a:	9b01      	ldr	r3, [sp, #4]
 8005d3c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005d40:	3204      	adds	r2, #4
 8005d42:	f1ba 0f00 	cmp.w	sl, #0
 8005d46:	d020      	beq.n	8005d8a <__multiply+0x11c>
 8005d48:	682b      	ldr	r3, [r5, #0]
 8005d4a:	4689      	mov	r9, r1
 8005d4c:	46a8      	mov	r8, r5
 8005d4e:	f04f 0b00 	mov.w	fp, #0
 8005d52:	f8b9 c000 	ldrh.w	ip, [r9]
 8005d56:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005d5a:	fb0a 440c 	mla	r4, sl, ip, r4
 8005d5e:	445c      	add	r4, fp
 8005d60:	46c4      	mov	ip, r8
 8005d62:	b29b      	uxth	r3, r3
 8005d64:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005d68:	f84c 3b04 	str.w	r3, [ip], #4
 8005d6c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005d70:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8005d74:	0c1b      	lsrs	r3, r3, #16
 8005d76:	fb0a b303 	mla	r3, sl, r3, fp
 8005d7a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005d7e:	454f      	cmp	r7, r9
 8005d80:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8005d84:	d805      	bhi.n	8005d92 <__multiply+0x124>
 8005d86:	f8c8 3004 	str.w	r3, [r8, #4]
 8005d8a:	3504      	adds	r5, #4
 8005d8c:	e79b      	b.n	8005cc6 <__multiply+0x58>
 8005d8e:	46d4      	mov	ip, sl
 8005d90:	e7b3      	b.n	8005cfa <__multiply+0x8c>
 8005d92:	46e0      	mov	r8, ip
 8005d94:	e7dd      	b.n	8005d52 <__multiply+0xe4>
 8005d96:	3e01      	subs	r6, #1
 8005d98:	e799      	b.n	8005cce <__multiply+0x60>
	...

08005d9c <__pow5mult>:
 8005d9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005da0:	4615      	mov	r5, r2
 8005da2:	f012 0203 	ands.w	r2, r2, #3
 8005da6:	4606      	mov	r6, r0
 8005da8:	460f      	mov	r7, r1
 8005daa:	d007      	beq.n	8005dbc <__pow5mult+0x20>
 8005dac:	3a01      	subs	r2, #1
 8005dae:	4c21      	ldr	r4, [pc, #132]	; (8005e34 <__pow5mult+0x98>)
 8005db0:	2300      	movs	r3, #0
 8005db2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005db6:	f7ff fe8a 	bl	8005ace <__multadd>
 8005dba:	4607      	mov	r7, r0
 8005dbc:	10ad      	asrs	r5, r5, #2
 8005dbe:	d035      	beq.n	8005e2c <__pow5mult+0x90>
 8005dc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005dc2:	b93c      	cbnz	r4, 8005dd4 <__pow5mult+0x38>
 8005dc4:	2010      	movs	r0, #16
 8005dc6:	f7ff fe1d 	bl	8005a04 <malloc>
 8005dca:	6270      	str	r0, [r6, #36]	; 0x24
 8005dcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005dd0:	6004      	str	r4, [r0, #0]
 8005dd2:	60c4      	str	r4, [r0, #12]
 8005dd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005dd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005ddc:	b94c      	cbnz	r4, 8005df2 <__pow5mult+0x56>
 8005dde:	f240 2171 	movw	r1, #625	; 0x271
 8005de2:	4630      	mov	r0, r6
 8005de4:	f7ff ff3a 	bl	8005c5c <__i2b>
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8c8 0008 	str.w	r0, [r8, #8]
 8005dee:	4604      	mov	r4, r0
 8005df0:	6003      	str	r3, [r0, #0]
 8005df2:	f04f 0800 	mov.w	r8, #0
 8005df6:	07eb      	lsls	r3, r5, #31
 8005df8:	d50a      	bpl.n	8005e10 <__pow5mult+0x74>
 8005dfa:	4639      	mov	r1, r7
 8005dfc:	4622      	mov	r2, r4
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f7ff ff35 	bl	8005c6e <__multiply>
 8005e04:	4639      	mov	r1, r7
 8005e06:	4681      	mov	r9, r0
 8005e08:	4630      	mov	r0, r6
 8005e0a:	f7ff fe49 	bl	8005aa0 <_Bfree>
 8005e0e:	464f      	mov	r7, r9
 8005e10:	106d      	asrs	r5, r5, #1
 8005e12:	d00b      	beq.n	8005e2c <__pow5mult+0x90>
 8005e14:	6820      	ldr	r0, [r4, #0]
 8005e16:	b938      	cbnz	r0, 8005e28 <__pow5mult+0x8c>
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	f7ff ff26 	bl	8005c6e <__multiply>
 8005e22:	6020      	str	r0, [r4, #0]
 8005e24:	f8c0 8000 	str.w	r8, [r0]
 8005e28:	4604      	mov	r4, r0
 8005e2a:	e7e4      	b.n	8005df6 <__pow5mult+0x5a>
 8005e2c:	4638      	mov	r0, r7
 8005e2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e32:	bf00      	nop
 8005e34:	08007428 	.word	0x08007428

08005e38 <__lshift>:
 8005e38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	460c      	mov	r4, r1
 8005e3e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005e42:	6923      	ldr	r3, [r4, #16]
 8005e44:	6849      	ldr	r1, [r1, #4]
 8005e46:	eb0a 0903 	add.w	r9, sl, r3
 8005e4a:	68a3      	ldr	r3, [r4, #8]
 8005e4c:	4607      	mov	r7, r0
 8005e4e:	4616      	mov	r6, r2
 8005e50:	f109 0501 	add.w	r5, r9, #1
 8005e54:	42ab      	cmp	r3, r5
 8005e56:	db32      	blt.n	8005ebe <__lshift+0x86>
 8005e58:	4638      	mov	r0, r7
 8005e5a:	f7ff fded 	bl	8005a38 <_Balloc>
 8005e5e:	2300      	movs	r3, #0
 8005e60:	4680      	mov	r8, r0
 8005e62:	f100 0114 	add.w	r1, r0, #20
 8005e66:	461a      	mov	r2, r3
 8005e68:	4553      	cmp	r3, sl
 8005e6a:	db2b      	blt.n	8005ec4 <__lshift+0x8c>
 8005e6c:	6920      	ldr	r0, [r4, #16]
 8005e6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e72:	f104 0314 	add.w	r3, r4, #20
 8005e76:	f016 021f 	ands.w	r2, r6, #31
 8005e7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e82:	d025      	beq.n	8005ed0 <__lshift+0x98>
 8005e84:	f1c2 0e20 	rsb	lr, r2, #32
 8005e88:	2000      	movs	r0, #0
 8005e8a:	681e      	ldr	r6, [r3, #0]
 8005e8c:	468a      	mov	sl, r1
 8005e8e:	4096      	lsls	r6, r2
 8005e90:	4330      	orrs	r0, r6
 8005e92:	f84a 0b04 	str.w	r0, [sl], #4
 8005e96:	f853 0b04 	ldr.w	r0, [r3], #4
 8005e9a:	459c      	cmp	ip, r3
 8005e9c:	fa20 f00e 	lsr.w	r0, r0, lr
 8005ea0:	d814      	bhi.n	8005ecc <__lshift+0x94>
 8005ea2:	6048      	str	r0, [r1, #4]
 8005ea4:	b108      	cbz	r0, 8005eaa <__lshift+0x72>
 8005ea6:	f109 0502 	add.w	r5, r9, #2
 8005eaa:	3d01      	subs	r5, #1
 8005eac:	4638      	mov	r0, r7
 8005eae:	f8c8 5010 	str.w	r5, [r8, #16]
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	f7ff fdf4 	bl	8005aa0 <_Bfree>
 8005eb8:	4640      	mov	r0, r8
 8005eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ebe:	3101      	adds	r1, #1
 8005ec0:	005b      	lsls	r3, r3, #1
 8005ec2:	e7c7      	b.n	8005e54 <__lshift+0x1c>
 8005ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005ec8:	3301      	adds	r3, #1
 8005eca:	e7cd      	b.n	8005e68 <__lshift+0x30>
 8005ecc:	4651      	mov	r1, sl
 8005ece:	e7dc      	b.n	8005e8a <__lshift+0x52>
 8005ed0:	3904      	subs	r1, #4
 8005ed2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ed6:	f841 2f04 	str.w	r2, [r1, #4]!
 8005eda:	459c      	cmp	ip, r3
 8005edc:	d8f9      	bhi.n	8005ed2 <__lshift+0x9a>
 8005ede:	e7e4      	b.n	8005eaa <__lshift+0x72>

08005ee0 <__mcmp>:
 8005ee0:	6903      	ldr	r3, [r0, #16]
 8005ee2:	690a      	ldr	r2, [r1, #16]
 8005ee4:	1a9b      	subs	r3, r3, r2
 8005ee6:	b530      	push	{r4, r5, lr}
 8005ee8:	d10c      	bne.n	8005f04 <__mcmp+0x24>
 8005eea:	0092      	lsls	r2, r2, #2
 8005eec:	3014      	adds	r0, #20
 8005eee:	3114      	adds	r1, #20
 8005ef0:	1884      	adds	r4, r0, r2
 8005ef2:	4411      	add	r1, r2
 8005ef4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005ef8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005efc:	4295      	cmp	r5, r2
 8005efe:	d003      	beq.n	8005f08 <__mcmp+0x28>
 8005f00:	d305      	bcc.n	8005f0e <__mcmp+0x2e>
 8005f02:	2301      	movs	r3, #1
 8005f04:	4618      	mov	r0, r3
 8005f06:	bd30      	pop	{r4, r5, pc}
 8005f08:	42a0      	cmp	r0, r4
 8005f0a:	d3f3      	bcc.n	8005ef4 <__mcmp+0x14>
 8005f0c:	e7fa      	b.n	8005f04 <__mcmp+0x24>
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	e7f7      	b.n	8005f04 <__mcmp+0x24>

08005f14 <__mdiff>:
 8005f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f18:	460d      	mov	r5, r1
 8005f1a:	4607      	mov	r7, r0
 8005f1c:	4611      	mov	r1, r2
 8005f1e:	4628      	mov	r0, r5
 8005f20:	4614      	mov	r4, r2
 8005f22:	f7ff ffdd 	bl	8005ee0 <__mcmp>
 8005f26:	1e06      	subs	r6, r0, #0
 8005f28:	d108      	bne.n	8005f3c <__mdiff+0x28>
 8005f2a:	4631      	mov	r1, r6
 8005f2c:	4638      	mov	r0, r7
 8005f2e:	f7ff fd83 	bl	8005a38 <_Balloc>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f3c:	bfa4      	itt	ge
 8005f3e:	4623      	movge	r3, r4
 8005f40:	462c      	movge	r4, r5
 8005f42:	4638      	mov	r0, r7
 8005f44:	6861      	ldr	r1, [r4, #4]
 8005f46:	bfa6      	itte	ge
 8005f48:	461d      	movge	r5, r3
 8005f4a:	2600      	movge	r6, #0
 8005f4c:	2601      	movlt	r6, #1
 8005f4e:	f7ff fd73 	bl	8005a38 <_Balloc>
 8005f52:	692b      	ldr	r3, [r5, #16]
 8005f54:	60c6      	str	r6, [r0, #12]
 8005f56:	6926      	ldr	r6, [r4, #16]
 8005f58:	f105 0914 	add.w	r9, r5, #20
 8005f5c:	f104 0214 	add.w	r2, r4, #20
 8005f60:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005f64:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8005f68:	f100 0514 	add.w	r5, r0, #20
 8005f6c:	f04f 0e00 	mov.w	lr, #0
 8005f70:	f852 ab04 	ldr.w	sl, [r2], #4
 8005f74:	f859 4b04 	ldr.w	r4, [r9], #4
 8005f78:	fa1e f18a 	uxtah	r1, lr, sl
 8005f7c:	b2a3      	uxth	r3, r4
 8005f7e:	1ac9      	subs	r1, r1, r3
 8005f80:	0c23      	lsrs	r3, r4, #16
 8005f82:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8005f86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f8a:	b289      	uxth	r1, r1
 8005f8c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005f90:	45c8      	cmp	r8, r9
 8005f92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f96:	4694      	mov	ip, r2
 8005f98:	f845 3b04 	str.w	r3, [r5], #4
 8005f9c:	d8e8      	bhi.n	8005f70 <__mdiff+0x5c>
 8005f9e:	45bc      	cmp	ip, r7
 8005fa0:	d304      	bcc.n	8005fac <__mdiff+0x98>
 8005fa2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8005fa6:	b183      	cbz	r3, 8005fca <__mdiff+0xb6>
 8005fa8:	6106      	str	r6, [r0, #16]
 8005faa:	e7c5      	b.n	8005f38 <__mdiff+0x24>
 8005fac:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005fb0:	fa1e f381 	uxtah	r3, lr, r1
 8005fb4:	141a      	asrs	r2, r3, #16
 8005fb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005fc0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005fc4:	f845 3b04 	str.w	r3, [r5], #4
 8005fc8:	e7e9      	b.n	8005f9e <__mdiff+0x8a>
 8005fca:	3e01      	subs	r6, #1
 8005fcc:	e7e9      	b.n	8005fa2 <__mdiff+0x8e>
	...

08005fd0 <__ulp>:
 8005fd0:	4b12      	ldr	r3, [pc, #72]	; (800601c <__ulp+0x4c>)
 8005fd2:	ee10 2a90 	vmov	r2, s1
 8005fd6:	401a      	ands	r2, r3
 8005fd8:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	dd04      	ble.n	8005fea <__ulp+0x1a>
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	4619      	mov	r1, r3
 8005fe4:	ec41 0b10 	vmov	d0, r0, r1
 8005fe8:	4770      	bx	lr
 8005fea:	425b      	negs	r3, r3
 8005fec:	151b      	asrs	r3, r3, #20
 8005fee:	2b13      	cmp	r3, #19
 8005ff0:	f04f 0000 	mov.w	r0, #0
 8005ff4:	f04f 0100 	mov.w	r1, #0
 8005ff8:	dc04      	bgt.n	8006004 <__ulp+0x34>
 8005ffa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005ffe:	fa42 f103 	asr.w	r1, r2, r3
 8006002:	e7ef      	b.n	8005fe4 <__ulp+0x14>
 8006004:	3b14      	subs	r3, #20
 8006006:	2b1e      	cmp	r3, #30
 8006008:	f04f 0201 	mov.w	r2, #1
 800600c:	bfda      	itte	le
 800600e:	f1c3 031f 	rsble	r3, r3, #31
 8006012:	fa02 f303 	lslle.w	r3, r2, r3
 8006016:	4613      	movgt	r3, r2
 8006018:	4618      	mov	r0, r3
 800601a:	e7e3      	b.n	8005fe4 <__ulp+0x14>
 800601c:	7ff00000 	.word	0x7ff00000

08006020 <__b2d>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	6905      	ldr	r5, [r0, #16]
 8006024:	f100 0714 	add.w	r7, r0, #20
 8006028:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800602c:	1f2e      	subs	r6, r5, #4
 800602e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8006032:	4620      	mov	r0, r4
 8006034:	f7ff fdc4 	bl	8005bc0 <__hi0bits>
 8006038:	f1c0 0320 	rsb	r3, r0, #32
 800603c:	280a      	cmp	r0, #10
 800603e:	600b      	str	r3, [r1, #0]
 8006040:	f8df c074 	ldr.w	ip, [pc, #116]	; 80060b8 <__b2d+0x98>
 8006044:	dc14      	bgt.n	8006070 <__b2d+0x50>
 8006046:	f1c0 0e0b 	rsb	lr, r0, #11
 800604a:	fa24 f10e 	lsr.w	r1, r4, lr
 800604e:	42b7      	cmp	r7, r6
 8006050:	ea41 030c 	orr.w	r3, r1, ip
 8006054:	bf34      	ite	cc
 8006056:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800605a:	2100      	movcs	r1, #0
 800605c:	3015      	adds	r0, #21
 800605e:	fa04 f000 	lsl.w	r0, r4, r0
 8006062:	fa21 f10e 	lsr.w	r1, r1, lr
 8006066:	ea40 0201 	orr.w	r2, r0, r1
 800606a:	ec43 2b10 	vmov	d0, r2, r3
 800606e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006070:	42b7      	cmp	r7, r6
 8006072:	bf3a      	itte	cc
 8006074:	f1a5 0608 	subcc.w	r6, r5, #8
 8006078:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800607c:	2100      	movcs	r1, #0
 800607e:	380b      	subs	r0, #11
 8006080:	d015      	beq.n	80060ae <__b2d+0x8e>
 8006082:	4084      	lsls	r4, r0
 8006084:	f1c0 0520 	rsb	r5, r0, #32
 8006088:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800608c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8006090:	42be      	cmp	r6, r7
 8006092:	fa21 fc05 	lsr.w	ip, r1, r5
 8006096:	ea44 030c 	orr.w	r3, r4, ip
 800609a:	bf8c      	ite	hi
 800609c:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80060a0:	2400      	movls	r4, #0
 80060a2:	fa01 f000 	lsl.w	r0, r1, r0
 80060a6:	40ec      	lsrs	r4, r5
 80060a8:	ea40 0204 	orr.w	r2, r0, r4
 80060ac:	e7dd      	b.n	800606a <__b2d+0x4a>
 80060ae:	ea44 030c 	orr.w	r3, r4, ip
 80060b2:	460a      	mov	r2, r1
 80060b4:	e7d9      	b.n	800606a <__b2d+0x4a>
 80060b6:	bf00      	nop
 80060b8:	3ff00000 	.word	0x3ff00000

080060bc <__d2b>:
 80060bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060c0:	460e      	mov	r6, r1
 80060c2:	2101      	movs	r1, #1
 80060c4:	ec59 8b10 	vmov	r8, r9, d0
 80060c8:	4615      	mov	r5, r2
 80060ca:	f7ff fcb5 	bl	8005a38 <_Balloc>
 80060ce:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80060d2:	4607      	mov	r7, r0
 80060d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80060d8:	bb34      	cbnz	r4, 8006128 <__d2b+0x6c>
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	f1b8 0300 	subs.w	r3, r8, #0
 80060e0:	d027      	beq.n	8006132 <__d2b+0x76>
 80060e2:	a802      	add	r0, sp, #8
 80060e4:	f840 3d08 	str.w	r3, [r0, #-8]!
 80060e8:	f7ff fd89 	bl	8005bfe <__lo0bits>
 80060ec:	9900      	ldr	r1, [sp, #0]
 80060ee:	b1f0      	cbz	r0, 800612e <__d2b+0x72>
 80060f0:	9a01      	ldr	r2, [sp, #4]
 80060f2:	f1c0 0320 	rsb	r3, r0, #32
 80060f6:	fa02 f303 	lsl.w	r3, r2, r3
 80060fa:	430b      	orrs	r3, r1
 80060fc:	40c2      	lsrs	r2, r0
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	9201      	str	r2, [sp, #4]
 8006102:	9b01      	ldr	r3, [sp, #4]
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	2b00      	cmp	r3, #0
 8006108:	bf14      	ite	ne
 800610a:	2102      	movne	r1, #2
 800610c:	2101      	moveq	r1, #1
 800610e:	6139      	str	r1, [r7, #16]
 8006110:	b1c4      	cbz	r4, 8006144 <__d2b+0x88>
 8006112:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006116:	4404      	add	r4, r0
 8006118:	6034      	str	r4, [r6, #0]
 800611a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800611e:	6028      	str	r0, [r5, #0]
 8006120:	4638      	mov	r0, r7
 8006122:	b003      	add	sp, #12
 8006124:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800612c:	e7d5      	b.n	80060da <__d2b+0x1e>
 800612e:	6179      	str	r1, [r7, #20]
 8006130:	e7e7      	b.n	8006102 <__d2b+0x46>
 8006132:	a801      	add	r0, sp, #4
 8006134:	f7ff fd63 	bl	8005bfe <__lo0bits>
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	617b      	str	r3, [r7, #20]
 800613c:	2101      	movs	r1, #1
 800613e:	6139      	str	r1, [r7, #16]
 8006140:	3020      	adds	r0, #32
 8006142:	e7e5      	b.n	8006110 <__d2b+0x54>
 8006144:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006148:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800614c:	6030      	str	r0, [r6, #0]
 800614e:	6918      	ldr	r0, [r3, #16]
 8006150:	f7ff fd36 	bl	8005bc0 <__hi0bits>
 8006154:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006158:	e7e1      	b.n	800611e <__d2b+0x62>

0800615a <__ratio>:
 800615a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800615e:	4688      	mov	r8, r1
 8006160:	4669      	mov	r1, sp
 8006162:	4681      	mov	r9, r0
 8006164:	f7ff ff5c 	bl	8006020 <__b2d>
 8006168:	a901      	add	r1, sp, #4
 800616a:	4640      	mov	r0, r8
 800616c:	ec57 6b10 	vmov	r6, r7, d0
 8006170:	f7ff ff56 	bl	8006020 <__b2d>
 8006174:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006178:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800617c:	eba3 0c02 	sub.w	ip, r3, r2
 8006180:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006184:	1a9b      	subs	r3, r3, r2
 8006186:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800618a:	ec5b ab10 	vmov	sl, fp, d0
 800618e:	2b00      	cmp	r3, #0
 8006190:	bfce      	itee	gt
 8006192:	463a      	movgt	r2, r7
 8006194:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006198:	465a      	movle	r2, fp
 800619a:	4659      	mov	r1, fp
 800619c:	463d      	mov	r5, r7
 800619e:	bfd4      	ite	le
 80061a0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80061a4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80061a8:	4630      	mov	r0, r6
 80061aa:	ee10 2a10 	vmov	r2, s0
 80061ae:	460b      	mov	r3, r1
 80061b0:	4629      	mov	r1, r5
 80061b2:	f7fa fb8b 	bl	80008cc <__aeabi_ddiv>
 80061b6:	ec41 0b10 	vmov	d0, r0, r1
 80061ba:	b003      	add	sp, #12
 80061bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080061c0 <__copybits>:
 80061c0:	3901      	subs	r1, #1
 80061c2:	b510      	push	{r4, lr}
 80061c4:	1149      	asrs	r1, r1, #5
 80061c6:	6914      	ldr	r4, [r2, #16]
 80061c8:	3101      	adds	r1, #1
 80061ca:	f102 0314 	add.w	r3, r2, #20
 80061ce:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80061d2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80061d6:	42a3      	cmp	r3, r4
 80061d8:	4602      	mov	r2, r0
 80061da:	d303      	bcc.n	80061e4 <__copybits+0x24>
 80061dc:	2300      	movs	r3, #0
 80061de:	428a      	cmp	r2, r1
 80061e0:	d305      	bcc.n	80061ee <__copybits+0x2e>
 80061e2:	bd10      	pop	{r4, pc}
 80061e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80061e8:	f840 2b04 	str.w	r2, [r0], #4
 80061ec:	e7f3      	b.n	80061d6 <__copybits+0x16>
 80061ee:	f842 3b04 	str.w	r3, [r2], #4
 80061f2:	e7f4      	b.n	80061de <__copybits+0x1e>

080061f4 <__any_on>:
 80061f4:	f100 0214 	add.w	r2, r0, #20
 80061f8:	6900      	ldr	r0, [r0, #16]
 80061fa:	114b      	asrs	r3, r1, #5
 80061fc:	4298      	cmp	r0, r3
 80061fe:	b510      	push	{r4, lr}
 8006200:	db11      	blt.n	8006226 <__any_on+0x32>
 8006202:	dd0a      	ble.n	800621a <__any_on+0x26>
 8006204:	f011 011f 	ands.w	r1, r1, #31
 8006208:	d007      	beq.n	800621a <__any_on+0x26>
 800620a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800620e:	fa24 f001 	lsr.w	r0, r4, r1
 8006212:	fa00 f101 	lsl.w	r1, r0, r1
 8006216:	428c      	cmp	r4, r1
 8006218:	d10b      	bne.n	8006232 <__any_on+0x3e>
 800621a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800621e:	4293      	cmp	r3, r2
 8006220:	d803      	bhi.n	800622a <__any_on+0x36>
 8006222:	2000      	movs	r0, #0
 8006224:	bd10      	pop	{r4, pc}
 8006226:	4603      	mov	r3, r0
 8006228:	e7f7      	b.n	800621a <__any_on+0x26>
 800622a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800622e:	2900      	cmp	r1, #0
 8006230:	d0f5      	beq.n	800621e <__any_on+0x2a>
 8006232:	2001      	movs	r0, #1
 8006234:	e7f6      	b.n	8006224 <__any_on+0x30>

08006236 <_calloc_r>:
 8006236:	b538      	push	{r3, r4, r5, lr}
 8006238:	fb02 f401 	mul.w	r4, r2, r1
 800623c:	4621      	mov	r1, r4
 800623e:	f000 f857 	bl	80062f0 <_malloc_r>
 8006242:	4605      	mov	r5, r0
 8006244:	b118      	cbz	r0, 800624e <_calloc_r+0x18>
 8006246:	4622      	mov	r2, r4
 8006248:	2100      	movs	r1, #0
 800624a:	f7fc fd3e 	bl	8002cca <memset>
 800624e:	4628      	mov	r0, r5
 8006250:	bd38      	pop	{r3, r4, r5, pc}
	...

08006254 <_free_r>:
 8006254:	b538      	push	{r3, r4, r5, lr}
 8006256:	4605      	mov	r5, r0
 8006258:	2900      	cmp	r1, #0
 800625a:	d045      	beq.n	80062e8 <_free_r+0x94>
 800625c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006260:	1f0c      	subs	r4, r1, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	bfb8      	it	lt
 8006266:	18e4      	addlt	r4, r4, r3
 8006268:	f000 fa36 	bl	80066d8 <__malloc_lock>
 800626c:	4a1f      	ldr	r2, [pc, #124]	; (80062ec <_free_r+0x98>)
 800626e:	6813      	ldr	r3, [r2, #0]
 8006270:	4610      	mov	r0, r2
 8006272:	b933      	cbnz	r3, 8006282 <_free_r+0x2e>
 8006274:	6063      	str	r3, [r4, #4]
 8006276:	6014      	str	r4, [r2, #0]
 8006278:	4628      	mov	r0, r5
 800627a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800627e:	f000 ba2c 	b.w	80066da <__malloc_unlock>
 8006282:	42a3      	cmp	r3, r4
 8006284:	d90c      	bls.n	80062a0 <_free_r+0x4c>
 8006286:	6821      	ldr	r1, [r4, #0]
 8006288:	1862      	adds	r2, r4, r1
 800628a:	4293      	cmp	r3, r2
 800628c:	bf04      	itt	eq
 800628e:	681a      	ldreq	r2, [r3, #0]
 8006290:	685b      	ldreq	r3, [r3, #4]
 8006292:	6063      	str	r3, [r4, #4]
 8006294:	bf04      	itt	eq
 8006296:	1852      	addeq	r2, r2, r1
 8006298:	6022      	streq	r2, [r4, #0]
 800629a:	6004      	str	r4, [r0, #0]
 800629c:	e7ec      	b.n	8006278 <_free_r+0x24>
 800629e:	4613      	mov	r3, r2
 80062a0:	685a      	ldr	r2, [r3, #4]
 80062a2:	b10a      	cbz	r2, 80062a8 <_free_r+0x54>
 80062a4:	42a2      	cmp	r2, r4
 80062a6:	d9fa      	bls.n	800629e <_free_r+0x4a>
 80062a8:	6819      	ldr	r1, [r3, #0]
 80062aa:	1858      	adds	r0, r3, r1
 80062ac:	42a0      	cmp	r0, r4
 80062ae:	d10b      	bne.n	80062c8 <_free_r+0x74>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	4401      	add	r1, r0
 80062b4:	1858      	adds	r0, r3, r1
 80062b6:	4282      	cmp	r2, r0
 80062b8:	6019      	str	r1, [r3, #0]
 80062ba:	d1dd      	bne.n	8006278 <_free_r+0x24>
 80062bc:	6810      	ldr	r0, [r2, #0]
 80062be:	6852      	ldr	r2, [r2, #4]
 80062c0:	605a      	str	r2, [r3, #4]
 80062c2:	4401      	add	r1, r0
 80062c4:	6019      	str	r1, [r3, #0]
 80062c6:	e7d7      	b.n	8006278 <_free_r+0x24>
 80062c8:	d902      	bls.n	80062d0 <_free_r+0x7c>
 80062ca:	230c      	movs	r3, #12
 80062cc:	602b      	str	r3, [r5, #0]
 80062ce:	e7d3      	b.n	8006278 <_free_r+0x24>
 80062d0:	6820      	ldr	r0, [r4, #0]
 80062d2:	1821      	adds	r1, r4, r0
 80062d4:	428a      	cmp	r2, r1
 80062d6:	bf04      	itt	eq
 80062d8:	6811      	ldreq	r1, [r2, #0]
 80062da:	6852      	ldreq	r2, [r2, #4]
 80062dc:	6062      	str	r2, [r4, #4]
 80062de:	bf04      	itt	eq
 80062e0:	1809      	addeq	r1, r1, r0
 80062e2:	6021      	streq	r1, [r4, #0]
 80062e4:	605c      	str	r4, [r3, #4]
 80062e6:	e7c7      	b.n	8006278 <_free_r+0x24>
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	20000200 	.word	0x20000200

080062f0 <_malloc_r>:
 80062f0:	b570      	push	{r4, r5, r6, lr}
 80062f2:	1ccd      	adds	r5, r1, #3
 80062f4:	f025 0503 	bic.w	r5, r5, #3
 80062f8:	3508      	adds	r5, #8
 80062fa:	2d0c      	cmp	r5, #12
 80062fc:	bf38      	it	cc
 80062fe:	250c      	movcc	r5, #12
 8006300:	2d00      	cmp	r5, #0
 8006302:	4606      	mov	r6, r0
 8006304:	db01      	blt.n	800630a <_malloc_r+0x1a>
 8006306:	42a9      	cmp	r1, r5
 8006308:	d903      	bls.n	8006312 <_malloc_r+0x22>
 800630a:	230c      	movs	r3, #12
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	2000      	movs	r0, #0
 8006310:	bd70      	pop	{r4, r5, r6, pc}
 8006312:	f000 f9e1 	bl	80066d8 <__malloc_lock>
 8006316:	4a21      	ldr	r2, [pc, #132]	; (800639c <_malloc_r+0xac>)
 8006318:	6814      	ldr	r4, [r2, #0]
 800631a:	4621      	mov	r1, r4
 800631c:	b991      	cbnz	r1, 8006344 <_malloc_r+0x54>
 800631e:	4c20      	ldr	r4, [pc, #128]	; (80063a0 <_malloc_r+0xb0>)
 8006320:	6823      	ldr	r3, [r4, #0]
 8006322:	b91b      	cbnz	r3, 800632c <_malloc_r+0x3c>
 8006324:	4630      	mov	r0, r6
 8006326:	f000 f98f 	bl	8006648 <_sbrk_r>
 800632a:	6020      	str	r0, [r4, #0]
 800632c:	4629      	mov	r1, r5
 800632e:	4630      	mov	r0, r6
 8006330:	f000 f98a 	bl	8006648 <_sbrk_r>
 8006334:	1c43      	adds	r3, r0, #1
 8006336:	d124      	bne.n	8006382 <_malloc_r+0x92>
 8006338:	230c      	movs	r3, #12
 800633a:	6033      	str	r3, [r6, #0]
 800633c:	4630      	mov	r0, r6
 800633e:	f000 f9cc 	bl	80066da <__malloc_unlock>
 8006342:	e7e4      	b.n	800630e <_malloc_r+0x1e>
 8006344:	680b      	ldr	r3, [r1, #0]
 8006346:	1b5b      	subs	r3, r3, r5
 8006348:	d418      	bmi.n	800637c <_malloc_r+0x8c>
 800634a:	2b0b      	cmp	r3, #11
 800634c:	d90f      	bls.n	800636e <_malloc_r+0x7e>
 800634e:	600b      	str	r3, [r1, #0]
 8006350:	50cd      	str	r5, [r1, r3]
 8006352:	18cc      	adds	r4, r1, r3
 8006354:	4630      	mov	r0, r6
 8006356:	f000 f9c0 	bl	80066da <__malloc_unlock>
 800635a:	f104 000b 	add.w	r0, r4, #11
 800635e:	1d23      	adds	r3, r4, #4
 8006360:	f020 0007 	bic.w	r0, r0, #7
 8006364:	1ac3      	subs	r3, r0, r3
 8006366:	d0d3      	beq.n	8006310 <_malloc_r+0x20>
 8006368:	425a      	negs	r2, r3
 800636a:	50e2      	str	r2, [r4, r3]
 800636c:	e7d0      	b.n	8006310 <_malloc_r+0x20>
 800636e:	428c      	cmp	r4, r1
 8006370:	684b      	ldr	r3, [r1, #4]
 8006372:	bf16      	itet	ne
 8006374:	6063      	strne	r3, [r4, #4]
 8006376:	6013      	streq	r3, [r2, #0]
 8006378:	460c      	movne	r4, r1
 800637a:	e7eb      	b.n	8006354 <_malloc_r+0x64>
 800637c:	460c      	mov	r4, r1
 800637e:	6849      	ldr	r1, [r1, #4]
 8006380:	e7cc      	b.n	800631c <_malloc_r+0x2c>
 8006382:	1cc4      	adds	r4, r0, #3
 8006384:	f024 0403 	bic.w	r4, r4, #3
 8006388:	42a0      	cmp	r0, r4
 800638a:	d005      	beq.n	8006398 <_malloc_r+0xa8>
 800638c:	1a21      	subs	r1, r4, r0
 800638e:	4630      	mov	r0, r6
 8006390:	f000 f95a 	bl	8006648 <_sbrk_r>
 8006394:	3001      	adds	r0, #1
 8006396:	d0cf      	beq.n	8006338 <_malloc_r+0x48>
 8006398:	6025      	str	r5, [r4, #0]
 800639a:	e7db      	b.n	8006354 <_malloc_r+0x64>
 800639c:	20000200 	.word	0x20000200
 80063a0:	20000204 	.word	0x20000204

080063a4 <__ssputs_r>:
 80063a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063a8:	688e      	ldr	r6, [r1, #8]
 80063aa:	429e      	cmp	r6, r3
 80063ac:	4682      	mov	sl, r0
 80063ae:	460c      	mov	r4, r1
 80063b0:	4690      	mov	r8, r2
 80063b2:	4699      	mov	r9, r3
 80063b4:	d837      	bhi.n	8006426 <__ssputs_r+0x82>
 80063b6:	898a      	ldrh	r2, [r1, #12]
 80063b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063bc:	d031      	beq.n	8006422 <__ssputs_r+0x7e>
 80063be:	6825      	ldr	r5, [r4, #0]
 80063c0:	6909      	ldr	r1, [r1, #16]
 80063c2:	1a6f      	subs	r7, r5, r1
 80063c4:	6965      	ldr	r5, [r4, #20]
 80063c6:	2302      	movs	r3, #2
 80063c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80063d0:	f109 0301 	add.w	r3, r9, #1
 80063d4:	443b      	add	r3, r7
 80063d6:	429d      	cmp	r5, r3
 80063d8:	bf38      	it	cc
 80063da:	461d      	movcc	r5, r3
 80063dc:	0553      	lsls	r3, r2, #21
 80063de:	d530      	bpl.n	8006442 <__ssputs_r+0x9e>
 80063e0:	4629      	mov	r1, r5
 80063e2:	f7ff ff85 	bl	80062f0 <_malloc_r>
 80063e6:	4606      	mov	r6, r0
 80063e8:	b950      	cbnz	r0, 8006400 <__ssputs_r+0x5c>
 80063ea:	230c      	movs	r3, #12
 80063ec:	f8ca 3000 	str.w	r3, [sl]
 80063f0:	89a3      	ldrh	r3, [r4, #12]
 80063f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063f6:	81a3      	strh	r3, [r4, #12]
 80063f8:	f04f 30ff 	mov.w	r0, #4294967295
 80063fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006400:	463a      	mov	r2, r7
 8006402:	6921      	ldr	r1, [r4, #16]
 8006404:	f7fc fc56 	bl	8002cb4 <memcpy>
 8006408:	89a3      	ldrh	r3, [r4, #12]
 800640a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800640e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006412:	81a3      	strh	r3, [r4, #12]
 8006414:	6126      	str	r6, [r4, #16]
 8006416:	6165      	str	r5, [r4, #20]
 8006418:	443e      	add	r6, r7
 800641a:	1bed      	subs	r5, r5, r7
 800641c:	6026      	str	r6, [r4, #0]
 800641e:	60a5      	str	r5, [r4, #8]
 8006420:	464e      	mov	r6, r9
 8006422:	454e      	cmp	r6, r9
 8006424:	d900      	bls.n	8006428 <__ssputs_r+0x84>
 8006426:	464e      	mov	r6, r9
 8006428:	4632      	mov	r2, r6
 800642a:	4641      	mov	r1, r8
 800642c:	6820      	ldr	r0, [r4, #0]
 800642e:	f000 f93a 	bl	80066a6 <memmove>
 8006432:	68a3      	ldr	r3, [r4, #8]
 8006434:	1b9b      	subs	r3, r3, r6
 8006436:	60a3      	str	r3, [r4, #8]
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	441e      	add	r6, r3
 800643c:	6026      	str	r6, [r4, #0]
 800643e:	2000      	movs	r0, #0
 8006440:	e7dc      	b.n	80063fc <__ssputs_r+0x58>
 8006442:	462a      	mov	r2, r5
 8006444:	f000 f94a 	bl	80066dc <_realloc_r>
 8006448:	4606      	mov	r6, r0
 800644a:	2800      	cmp	r0, #0
 800644c:	d1e2      	bne.n	8006414 <__ssputs_r+0x70>
 800644e:	6921      	ldr	r1, [r4, #16]
 8006450:	4650      	mov	r0, sl
 8006452:	f7ff feff 	bl	8006254 <_free_r>
 8006456:	e7c8      	b.n	80063ea <__ssputs_r+0x46>

08006458 <_svfiprintf_r>:
 8006458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800645c:	461d      	mov	r5, r3
 800645e:	898b      	ldrh	r3, [r1, #12]
 8006460:	061f      	lsls	r7, r3, #24
 8006462:	b09d      	sub	sp, #116	; 0x74
 8006464:	4680      	mov	r8, r0
 8006466:	460c      	mov	r4, r1
 8006468:	4616      	mov	r6, r2
 800646a:	d50f      	bpl.n	800648c <_svfiprintf_r+0x34>
 800646c:	690b      	ldr	r3, [r1, #16]
 800646e:	b96b      	cbnz	r3, 800648c <_svfiprintf_r+0x34>
 8006470:	2140      	movs	r1, #64	; 0x40
 8006472:	f7ff ff3d 	bl	80062f0 <_malloc_r>
 8006476:	6020      	str	r0, [r4, #0]
 8006478:	6120      	str	r0, [r4, #16]
 800647a:	b928      	cbnz	r0, 8006488 <_svfiprintf_r+0x30>
 800647c:	230c      	movs	r3, #12
 800647e:	f8c8 3000 	str.w	r3, [r8]
 8006482:	f04f 30ff 	mov.w	r0, #4294967295
 8006486:	e0c8      	b.n	800661a <_svfiprintf_r+0x1c2>
 8006488:	2340      	movs	r3, #64	; 0x40
 800648a:	6163      	str	r3, [r4, #20]
 800648c:	2300      	movs	r3, #0
 800648e:	9309      	str	r3, [sp, #36]	; 0x24
 8006490:	2320      	movs	r3, #32
 8006492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006496:	2330      	movs	r3, #48	; 0x30
 8006498:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800649c:	9503      	str	r5, [sp, #12]
 800649e:	f04f 0b01 	mov.w	fp, #1
 80064a2:	4637      	mov	r7, r6
 80064a4:	463d      	mov	r5, r7
 80064a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80064aa:	b10b      	cbz	r3, 80064b0 <_svfiprintf_r+0x58>
 80064ac:	2b25      	cmp	r3, #37	; 0x25
 80064ae:	d13e      	bne.n	800652e <_svfiprintf_r+0xd6>
 80064b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80064b4:	d00b      	beq.n	80064ce <_svfiprintf_r+0x76>
 80064b6:	4653      	mov	r3, sl
 80064b8:	4632      	mov	r2, r6
 80064ba:	4621      	mov	r1, r4
 80064bc:	4640      	mov	r0, r8
 80064be:	f7ff ff71 	bl	80063a4 <__ssputs_r>
 80064c2:	3001      	adds	r0, #1
 80064c4:	f000 80a4 	beq.w	8006610 <_svfiprintf_r+0x1b8>
 80064c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ca:	4453      	add	r3, sl
 80064cc:	9309      	str	r3, [sp, #36]	; 0x24
 80064ce:	783b      	ldrb	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 809d 	beq.w	8006610 <_svfiprintf_r+0x1b8>
 80064d6:	2300      	movs	r3, #0
 80064d8:	f04f 32ff 	mov.w	r2, #4294967295
 80064dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064e0:	9304      	str	r3, [sp, #16]
 80064e2:	9307      	str	r3, [sp, #28]
 80064e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064e8:	931a      	str	r3, [sp, #104]	; 0x68
 80064ea:	462f      	mov	r7, r5
 80064ec:	2205      	movs	r2, #5
 80064ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80064f2:	4850      	ldr	r0, [pc, #320]	; (8006634 <_svfiprintf_r+0x1dc>)
 80064f4:	f7f9 feb4 	bl	8000260 <memchr>
 80064f8:	9b04      	ldr	r3, [sp, #16]
 80064fa:	b9d0      	cbnz	r0, 8006532 <_svfiprintf_r+0xda>
 80064fc:	06d9      	lsls	r1, r3, #27
 80064fe:	bf44      	itt	mi
 8006500:	2220      	movmi	r2, #32
 8006502:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006506:	071a      	lsls	r2, r3, #28
 8006508:	bf44      	itt	mi
 800650a:	222b      	movmi	r2, #43	; 0x2b
 800650c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006510:	782a      	ldrb	r2, [r5, #0]
 8006512:	2a2a      	cmp	r2, #42	; 0x2a
 8006514:	d015      	beq.n	8006542 <_svfiprintf_r+0xea>
 8006516:	9a07      	ldr	r2, [sp, #28]
 8006518:	462f      	mov	r7, r5
 800651a:	2000      	movs	r0, #0
 800651c:	250a      	movs	r5, #10
 800651e:	4639      	mov	r1, r7
 8006520:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006524:	3b30      	subs	r3, #48	; 0x30
 8006526:	2b09      	cmp	r3, #9
 8006528:	d94d      	bls.n	80065c6 <_svfiprintf_r+0x16e>
 800652a:	b1b8      	cbz	r0, 800655c <_svfiprintf_r+0x104>
 800652c:	e00f      	b.n	800654e <_svfiprintf_r+0xf6>
 800652e:	462f      	mov	r7, r5
 8006530:	e7b8      	b.n	80064a4 <_svfiprintf_r+0x4c>
 8006532:	4a40      	ldr	r2, [pc, #256]	; (8006634 <_svfiprintf_r+0x1dc>)
 8006534:	1a80      	subs	r0, r0, r2
 8006536:	fa0b f000 	lsl.w	r0, fp, r0
 800653a:	4318      	orrs	r0, r3
 800653c:	9004      	str	r0, [sp, #16]
 800653e:	463d      	mov	r5, r7
 8006540:	e7d3      	b.n	80064ea <_svfiprintf_r+0x92>
 8006542:	9a03      	ldr	r2, [sp, #12]
 8006544:	1d11      	adds	r1, r2, #4
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	9103      	str	r1, [sp, #12]
 800654a:	2a00      	cmp	r2, #0
 800654c:	db01      	blt.n	8006552 <_svfiprintf_r+0xfa>
 800654e:	9207      	str	r2, [sp, #28]
 8006550:	e004      	b.n	800655c <_svfiprintf_r+0x104>
 8006552:	4252      	negs	r2, r2
 8006554:	f043 0302 	orr.w	r3, r3, #2
 8006558:	9207      	str	r2, [sp, #28]
 800655a:	9304      	str	r3, [sp, #16]
 800655c:	783b      	ldrb	r3, [r7, #0]
 800655e:	2b2e      	cmp	r3, #46	; 0x2e
 8006560:	d10c      	bne.n	800657c <_svfiprintf_r+0x124>
 8006562:	787b      	ldrb	r3, [r7, #1]
 8006564:	2b2a      	cmp	r3, #42	; 0x2a
 8006566:	d133      	bne.n	80065d0 <_svfiprintf_r+0x178>
 8006568:	9b03      	ldr	r3, [sp, #12]
 800656a:	1d1a      	adds	r2, r3, #4
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	9203      	str	r2, [sp, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfb8      	it	lt
 8006574:	f04f 33ff 	movlt.w	r3, #4294967295
 8006578:	3702      	adds	r7, #2
 800657a:	9305      	str	r3, [sp, #20]
 800657c:	4d2e      	ldr	r5, [pc, #184]	; (8006638 <_svfiprintf_r+0x1e0>)
 800657e:	7839      	ldrb	r1, [r7, #0]
 8006580:	2203      	movs	r2, #3
 8006582:	4628      	mov	r0, r5
 8006584:	f7f9 fe6c 	bl	8000260 <memchr>
 8006588:	b138      	cbz	r0, 800659a <_svfiprintf_r+0x142>
 800658a:	2340      	movs	r3, #64	; 0x40
 800658c:	1b40      	subs	r0, r0, r5
 800658e:	fa03 f000 	lsl.w	r0, r3, r0
 8006592:	9b04      	ldr	r3, [sp, #16]
 8006594:	4303      	orrs	r3, r0
 8006596:	3701      	adds	r7, #1
 8006598:	9304      	str	r3, [sp, #16]
 800659a:	7839      	ldrb	r1, [r7, #0]
 800659c:	4827      	ldr	r0, [pc, #156]	; (800663c <_svfiprintf_r+0x1e4>)
 800659e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065a2:	2206      	movs	r2, #6
 80065a4:	1c7e      	adds	r6, r7, #1
 80065a6:	f7f9 fe5b 	bl	8000260 <memchr>
 80065aa:	2800      	cmp	r0, #0
 80065ac:	d038      	beq.n	8006620 <_svfiprintf_r+0x1c8>
 80065ae:	4b24      	ldr	r3, [pc, #144]	; (8006640 <_svfiprintf_r+0x1e8>)
 80065b0:	bb13      	cbnz	r3, 80065f8 <_svfiprintf_r+0x1a0>
 80065b2:	9b03      	ldr	r3, [sp, #12]
 80065b4:	3307      	adds	r3, #7
 80065b6:	f023 0307 	bic.w	r3, r3, #7
 80065ba:	3308      	adds	r3, #8
 80065bc:	9303      	str	r3, [sp, #12]
 80065be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065c0:	444b      	add	r3, r9
 80065c2:	9309      	str	r3, [sp, #36]	; 0x24
 80065c4:	e76d      	b.n	80064a2 <_svfiprintf_r+0x4a>
 80065c6:	fb05 3202 	mla	r2, r5, r2, r3
 80065ca:	2001      	movs	r0, #1
 80065cc:	460f      	mov	r7, r1
 80065ce:	e7a6      	b.n	800651e <_svfiprintf_r+0xc6>
 80065d0:	2300      	movs	r3, #0
 80065d2:	3701      	adds	r7, #1
 80065d4:	9305      	str	r3, [sp, #20]
 80065d6:	4619      	mov	r1, r3
 80065d8:	250a      	movs	r5, #10
 80065da:	4638      	mov	r0, r7
 80065dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065e0:	3a30      	subs	r2, #48	; 0x30
 80065e2:	2a09      	cmp	r2, #9
 80065e4:	d903      	bls.n	80065ee <_svfiprintf_r+0x196>
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d0c8      	beq.n	800657c <_svfiprintf_r+0x124>
 80065ea:	9105      	str	r1, [sp, #20]
 80065ec:	e7c6      	b.n	800657c <_svfiprintf_r+0x124>
 80065ee:	fb05 2101 	mla	r1, r5, r1, r2
 80065f2:	2301      	movs	r3, #1
 80065f4:	4607      	mov	r7, r0
 80065f6:	e7f0      	b.n	80065da <_svfiprintf_r+0x182>
 80065f8:	ab03      	add	r3, sp, #12
 80065fa:	9300      	str	r3, [sp, #0]
 80065fc:	4622      	mov	r2, r4
 80065fe:	4b11      	ldr	r3, [pc, #68]	; (8006644 <_svfiprintf_r+0x1ec>)
 8006600:	a904      	add	r1, sp, #16
 8006602:	4640      	mov	r0, r8
 8006604:	f7fc fbfe 	bl	8002e04 <_printf_float>
 8006608:	f1b0 3fff 	cmp.w	r0, #4294967295
 800660c:	4681      	mov	r9, r0
 800660e:	d1d6      	bne.n	80065be <_svfiprintf_r+0x166>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	065b      	lsls	r3, r3, #25
 8006614:	f53f af35 	bmi.w	8006482 <_svfiprintf_r+0x2a>
 8006618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800661a:	b01d      	add	sp, #116	; 0x74
 800661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006620:	ab03      	add	r3, sp, #12
 8006622:	9300      	str	r3, [sp, #0]
 8006624:	4622      	mov	r2, r4
 8006626:	4b07      	ldr	r3, [pc, #28]	; (8006644 <_svfiprintf_r+0x1ec>)
 8006628:	a904      	add	r1, sp, #16
 800662a:	4640      	mov	r0, r8
 800662c:	f7fc fea0 	bl	8003370 <_printf_i>
 8006630:	e7ea      	b.n	8006608 <_svfiprintf_r+0x1b0>
 8006632:	bf00      	nop
 8006634:	08007434 	.word	0x08007434
 8006638:	0800743a 	.word	0x0800743a
 800663c:	0800743e 	.word	0x0800743e
 8006640:	08002e05 	.word	0x08002e05
 8006644:	080063a5 	.word	0x080063a5

08006648 <_sbrk_r>:
 8006648:	b538      	push	{r3, r4, r5, lr}
 800664a:	4c06      	ldr	r4, [pc, #24]	; (8006664 <_sbrk_r+0x1c>)
 800664c:	2300      	movs	r3, #0
 800664e:	4605      	mov	r5, r0
 8006650:	4608      	mov	r0, r1
 8006652:	6023      	str	r3, [r4, #0]
 8006654:	f7fa fee6 	bl	8001424 <_sbrk>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_sbrk_r+0x1a>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	b103      	cbz	r3, 8006662 <_sbrk_r+0x1a>
 8006660:	602b      	str	r3, [r5, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	20000258 	.word	0x20000258

08006668 <strncmp>:
 8006668:	b510      	push	{r4, lr}
 800666a:	b16a      	cbz	r2, 8006688 <strncmp+0x20>
 800666c:	3901      	subs	r1, #1
 800666e:	1884      	adds	r4, r0, r2
 8006670:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006674:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006678:	4293      	cmp	r3, r2
 800667a:	d103      	bne.n	8006684 <strncmp+0x1c>
 800667c:	42a0      	cmp	r0, r4
 800667e:	d001      	beq.n	8006684 <strncmp+0x1c>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1f5      	bne.n	8006670 <strncmp+0x8>
 8006684:	1a98      	subs	r0, r3, r2
 8006686:	bd10      	pop	{r4, pc}
 8006688:	4610      	mov	r0, r2
 800668a:	e7fc      	b.n	8006686 <strncmp+0x1e>

0800668c <__ascii_wctomb>:
 800668c:	b149      	cbz	r1, 80066a2 <__ascii_wctomb+0x16>
 800668e:	2aff      	cmp	r2, #255	; 0xff
 8006690:	bf85      	ittet	hi
 8006692:	238a      	movhi	r3, #138	; 0x8a
 8006694:	6003      	strhi	r3, [r0, #0]
 8006696:	700a      	strbls	r2, [r1, #0]
 8006698:	f04f 30ff 	movhi.w	r0, #4294967295
 800669c:	bf98      	it	ls
 800669e:	2001      	movls	r0, #1
 80066a0:	4770      	bx	lr
 80066a2:	4608      	mov	r0, r1
 80066a4:	4770      	bx	lr

080066a6 <memmove>:
 80066a6:	4288      	cmp	r0, r1
 80066a8:	b510      	push	{r4, lr}
 80066aa:	eb01 0302 	add.w	r3, r1, r2
 80066ae:	d807      	bhi.n	80066c0 <memmove+0x1a>
 80066b0:	1e42      	subs	r2, r0, #1
 80066b2:	4299      	cmp	r1, r3
 80066b4:	d00a      	beq.n	80066cc <memmove+0x26>
 80066b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 80066be:	e7f8      	b.n	80066b2 <memmove+0xc>
 80066c0:	4283      	cmp	r3, r0
 80066c2:	d9f5      	bls.n	80066b0 <memmove+0xa>
 80066c4:	1881      	adds	r1, r0, r2
 80066c6:	1ad2      	subs	r2, r2, r3
 80066c8:	42d3      	cmn	r3, r2
 80066ca:	d100      	bne.n	80066ce <memmove+0x28>
 80066cc:	bd10      	pop	{r4, pc}
 80066ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80066d6:	e7f7      	b.n	80066c8 <memmove+0x22>

080066d8 <__malloc_lock>:
 80066d8:	4770      	bx	lr

080066da <__malloc_unlock>:
 80066da:	4770      	bx	lr

080066dc <_realloc_r>:
 80066dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066de:	4607      	mov	r7, r0
 80066e0:	4614      	mov	r4, r2
 80066e2:	460e      	mov	r6, r1
 80066e4:	b921      	cbnz	r1, 80066f0 <_realloc_r+0x14>
 80066e6:	4611      	mov	r1, r2
 80066e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80066ec:	f7ff be00 	b.w	80062f0 <_malloc_r>
 80066f0:	b922      	cbnz	r2, 80066fc <_realloc_r+0x20>
 80066f2:	f7ff fdaf 	bl	8006254 <_free_r>
 80066f6:	4625      	mov	r5, r4
 80066f8:	4628      	mov	r0, r5
 80066fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066fc:	f000 f814 	bl	8006728 <_malloc_usable_size_r>
 8006700:	42a0      	cmp	r0, r4
 8006702:	d20f      	bcs.n	8006724 <_realloc_r+0x48>
 8006704:	4621      	mov	r1, r4
 8006706:	4638      	mov	r0, r7
 8006708:	f7ff fdf2 	bl	80062f0 <_malloc_r>
 800670c:	4605      	mov	r5, r0
 800670e:	2800      	cmp	r0, #0
 8006710:	d0f2      	beq.n	80066f8 <_realloc_r+0x1c>
 8006712:	4631      	mov	r1, r6
 8006714:	4622      	mov	r2, r4
 8006716:	f7fc facd 	bl	8002cb4 <memcpy>
 800671a:	4631      	mov	r1, r6
 800671c:	4638      	mov	r0, r7
 800671e:	f7ff fd99 	bl	8006254 <_free_r>
 8006722:	e7e9      	b.n	80066f8 <_realloc_r+0x1c>
 8006724:	4635      	mov	r5, r6
 8006726:	e7e7      	b.n	80066f8 <_realloc_r+0x1c>

08006728 <_malloc_usable_size_r>:
 8006728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800672c:	1f18      	subs	r0, r3, #4
 800672e:	2b00      	cmp	r3, #0
 8006730:	bfbc      	itt	lt
 8006732:	580b      	ldrlt	r3, [r1, r0]
 8006734:	18c0      	addlt	r0, r0, r3
 8006736:	4770      	bx	lr

08006738 <powf>:
 8006738:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800673c:	ed2d 8b04 	vpush	{d8-d9}
 8006740:	4ca7      	ldr	r4, [pc, #668]	; (80069e0 <powf+0x2a8>)
 8006742:	b08a      	sub	sp, #40	; 0x28
 8006744:	eef0 8a40 	vmov.f32	s17, s0
 8006748:	eeb0 8a60 	vmov.f32	s16, s1
 800674c:	f000 f958 	bl	8006a00 <__ieee754_powf>
 8006750:	f994 5000 	ldrsb.w	r5, [r4]
 8006754:	1c6b      	adds	r3, r5, #1
 8006756:	eeb0 9a40 	vmov.f32	s18, s0
 800675a:	4626      	mov	r6, r4
 800675c:	d05f      	beq.n	800681e <powf+0xe6>
 800675e:	eeb4 8a48 	vcmp.f32	s16, s16
 8006762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006766:	d65a      	bvs.n	800681e <powf+0xe6>
 8006768:	eef4 8a68 	vcmp.f32	s17, s17
 800676c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006770:	d721      	bvc.n	80067b6 <powf+0x7e>
 8006772:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800677a:	d150      	bne.n	800681e <powf+0xe6>
 800677c:	2301      	movs	r3, #1
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	4b98      	ldr	r3, [pc, #608]	; (80069e4 <powf+0x2ac>)
 8006782:	9301      	str	r3, [sp, #4]
 8006784:	ee18 0a90 	vmov	r0, s17
 8006788:	2300      	movs	r3, #0
 800678a:	9308      	str	r3, [sp, #32]
 800678c:	f7f9 ff1c 	bl	80005c8 <__aeabi_f2d>
 8006790:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006794:	ee18 0a10 	vmov	r0, s16
 8006798:	f7f9 ff16 	bl	80005c8 <__aeabi_f2d>
 800679c:	4b92      	ldr	r3, [pc, #584]	; (80069e8 <powf+0x2b0>)
 800679e:	2200      	movs	r2, #0
 80067a0:	2d02      	cmp	r5, #2
 80067a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067aa:	d032      	beq.n	8006812 <powf+0xda>
 80067ac:	4668      	mov	r0, sp
 80067ae:	f000 fbea 	bl	8006f86 <matherr>
 80067b2:	bb40      	cbnz	r0, 8006806 <powf+0xce>
 80067b4:	e065      	b.n	8006882 <powf+0x14a>
 80067b6:	eddf 9a8d 	vldr	s19, [pc, #564]	; 80069ec <powf+0x2b4>
 80067ba:	eef4 8a69 	vcmp.f32	s17, s19
 80067be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067c2:	d163      	bne.n	800688c <powf+0x154>
 80067c4:	eeb4 8a69 	vcmp.f32	s16, s19
 80067c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067cc:	d12e      	bne.n	800682c <powf+0xf4>
 80067ce:	2301      	movs	r3, #1
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	4b84      	ldr	r3, [pc, #528]	; (80069e4 <powf+0x2ac>)
 80067d4:	9301      	str	r3, [sp, #4]
 80067d6:	ee18 0a90 	vmov	r0, s17
 80067da:	2300      	movs	r3, #0
 80067dc:	9308      	str	r3, [sp, #32]
 80067de:	f7f9 fef3 	bl	80005c8 <__aeabi_f2d>
 80067e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80067e6:	ee18 0a10 	vmov	r0, s16
 80067ea:	f7f9 feed 	bl	80005c8 <__aeabi_f2d>
 80067ee:	2200      	movs	r2, #0
 80067f0:	2300      	movs	r3, #0
 80067f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80067f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	d0d6      	beq.n	80067ac <powf+0x74>
 80067fe:	4b7a      	ldr	r3, [pc, #488]	; (80069e8 <powf+0x2b0>)
 8006800:	2200      	movs	r2, #0
 8006802:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006806:	9b08      	ldr	r3, [sp, #32]
 8006808:	b11b      	cbz	r3, 8006812 <powf+0xda>
 800680a:	f7fc fa29 	bl	8002c60 <__errno>
 800680e:	9b08      	ldr	r3, [sp, #32]
 8006810:	6003      	str	r3, [r0, #0]
 8006812:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006816:	f7fa fa27 	bl	8000c68 <__aeabi_d2f>
 800681a:	ee09 0a10 	vmov	s18, r0
 800681e:	eeb0 0a49 	vmov.f32	s0, s18
 8006822:	b00a      	add	sp, #40	; 0x28
 8006824:	ecbd 8b04 	vpop	{d8-d9}
 8006828:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800682c:	eeb0 0a48 	vmov.f32	s0, s16
 8006830:	f000 fbb2 	bl	8006f98 <finitef>
 8006834:	2800      	cmp	r0, #0
 8006836:	d0f2      	beq.n	800681e <powf+0xe6>
 8006838:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006840:	d5ed      	bpl.n	800681e <powf+0xe6>
 8006842:	2301      	movs	r3, #1
 8006844:	9300      	str	r3, [sp, #0]
 8006846:	4b67      	ldr	r3, [pc, #412]	; (80069e4 <powf+0x2ac>)
 8006848:	9301      	str	r3, [sp, #4]
 800684a:	ee18 0a90 	vmov	r0, s17
 800684e:	2300      	movs	r3, #0
 8006850:	9308      	str	r3, [sp, #32]
 8006852:	f7f9 feb9 	bl	80005c8 <__aeabi_f2d>
 8006856:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800685a:	ee18 0a10 	vmov	r0, s16
 800685e:	f7f9 feb3 	bl	80005c8 <__aeabi_f2d>
 8006862:	f994 3000 	ldrsb.w	r3, [r4]
 8006866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800686a:	b923      	cbnz	r3, 8006876 <powf+0x13e>
 800686c:	2200      	movs	r2, #0
 800686e:	2300      	movs	r3, #0
 8006870:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006874:	e79a      	b.n	80067ac <powf+0x74>
 8006876:	495e      	ldr	r1, [pc, #376]	; (80069f0 <powf+0x2b8>)
 8006878:	2000      	movs	r0, #0
 800687a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800687e:	2b02      	cmp	r3, #2
 8006880:	d194      	bne.n	80067ac <powf+0x74>
 8006882:	f7fc f9ed 	bl	8002c60 <__errno>
 8006886:	2321      	movs	r3, #33	; 0x21
 8006888:	6003      	str	r3, [r0, #0]
 800688a:	e7bc      	b.n	8006806 <powf+0xce>
 800688c:	f000 fb84 	bl	8006f98 <finitef>
 8006890:	4605      	mov	r5, r0
 8006892:	2800      	cmp	r0, #0
 8006894:	d173      	bne.n	800697e <powf+0x246>
 8006896:	eeb0 0a68 	vmov.f32	s0, s17
 800689a:	f000 fb7d 	bl	8006f98 <finitef>
 800689e:	2800      	cmp	r0, #0
 80068a0:	d06d      	beq.n	800697e <powf+0x246>
 80068a2:	eeb0 0a48 	vmov.f32	s0, s16
 80068a6:	f000 fb77 	bl	8006f98 <finitef>
 80068aa:	2800      	cmp	r0, #0
 80068ac:	d067      	beq.n	800697e <powf+0x246>
 80068ae:	ee18 0a90 	vmov	r0, s17
 80068b2:	f7f9 fe89 	bl	80005c8 <__aeabi_f2d>
 80068b6:	4680      	mov	r8, r0
 80068b8:	ee18 0a10 	vmov	r0, s16
 80068bc:	4689      	mov	r9, r1
 80068be:	f7f9 fe83 	bl	80005c8 <__aeabi_f2d>
 80068c2:	eeb4 9a49 	vcmp.f32	s18, s18
 80068c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068ca:	f994 4000 	ldrsb.w	r4, [r4]
 80068ce:	4b45      	ldr	r3, [pc, #276]	; (80069e4 <powf+0x2ac>)
 80068d0:	d713      	bvc.n	80068fa <powf+0x1c2>
 80068d2:	2201      	movs	r2, #1
 80068d4:	e9cd 2300 	strd	r2, r3, [sp]
 80068d8:	9508      	str	r5, [sp, #32]
 80068da:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80068de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068e2:	2c00      	cmp	r4, #0
 80068e4:	d0c2      	beq.n	800686c <powf+0x134>
 80068e6:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 80068ea:	ee17 0a90 	vmov	r0, s15
 80068ee:	f7f9 fe6b 	bl	80005c8 <__aeabi_f2d>
 80068f2:	2c02      	cmp	r4, #2
 80068f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80068f8:	e7c2      	b.n	8006880 <powf+0x148>
 80068fa:	2203      	movs	r2, #3
 80068fc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006900:	e9cd 2300 	strd	r2, r3, [sp]
 8006904:	9508      	str	r5, [sp, #32]
 8006906:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800690a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800690e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8006912:	b9fc      	cbnz	r4, 8006954 <powf+0x21c>
 8006914:	4b37      	ldr	r3, [pc, #220]	; (80069f4 <powf+0x2bc>)
 8006916:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800691a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800691e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006922:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006926:	d553      	bpl.n	80069d0 <powf+0x298>
 8006928:	eeb0 0a48 	vmov.f32	s0, s16
 800692c:	f000 fb3e 	bl	8006fac <rintf>
 8006930:	eeb4 0a48 	vcmp.f32	s0, s16
 8006934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006938:	d004      	beq.n	8006944 <powf+0x20c>
 800693a:	4b2f      	ldr	r3, [pc, #188]	; (80069f8 <powf+0x2c0>)
 800693c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8006940:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006944:	f996 3000 	ldrsb.w	r3, [r6]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d141      	bne.n	80069d0 <powf+0x298>
 800694c:	f7fc f988 	bl	8002c60 <__errno>
 8006950:	2322      	movs	r3, #34	; 0x22
 8006952:	e799      	b.n	8006888 <powf+0x150>
 8006954:	4b29      	ldr	r3, [pc, #164]	; (80069fc <powf+0x2c4>)
 8006956:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800695a:	2200      	movs	r2, #0
 800695c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006960:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006964:	d5ee      	bpl.n	8006944 <powf+0x20c>
 8006966:	eeb0 0a48 	vmov.f32	s0, s16
 800696a:	f000 fb1f 	bl	8006fac <rintf>
 800696e:	eeb4 0a48 	vcmp.f32	s0, s16
 8006972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006976:	d0e5      	beq.n	8006944 <powf+0x20c>
 8006978:	2200      	movs	r2, #0
 800697a:	4b1d      	ldr	r3, [pc, #116]	; (80069f0 <powf+0x2b8>)
 800697c:	e7e0      	b.n	8006940 <powf+0x208>
 800697e:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8006982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006986:	f47f af4a 	bne.w	800681e <powf+0xe6>
 800698a:	eeb0 0a68 	vmov.f32	s0, s17
 800698e:	f000 fb03 	bl	8006f98 <finitef>
 8006992:	2800      	cmp	r0, #0
 8006994:	f43f af43 	beq.w	800681e <powf+0xe6>
 8006998:	eeb0 0a48 	vmov.f32	s0, s16
 800699c:	f000 fafc 	bl	8006f98 <finitef>
 80069a0:	2800      	cmp	r0, #0
 80069a2:	f43f af3c 	beq.w	800681e <powf+0xe6>
 80069a6:	2304      	movs	r3, #4
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <powf+0x2ac>)
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	ee18 0a90 	vmov	r0, s17
 80069b2:	2300      	movs	r3, #0
 80069b4:	9308      	str	r3, [sp, #32]
 80069b6:	f7f9 fe07 	bl	80005c8 <__aeabi_f2d>
 80069ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069be:	ee18 0a10 	vmov	r0, s16
 80069c2:	f7f9 fe01 	bl	80005c8 <__aeabi_f2d>
 80069c6:	2200      	movs	r2, #0
 80069c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069cc:	2300      	movs	r3, #0
 80069ce:	e7b7      	b.n	8006940 <powf+0x208>
 80069d0:	4668      	mov	r0, sp
 80069d2:	f000 fad8 	bl	8006f86 <matherr>
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f47f af15 	bne.w	8006806 <powf+0xce>
 80069dc:	e7b6      	b.n	800694c <powf+0x214>
 80069de:	bf00      	nop
 80069e0:	200001dc 	.word	0x200001dc
 80069e4:	08007546 	.word	0x08007546
 80069e8:	3ff00000 	.word	0x3ff00000
 80069ec:	00000000 	.word	0x00000000
 80069f0:	fff00000 	.word	0xfff00000
 80069f4:	47efffff 	.word	0x47efffff
 80069f8:	c7efffff 	.word	0xc7efffff
 80069fc:	7ff00000 	.word	0x7ff00000

08006a00 <__ieee754_powf>:
 8006a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a04:	ee10 5a90 	vmov	r5, s1
 8006a08:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8006a0c:	ed2d 8b02 	vpush	{d8}
 8006a10:	eeb0 8a40 	vmov.f32	s16, s0
 8006a14:	eef0 8a60 	vmov.f32	s17, s1
 8006a18:	f000 8293 	beq.w	8006f42 <__ieee754_powf+0x542>
 8006a1c:	ee10 8a10 	vmov	r8, s0
 8006a20:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8006a24:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8006a28:	dc06      	bgt.n	8006a38 <__ieee754_powf+0x38>
 8006a2a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006a2e:	dd0a      	ble.n	8006a46 <__ieee754_powf+0x46>
 8006a30:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006a34:	f000 8285 	beq.w	8006f42 <__ieee754_powf+0x542>
 8006a38:	ecbd 8b02 	vpop	{d8}
 8006a3c:	48d9      	ldr	r0, [pc, #868]	; (8006da4 <__ieee754_powf+0x3a4>)
 8006a3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a42:	f7fc bf89 	b.w	8003958 <nanf>
 8006a46:	f1b8 0f00 	cmp.w	r8, #0
 8006a4a:	da1d      	bge.n	8006a88 <__ieee754_powf+0x88>
 8006a4c:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8006a50:	da2c      	bge.n	8006aac <__ieee754_powf+0xac>
 8006a52:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006a56:	db30      	blt.n	8006aba <__ieee754_powf+0xba>
 8006a58:	15fb      	asrs	r3, r7, #23
 8006a5a:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8006a5e:	fa47 f603 	asr.w	r6, r7, r3
 8006a62:	fa06 f303 	lsl.w	r3, r6, r3
 8006a66:	42bb      	cmp	r3, r7
 8006a68:	d127      	bne.n	8006aba <__ieee754_powf+0xba>
 8006a6a:	f006 0601 	and.w	r6, r6, #1
 8006a6e:	f1c6 0602 	rsb	r6, r6, #2
 8006a72:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8006a76:	d122      	bne.n	8006abe <__ieee754_powf+0xbe>
 8006a78:	2d00      	cmp	r5, #0
 8006a7a:	f280 8268 	bge.w	8006f4e <__ieee754_powf+0x54e>
 8006a7e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006a82:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8006a86:	e00d      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006a88:	2600      	movs	r6, #0
 8006a8a:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8006a8e:	d1f0      	bne.n	8006a72 <__ieee754_powf+0x72>
 8006a90:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8006a94:	f000 8255 	beq.w	8006f42 <__ieee754_powf+0x542>
 8006a98:	dd0a      	ble.n	8006ab0 <__ieee754_powf+0xb0>
 8006a9a:	2d00      	cmp	r5, #0
 8006a9c:	f280 8254 	bge.w	8006f48 <__ieee754_powf+0x548>
 8006aa0:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8006da8 <__ieee754_powf+0x3a8>
 8006aa4:	ecbd 8b02 	vpop	{d8}
 8006aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aac:	2602      	movs	r6, #2
 8006aae:	e7ec      	b.n	8006a8a <__ieee754_powf+0x8a>
 8006ab0:	2d00      	cmp	r5, #0
 8006ab2:	daf5      	bge.n	8006aa0 <__ieee754_powf+0xa0>
 8006ab4:	eeb1 0a68 	vneg.f32	s0, s17
 8006ab8:	e7f4      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006aba:	2600      	movs	r6, #0
 8006abc:	e7d9      	b.n	8006a72 <__ieee754_powf+0x72>
 8006abe:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8006ac2:	d102      	bne.n	8006aca <__ieee754_powf+0xca>
 8006ac4:	ee28 0a08 	vmul.f32	s0, s16, s16
 8006ac8:	e7ec      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006aca:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8006ace:	eeb0 0a48 	vmov.f32	s0, s16
 8006ad2:	d108      	bne.n	8006ae6 <__ieee754_powf+0xe6>
 8006ad4:	f1b8 0f00 	cmp.w	r8, #0
 8006ad8:	db05      	blt.n	8006ae6 <__ieee754_powf+0xe6>
 8006ada:	ecbd 8b02 	vpop	{d8}
 8006ade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae2:	f000 ba4d 	b.w	8006f80 <__ieee754_sqrtf>
 8006ae6:	f000 fa50 	bl	8006f8a <fabsf>
 8006aea:	b124      	cbz	r4, 8006af6 <__ieee754_powf+0xf6>
 8006aec:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8006af0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006af4:	d117      	bne.n	8006b26 <__ieee754_powf+0x126>
 8006af6:	2d00      	cmp	r5, #0
 8006af8:	bfbc      	itt	lt
 8006afa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006afe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006b02:	f1b8 0f00 	cmp.w	r8, #0
 8006b06:	dacd      	bge.n	8006aa4 <__ieee754_powf+0xa4>
 8006b08:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8006b0c:	ea54 0306 	orrs.w	r3, r4, r6
 8006b10:	d104      	bne.n	8006b1c <__ieee754_powf+0x11c>
 8006b12:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006b16:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8006b1a:	e7c3      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006b1c:	2e01      	cmp	r6, #1
 8006b1e:	d1c1      	bne.n	8006aa4 <__ieee754_powf+0xa4>
 8006b20:	eeb1 0a40 	vneg.f32	s0, s0
 8006b24:	e7be      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006b26:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8006b2a:	3801      	subs	r0, #1
 8006b2c:	ea56 0300 	orrs.w	r3, r6, r0
 8006b30:	d104      	bne.n	8006b3c <__ieee754_powf+0x13c>
 8006b32:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006b36:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8006b3a:	e7b3      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006b3c:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8006b40:	dd6d      	ble.n	8006c1e <__ieee754_powf+0x21e>
 8006b42:	4b9a      	ldr	r3, [pc, #616]	; (8006dac <__ieee754_powf+0x3ac>)
 8006b44:	429c      	cmp	r4, r3
 8006b46:	dc06      	bgt.n	8006b56 <__ieee754_powf+0x156>
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	daa9      	bge.n	8006aa0 <__ieee754_powf+0xa0>
 8006b4c:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8006db0 <__ieee754_powf+0x3b0>
 8006b50:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006b54:	e7a6      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006b56:	4b97      	ldr	r3, [pc, #604]	; (8006db4 <__ieee754_powf+0x3b4>)
 8006b58:	429c      	cmp	r4, r3
 8006b5a:	dd02      	ble.n	8006b62 <__ieee754_powf+0x162>
 8006b5c:	2d00      	cmp	r5, #0
 8006b5e:	dcf5      	bgt.n	8006b4c <__ieee754_powf+0x14c>
 8006b60:	e79e      	b.n	8006aa0 <__ieee754_powf+0xa0>
 8006b62:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006b66:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006b6a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8006db8 <__ieee754_powf+0x3b8>
 8006b6e:	eef1 6a40 	vneg.f32	s13, s0
 8006b72:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8006b76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006b7a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006b7e:	eee7 7a40 	vfms.f32	s15, s14, s0
 8006b82:	ee60 0a00 	vmul.f32	s1, s0, s0
 8006b86:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8006dbc <__ieee754_powf+0x3bc>
 8006b8a:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8006b8e:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8006dc0 <__ieee754_powf+0x3c0>
 8006b92:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 8006b96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006b9a:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006dc4 <__ieee754_powf+0x3c4>
 8006b9e:	eeb0 6a67 	vmov.f32	s12, s15
 8006ba2:	eea0 6a07 	vfma.f32	s12, s0, s14
 8006ba6:	ee16 3a10 	vmov	r3, s12
 8006baa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006bae:	f023 030f 	bic.w	r3, r3, #15
 8006bb2:	ee00 3a90 	vmov	s1, r3
 8006bb6:	eee6 0a87 	vfma.f32	s1, s13, s14
 8006bba:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006bbe:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8006bc2:	f025 050f 	bic.w	r5, r5, #15
 8006bc6:	ee07 5a10 	vmov	s14, r5
 8006bca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8006bce:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006bda:	3e01      	subs	r6, #1
 8006bdc:	ea56 0200 	orrs.w	r2, r6, r0
 8006be0:	ee07 5a10 	vmov	s14, r5
 8006be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006be8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006bec:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8006bf0:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006bf4:	ee17 4a10 	vmov	r4, s14
 8006bf8:	bf08      	it	eq
 8006bfa:	eeb0 8a40 	vmoveq.f32	s16, s0
 8006bfe:	2c00      	cmp	r4, #0
 8006c00:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006c04:	f340 8184 	ble.w	8006f10 <__ieee754_powf+0x510>
 8006c08:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006c0c:	f340 80fc 	ble.w	8006e08 <__ieee754_powf+0x408>
 8006c10:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006db0 <__ieee754_powf+0x3b0>
 8006c14:	ee28 0a27 	vmul.f32	s0, s16, s15
 8006c18:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006c1c:	e742      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006c1e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8006c22:	bfbf      	itttt	lt
 8006c24:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8006dc8 <__ieee754_powf+0x3c8>
 8006c28:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006c2c:	f06f 0217 	mvnlt.w	r2, #23
 8006c30:	ee17 4a90 	vmovlt	r4, s15
 8006c34:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8006c38:	bfa8      	it	ge
 8006c3a:	2200      	movge	r2, #0
 8006c3c:	3b7f      	subs	r3, #127	; 0x7f
 8006c3e:	4413      	add	r3, r2
 8006c40:	4a62      	ldr	r2, [pc, #392]	; (8006dcc <__ieee754_powf+0x3cc>)
 8006c42:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8006c46:	4294      	cmp	r4, r2
 8006c48:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8006c4c:	dd06      	ble.n	8006c5c <__ieee754_powf+0x25c>
 8006c4e:	4a60      	ldr	r2, [pc, #384]	; (8006dd0 <__ieee754_powf+0x3d0>)
 8006c50:	4294      	cmp	r4, r2
 8006c52:	f340 80a5 	ble.w	8006da0 <__ieee754_powf+0x3a0>
 8006c56:	3301      	adds	r3, #1
 8006c58:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8006c5c:	2400      	movs	r4, #0
 8006c5e:	4a5d      	ldr	r2, [pc, #372]	; (8006dd4 <__ieee754_powf+0x3d4>)
 8006c60:	00a7      	lsls	r7, r4, #2
 8006c62:	443a      	add	r2, r7
 8006c64:	ee07 1a90 	vmov	s15, r1
 8006c68:	ed92 7a00 	vldr	s14, [r2]
 8006c6c:	4a5a      	ldr	r2, [pc, #360]	; (8006dd8 <__ieee754_powf+0x3d8>)
 8006c6e:	ee37 6a27 	vadd.f32	s12, s14, s15
 8006c72:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8006c76:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8006c7a:	1049      	asrs	r1, r1, #1
 8006c7c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8006c80:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8006c84:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8006c88:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8006c8c:	ee06 1a10 	vmov	s12, r1
 8006c90:	ee65 4aa6 	vmul.f32	s9, s11, s13
 8006c94:	ee14 ca90 	vmov	ip, s9
 8006c98:	ea02 0c0c 	and.w	ip, r2, ip
 8006c9c:	ee05 ca10 	vmov	s10, ip
 8006ca0:	eeb1 4a45 	vneg.f32	s8, s10
 8006ca4:	eee4 5a06 	vfma.f32	s11, s8, s12
 8006ca8:	ee36 6a47 	vsub.f32	s12, s12, s14
 8006cac:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006ddc <__ieee754_powf+0x3dc>
 8006cb0:	ee37 6ac6 	vsub.f32	s12, s15, s12
 8006cb4:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8006cb8:	eee4 5a06 	vfma.f32	s11, s8, s12
 8006cbc:	ee67 3aa7 	vmul.f32	s7, s15, s15
 8006cc0:	ee25 6aa6 	vmul.f32	s12, s11, s13
 8006cc4:	eddf 5a46 	vldr	s11, [pc, #280]	; 8006de0 <__ieee754_powf+0x3e0>
 8006cc8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8006ccc:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006de4 <__ieee754_powf+0x3e4>
 8006cd0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006cd4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8006db8 <__ieee754_powf+0x3b8>
 8006cd8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006cdc:	eddf 5a42 	vldr	s11, [pc, #264]	; 8006de8 <__ieee754_powf+0x3e8>
 8006ce0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8006ce4:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006dec <__ieee754_powf+0x3ec>
 8006ce8:	ee75 6a24 	vadd.f32	s13, s10, s9
 8006cec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8006cf0:	ee66 6a86 	vmul.f32	s13, s13, s12
 8006cf4:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8006cf8:	eef0 7a65 	vmov.f32	s15, s11
 8006cfc:	eee3 6a87 	vfma.f32	s13, s7, s14
 8006d00:	eee5 7a05 	vfma.f32	s15, s10, s10
 8006d04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d08:	ee17 1a90 	vmov	r1, s15
 8006d0c:	4011      	ands	r1, r2
 8006d0e:	ee07 1a90 	vmov	s15, r1
 8006d12:	ee37 7ae5 	vsub.f32	s14, s15, s11
 8006d16:	eddf 5a36 	vldr	s11, [pc, #216]	; 8006df0 <__ieee754_powf+0x3f0>
 8006d1a:	eea4 7a05 	vfma.f32	s14, s8, s10
 8006d1e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006d22:	ee27 7a24 	vmul.f32	s14, s14, s9
 8006d26:	eea7 7a86 	vfma.f32	s14, s15, s12
 8006d2a:	eeb0 6a47 	vmov.f32	s12, s14
 8006d2e:	eea5 6a27 	vfma.f32	s12, s10, s15
 8006d32:	ee16 1a10 	vmov	r1, s12
 8006d36:	4011      	ands	r1, r2
 8006d38:	ee06 1a90 	vmov	s13, r1
 8006d3c:	eee4 6a27 	vfma.f32	s13, s8, s15
 8006d40:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8006df4 <__ieee754_powf+0x3f4>
 8006d44:	ee37 7a66 	vsub.f32	s14, s14, s13
 8006d48:	ee06 1a10 	vmov	s12, r1
 8006d4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006d50:	eddf 7a29 	vldr	s15, [pc, #164]	; 8006df8 <__ieee754_powf+0x3f8>
 8006d54:	4929      	ldr	r1, [pc, #164]	; (8006dfc <__ieee754_powf+0x3fc>)
 8006d56:	eea6 7a27 	vfma.f32	s14, s12, s15
 8006d5a:	4439      	add	r1, r7
 8006d5c:	edd1 7a00 	vldr	s15, [r1]
 8006d60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006d64:	ee07 3a90 	vmov	s15, r3
 8006d68:	eef0 0a47 	vmov.f32	s1, s14
 8006d6c:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <__ieee754_powf+0x400>)
 8006d6e:	eee6 0a25 	vfma.f32	s1, s12, s11
 8006d72:	443b      	add	r3, r7
 8006d74:	ed93 5a00 	vldr	s10, [r3]
 8006d78:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d7c:	ee70 0a85 	vadd.f32	s1, s1, s10
 8006d80:	ee70 7aa6 	vadd.f32	s15, s1, s13
 8006d84:	ee17 3a90 	vmov	r3, s15
 8006d88:	4013      	ands	r3, r2
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006d92:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006d96:	eee6 7a65 	vfms.f32	s15, s12, s11
 8006d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d9e:	e70e      	b.n	8006bbe <__ieee754_powf+0x1be>
 8006da0:	2401      	movs	r4, #1
 8006da2:	e75c      	b.n	8006c5e <__ieee754_powf+0x25e>
 8006da4:	08007439 	.word	0x08007439
 8006da8:	00000000 	.word	0x00000000
 8006dac:	3f7ffff7 	.word	0x3f7ffff7
 8006db0:	7149f2ca 	.word	0x7149f2ca
 8006db4:	3f800007 	.word	0x3f800007
 8006db8:	3eaaaaab 	.word	0x3eaaaaab
 8006dbc:	36eca570 	.word	0x36eca570
 8006dc0:	3fb8aa3b 	.word	0x3fb8aa3b
 8006dc4:	3fb8aa00 	.word	0x3fb8aa00
 8006dc8:	4b800000 	.word	0x4b800000
 8006dcc:	001cc471 	.word	0x001cc471
 8006dd0:	005db3d6 	.word	0x005db3d6
 8006dd4:	0800754c 	.word	0x0800754c
 8006dd8:	fffff000 	.word	0xfffff000
 8006ddc:	3e6c3255 	.word	0x3e6c3255
 8006de0:	3e53f142 	.word	0x3e53f142
 8006de4:	3e8ba305 	.word	0x3e8ba305
 8006de8:	3edb6db7 	.word	0x3edb6db7
 8006dec:	3f19999a 	.word	0x3f19999a
 8006df0:	3f763800 	.word	0x3f763800
 8006df4:	3f76384f 	.word	0x3f76384f
 8006df8:	369dc3a0 	.word	0x369dc3a0
 8006dfc:	0800755c 	.word	0x0800755c
 8006e00:	08007554 	.word	0x08007554
 8006e04:	3338aa3c 	.word	0x3338aa3c
 8006e08:	f040 8092 	bne.w	8006f30 <__ieee754_powf+0x530>
 8006e0c:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006e04 <__ieee754_powf+0x404>
 8006e10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006e14:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8006e18:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e20:	f73f aef6 	bgt.w	8006c10 <__ieee754_powf+0x210>
 8006e24:	15db      	asrs	r3, r3, #23
 8006e26:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8006e2a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006e2e:	4103      	asrs	r3, r0
 8006e30:	4423      	add	r3, r4
 8006e32:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006e36:	4947      	ldr	r1, [pc, #284]	; (8006f54 <__ieee754_powf+0x554>)
 8006e38:	3a7f      	subs	r2, #127	; 0x7f
 8006e3a:	4111      	asrs	r1, r2
 8006e3c:	ea23 0101 	bic.w	r1, r3, r1
 8006e40:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8006e44:	ee07 1a10 	vmov	s14, r1
 8006e48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8006e4c:	f1c2 0217 	rsb	r2, r2, #23
 8006e50:	4110      	asrs	r0, r2
 8006e52:	2c00      	cmp	r4, #0
 8006e54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e58:	bfb8      	it	lt
 8006e5a:	4240      	neglt	r0, r0
 8006e5c:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8006e60:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006f58 <__ieee754_powf+0x558>
 8006e64:	ee17 3a10 	vmov	r3, s14
 8006e68:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006e6c:	f023 030f 	bic.w	r3, r3, #15
 8006e70:	ee07 3a10 	vmov	s14, r3
 8006e74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006e78:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006e7c:	eddf 7a37 	vldr	s15, [pc, #220]	; 8006f5c <__ieee754_powf+0x55c>
 8006e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e84:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8006e88:	eddf 6a35 	vldr	s13, [pc, #212]	; 8006f60 <__ieee754_powf+0x560>
 8006e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8006e90:	eea7 0a26 	vfma.f32	s0, s14, s13
 8006e94:	eeb0 6a40 	vmov.f32	s12, s0
 8006e98:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006e9c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006ea0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006ea4:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8006f64 <__ieee754_powf+0x564>
 8006ea8:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8006f68 <__ieee754_powf+0x568>
 8006eac:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006eb0:	eddf 6a2e 	vldr	s13, [pc, #184]	; 8006f6c <__ieee754_powf+0x56c>
 8006eb4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006eb8:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8006f70 <__ieee754_powf+0x570>
 8006ebc:	eea6 6a87 	vfma.f32	s12, s13, s14
 8006ec0:	eddf 6a2c 	vldr	s13, [pc, #176]	; 8006f74 <__ieee754_powf+0x574>
 8006ec4:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006ec8:	eeb0 6a40 	vmov.f32	s12, s0
 8006ecc:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006ed0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8006ed4:	eeb0 7a46 	vmov.f32	s14, s12
 8006ed8:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006edc:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006ee0:	eee0 7a27 	vfma.f32	s15, s0, s15
 8006ee4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006ee8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006eec:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006ef0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8006ef4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006ef8:	ee10 3a10 	vmov	r3, s0
 8006efc:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006f00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f04:	da1a      	bge.n	8006f3c <__ieee754_powf+0x53c>
 8006f06:	f000 f8ab 	bl	8007060 <scalbnf>
 8006f0a:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006f0e:	e5c9      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006f10:	4a19      	ldr	r2, [pc, #100]	; (8006f78 <__ieee754_powf+0x578>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	dd02      	ble.n	8006f1c <__ieee754_powf+0x51c>
 8006f16:	eddf 7a19 	vldr	s15, [pc, #100]	; 8006f7c <__ieee754_powf+0x57c>
 8006f1a:	e67b      	b.n	8006c14 <__ieee754_powf+0x214>
 8006f1c:	d108      	bne.n	8006f30 <__ieee754_powf+0x530>
 8006f1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006f22:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2a:	f6ff af7b 	blt.w	8006e24 <__ieee754_powf+0x424>
 8006f2e:	e7f2      	b.n	8006f16 <__ieee754_powf+0x516>
 8006f30:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8006f34:	f73f af76 	bgt.w	8006e24 <__ieee754_powf+0x424>
 8006f38:	2000      	movs	r0, #0
 8006f3a:	e78f      	b.n	8006e5c <__ieee754_powf+0x45c>
 8006f3c:	ee00 3a10 	vmov	s0, r3
 8006f40:	e7e3      	b.n	8006f0a <__ieee754_powf+0x50a>
 8006f42:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006f46:	e5ad      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006f48:	eeb0 0a68 	vmov.f32	s0, s17
 8006f4c:	e5aa      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006f4e:	eeb0 0a48 	vmov.f32	s0, s16
 8006f52:	e5a7      	b.n	8006aa4 <__ieee754_powf+0xa4>
 8006f54:	007fffff 	.word	0x007fffff
 8006f58:	3f317218 	.word	0x3f317218
 8006f5c:	35bfbe8c 	.word	0x35bfbe8c
 8006f60:	3f317200 	.word	0x3f317200
 8006f64:	3331bb4c 	.word	0x3331bb4c
 8006f68:	b5ddea0e 	.word	0xb5ddea0e
 8006f6c:	388ab355 	.word	0x388ab355
 8006f70:	bb360b61 	.word	0xbb360b61
 8006f74:	3e2aaaab 	.word	0x3e2aaaab
 8006f78:	43160000 	.word	0x43160000
 8006f7c:	0da24260 	.word	0x0da24260

08006f80 <__ieee754_sqrtf>:
 8006f80:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006f84:	4770      	bx	lr

08006f86 <matherr>:
 8006f86:	2000      	movs	r0, #0
 8006f88:	4770      	bx	lr

08006f8a <fabsf>:
 8006f8a:	ee10 3a10 	vmov	r3, s0
 8006f8e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f92:	ee00 3a10 	vmov	s0, r3
 8006f96:	4770      	bx	lr

08006f98 <finitef>:
 8006f98:	ee10 3a10 	vmov	r3, s0
 8006f9c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8006fa0:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8006fa4:	bfac      	ite	ge
 8006fa6:	2000      	movge	r0, #0
 8006fa8:	2001      	movlt	r0, #1
 8006faa:	4770      	bx	lr

08006fac <rintf>:
 8006fac:	b513      	push	{r0, r1, r4, lr}
 8006fae:	ee10 1a10 	vmov	r1, s0
 8006fb2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006fb6:	0ddc      	lsrs	r4, r3, #23
 8006fb8:	3c7f      	subs	r4, #127	; 0x7f
 8006fba:	2c16      	cmp	r4, #22
 8006fbc:	dc46      	bgt.n	800704c <rintf+0xa0>
 8006fbe:	b32b      	cbz	r3, 800700c <rintf+0x60>
 8006fc0:	2c00      	cmp	r4, #0
 8006fc2:	ee10 2a10 	vmov	r2, s0
 8006fc6:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8006fca:	da21      	bge.n	8007010 <rintf+0x64>
 8006fcc:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8006fd0:	425b      	negs	r3, r3
 8006fd2:	4a21      	ldr	r2, [pc, #132]	; (8007058 <rintf+0xac>)
 8006fd4:	0a5b      	lsrs	r3, r3, #9
 8006fd6:	0d09      	lsrs	r1, r1, #20
 8006fd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fdc:	0509      	lsls	r1, r1, #20
 8006fde:	430b      	orrs	r3, r1
 8006fe0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8006fe4:	ee07 3a90 	vmov	s15, r3
 8006fe8:	edd2 6a00 	vldr	s13, [r2]
 8006fec:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8006ff0:	ed8d 7a01 	vstr	s14, [sp, #4]
 8006ff4:	eddd 7a01 	vldr	s15, [sp, #4]
 8006ff8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006ffc:	ee17 3a90 	vmov	r3, s15
 8007000:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007004:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8007008:	ee00 3a10 	vmov	s0, r3
 800700c:	b002      	add	sp, #8
 800700e:	bd10      	pop	{r4, pc}
 8007010:	4b12      	ldr	r3, [pc, #72]	; (800705c <rintf+0xb0>)
 8007012:	4123      	asrs	r3, r4
 8007014:	4219      	tst	r1, r3
 8007016:	d0f9      	beq.n	800700c <rintf+0x60>
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	4219      	tst	r1, r3
 800701c:	d006      	beq.n	800702c <rintf+0x80>
 800701e:	ea21 0203 	bic.w	r2, r1, r3
 8007022:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007026:	fa43 f404 	asr.w	r4, r3, r4
 800702a:	4322      	orrs	r2, r4
 800702c:	4b0a      	ldr	r3, [pc, #40]	; (8007058 <rintf+0xac>)
 800702e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007032:	ed90 7a00 	vldr	s14, [r0]
 8007036:	ee07 2a90 	vmov	s15, r2
 800703a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800703e:	edcd 7a01 	vstr	s15, [sp, #4]
 8007042:	ed9d 0a01 	vldr	s0, [sp, #4]
 8007046:	ee30 0a47 	vsub.f32	s0, s0, s14
 800704a:	e7df      	b.n	800700c <rintf+0x60>
 800704c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007050:	d3dc      	bcc.n	800700c <rintf+0x60>
 8007052:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007056:	e7d9      	b.n	800700c <rintf+0x60>
 8007058:	08007564 	.word	0x08007564
 800705c:	007fffff 	.word	0x007fffff

08007060 <scalbnf>:
 8007060:	b508      	push	{r3, lr}
 8007062:	ee10 2a10 	vmov	r2, s0
 8007066:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800706a:	ed2d 8b02 	vpush	{d8}
 800706e:	eef0 0a40 	vmov.f32	s1, s0
 8007072:	d004      	beq.n	800707e <scalbnf+0x1e>
 8007074:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8007078:	d306      	bcc.n	8007088 <scalbnf+0x28>
 800707a:	ee70 0a00 	vadd.f32	s1, s0, s0
 800707e:	ecbd 8b02 	vpop	{d8}
 8007082:	eeb0 0a60 	vmov.f32	s0, s1
 8007086:	bd08      	pop	{r3, pc}
 8007088:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800708c:	d21c      	bcs.n	80070c8 <scalbnf+0x68>
 800708e:	4b1f      	ldr	r3, [pc, #124]	; (800710c <scalbnf+0xac>)
 8007090:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007110 <scalbnf+0xb0>
 8007094:	4298      	cmp	r0, r3
 8007096:	ee60 0a27 	vmul.f32	s1, s0, s15
 800709a:	db10      	blt.n	80070be <scalbnf+0x5e>
 800709c:	ee10 2a90 	vmov	r2, s1
 80070a0:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80070a4:	3b19      	subs	r3, #25
 80070a6:	4403      	add	r3, r0
 80070a8:	2bfe      	cmp	r3, #254	; 0xfe
 80070aa:	dd0f      	ble.n	80070cc <scalbnf+0x6c>
 80070ac:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007114 <scalbnf+0xb4>
 80070b0:	eeb0 0a48 	vmov.f32	s0, s16
 80070b4:	f000 f834 	bl	8007120 <copysignf>
 80070b8:	ee60 0a08 	vmul.f32	s1, s0, s16
 80070bc:	e7df      	b.n	800707e <scalbnf+0x1e>
 80070be:	eddf 7a16 	vldr	s15, [pc, #88]	; 8007118 <scalbnf+0xb8>
 80070c2:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80070c6:	e7da      	b.n	800707e <scalbnf+0x1e>
 80070c8:	0ddb      	lsrs	r3, r3, #23
 80070ca:	e7ec      	b.n	80070a6 <scalbnf+0x46>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	dd06      	ble.n	80070de <scalbnf+0x7e>
 80070d0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80070d4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80070d8:	ee00 3a90 	vmov	s1, r3
 80070dc:	e7cf      	b.n	800707e <scalbnf+0x1e>
 80070de:	f113 0f16 	cmn.w	r3, #22
 80070e2:	da06      	bge.n	80070f2 <scalbnf+0x92>
 80070e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 80070e8:	4298      	cmp	r0, r3
 80070ea:	dcdf      	bgt.n	80070ac <scalbnf+0x4c>
 80070ec:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8007118 <scalbnf+0xb8>
 80070f0:	e7de      	b.n	80070b0 <scalbnf+0x50>
 80070f2:	3319      	adds	r3, #25
 80070f4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 80070f8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80070fc:	eddf 7a07 	vldr	s15, [pc, #28]	; 800711c <scalbnf+0xbc>
 8007100:	ee07 3a10 	vmov	s14, r3
 8007104:	ee67 0a27 	vmul.f32	s1, s14, s15
 8007108:	e7b9      	b.n	800707e <scalbnf+0x1e>
 800710a:	bf00      	nop
 800710c:	ffff3cb0 	.word	0xffff3cb0
 8007110:	4c000000 	.word	0x4c000000
 8007114:	7149f2ca 	.word	0x7149f2ca
 8007118:	0da24260 	.word	0x0da24260
 800711c:	33000000 	.word	0x33000000

08007120 <copysignf>:
 8007120:	ee10 3a10 	vmov	r3, s0
 8007124:	ee10 2a90 	vmov	r2, s1
 8007128:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800712c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8007130:	4313      	orrs	r3, r2
 8007132:	ee00 3a10 	vmov	s0, r3
 8007136:	4770      	bx	lr

08007138 <_init>:
 8007138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713a:	bf00      	nop
 800713c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713e:	bc08      	pop	{r3}
 8007140:	469e      	mov	lr, r3
 8007142:	4770      	bx	lr

08007144 <_fini>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	bf00      	nop
 8007148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800714a:	bc08      	pop	{r3}
 800714c:	469e      	mov	lr, r3
 800714e:	4770      	bx	lr
